(()=>{"use strict";var t={5150:(t,e,i)=>{i.d(e,{Z:()=>v});var n=i(1684),o=i.n(n),s=i(5524),a=i.n(s),r=i(1667),l=i.n(r),c=new URL(i(9097),i.b),d=new URL(i(1634),i.b),h=a()(o());h.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;700&display=swap);"]),h.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=M+PLUS+2:wght@500;700&display=swap);"]);var u=l()(c),p=l()(d);h.push([t.id,'/* RESET CSS  */\n\n* {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n\n/* HTML5 display-role reset for older browsers */\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n  display: block;\n}\nbody {\n  line-height: 1;\n}\nol,\nul {\n  list-style: none;\n}\nblockquote,\nq {\n  quotes: none;\n}\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n  content: "";\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\n/* LOADER  */\n.loader {\n  width: 60px;\n  height: 60px;\n  background-color: white;\n  animation: spin 0.8s ease-in-out infinite;\n}\n\n@keyframes spin {\n  0% {\n    transform: rotate(-180deg);\n  }\n  50% {\n    transform: translateY(-30px);\n  }\n  70% {\n    transform: translateY(0);\n  }\n  75% {\n    transform: translateY(-10px);\n  }\n  100% {\n    transform: translateY(0);\n  }\n}\n/* PARTICLES */\n#tsparticles {\n  position: fixed;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  padding: 0;\n  margin: 0;\n  z-index: -1;\n}\n\ncanvas {\n  height: 800px !important;\n  width: 100% !important;\n}\n\n/* ERROR  */\n.display-error {\n  position: absolute;\n  transform: translateY(-100%);\n  animation: error-pop-in 3s ease-in-out forwards;\n\n  color: white;\n  font-weight: 500;\n  font-size: 20px;\n\n  background-color: rgb(255, 30, 30);\n  padding: 10px 20px;\n  border-radius: 0 0 10px 10px;\n}\n\n@keyframes error-pop-in {\n  0% {\n    transform: translateY(-100%);\n  }\n  25% {\n    transform: translateY(0);\n  }\n  50% {\n    transform: translateY(0);\n  }\n  75% {\n    transform: translateY(0);\n  }\n  100% {\n    transform: translateY(-100%);\n  }\n}\n\n/* HEADER */\nheader {\n  display: flex;\n  justify-content: center;\n  width: min(1000px, 80%);\n  margin-top: 70px;\n}\n\nheader > h1 {\n  margin: 0;\n  color: white;\n  font-weight: 700;\n  font-size: 52px;\n  padding: 36px 0;\n}\n\n.user-input {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 80%;\n}\n\n.city-name {\n  background: #fff;\n  border-radius: 50px;\n  border-bottom-right-radius: 0;\n  border-top-right-radius: 0;\n  padding: 5px;\n  text-align: center;\n  font-size: 35px;\n  font-weight: 700;\n  color: #4d4b4b;\n  font-family: "Poppins", Verdana, Geneva, Tahoma, sans-serif;\n\n  border: none;\n  width: 90%;\n}\n\n.city-name:focus {\n  outline: none;\n}\n\n::placeholder {\n  font-weight: 700;\n  color: #4d4b4b;\n  opacity: 1;\n  font-size: 35px;\n\n  text-align: center;\n  font-family: "Poppins", Verdana, Geneva, Tahoma, sans-serif;\n}\n\n.city-name:focus::placeholder {\n  color: transparent;\n}\n\n.user-input > button {\n  cursor: pointer;\n  background-color: white;\n  font-family: "Poppins";\n  font-size: 35px;\n\n  padding: 3px 10px;\n  font-weight: 700;\n  border: none;\n  border-top-right-radius: 35px;\n  border: solid 2px white;\n  border-bottom-right-radius: 35px;\n  border-left-width: 0;\n\n  width: 10%;\n  height: 100%;\n  min-width: 70px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.user-input img {\n  vertical-align: middle;\n  height: 30px;\n  width: auto;\n  position: relative;\n  bottom: 2px;\n}\n\n/* WEATHER DISPLAY */\n.weather-display {\n  display: flex;\n  width: 70%;\n  opacity: 1;\n  justify-content: center;\n  color: #fff;\n\n  font-size: 50px;\n  padding: 80px 20px;\n  gap: 50px;\n}\n\n.temp-info {\n  display: flex;\n  flex-direction: column;\n  font-size: 50px;\n  gap: 10px;\n  justify-content: center;\n}\n\n.temp-data {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 15px;\n}\n\n.display-city-name {\n  font-size: 45px;\n  font-weight: 500;\n}\n\n.display-condition {\n  font-size: 40px;\n  font-weight: 500;\n  letter-spacing: 0.1em;\n}\n\n.display-current-temp {\n  padding-right: 10px;\n  font-weight: 700;\n  line-height: 40px;\n  border-right: 5px solid #fff;\n}\n\n@keyframes slide-in {\n  from {\n    opacity: 0;\n    transform: translateY(-100px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.info-display {\n  font-size: 30px;\n  font-weight: 500;\n  font-family: "M PLUS 2", Verdana, Geneva, Tahoma, sans-serif;\n  color: white;\n  text-align: center;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  gap: 20px;\n  transition: all 0.7s ease-in-out;\n}\n\n.white-block {\n  height: 70px;\n  width: 7px;\n  background-color: #fff;\n}\n\n.info {\n  display: flex;\n  justify-content: center;\n  gap: 100px;\n}\n\n.info-holder {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 450px;\n}\n\n.max-temp,\n.min-temp {\n  font-size: 25px;\n  font-weight: 500;\n}\n\n.max-temp-logo,\n.min-temp-logo {\n  height: 20px;\n  margin-left: 7px;\n  display: inline-block;\n}\n\n.cast-temp {\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n  gap: 2px;\n}\n\n.humidity {\n  display: flex;\n  gap: 5px;\n}\n\n.humidity > img {\n  display: inline-block;\n}\n\n.cast {\n  text-align: center;\n  font-weight: 700;\n  letter-spacing: 2px;\n}\n\n.misc {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 5px;\n}\n\n.wind {\n  display: flex;\n  align-items: center;\n  gap: 2px;\n}\n\n.wind > img {\n  display: inline-block;\n}\n\n/* LOADING */\n.loading-begin {\n  color: white;\n  font-family: "Poppins", Verdana, Geneva, Tahoma, sans-serif;\n  font-size: 60px;\n  font-weight: 500;\n  width: 100%;\n  text-align: center;\n\n  position: fixed;\n  min-height: 100vh;\n  height: 100vh;\n  width: 100%;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #01223aef;\n  z-index: 10;\n}\n\n/* WEATHER EFFECTs */\n.sun {\n  background-color: #ffff00;\n  background-size: cover;\n  height: 150px;\n  width: 150px;\n  z-index: -2;\n\n  border: none;\n  border-radius: 50%;\n  box-shadow: 0 0 60px 10px rgb(255 255 0);\n  display: block;\n  transform: scale(0);\n  animation: show-in 0.4s ease-in-out forwards;\n\n  backface-visibility: hidden;\n}\n\n@keyframes show-in {\n  0% {\n    transform: scale(0);\n  }\n  50% {\n    transform: scale(1.2);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n\n.hills-container {\n  min-height: 400px;\n  height: 45vh;\n  width: 100%;\n\n  position: relative;\n  overflow: clip;\n}\n\n.hills1,\n.hills2 {\n  background-size: cover;\n  background-repeat: no-repeat;\n  position: absolute;\n  bottom: -1px;\n\n  width: 100%;\n  height: 100%;\n}\n.hills1 {\n  background-image: url('+u+");\n  height: 70%;\n  z-index: 9;\n}\n\n.hills2 {\n  background-image: url("+p+');\n  z-index: 8;\n}\n\n/* BODY */\nbody,\nhtml {\n  font-family: "Poppins", sans-serif, Verdana, Geneva, Tahoma;\n  margin: 0;\n  padding: 0;\n  width: 100%;\n  min-height: 100vh;\n  height: 100%;\n}\n\nbody::-webkit-scrollbar {\n  display: none;\n}\nbody {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  box-sizing: border-box;\n  background: #0095ff;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n\n  -ms-overflow-style: none;\n  scrollbar-width: 20px;\n}\n\n* {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n\nfooter {\n  background-color: #003000;\n  width: 100%;\n  height: 100%;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  color: white;\n  font-size: 30px;\n}\n\n.credits {\n  padding: 30px;\n  line-height: 30px;\n}\n\n/* MEDIA QUERIES */\n@media screen and (max-width: 768px) {\n  /* HEADER  */\n  header {\n    width: 85%;\n  }\n\n  .city-name,\n  *::placeholder,\n  .user-input > button {\n    font-size: 30px;\n  }\n\n  .city-name {\n    width: 85%;\n  }\n  .user-input > button {\n    width: 15%;\n    min-width: 50px;\n  }\n  /* WEATHER DISPLAY  */\n  .weather-display {\n    flex-direction: column;\n    align-items: center;\n  }\n\n  .display-current-temp,\n  .display-condition,\n  .display-city-name {\n    text-align: center;\n    font-size: 36px;\n  }\n\n  /* CREDITS  */\n  .credits {\n    text-align: center;\n    font-size: 25px;\n  }\n\n  /* LOADING  */\n  .loading-begin {\n    font-size: 50px;\n  }\n}\n\n@media screen and (max-width: 440px) {\n  /* ERROR  */\n  .display-error {\n    width: 75%;\n  }\n\n  /* HEADER  */\n  header {\n    width: 95%;\n  }\n\n  /* WEATHER DISPLAY */\n  .display-current-temp {\n    font-size: 45px;\n    border-right: none;\n    padding: 0;\n  }\n\n  .temp-data {\n    flex-direction: column;\n    gap: 10px;\n  }\n\n  .city-name,\n  *::placeholder,\n  .user-input > button {\n    font-size: 23px;\n  }\n\n  .user-input > button {\n    width: 10%;\n    min-width: 40px;\n  }\n  .city-name {\n    width: 90%;\n  }\n  .user-input img {\n    height: 22px;\n  }\n  /* LOADING  */\n  .loading-begin {\n    font-size: 45px;\n  }\n}\n',"",{version:3,sources:["webpack://./src/main.css"],names:[],mappings:"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",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;700&display=swap");\n@import url("https://fonts.googleapis.com/css2?family=M+PLUS+2:wght@500;700&display=swap");\n\n/* RESET CSS  */\n\n* {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n\n/* HTML5 display-role reset for older browsers */\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n  display: block;\n}\nbody {\n  line-height: 1;\n}\nol,\nul {\n  list-style: none;\n}\nblockquote,\nq {\n  quotes: none;\n}\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n  content: "";\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\n/* LOADER  */\n.loader {\n  width: 60px;\n  height: 60px;\n  background-color: white;\n  animation: spin 0.8s ease-in-out infinite;\n}\n\n@keyframes spin {\n  0% {\n    transform: rotate(-180deg);\n  }\n  50% {\n    transform: translateY(-30px);\n  }\n  70% {\n    transform: translateY(0);\n  }\n  75% {\n    transform: translateY(-10px);\n  }\n  100% {\n    transform: translateY(0);\n  }\n}\n/* PARTICLES */\n#tsparticles {\n  position: fixed;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  padding: 0;\n  margin: 0;\n  z-index: -1;\n}\n\ncanvas {\n  height: 800px !important;\n  width: 100% !important;\n}\n\n/* ERROR  */\n.display-error {\n  position: absolute;\n  transform: translateY(-100%);\n  animation: error-pop-in 3s ease-in-out forwards;\n\n  color: white;\n  font-weight: 500;\n  font-size: 20px;\n\n  background-color: rgb(255, 30, 30);\n  padding: 10px 20px;\n  border-radius: 0 0 10px 10px;\n}\n\n@keyframes error-pop-in {\n  0% {\n    transform: translateY(-100%);\n  }\n  25% {\n    transform: translateY(0);\n  }\n  50% {\n    transform: translateY(0);\n  }\n  75% {\n    transform: translateY(0);\n  }\n  100% {\n    transform: translateY(-100%);\n  }\n}\n\n/* HEADER */\nheader {\n  display: flex;\n  justify-content: center;\n  width: min(1000px, 80%);\n  margin-top: 70px;\n}\n\nheader > h1 {\n  margin: 0;\n  color: white;\n  font-weight: 700;\n  font-size: 52px;\n  padding: 36px 0;\n}\n\n.user-input {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 80%;\n}\n\n.city-name {\n  background: #fff;\n  border-radius: 50px;\n  border-bottom-right-radius: 0;\n  border-top-right-radius: 0;\n  padding: 5px;\n  text-align: center;\n  font-size: 35px;\n  font-weight: 700;\n  color: #4d4b4b;\n  font-family: "Poppins", Verdana, Geneva, Tahoma, sans-serif;\n\n  border: none;\n  width: 90%;\n}\n\n.city-name:focus {\n  outline: none;\n}\n\n::placeholder {\n  font-weight: 700;\n  color: #4d4b4b;\n  opacity: 1;\n  font-size: 35px;\n\n  text-align: center;\n  font-family: "Poppins", Verdana, Geneva, Tahoma, sans-serif;\n}\n\n.city-name:focus::placeholder {\n  color: transparent;\n}\n\n.user-input > button {\n  cursor: pointer;\n  background-color: white;\n  font-family: "Poppins";\n  font-size: 35px;\n\n  padding: 3px 10px;\n  font-weight: 700;\n  border: none;\n  border-top-right-radius: 35px;\n  border: solid 2px white;\n  border-bottom-right-radius: 35px;\n  border-left-width: 0;\n\n  width: 10%;\n  height: 100%;\n  min-width: 70px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.user-input img {\n  vertical-align: middle;\n  height: 30px;\n  width: auto;\n  position: relative;\n  bottom: 2px;\n}\n\n/* WEATHER DISPLAY */\n.weather-display {\n  display: flex;\n  width: 70%;\n  opacity: 1;\n  justify-content: center;\n  color: #fff;\n\n  font-size: 50px;\n  padding: 80px 20px;\n  gap: 50px;\n}\n\n.temp-info {\n  display: flex;\n  flex-direction: column;\n  font-size: 50px;\n  gap: 10px;\n  justify-content: center;\n}\n\n.temp-data {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 15px;\n}\n\n.display-city-name {\n  font-size: 45px;\n  font-weight: 500;\n}\n\n.display-condition {\n  font-size: 40px;\n  font-weight: 500;\n  letter-spacing: 0.1em;\n}\n\n.display-current-temp {\n  padding-right: 10px;\n  font-weight: 700;\n  line-height: 40px;\n  border-right: 5px solid #fff;\n}\n\n@keyframes slide-in {\n  from {\n    opacity: 0;\n    transform: translateY(-100px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.info-display {\n  font-size: 30px;\n  font-weight: 500;\n  font-family: "M PLUS 2", Verdana, Geneva, Tahoma, sans-serif;\n  color: white;\n  text-align: center;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  gap: 20px;\n  transition: all 0.7s ease-in-out;\n}\n\n.white-block {\n  height: 70px;\n  width: 7px;\n  background-color: #fff;\n}\n\n.info {\n  display: flex;\n  justify-content: center;\n  gap: 100px;\n}\n\n.info-holder {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 450px;\n}\n\n.max-temp,\n.min-temp {\n  font-size: 25px;\n  font-weight: 500;\n}\n\n.max-temp-logo,\n.min-temp-logo {\n  height: 20px;\n  margin-left: 7px;\n  display: inline-block;\n}\n\n.cast-temp {\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n  gap: 2px;\n}\n\n.humidity {\n  display: flex;\n  gap: 5px;\n}\n\n.humidity > img {\n  display: inline-block;\n}\n\n.cast {\n  text-align: center;\n  font-weight: 700;\n  letter-spacing: 2px;\n}\n\n.misc {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 5px;\n}\n\n.wind {\n  display: flex;\n  align-items: center;\n  gap: 2px;\n}\n\n.wind > img {\n  display: inline-block;\n}\n\n/* LOADING */\n.loading-begin {\n  color: white;\n  font-family: "Poppins", Verdana, Geneva, Tahoma, sans-serif;\n  font-size: 60px;\n  font-weight: 500;\n  width: 100%;\n  text-align: center;\n\n  position: fixed;\n  min-height: 100vh;\n  height: 100vh;\n  width: 100%;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #01223aef;\n  z-index: 10;\n}\n\n/* WEATHER EFFECTs */\n.sun {\n  background-color: #ffff00;\n  background-size: cover;\n  height: 150px;\n  width: 150px;\n  z-index: -2;\n\n  border: none;\n  border-radius: 50%;\n  box-shadow: 0 0 60px 10px rgb(255 255 0);\n  display: block;\n  transform: scale(0);\n  animation: show-in 0.4s ease-in-out forwards;\n\n  backface-visibility: hidden;\n}\n\n@keyframes show-in {\n  0% {\n    transform: scale(0);\n  }\n  50% {\n    transform: scale(1.2);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n\n.hills-container {\n  min-height: 400px;\n  height: 45vh;\n  width: 100%;\n\n  position: relative;\n  overflow: clip;\n}\n\n.hills1,\n.hills2 {\n  background-size: cover;\n  background-repeat: no-repeat;\n  position: absolute;\n  bottom: -1px;\n\n  width: 100%;\n  height: 100%;\n}\n.hills1 {\n  background-image: url("./assets/hills1.svg");\n  height: 70%;\n  z-index: 9;\n}\n\n.hills2 {\n  background-image: url("./assets/hills2.svg");\n  z-index: 8;\n}\n\n/* BODY */\nbody,\nhtml {\n  font-family: "Poppins", sans-serif, Verdana, Geneva, Tahoma;\n  margin: 0;\n  padding: 0;\n  width: 100%;\n  min-height: 100vh;\n  height: 100%;\n}\n\nbody::-webkit-scrollbar {\n  display: none;\n}\nbody {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  box-sizing: border-box;\n  background: #0095ff;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed !important;\n\n  -ms-overflow-style: none;\n  scrollbar-width: 20px;\n}\n\n* {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n\nfooter {\n  background-color: #003000;\n  width: 100%;\n  height: 100%;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  color: white;\n  font-size: 30px;\n}\n\n.credits {\n  padding: 30px;\n  line-height: 30px;\n}\n\n/* MEDIA QUERIES */\n@media screen and (max-width: 768px) {\n  /* HEADER  */\n  header {\n    width: 85%;\n  }\n\n  .city-name,\n  *::placeholder,\n  .user-input > button {\n    font-size: 30px;\n  }\n\n  .city-name {\n    width: 85%;\n  }\n  .user-input > button {\n    width: 15%;\n    min-width: 50px;\n  }\n  /* WEATHER DISPLAY  */\n  .weather-display {\n    flex-direction: column;\n    align-items: center;\n  }\n\n  .display-current-temp,\n  .display-condition,\n  .display-city-name {\n    text-align: center;\n    font-size: 36px;\n  }\n\n  /* CREDITS  */\n  .credits {\n    text-align: center;\n    font-size: 25px;\n  }\n\n  /* LOADING  */\n  .loading-begin {\n    font-size: 50px;\n  }\n}\n\n@media screen and (max-width: 440px) {\n  /* ERROR  */\n  .display-error {\n    width: 75%;\n  }\n\n  /* HEADER  */\n  header {\n    width: 95%;\n  }\n\n  /* WEATHER DISPLAY */\n  .display-current-temp {\n    font-size: 45px;\n    border-right: none;\n    padding: 0;\n  }\n\n  .temp-data {\n    flex-direction: column;\n    gap: 10px;\n  }\n\n  .city-name,\n  *::placeholder,\n  .user-input > button {\n    font-size: 23px;\n  }\n\n  .user-input > button {\n    width: 10%;\n    min-width: 40px;\n  }\n  .city-name {\n    width: 90%;\n  }\n  .user-input img {\n    height: 22px;\n  }\n  /* LOADING  */\n  .loading-begin {\n    font-size: 45px;\n  }\n}\n'],sourceRoot:""}]);const v=h},5524:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i="",n=void 0!==e[5];return e[4]&&(i+="@supports (".concat(e[4],") {")),e[2]&&(i+="@media ".concat(e[2]," {")),n&&(i+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),i+=t(e),n&&(i+="}"),e[2]&&(i+="}"),e[4]&&(i+="}"),i})).join("")},e.i=function(t,i,n,o,s){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(n)for(var r=0;r<this.length;r++){var l=this[r][0];null!=l&&(a[l]=!0)}for(var c=0;c<t.length;c++){var d=[].concat(t[c]);n&&a[d[0]]||(void 0!==s&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=s),i&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=i):d[2]=i),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},1667:t=>{t.exports=function(t,e){return e||(e={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]|(%20)/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},1684:t=>{t.exports=function(t){var e=t[1],i=t[3];if(!i)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),s="/*# ".concat(o," */"),a=i.sources.map((function(t){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(t," */")}));return[e].concat(a).concat([s]).join("\n")}return[e].join("\n")}},3379:t=>{var e=[];function i(t){for(var i=-1,n=0;n<e.length;n++)if(e[n].identifier===t){i=n;break}return i}function n(t,n){for(var s={},a=[],r=0;r<t.length;r++){var l=t[r],c=n.base?l[0]+n.base:l[0],d=s[c]||0,h="".concat(c," ").concat(d);s[c]=d+1;var u=i(h),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var v=o(p,n);n.byIndex=r,e.splice(r,0,{identifier:h,updater:v,references:1})}a.push(h)}return a}function o(t,e){var i=e.domAPI(e);return i.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;i.update(t=e)}else i.remove()}}t.exports=function(t,o){var s=n(t=t||[],o=o||{});return function(t){t=t||[];for(var a=0;a<s.length;a++){var r=i(s[a]);e[r].references--}for(var l=n(t,o),c=0;c<s.length;c++){var d=i(s[c]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}s=l}}},569:t=>{var e={};t.exports=function(t,i){var n=function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}e[t]=i}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(i)}},9216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},3565:(t,e,i)=>{t.exports=function(t){var e=i.nc;e&&t.setAttribute("nonce",e)}},7795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(i){!function(t,e,i){var n="";i.supports&&(n+="@supports (".concat(i.supports,") {")),i.media&&(n+="@media ".concat(i.media," {"));var o=void 0!==i.layer;o&&(n+="@layer".concat(i.layer.length>0?" ".concat(i.layer):""," {")),n+=i.css,o&&(n+="}"),i.media&&(n+="}"),i.supports&&(n+="}");var s=i.sourceMap;s&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,i)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},4589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},8922:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Canvas=void 0;const n=i(7373),o=i(7373);e.Canvas=class{constructor(t){this.container=t,this.size={height:0,width:0},this.context=null,this.generatedCanvas=!1}init(){this.resize(),this.initStyle(),this.initCover(),this.initTrail(),this.initBackground(),this.paint()}loadCanvas(t,e){var i;t.className||(t.className=n.Constants.canvasClass),this.generatedCanvas&&(null===(i=this.element)||void 0===i||i.remove()),this.generatedCanvas=null!=e?e:this.generatedCanvas,this.element=t,this.originalStyle=(0,n.deepExtend)({},this.element.style),this.size.height=t.offsetHeight,this.size.width=t.offsetWidth,this.context=this.element.getContext("2d"),this.container.retina.init(),this.initBackground()}destroy(){var t;this.generatedCanvas&&(null===(t=this.element)||void 0===t||t.remove()),this.draw((t=>{(0,o.clear)(t,this.size)}))}paint(){const t=this.container.actualOptions;this.draw((e=>{t.backgroundMask.enable&&t.backgroundMask.cover&&this.coverColor?((0,o.clear)(e,this.size),this.paintBase((0,n.getStyleFromRgb)(this.coverColor,this.coverColor.a))):this.paintBase()}))}clear(){const t=this.container.actualOptions,e=t.particles.move.trail;t.backgroundMask.enable?this.paint():e.enable&&e.length>0&&this.trailFillColor?this.paintBase((0,n.getStyleFromRgb)(this.trailFillColor,1/e.length)):this.draw((t=>{(0,o.clear)(t,this.size)}))}windowResize(){if(!this.element)return;const t=this.container;this.resize();const e=t.updateActualOptions();t.particles.setDensity();for(const[,e]of t.plugins)void 0!==e.resize&&e.resize();e&&t.refresh()}resize(){if(!this.element)return;const t=this.container,e=t.retina.pixelRatio,i=t.canvas.size,n=i.width,o=i.height;i.width=this.element.offsetWidth*e,i.height=this.element.offsetHeight*e,this.element.width=i.width,this.element.height=i.height,this.container.started&&(this.resizeFactor={width:i.width/n,height:i.height/o})}drawConnectLine(t,e){this.draw((i=>{var o;const s=this.lineStyle(t,e);if(!s)return;const a=t.getPosition(),r=e.getPosition();(0,n.drawConnectLine)(i,null!==(o=t.retina.linksWidth)&&void 0!==o?o:this.container.retina.linksWidth,s,a,r)}))}drawGrabLine(t,e,i,o){const s=this.container;this.draw((a=>{var r;const l=t.getPosition();(0,n.drawGrabLine)(a,null!==(r=t.retina.linksWidth)&&void 0!==r?r:s.retina.linksWidth,l,o,e,i)}))}drawParticle(t,e){var i,o,s,a,r,l;if(t.spawning||t.destroyed)return;const c=t.getFillColor(),d=null!==(i=t.getStrokeColor())&&void 0!==i?i:c;if(!c&&!d)return;let[h,u]=this.getPluginParticleColors(t);const p=t.options.twinkle.particles,v=p.enable&&Math.random()<p.frequency;if(!h||!u){const t=(0,n.colorToHsl)(p.color);h||(h=v&&void 0!==t?t:c||void 0),u||(u=v&&void 0!==t?t:d||void 0)}const y=this.container.actualOptions,g=t.options.zIndex,f=(1-t.zIndexFactor)**g.opacityRate,m=t.getRadius(),b=v?p.opacity:null!==(a=null!==(o=t.bubble.opacity)&&void 0!==o?o:null===(s=t.opacity)||void 0===s?void 0:s.value)&&void 0!==a?a:1,w=null!==(l=null===(r=t.stroke)||void 0===r?void 0:r.opacity)&&void 0!==l?l:b,A=b*f,S=h?(0,n.getStyleFromHsl)(h,A):void 0;(S||u)&&this.draw((i=>{const o=(1-t.zIndexFactor)**g.sizeRate,s=w*f,a=u?(0,n.getStyleFromHsl)(u,s):S;if(m<=0)return;const r=this.container;for(const e of r.particles.updaters)e.beforeDraw&&e.beforeDraw(t);(0,n.drawParticle)(this.container,i,t,e,S,a,y.backgroundMask.enable,y.backgroundMask.composite,m*o,A,t.options.shadow,t.gradient);for(const e of r.particles.updaters)e.afterDraw&&e.afterDraw(t)}))}drawPlugin(t,e){this.draw((i=>{(0,n.drawPlugin)(i,t,e)}))}drawParticlePlugin(t,e,i){this.draw((o=>{(0,n.drawParticlePlugin)(o,t,e,i)}))}initBackground(){const t=this.container.actualOptions.background,e=this.element,i=null==e?void 0:e.style;if(i){if(t.color){const e=(0,n.colorToRgb)(t.color);i.backgroundColor=e?(0,n.getStyleFromRgb)(e,t.opacity):""}else i.backgroundColor="";i.backgroundImage=t.image||"",i.backgroundPosition=t.position||"",i.backgroundRepeat=t.repeat||"",i.backgroundSize=t.size||""}}draw(t){if(this.context)return t(this.context)}initCover(){const t=this.container.actualOptions.backgroundMask.cover,e=t.color,i=(0,n.colorToRgb)(e);i&&(this.coverColor={r:i.r,g:i.g,b:i.b,a:t.opacity})}initTrail(){const t=this.container.actualOptions,e=t.particles.move.trail,i=(0,n.colorToRgb)(e.fillColor);if(i){const e=t.particles.move.trail;this.trailFillColor={r:i.r,g:i.g,b:i.b,a:1/e.length}}}getPluginParticleColors(t){let e,i;for(const[,o]of this.container.plugins)if(!e&&o.particleFillColor&&(e=(0,n.colorToHsl)(o.particleFillColor(t))),!i&&o.particleStrokeColor&&(i=(0,n.colorToHsl)(o.particleStrokeColor(t))),e&&i)break;return[e,i]}initStyle(){const t=this.element,e=this.container.actualOptions;if(!t)return;const i=this.originalStyle;e.fullScreen.enable?(this.originalStyle=(0,n.deepExtend)({},t.style),t.style.position="fixed",t.style.zIndex=e.fullScreen.zIndex.toString(10),t.style.top="0",t.style.left="0",t.style.width="100%",t.style.height="100%"):i&&(t.style.position=i.position,t.style.zIndex=i.zIndex,t.style.top=i.top,t.style.left=i.left,t.style.width=i.width,t.style.height=i.height)}paintBase(t){this.draw((e=>{(0,n.paintBase)(e,this.size,t)}))}lineStyle(t,e){return this.draw((i=>{const o=this.container.actualOptions.interactivity.modes.connect;return(0,n.gradient)(i,t,e,o.links.opacity)}))}}},5624:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Container=void 0;const n=i(8922),o=i(4480),s=i(1993),a=i(410),r=i(6989),l=i(7373),c=i(5638);e.Container=class{constructor(t,e,...i){this.id=t,this.fpsLimit=60,this.duration=0,this.lifeTime=0,this.firstStart=!0,this.started=!1,this.destroyed=!1,this.paused=!0,this.lastFrameTime=0,this.zLayers=100,this.pageHidden=!1,this._sourceOptions=e,this._initialSourceOptions=e,this.retina=new s.Retina(this),this.canvas=new n.Canvas(this),this.particles=new o.Particles(this),this.drawer=new a.FrameManager(this),this.presets=i,this.pathGenerator={generate:()=>{const t=c.Vector.create(0,0);return t.length=Math.random(),t.angle=Math.random()*Math.PI*2,t},init:()=>{},update:()=>{}},this.interactivity={mouse:{clicking:!1,inside:!1}},this.bubble={},this.repulse={particles:[]},this.attract={particles:[]},this.plugins=new Map,this.drawers=new Map,this.density=1,this._options=new r.Options,this.actualOptions=new r.Options,this.eventListeners=new l.EventListeners(this),"undefined"!=typeof IntersectionObserver&&IntersectionObserver&&(this.intersectionObserver=new IntersectionObserver((t=>this.intersectionManager(t))))}get options(){return this._options}get sourceOptions(){return this._sourceOptions}play(t){const e=this.paused||t;if(!this.firstStart||this.actualOptions.autoPlay){if(this.paused&&(this.paused=!1),e)for(const[,t]of this.plugins)t.play&&t.play();this.draw(e||!1)}else this.firstStart=!1}pause(){if(void 0!==this.drawAnimationFrame&&((0,l.cancelAnimation)()(this.drawAnimationFrame),delete this.drawAnimationFrame),!this.paused){for(const[,t]of this.plugins)t.pause&&t.pause();this.pageHidden||(this.paused=!0)}}draw(t){let e=t;this.drawAnimationFrame=(0,l.animate)()((t=>{e&&(this.lastFrameTime=void 0,e=!1),this.drawer.nextFrame(t)}))}getAnimationStatus(){return!this.paused&&!this.pageHidden}setNoise(t,e,i){this.setPath(t,e,i)}setPath(t,e,i){t&&("function"==typeof t?(this.pathGenerator.generate=t,e&&(this.pathGenerator.init=e),i&&(this.pathGenerator.update=i)):(t.generate&&(this.pathGenerator.generate=t.generate),t.init&&(this.pathGenerator.init=t.init),t.update&&(this.pathGenerator.update=t.update)))}destroy(){this.stop(),this.canvas.destroy();for(const[,t]of this.drawers)t.destroy&&t.destroy(this);for(const t of this.drawers.keys())this.drawers.delete(t);this.destroyed=!0}exportImg(t){this.exportImage(t)}exportImage(t,e,i){var n;return null===(n=this.canvas.element)||void 0===n?void 0:n.toBlob(t,null!=e?e:"image/png",i)}exportConfiguration(){return JSON.stringify(this.actualOptions,void 0,2)}refresh(){return this.stop(),this.start()}reset(){return this._options=new r.Options,this.refresh()}stop(){if(this.started){this.firstStart=!0,this.started=!1,this.eventListeners.removeListeners(),this.pause(),this.particles.clear(),this.canvas.clear(),this.interactivity.element instanceof HTMLElement&&this.intersectionObserver&&this.intersectionObserver.observe(this.interactivity.element);for(const[,t]of this.plugins)t.stop&&t.stop();for(const t of this.plugins.keys())this.plugins.delete(t);this.particles.linksColors=new Map,delete this.particles.grabLineColor,delete this.particles.linksColor,this._sourceOptions=this._options}}async loadTheme(t){this.currentTheme=t,await this.refresh()}async start(){if(!this.started){await this.init(),this.started=!0,this.eventListeners.addListeners(),this.interactivity.element instanceof HTMLElement&&this.intersectionObserver&&this.intersectionObserver.observe(this.interactivity.element);for(const[,t]of this.plugins)void 0!==t.startAsync?await t.startAsync():void 0!==t.start&&t.start();this.play()}}addClickHandler(t){const e=this.interactivity.element;if(!e)return;const i=(e,i,n)=>{if(this.destroyed)return;const o=this.retina.pixelRatio,s={x:i.x*o,y:i.y*o},a=this.particles.quadTree.queryCircle(s,n*o);t(e,a)};let n=!1,o=!1;e.addEventListener("click",(t=>{if(this.destroyed)return;const e=t,n={x:e.offsetX||e.clientX,y:e.offsetY||e.clientY};i(t,n,1)})),e.addEventListener("touchstart",(()=>{this.destroyed||(n=!0,o=!1)})),e.addEventListener("touchmove",(()=>{this.destroyed||(o=!0)})),e.addEventListener("touchend",(t=>{var e,s,a;if(!this.destroyed){if(n&&!o){const n=t;let o=n.touches[n.touches.length-1];if(!o&&(o=n.changedTouches[n.changedTouches.length-1],!o))return;const r=null===(e=this.canvas.element)||void 0===e?void 0:e.getBoundingClientRect(),l={x:o.clientX-(null!==(s=null==r?void 0:r.left)&&void 0!==s?s:0),y:o.clientY-(null!==(a=null==r?void 0:r.top)&&void 0!==a?a:0)};i(t,l,Math.max(o.radiusX,o.radiusY))}n=!1,o=!1}})),e.addEventListener("touchcancel",(()=>{this.destroyed||(n=!1,o=!1)}))}updateActualOptions(){this.actualOptions.responsive=[];const t=this.actualOptions.setResponsive(this.canvas.size.width,this.retina.pixelRatio,this._options);return this.actualOptions.setTheme(this.currentTheme),this.responsiveMaxWidth!=t&&(this.responsiveMaxWidth=t,!0)}async init(){this._options=new r.Options;for(const t of this.presets)this._options.load(l.Plugins.getPreset(t));const t=l.Plugins.getSupportedShapes();for(const e of t){const t=l.Plugins.getShapeDrawer(e);t&&this.drawers.set(e,t)}this._options.load(this._initialSourceOptions),this._options.load(this._sourceOptions),this.actualOptions=new r.Options,this.actualOptions.load(this._options),this.retina.init(),this.canvas.init(),this.updateActualOptions(),this.canvas.initBackground(),this.canvas.resize(),this.zLayers=this.actualOptions.zLayers,this.duration=(0,l.getRangeValue)(this.actualOptions.duration),this.lifeTime=0,this.fpsLimit=this.actualOptions.fpsLimit>0?this.actualOptions.fpsLimit:60;const e=l.Plugins.getAvailablePlugins(this);for(const[t,i]of e)this.plugins.set(t,i);for(const[,t]of this.drawers)t.init&&await t.init(this);for(const[,t]of this.plugins)t.init?t.init(this.actualOptions):void 0!==t.initAsync&&await t.initAsync(this.actualOptions);const i=this.actualOptions.particles.move.path;if(i.generator){const t=l.Plugins.getPathGenerator(i.generator);t&&(t.init&&(this.pathGenerator.init=t.init),t.generate&&(this.pathGenerator.generate=t.generate),t.update&&(this.pathGenerator.update=t.update))}this.particles.init(),this.particles.setDensity();for(const[,t]of this.plugins)void 0!==t.particlesSetup&&t.particlesSetup()}intersectionManager(t){if(this.actualOptions.pauseOnOutsideViewport)for(const e of t)e.target===this.interactivity.element&&(e.isIntersecting?this.play():this.pause())}}},4260:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ExternalInteractorBase=void 0;const n=i(6331);e.ExternalInteractorBase=class{constructor(t){this.container=t,this.type=n.InteractorType.External}}},410:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.FrameManager=void 0,e.FrameManager=class{constructor(t){this.container=t}nextFrame(t){var e;try{const i=this.container;if(void 0!==i.lastFrameTime&&t<i.lastFrameTime+1e3/i.fpsLimit)return void i.draw(!1);null!==(e=i.lastFrameTime)&&void 0!==e||(i.lastFrameTime=t);const n=t-i.lastFrameTime,o={value:n,factor:60*n/1e3};if(i.lifeTime+=o.value,i.lastFrameTime=t,n>1e3)return void i.draw(!1);if(i.particles.draw(o),i.duration>0&&i.lifeTime>i.duration)return void i.destroy();i.getAnimationStatus()&&i.draw(!1)}catch(t){console.error("tsParticles error in animation loop",t)}}}},85:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.InteractionManager=void 0;const n=i(7373),o=i(6331);e.InteractionManager=class{constructor(t){this.container=t,this.externalInteractors=[],this.particleInteractors=[],this.init()}init(){const t=n.Plugins.getInteractors(this.container,!0);for(const e of t)switch(e.type){case o.InteractorType.External:this.externalInteractors.push(e);break;case o.InteractorType.Particles:this.particleInteractors.push(e)}}externalInteract(t){for(const e of this.externalInteractors)e.isEnabled()&&e.interact(t)}particlesInteract(t,e){for(const e of this.externalInteractors)e.reset(t);for(const i of this.particleInteractors)i.isEnabled(t)&&i.interact(t,e)}}},3905:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},5894:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},1646:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},9834:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},1572:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},1668:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},5929:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},6012:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},3262:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},9432:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},221:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},142:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},6579:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},2846:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},1875:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},5111:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},2929:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},988:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},608:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},6410:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},9646:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},6830:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},6524:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},5945:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},4910:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},4562:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},4609:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},3338:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},9840:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},8117:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},5720:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},9913:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},2012:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},8354:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},3936:function(t,e,i){var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),o(i(3905),e),o(i(5894),e),o(i(1646),e),o(i(9834),e),o(i(1572),e),o(i(1668),e),o(i(5929),e),o(i(6012),e),o(i(3262),e),o(i(9432),e),o(i(221),e),o(i(142),e),o(i(6579),e),o(i(2846),e),o(i(1875),e),o(i(5111),e),o(i(2929),e),o(i(988),e),o(i(608),e),o(i(6410),e),o(i(9646),e),o(i(6830),e),o(i(6524),e),o(i(5945),e),o(i(4910),e),o(i(4562),e),o(i(4609),e),o(i(3338),e),o(i(9840),e),o(i(8117),e),o(i(5720),e),o(i(9913),e),o(i(2012),e),o(i(8354),e)},6301:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Loader=void 0;const n=i(5624),o=i(7373),s=[];class a{static dom(){return s}static domItem(t){const e=a.dom(),i=e[t];if(i&&!i.destroyed)return i;e.splice(t,1)}static async loadOptions(t){var e,i,s;const r=null!==(e=t.tagId)&&void 0!==e?e:`tsparticles${Math.floor(1e4*Math.random())}`,{options:l,index:c}=t;let d=null!==(i=t.element)&&void 0!==i?i:document.getElementById(r);d||(d=document.createElement("div"),d.id=r,null===(s=document.querySelector("body"))||void 0===s||s.append(d));const h=l instanceof Array?(0,o.itemFromArray)(l,c):l,u=a.dom(),p=u.findIndex((t=>t.id===r));if(p>=0){const t=a.domItem(p);t&&!t.destroyed&&(t.destroy(),u.splice(p,1))}let v,y;if("canvas"===d.tagName.toLowerCase())v=d,y=!1;else{const t=d.getElementsByTagName("canvas");t.length?(v=t[0],v.className||(v.className=o.Constants.canvasClass),y=!1):(y=!0,v=document.createElement("canvas"),v.className=o.Constants.canvasClass,v.style.width="100%",v.style.height="100%",d.appendChild(v))}const g=new n.Container(r,h);return p>=0?u.splice(p,0,g):u.push(g),g.canvas.loadCanvas(v,y),await g.start(),g}static async loadRemoteOptions(t){const{url:e,index:i}=t,n=e instanceof Array?(0,o.itemFromArray)(e,i):e;if(!n)return;const s=await fetch(n);if(!s.ok)return r=s.status,console.error(`Error tsParticles - fetch status: ${r}`),void console.error("Error tsParticles - File config not found");var r;const l=await s.json();return await a.loadOptions({tagId:t.tagId,element:t.element,index:i,options:l})}static load(t,e,i){const n={index:i};return"string"==typeof t?n.tagId=t:n.options=t,"number"==typeof e?n.index=null!=e?e:n.index:n.options=null!=e?e:n.options,this.loadOptions(n)}static async set(t,e,i,n){const o={index:n};return"string"==typeof t?o.tagId=t:o.element=t,e instanceof HTMLElement?o.element=e:o.options=e,"number"==typeof i?o.index=i:o.options=null!=i?i:o.options,this.loadOptions(o)}static async loadJSON(t,e,i){let n,o;return"number"==typeof e||void 0===e?n=t:(o=t,n=e),await a.loadRemoteOptions({tagId:o,url:n,index:i})}static async setJSON(t,e,i,n){let o,s,r,l;return t instanceof HTMLElement?(l=t,o=e,r=i):(s=t,l=e,o=i,r=n),await a.loadRemoteOptions({tagId:s,url:o,index:r,element:l})}static setOnClickHandler(t){const e=a.dom();if(0===e.length)throw new Error("Can only set click handlers after calling tsParticles.load() or tsParticles.loadJSON()");for(const i of e)i.addClickHandler(t)}}e.Loader=a},7051:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Particle=void 0;const n=i(8029),o=i(9014),s=i(6331),a=i(7373),r=i(5638),l=i(5532),c=t=>{((0,a.isInArray)(t.outMode,t.checkModes)||(0,a.isInArray)(t.outMode,t.checkModes))&&(t.coord>t.maxCoord-2*t.radius?t.setCb(-t.radius):t.coord<2*t.radius&&t.setCb(t.radius))};e.Particle=class{constructor(t,e,i,l,c){var d,h,u,p,v,y,g,f,m;this.id=t,this.container=e,this.group=c,this.fill=!0,this.close=!0,this.lastPathTime=0,this.destroyed=!1,this.unbreakable=!1,this.splitCount=0,this.misplaced=!1,this.retina={maxDistance:{}};const b=e.retina.pixelRatio,w=e.actualOptions,A=new n.ParticlesOptions;A.load(w.particles);const S=A.shape.type,_=A.reduceDuplicates;if(this.shape=S instanceof Array?(0,a.itemFromArray)(S,this.id,_):S,null==l?void 0:l.shape){if(l.shape.type){const t=l.shape.type;this.shape=t instanceof Array?(0,a.itemFromArray)(t,this.id,_):t}const t=new o.Shape;t.load(l.shape),this.shape&&(this.shapeData=this.loadShapeData(t,_))}else this.shapeData=this.loadShapeData(A.shape,_);void 0!==l&&A.load(l),void 0!==(null===(d=this.shapeData)||void 0===d?void 0:d.particles)&&A.load(null===(h=this.shapeData)||void 0===h?void 0:h.particles),this.fill=null!==(p=null===(u=this.shapeData)||void 0===u?void 0:u.fill)&&void 0!==p?p:this.fill,this.close=null!==(y=null===(v=this.shapeData)||void 0===v?void 0:v.close)&&void 0!==y?y:this.close,this.options=A,this.pathDelay=1e3*(0,a.getValue)(this.options.move.path.delay);const P=(0,a.getRangeValue)(this.options.zIndex.value);e.retina.initParticle(this);const C=this.options.size,x=C.value;this.size={enable:C.animation.enable,value:(0,a.getValue)(C)*e.retina.pixelRatio,max:(0,a.getRangeMax)(x)*b,min:(0,a.getRangeMin)(x)*b,loops:0,maxLoops:C.animation.count};const E=C.animation;if(E.enable){switch(this.size.status=s.AnimationStatus.increasing,E.startValue){case s.StartValueType.min:this.size.value=this.size.min,this.size.status=s.AnimationStatus.increasing;break;case s.StartValueType.random:this.size.value=(0,a.randomInRange)(this.size)*b,this.size.status=Math.random()>=.5?s.AnimationStatus.increasing:s.AnimationStatus.decreasing;break;case s.StartValueType.max:default:this.size.value=this.size.max,this.size.status=s.AnimationStatus.decreasing}this.size.velocity=(null!==(g=this.retina.sizeAnimationSpeed)&&void 0!==g?g:e.retina.sizeAnimationSpeed)/100*e.retina.reduceFactor,E.sync||(this.size.velocity*=Math.random())}this.direction=(0,a.getParticleDirectionAngle)(this.options.move.direction),this.bubble={inRange:!1},this.initialVelocity=this.calculateVelocity(),this.velocity=this.initialVelocity.copy(),this.moveDecay=1-(0,a.getRangeValue)(this.options.move.decay),this.position=this.calcPosition(e,i,(0,a.clamp)(P,0,e.zLayers)),this.initialPosition=this.position.copy(),this.offset=r.Vector.origin;const O=e.particles;O.needsSort=O.needsSort||O.lastZIndex<this.position.z,O.lastZIndex=this.position.z,this.zIndexFactor=this.position.z/e.zLayers,this.sides=24;let M=e.drawers.get(this.shape);M||(M=a.Plugins.getShapeDrawer(this.shape),M&&e.drawers.set(this.shape,M)),(null==M?void 0:M.loadShape)&&(null==M||M.loadShape(this));const T=null==M?void 0:M.getSidesCount;if(T&&(this.sides=T(this)),this.life=this.loadLife(),this.spawning=this.life.delay>0,this.options.move.spin.enable){const t=null!==(f=this.options.move.spin.position)&&void 0!==f?f:{x:50,y:50},i={x:t.x/100*e.canvas.size.width,y:t.y/100*e.canvas.size.height},n=this.getPosition(),o=(0,a.getDistance)(n,i);this.spin={center:i,direction:this.velocity.x>=0?s.RotateDirection.clockwise:s.RotateDirection.counterClockwise,angle:this.velocity.angle,radius:o,acceleration:null!==(m=this.retina.spinAcceleration)&&void 0!==m?m:(0,a.getRangeValue)(this.options.move.spin.acceleration)}}this.shadowColor=(0,a.colorToRgb)(this.options.shadow.color);for(const t of e.particles.updaters)t.init&&t.init(this);M&&M.particleInit&&M.particleInit(e,this);for(const[,t]of e.plugins)t.particleCreated&&t.particleCreated(this)}isVisible(){return!this.destroyed&&!this.spawning&&this.isInsideCanvas()}isInsideCanvas(){const t=this.getRadius(),e=this.container.canvas.size;return this.position.x>=-t&&this.position.y>=-t&&this.position.y<=e.height+t&&this.position.x<=e.width+t}draw(t){const e=this.container;for(const[,i]of e.plugins)e.canvas.drawParticlePlugin(i,this,t);e.canvas.drawParticle(this,t)}getPosition(){return{x:this.position.x+this.offset.x,y:this.position.y+this.offset.y,z:this.position.z}}getRadius(){var t;return null!==(t=this.bubble.radius)&&void 0!==t?t:this.size.value}getMass(){return this.getRadius()**2*Math.PI/2}getFillColor(){var t,e,i;const n=null!==(t=this.bubble.color)&&void 0!==t?t:(0,a.getHslFromAnimation)(this.color);if(n&&this.roll&&(this.backColor||this.roll.alter)&&Math.floor((null!==(i=null===(e=this.roll)||void 0===e?void 0:e.angle)&&void 0!==i?i:0)/(Math.PI/2))%2){if(this.backColor)return this.backColor;if(this.roll.alter)return(0,a.alterHsl)(n,this.roll.alter.type,this.roll.alter.value)}return n}getStrokeColor(){var t,e;return null!==(e=null!==(t=this.bubble.color)&&void 0!==t?t:(0,a.getHslFromAnimation)(this.strokeColor))&&void 0!==e?e:this.getFillColor()}destroy(t){if(this.destroyed=!0,this.bubble.inRange=!1,!this.unbreakable){this.destroyed=!0,this.bubble.inRange=!1;for(const[,e]of this.container.plugins)e.particleDestroyed&&e.particleDestroyed(this,t);t||this.options.destroy.mode===s.DestroyMode.split&&this.split()}}reset(){this.opacity&&(this.opacity.loops=0),this.size.loops=0}split(){const t=this.options.destroy.split;if(t.count>=0&&this.splitCount++>t.count)return;const e=(0,a.getRangeValue)(t.rate.value);for(let t=0;t<e;t++)this.container.particles.addSplitParticle(this)}calcPosition(t,e,i,n=0){var o,a,r,d,h,u;for(const[,n]of t.plugins){const t=void 0!==n.particlePosition?n.particlePosition(e,this):void 0;if(void 0!==t)return l.Vector3d.create(t.x,t.y,i)}const p=t.canvas.size,v=l.Vector3d.create(null!==(o=null==e?void 0:e.x)&&void 0!==o?o:Math.random()*p.width,null!==(a=null==e?void 0:e.y)&&void 0!==a?a:Math.random()*p.height,i),y=this.getRadius(),g=this.options.move.outModes,f=e=>{c({outMode:e,checkModes:[s.OutMode.bounce,s.OutMode.bounceHorizontal],coord:v.x,maxCoord:t.canvas.size.width,setCb:t=>v.x+=t,radius:y})},m=e=>{c({outMode:e,checkModes:[s.OutMode.bounce,s.OutMode.bounceVertical],coord:v.y,maxCoord:t.canvas.size.height,setCb:t=>v.y+=t,radius:y})};return f(null!==(r=g.left)&&void 0!==r?r:g.default),f(null!==(d=g.right)&&void 0!==d?d:g.default),m(null!==(h=g.top)&&void 0!==h?h:g.default),m(null!==(u=g.bottom)&&void 0!==u?u:g.default),this.checkOverlap(v,n)?this.calcPosition(t,void 0,i,n+1):v}checkOverlap(t,e=0){const i=this.options.collisions,n=this.getRadius();if(!i.enable)return!1;const o=i.overlap;if(o.enable)return!1;const s=o.retries;if(s>=0&&e>s)throw new Error("Particle is overlapping and can't be placed");let r=!1;for(const e of this.container.particles.array)if((0,a.getDistance)(t,e.position)<n+e.getRadius()){r=!0;break}return r}calculateVelocity(){const t=(0,a.getParticleBaseVelocity)(this.direction).copy(),e=this.options.move,i=Math.PI/180*e.angle.value,n=Math.PI/180*e.angle.offset,o={left:n-i/2,right:n+i/2};return e.straight||(t.angle+=(0,a.randomInRange)((0,a.setRangeValue)(o.left,o.right))),e.random&&"number"==typeof e.speed&&(t.length*=Math.random()),t}loadShapeData(t,e){const i=t.options[this.shape];if(i)return(0,a.deepExtend)({},i instanceof Array?(0,a.itemFromArray)(i,this.id,e):i)}loadLife(){const t=this.container,e=this.options,i=e.life,n={delay:t.retina.reduceFactor?(0,a.getRangeValue)(i.delay.value)*(i.delay.sync?1:Math.random())/t.retina.reduceFactor*1e3:0,delayTime:0,duration:t.retina.reduceFactor?(0,a.getRangeValue)(i.duration.value)*(i.duration.sync?1:Math.random())/t.retina.reduceFactor*1e3:0,time:0,count:e.life.count};return n.duration<=0&&(n.duration=-1),n.count<=0&&(n.count=-1),n}}},4285:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Mover=void 0;const n=i(7373),o=i(6331);e.Mover=class{constructor(t){this.container=t}move(t,e){t.destroyed||(this.moveParticle(t,e),this.moveParallax(t))}moveParticle(t,e){var i,o,s,a,r;const l=t.options,c=l.move;if(!c.enable)return;const d=this.container,h=this.getProximitySpeedFactor(t),u=(null!==(i=(a=t.retina).moveSpeed)&&void 0!==i?i:a.moveSpeed=(0,n.getRangeValue)(c.speed)*d.retina.pixelRatio)*d.retina.reduceFactor,p=null!==(o=(r=t.retina).moveDrift)&&void 0!==o?o:r.moveDrift=(0,n.getRangeValue)(t.options.move.drift)*d.retina.pixelRatio,v=(0,n.getRangeMax)(l.size.value)*d.retina.pixelRatio,y=u*((c.size?t.getRadius()/v:1)*h*(e.factor||1)/2);this.applyPath(t,e);const g=c.gravity,f=g.enable&&g.inverse?-1:1;g.enable&&y&&(t.velocity.y+=f*(g.acceleration*e.factor)/(60*y)),p&&y&&(t.velocity.x+=p*e.factor/(60*y));const m=t.moveDecay;1!=m&&t.velocity.multTo(m);const b=t.velocity.mult(y),w=null!==(s=t.retina.maxSpeed)&&void 0!==s?s:d.retina.maxSpeed;g.enable&&g.maxSpeed>0&&(!g.inverse&&b.y>=0&&b.y>=w||g.inverse&&b.y<=0&&b.y<=-w)&&(b.y=f*w,y&&(t.velocity.y=b.y/y));const A=t.options.zIndex,S=(1-t.zIndexFactor)**A.velocityRate;c.spin.enable?this.spin(t,y):(1!=S&&b.multTo(S),t.position.addTo(b),c.vibrate&&(t.position.x+=Math.sin(t.position.x*Math.cos(t.position.y)),t.position.y+=Math.cos(t.position.y*Math.sin(t.position.x)))),function(t){const e=t.initialPosition,{dx:i,dy:o}=(0,n.getDistances)(e,t.position),s=Math.abs(i),a=Math.abs(o),r=t.retina.maxDistance.horizontal,l=t.retina.maxDistance.vertical;if(r||l)if((r&&s>=r||l&&a>=l)&&!t.misplaced)t.misplaced=!!r&&s>r||!!l&&a>l,r&&(t.velocity.x=t.velocity.y/2-t.velocity.x),l&&(t.velocity.y=t.velocity.x/2-t.velocity.y);else if((!r||s<r)&&(!l||a<l)&&t.misplaced)t.misplaced=!1;else if(t.misplaced){const i=t.position,n=t.velocity;r&&(i.x<e.x&&n.x<0||i.x>e.x&&n.x>0)&&(n.x*=-Math.random()),l&&(i.y<e.y&&n.y<0||i.y>e.y&&n.y>0)&&(n.y*=-Math.random())}}(t)}spin(t,e){const i=this.container;if(!t.spin)return;const n={x:t.spin.direction===o.RotateDirection.clockwise?Math.cos:Math.sin,y:t.spin.direction===o.RotateDirection.clockwise?Math.sin:Math.cos};t.position.x=t.spin.center.x+t.spin.radius*n.x(t.spin.angle),t.position.y=t.spin.center.y+t.spin.radius*n.y(t.spin.angle),t.spin.radius+=t.spin.acceleration;const s=Math.max(i.canvas.size.width,i.canvas.size.height);t.spin.radius>s/2?(t.spin.radius=s/2,t.spin.acceleration*=-1):t.spin.radius<0&&(t.spin.radius=0,t.spin.acceleration*=-1),t.spin.angle+=e/100*(1-t.spin.radius/s)}applyPath(t,e){const i=t.options.move.path;if(!i.enable)return;const o=this.container;if(t.lastPathTime<=t.pathDelay)return void(t.lastPathTime+=e.value);const s=o.pathGenerator.generate(t);t.velocity.addTo(s),i.clamp&&(t.velocity.x=(0,n.clamp)(t.velocity.x,-1,1),t.velocity.y=(0,n.clamp)(t.velocity.y,-1,1)),t.lastPathTime-=t.pathDelay}moveParallax(t){const e=this.container,i=e.actualOptions;if((0,n.isSsr)()||!i.interactivity.events.onHover.parallax.enable)return;const o=i.interactivity.events.onHover.parallax.force,s=e.interactivity.mouse.position;if(!s)return;const a=e.canvas.size.width/2,r=e.canvas.size.height/2,l=i.interactivity.events.onHover.parallax.smooth,c=t.getRadius()/o,d=(s.x-a)*c,h=(s.y-r)*c;t.offset.x+=(d-t.offset.x)/l,t.offset.y+=(h-t.offset.y)/l}getProximitySpeedFactor(t){const e=this.container,i=e.actualOptions;if(!(0,n.isInArray)(o.HoverMode.slow,i.interactivity.events.onHover.mode))return 1;const s=this.container.interactivity.mouse.position;if(!s)return 1;const a=t.getPosition(),r=(0,n.getDistance)(s,a),l=e.retina.slowModeRadius;return r>l?1:(r/l||0)/i.interactivity.modes.slow.factor}}},5638:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Vector=void 0;class i{constructor(t,e){let i,n;if(void 0===e){if("number"==typeof t)throw new Error("tsParticles - Vector not initialized correctly");const e=t;[i,n]=[e.x,e.y]}else[i,n]=[t,e];this.x=i,this.y=n}static clone(t){return i.create(t.x,t.y)}static create(t,e){return new i(t,e)}static get origin(){return i.create(0,0)}get angle(){return Math.atan2(this.y,this.x)}set angle(t){this.updateFromAngle(t,this.length)}get length(){return Math.sqrt(this.x**2+this.y**2)}set length(t){this.updateFromAngle(this.angle,t)}add(t){return i.create(this.x+t.x,this.y+t.y)}addTo(t){this.x+=t.x,this.y+=t.y}sub(t){return i.create(this.x-t.x,this.y-t.y)}subFrom(t){this.x-=t.x,this.y-=t.y}mult(t){return i.create(this.x*t,this.y*t)}multTo(t){this.x*=t,this.y*=t}div(t){return i.create(this.x/t,this.y/t)}divTo(t){this.x/=t,this.y/=t}distanceTo(t){return this.sub(t).length}getLengthSq(){return this.x**2+this.y**2}distanceToSq(t){return this.sub(t).getLengthSq()}manhattanDistanceTo(t){return Math.abs(t.x-this.x)+Math.abs(t.y-this.y)}copy(){return i.clone(this)}setTo(t){this.x=t.x,this.y=t.y}rotate(t){return i.create(this.x*Math.cos(t)-this.y*Math.sin(t),this.x*Math.sin(t)+this.y*Math.cos(t))}updateFromAngle(t,e){this.x=Math.cos(t)*e,this.y=Math.sin(t)*e}}e.Vector=i},5532:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Vector3d=void 0;const n=i(5638);class o extends n.Vector{constructor(t,e,i){super(t,e),this.z=void 0===i?t.z:i}static clone(t){return o.create(t.x,t.y,t.z)}static create(t,e,i){return new o(t,e,i)}add(t){return t instanceof o?o.create(this.x+t.x,this.y+t.y,this.z+t.z):super.add(t)}addTo(t){super.addTo(t),t instanceof o&&(this.z+=t.z)}sub(t){return t instanceof o?o.create(this.x-t.x,this.y-t.y,this.z-t.z):super.sub(t)}subFrom(t){super.subFrom(t),t instanceof o&&(this.z-=t.z)}mult(t){return o.create(this.x*t,this.y*t,this.z*t)}multTo(t){super.multTo(t),this.z*=t}div(t){return o.create(this.x/t,this.y/t,this.z/t)}divTo(t){super.divTo(t),this.z/=t}copy(){return o.clone(this)}setTo(t){super.setTo(t),t instanceof o&&(this.z=t.z)}}e.Vector3d=o},4480:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Particles=void 0;const n=i(7051),o=i(7373),s=i(85),a=i(8029),r=i(4285);e.Particles=class{constructor(t){this.container=t,this.nextId=0,this.array=[],this.zArray=[],this.mover=new r.Mover(t),this.limit=0,this.needsSort=!1,this.lastZIndex=0,this.freqs={links:new Map,triangles:new Map},this.interactionManager=new s.InteractionManager(t);const e=this.container.canvas.size;this.linksColors=new Map,this.quadTree=new o.QuadTree(new o.Rectangle(-e.width/4,-e.height/4,3*e.width/2,3*e.height/2),4),this.updaters=o.Plugins.getUpdaters(t,!0)}get count(){return this.array.length}init(){var t;const e=this.container,i=e.actualOptions;this.lastZIndex=0,this.needsSort=!1,this.freqs.links=new Map,this.freqs.triangles=new Map;let n=!1;this.updaters=o.Plugins.getUpdaters(e,!0),this.interactionManager.init();for(const[,t]of e.plugins)if(void 0!==t.particlesInitialization&&(n=t.particlesInitialization()),n)break;if(this.addManualParticles(),!n){for(const e in i.particles.groups){const n=i.particles.groups[e];for(let o=this.count,s=0;s<(null===(t=n.number)||void 0===t?void 0:t.value)&&o<i.particles.number.value;o++,s++)this.addParticle(void 0,n,e)}for(let t=this.count;t<i.particles.number.value;t++)this.addParticle()}e.pathGenerator.init(e)}redraw(){this.clear(),this.init(),this.draw({value:0,factor:0})}removeAt(t,e=1,i,n){if(!(t>=0&&t<=this.count))return;let o=0;for(let s=t;o<e&&s<this.count;s++){const t=this.array[s];if(!t||t.group!==i)continue;t.destroy(n),this.array.splice(s--,1);const e=this.zArray.indexOf(t);this.zArray.splice(e,1),o++}}remove(t,e,i){this.removeAt(this.array.indexOf(t),void 0,e,i)}update(t){const e=this.container,i=[];e.pathGenerator.update();for(const[,i]of e.plugins)void 0!==i.update&&i.update(t);for(const n of this.array){const s=e.canvas.resizeFactor;s&&(n.position.x*=s.width,n.position.y*=s.height),n.bubble.inRange=!1;for(const[,e]of this.container.plugins){if(n.destroyed)break;e.particleUpdate&&e.particleUpdate(n,t)}this.mover.move(n,t),n.destroyed?i.push(n):this.quadTree.insert(new o.Point(n.getPosition(),n))}for(const t of i)this.remove(t);this.interactionManager.externalInteract(t);for(const i of e.particles.array){for(const e of this.updaters)e.update(i,t);i.destroyed||i.spawning||this.interactionManager.particlesInteract(i,t)}delete e.canvas.resizeFactor}draw(t){const e=this.container;e.canvas.clear();const i=this.container.canvas.size;this.quadTree=new o.QuadTree(new o.Rectangle(-i.width/4,-i.height/4,3*i.width/2,3*i.height/2),4),this.update(t),this.needsSort&&(this.zArray.sort(((t,e)=>e.position.z-t.position.z||t.id-e.id)),this.lastZIndex=this.zArray[this.zArray.length-1].position.z,this.needsSort=!1);for(const[,i]of e.plugins)e.canvas.drawPlugin(i,t);for(const e of this.zArray)e.draw(t)}clear(){this.array=[],this.zArray=[]}push(t,e,i,n){this.pushing=!0;for(let o=0;o<t;o++)this.addParticle(null==e?void 0:e.position,i,n);this.pushing=!1}addParticle(t,e,i){const n=this.container,o=n.actualOptions.particles.number.limit*n.density;if(o>0){const t=this.count+1-o;t>0&&this.removeQuantity(t)}return this.pushParticle(t,e,i)}addSplitParticle(t){const e=t.options.destroy.split,i=new a.ParticlesOptions;i.load(t.options);const n=(0,o.getRangeValue)(e.factor.value);i.color.load({value:{hsl:t.getFillColor()}}),"number"==typeof i.size.value?i.size.value/=n:(i.size.value.min/=n,i.size.value.max/=n),i.load(e.particles);const s=e.sizeOffset?(0,o.setRangeValue)(-t.size.value,t.size.value):0,r={x:t.position.x+(0,o.randomInRange)(s),y:t.position.y+(0,o.randomInRange)(s)};return this.pushParticle(r,i,t.group,(e=>!(e.size.value<.5||(e.velocity.length=(0,o.randomInRange)((0,o.setRangeValue)(t.velocity.length,e.velocity.length)),e.splitCount=t.splitCount+1,e.unbreakable=!0,setTimeout((()=>{e.unbreakable=!1}),500),0))))}removeQuantity(t,e){this.removeAt(0,t,e)}getLinkFrequency(t,e){const i=`${Math.min(t.id,e.id)}_${Math.max(t.id,e.id)}`;let n=this.freqs.links.get(i);return void 0===n&&(n=Math.random(),this.freqs.links.set(i,n)),n}getTriangleFrequency(t,e,i){let[n,o,s]=[t.id,e.id,i.id];n>o&&([o,n]=[n,o]),o>s&&([s,o]=[o,s]),n>s&&([s,n]=[n,s]);const a=`${n}_${o}_${s}`;let r=this.freqs.triangles.get(a);return void 0===r&&(r=Math.random(),this.freqs.triangles.set(a,r)),r}addManualParticles(){const t=this.container,e=t.actualOptions;for(const i of e.manualParticles){const e=i.position?{x:i.position.x*t.canvas.size.width/100,y:i.position.y*t.canvas.size.height/100}:void 0;this.addParticle(e,i.options)}}setDensity(){const t=this.container.actualOptions;for(const e in t.particles.groups)this.applyDensity(t.particles.groups[e],0,e);this.applyDensity(t.particles,t.manualParticles.length)}applyDensity(t,e,i){var n;if(!(null===(n=t.number.density)||void 0===n?void 0:n.enable))return;const o=t.number,s=this.initDensityFactor(o.density),a=o.value,r=o.limit>0?o.limit:a,l=Math.min(a,r)*s+e,c=Math.min(this.count,this.array.filter((t=>t.group===i)).length);this.limit=o.limit*s,c<l?this.push(Math.abs(l-c),void 0,t,i):c>l&&this.removeQuantity(c-l,i)}initDensityFactor(t){const e=this.container;if(!e.canvas.element||!t.enable)return 1;const i=e.canvas.element,n=e.retina.pixelRatio;return i.width*i.height/(t.factor*n**2*t.area)}pushParticle(t,e,i,o){try{const s=new n.Particle(this.nextId,this.container,t,e,i);let a=!0;if(o&&(a=o(s)),!a)return;return this.array.push(s),this.zArray.push(s),this.nextId++,s}catch(t){return void console.warn(`error adding particle: ${t}`)}}}},7472:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ParticlesInteractorBase=void 0;const n=i(6331);e.ParticlesInteractorBase=class{constructor(t){this.container=t,this.type=n.InteractorType.Particles}}},1993:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Retina=void 0;const n=i(7373);e.Retina=class{constructor(t){this.container=t}init(){const t=this.container,e=t.actualOptions;this.pixelRatio=!e.detectRetina||(0,n.isSsr)()?1:window.devicePixelRatio;const i=this.container.actualOptions.motion;if(i&&(i.disable||i.reduce.value))if((0,n.isSsr)()||"undefined"==typeof matchMedia||!matchMedia)this.reduceFactor=1;else{const e=matchMedia("(prefers-reduced-motion: reduce)");if(e){this.handleMotionChange(e);const i=()=>{this.handleMotionChange(e),t.refresh().catch((()=>{}))};void 0!==e.addEventListener?e.addEventListener("change",i):void 0!==e.addListener&&e.addListener(i)}}else this.reduceFactor=1;const o=this.pixelRatio;if(t.canvas.element){const e=t.canvas.element;t.canvas.size.width=e.offsetWidth*o,t.canvas.size.height=e.offsetHeight*o}const s=e.particles;this.attractDistance=s.move.attract.distance*o,this.linksDistance=s.links.distance*o,this.linksWidth=s.links.width*o,this.sizeAnimationSpeed=s.size.animation.speed*o,this.maxSpeed=s.move.gravity.maxSpeed*o,void 0!==s.orbit.radius&&(this.orbitRadius=s.orbit.radius*this.container.retina.pixelRatio);const a=e.interactivity.modes;this.connectModeDistance=a.connect.distance*o,this.connectModeRadius=a.connect.radius*o,this.grabModeDistance=a.grab.distance*o,this.repulseModeDistance=a.repulse.distance*o,this.bounceModeDistance=a.bounce.distance*o,this.attractModeDistance=a.attract.distance*o,this.slowModeRadius=a.slow.radius*o,this.bubbleModeDistance=a.bubble.distance*o,a.bubble.size&&(this.bubbleModeSize=a.bubble.size*o)}initParticle(t){const e=t.options,i=this.pixelRatio,o=e.move.distance,s=t.retina;s.attractDistance=e.move.attract.distance*i,s.linksDistance=e.links.distance*i,s.linksWidth=e.links.width*i,s.moveDrift=(0,n.getRangeValue)(e.move.drift)*i,s.moveSpeed=(0,n.getRangeValue)(e.move.speed)*i,s.sizeAnimationSpeed=e.size.animation.speed*i,t.spin&&(s.spinAcceleration=(0,n.getRangeValue)(e.move.spin.acceleration)*i);const a=s.maxDistance;a.horizontal=void 0!==o.horizontal?o.horizontal*i:void 0,a.vertical=void 0!==o.vertical?o.vertical*i:void 0,s.maxSpeed=e.move.gravity.maxSpeed*i}handleMotionChange(t){const e=this.container.actualOptions;if(t.matches){const t=e.motion;this.reduceFactor=t.disable?0:t.reduce.value?1/t.reduce.factor:1}else this.reduceFactor=1}}},2838:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.AnimationStatus=void 0,(i=e.AnimationStatus||(e.AnimationStatus={}))[i.increasing=0]="increasing",i[i.decreasing=1]="decreasing"},1583:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.MoveDirection=void 0,(i=e.MoveDirection||(e.MoveDirection={})).bottom="bottom",i.bottomLeft="bottom-left",i.bottomRight="bottom-right",i.left="left",i.none="none",i.right="right",i.top="top",i.topLeft="top-left",i.topRight="top-right"},9040:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.OutModeDirection=void 0,(i=e.OutModeDirection||(e.OutModeDirection={})).bottom="bottom",i.left="left",i.right="right",i.top="top"},1235:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.RotateDirection=void 0,(i=e.RotateDirection||(e.RotateDirection={})).clockwise="clockwise",i.counterClockwise="counter-clockwise",i.random="random"},9368:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.TiltDirection=void 0,(i=e.TiltDirection||(e.TiltDirection={})).clockwise="clockwise",i.counterClockwise="counter-clockwise",i.random="random"},5554:function(t,e,i){var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),o(i(1583),e),o(i(1235),e),o(i(9040),e),o(i(9368),e)},3645:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.InteractivityDetect=void 0,(i=e.InteractivityDetect||(e.InteractivityDetect={})).canvas="canvas",i.parent="parent",i.window="window"},2672:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.ClickMode=void 0,(i=e.ClickMode||(e.ClickMode={})).attract="attract",i.bubble="bubble",i.push="push",i.remove="remove",i.repulse="repulse",i.pause="pause",i.trail="trail"},8945:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.CollisionMode=void 0,(i=e.CollisionMode||(e.CollisionMode={})).absorb="absorb",i.bounce="bounce",i.destroy="destroy"},4970:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.DestroyMode=void 0,(i=e.DestroyMode||(e.DestroyMode={})).none="none",i.split="split"},1346:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.DivMode=void 0,(i=e.DivMode||(e.DivMode={})).bounce="bounce",i.bubble="bubble",i.repulse="repulse"},2977:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.HoverMode=void 0,(i=e.HoverMode||(e.HoverMode={})).attract="attract",i.bounce="bounce",i.bubble="bubble",i.connect="connect",i.grab="grab",i.light="light",i.repulse="repulse",i.slow="slow",i.trail="trail"},6833:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.OutMode=void 0,(i=e.OutMode||(e.OutMode={})).bounce="bounce",i.bounceHorizontal="bounce-horizontal",i.bounceVertical="bounce-vertical",i.none="none",i.out="out",i.destroy="destroy",i.split="split"},5347:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.ResponsiveMode=void 0,(i=e.ResponsiveMode||(e.ResponsiveMode={})).screen="screen",i.canvas="canvas"},8404:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.RollMode=void 0,(i=e.RollMode||(e.RollMode={})).both="both",i.horizontal="horizontal",i.vertical="vertical"},2639:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.SizeMode=void 0,(i=e.SizeMode||(e.SizeMode={})).precise="precise",i.percent="percent"},8882:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.ThemeMode=void 0,(i=e.ThemeMode||(e.ThemeMode={})).any="any",i.dark="dark",i.light="light"},551:function(t,e,i){var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),o(i(2672),e),o(i(4970),e),o(i(1346),e),o(i(2977),e),o(i(8945),e),o(i(6833),e),o(i(8404),e),o(i(2639),e),o(i(8882),e),o(i(5347),e)},8782:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.AlterType=void 0,(i=e.AlterType||(e.AlterType={})).darken="darken",i.enlighten="enlighten"},1095:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.DestroyType=void 0,(i=e.DestroyType||(e.DestroyType={})).none="none",i.max="max",i.min="min"},7068:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.DivType=void 0,(i=e.DivType||(e.DivType={})).circle="circle",i.rectangle="rectangle"},3947:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.EasingType=void 0,(i=e.EasingType||(e.EasingType={})).easeOutBack="ease-out-back",i.easeOutCirc="ease-out-circ",i.easeOutCubic="ease-out-cubic",i.easeOutQuad="ease-out-quad",i.easeOutQuart="ease-out-quart",i.easeOutQuint="ease-out-quint",i.easeOutExpo="ease-out-expo",i.easeOutSine="ease-out-sine"},864:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.GradientType=void 0,(i=e.GradientType||(e.GradientType={})).linear="linear",i.radial="radial",i.random="random"},4339:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.InteractorType=void 0,(i=e.InteractorType||(e.InteractorType={}))[i.External=0]="External",i[i.Particles=1]="Particles"},2600:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.OrbitType=void 0,(i=e.OrbitType||(e.OrbitType={})).front="front",i.back="back"},6252:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.ShapeType=void 0,(i=e.ShapeType||(e.ShapeType={})).char="char",i.character="character",i.circle="circle",i.edge="edge",i.image="image",i.images="images",i.line="line",i.polygon="polygon",i.square="square",i.star="star",i.triangle="triangle"},5091:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.StartValueType=void 0,(i=e.StartValueType||(e.StartValueType={})).max="max",i.min="min",i.random="random"},8810:function(t,e,i){var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),o(i(8782),e),o(i(1095),e),o(i(864),e),o(i(4339),e),o(i(6252),e),o(i(5091),e),o(i(7068),e),o(i(3947),e),o(i(2600),e)},6331:function(t,e,i){var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),o(i(5554),e),o(i(551),e),o(i(2838),e),o(i(8810),e),o(i(3645),e)},5016:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Attractor=void 0;const n=i(6331),o=i(7373),s=i(4260),a=i(5638);class r extends s.ExternalInteractorBase{constructor(t){super(t)}isEnabled(){const t=this.container,e=t.actualOptions,i=t.interactivity.mouse,s=e.interactivity.events;if(!(i.position&&s.onHover.enable||i.clickPosition&&s.onClick.enable))return!1;const a=s.onHover.mode,r=s.onClick.mode;return(0,o.isInArray)(n.HoverMode.attract,a)||(0,o.isInArray)(n.ClickMode.attract,r)}reset(){}interact(){const t=this.container,e=t.actualOptions,i=t.interactivity.status===o.Constants.mouseMoveEvent,s=e.interactivity.events,a=s.onHover.enable,r=s.onHover.mode,l=s.onClick.enable,c=s.onClick.mode;i&&a&&(0,o.isInArray)(n.HoverMode.attract,r)?this.hoverAttract():l&&(0,o.isInArray)(n.ClickMode.attract,c)&&this.clickAttract()}hoverAttract(){const t=this.container,e=t.interactivity.mouse.position;if(!e)return;const i=t.retina.attractModeDistance;this.processAttract(e,i,new o.Circle(e.x,e.y,i))}processAttract(t,e,i){const n=this.container,s=n.actualOptions.interactivity.modes.attract,r=n.particles.quadTree.query(i);for(const i of r){const{dx:n,dy:r,distance:l}=(0,o.getDistances)(i.position,t),c=s.speed*s.factor,d=(0,o.clamp)((0,o.calcEasing)(1-l/e,s.easing)*c,0,s.maxSpeed),h=a.Vector.create(0===l?c:n/l*d,0===l?c:r/l*d);i.position.subFrom(h)}}clickAttract(){const t=this.container;if(t.attract.finish||(t.attract.count||(t.attract.count=0),t.attract.count++,t.attract.count===t.particles.count&&(t.attract.finish=!0)),t.attract.clicking){const e=t.interactivity.mouse.clickPosition;if(!e)return;const i=t.retina.attractModeDistance;this.processAttract(e,i,new o.Circle(e.x,e.y,i))}else!1===t.attract.clicking&&(t.attract.particles=[])}}e.Attractor=r},2770:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadExternalAttractInteraction=void 0;const n=i(5016);e.loadExternalAttractInteraction=async function(t){await t.addInteractor("externalAttract",(t=>new n.Attractor(t)))}},3326:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Bouncer=void 0;const n=i(7373),o=i(6331),s=i(5638),a=i(4260);class r extends a.ExternalInteractorBase{constructor(t){super(t)}isEnabled(){const t=this.container,e=t.actualOptions,i=t.interactivity.mouse,s=e.interactivity.events,a=s.onDiv;return i.position&&s.onHover.enable&&(0,n.isInArray)(o.HoverMode.bounce,s.onHover.mode)||(0,n.isDivModeEnabled)(o.DivMode.bounce,a)}interact(){const t=this.container,e=t.actualOptions.interactivity.events,i=t.interactivity.status===n.Constants.mouseMoveEvent,s=e.onHover.enable,a=e.onHover.mode,r=e.onDiv;i&&s&&(0,n.isInArray)(o.HoverMode.bounce,a)?this.processMouseBounce():(0,n.divModeExecute)(o.DivMode.bounce,r,((t,e)=>this.singleSelectorBounce(t,e)))}reset(){}processMouseBounce(){const t=this.container,e=10*t.retina.pixelRatio,i=t.interactivity.mouse.position,o=t.retina.bounceModeDistance;i&&this.processBounce(i,o,new n.Circle(i.x,i.y,o+e))}singleSelectorBounce(t,e){const i=this.container,s=document.querySelectorAll(t);s.length&&s.forEach((t=>{const s=t,a=i.retina.pixelRatio,r={x:(s.offsetLeft+s.offsetWidth/2)*a,y:(s.offsetTop+s.offsetHeight/2)*a},l=s.offsetWidth/2*a,c=10*a,d=e.type===o.DivType.circle?new n.Circle(r.x,r.y,l+c):new n.Rectangle(s.offsetLeft*a-c,s.offsetTop*a-c,s.offsetWidth*a+2*c,s.offsetHeight*a+2*c);this.processBounce(r,l,d)}))}processBounce(t,e,i){const o=this.container.particles.quadTree.query(i);for(const a of o)i instanceof n.Circle?(0,n.circleBounce)((0,n.circleBounceDataFromParticle)(a),{position:t,radius:e,mass:e**2*Math.PI/2,velocity:s.Vector.origin,factor:s.Vector.origin}):i instanceof n.Rectangle&&(0,n.rectBounce)(a,(0,n.calculateBounds)(t,e))}}e.Bouncer=r},1966:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadExternalBounceInteraction=void 0;const n=i(3326);e.loadExternalBounceInteraction=async function(t){await t.addInteractor("externalBounce",(t=>new n.Bouncer(t)))}},9007:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Bubbler=void 0;const n=i(7373),o=i(6331),s=i(4260),a=i(3169);function r(t,e,i,o){if(e>=i){const s=t+(e-i)*o;return(0,n.clamp)(s,t,e)}if(e<i){const s=t-(i-e)*o;return(0,n.clamp)(s,e,t)}}class l extends s.ExternalInteractorBase{constructor(t){super(t)}isEnabled(){const t=this.container,e=t.actualOptions,i=t.interactivity.mouse,s=e.interactivity.events,a=s.onDiv,r=(0,n.isDivModeEnabled)(o.DivMode.bubble,a);if(!(r||s.onHover.enable&&i.position||s.onClick.enable&&i.clickPosition))return!1;const l=s.onHover.mode,c=s.onClick.mode;return(0,n.isInArray)(o.HoverMode.bubble,l)||(0,n.isInArray)(o.ClickMode.bubble,c)||r}reset(t,e){t.bubble.inRange&&!e||(delete t.bubble.div,delete t.bubble.opacity,delete t.bubble.radius,delete t.bubble.color)}interact(){const t=this.container.actualOptions.interactivity.events,e=t.onHover,i=t.onClick,s=e.enable,a=e.mode,r=i.enable,l=i.mode,c=t.onDiv;s&&(0,n.isInArray)(o.HoverMode.bubble,a)?this.hoverBubble():r&&(0,n.isInArray)(o.ClickMode.bubble,l)?this.clickBubble():(0,n.divModeExecute)(o.DivMode.bubble,c,((t,e)=>this.singleSelectorHover(t,e)))}singleSelectorHover(t,e){const i=this.container,s=document.querySelectorAll(t);s.length&&s.forEach((t=>{const s=t,a=i.retina.pixelRatio,r={x:(s.offsetLeft+s.offsetWidth/2)*a,y:(s.offsetTop+s.offsetHeight/2)*a},l=s.offsetWidth/2*a,c=e.type===o.DivType.circle?new n.Circle(r.x,r.y,l):new n.Rectangle(s.offsetLeft*a,s.offsetTop*a,s.offsetWidth*a,s.offsetHeight*a),d=i.particles.quadTree.query(c);for(const t of d){if(!c.contains(t.getPosition()))continue;t.bubble.inRange=!0;const e=i.actualOptions.interactivity.modes.bubble.divs,o=(0,n.divMode)(e,s);t.bubble.div&&t.bubble.div===s||(this.reset(t,!0),t.bubble.div=s),this.hoverBubbleSize(t,1,o),this.hoverBubbleOpacity(t,1,o),this.hoverBubbleColor(t,1,o)}}))}process(t,e,i,n){const o=this.container,s=n.bubbleObj.optValue;if(void 0===s)return;const r=o.actualOptions.interactivity.modes.bubble.duration,l=o.retina.bubbleModeDistance,c=n.particlesObj.optValue,d=n.bubbleObj.value,h=n.particlesObj.value||0,u=n.type;if(s!==c)if(o.bubble.durationEnd)d&&(u===a.ProcessBubbleType.size&&delete t.bubble.radius,u===a.ProcessBubbleType.opacity&&delete t.bubble.opacity);else if(e<=l){if((null!=d?d:h)!==s){const e=h-i*(h-s)/r;u===a.ProcessBubbleType.size&&(t.bubble.radius=e),u===a.ProcessBubbleType.opacity&&(t.bubble.opacity=e)}}else u===a.ProcessBubbleType.size&&delete t.bubble.radius,u===a.ProcessBubbleType.opacity&&delete t.bubble.opacity}clickBubble(){var t,e;const i=this.container,o=i.actualOptions,s=i.interactivity.mouse.clickPosition;if(!s)return;const r=i.retina.bubbleModeDistance,l=i.particles.quadTree.queryCircle(s,r);for(const r of l){if(!i.bubble.clicking)continue;r.bubble.inRange=!i.bubble.durationEnd;const l=r.getPosition(),c=(0,n.getDistance)(l,s),d=((new Date).getTime()-(i.interactivity.mouse.clickTime||0))/1e3;d>o.interactivity.modes.bubble.duration&&(i.bubble.durationEnd=!0),d>2*o.interactivity.modes.bubble.duration&&(i.bubble.clicking=!1,i.bubble.durationEnd=!1);const h={bubbleObj:{optValue:i.retina.bubbleModeSize,value:r.bubble.radius},particlesObj:{optValue:(0,n.getRangeMax)(r.options.size.value)*i.retina.pixelRatio,value:r.size.value},type:a.ProcessBubbleType.size};this.process(r,c,d,h);const u={bubbleObj:{optValue:o.interactivity.modes.bubble.opacity,value:r.bubble.opacity},particlesObj:{optValue:(0,n.getRangeMax)(r.options.opacity.value),value:null!==(e=null===(t=r.opacity)||void 0===t?void 0:t.value)&&void 0!==e?e:1},type:a.ProcessBubbleType.opacity};this.process(r,c,d,u),i.bubble.durationEnd?delete r.bubble.color:c<=i.retina.bubbleModeDistance?this.hoverBubbleColor(r,c):delete r.bubble.color}}hoverBubble(){const t=this.container,e=t.interactivity.mouse.position;if(void 0===e)return;const i=t.retina.bubbleModeDistance,o=t.particles.quadTree.queryCircle(e,i);for(const s of o){s.bubble.inRange=!0;const o=s.getPosition(),a=(0,n.getDistance)(o,e),r=1-a/i;a<=i?r>=0&&t.interactivity.status===n.Constants.mouseMoveEvent&&(this.hoverBubbleSize(s,r),this.hoverBubbleOpacity(s,r),this.hoverBubbleColor(s,r)):this.reset(s),t.interactivity.status===n.Constants.mouseLeaveEvent&&this.reset(s)}}hoverBubbleSize(t,e,i){const o=this.container,s=(null==i?void 0:i.size)?i.size*o.retina.pixelRatio:o.retina.bubbleModeSize;if(void 0===s)return;const a=(0,n.getRangeMax)(t.options.size.value)*o.retina.pixelRatio,l=r(t.size.value,s,a,e);void 0!==l&&(t.bubble.radius=l)}hoverBubbleOpacity(t,e,i){var o,s,a;const l=this.container.actualOptions,c=null!==(o=null==i?void 0:i.opacity)&&void 0!==o?o:l.interactivity.modes.bubble.opacity;if(!c)return;const d=t.options.opacity.value,h=r(null!==(a=null===(s=t.opacity)||void 0===s?void 0:s.value)&&void 0!==a?a:1,c,(0,n.getRangeMax)(d),e);void 0!==h&&(t.bubble.opacity=h)}hoverBubbleColor(t,e,i){const o=this.container.actualOptions,s=null!=i?i:o.interactivity.modes.bubble;if(!t.bubble.finalColor){const e=s.color;if(!e)return;const i=e instanceof Array?(0,n.itemFromArray)(e):e;t.bubble.finalColor=(0,n.colorToHsl)(i)}if(t.bubble.finalColor)if(s.mix){t.bubble.color=void 0;const i=t.getFillColor();t.bubble.color=i?(0,n.rgbToHsl)((0,n.colorMix)(i,t.bubble.finalColor,1-e,e)):t.bubble.finalColor}else t.bubble.color=t.bubble.finalColor}}e.Bubbler=l},3169:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.ProcessBubbleType=void 0,(i=e.ProcessBubbleType||(e.ProcessBubbleType={})).color="color",i.opacity="opacity",i.size="size"},5313:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadExternalBubbleInteraction=void 0;const n=i(9007);e.loadExternalBubbleInteraction=async function(t){await t.addInteractor("externalBubble",(t=>new n.Bubbler(t)))}},2730:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Connector=void 0;const n=i(7373),o=i(6331),s=i(4260);class a extends s.ExternalInteractorBase{constructor(t){super(t)}isEnabled(){const t=this.container,e=t.interactivity.mouse,i=t.actualOptions.interactivity.events;return!(!i.onHover.enable||!e.position)&&(0,n.isInArray)(o.HoverMode.connect,i.onHover.mode)}reset(){}interact(){const t=this.container;if(t.actualOptions.interactivity.events.onHover.enable&&"mousemove"===t.interactivity.status){const e=t.interactivity.mouse.position;if(!e)return;const i=Math.abs(t.retina.connectModeRadius),n=t.particles.quadTree.queryCircle(e,i);let o=0;for(const e of n){const i=e.getPosition();for(const s of n.slice(o+1)){const n=s.getPosition(),o=Math.abs(t.retina.connectModeDistance),a=Math.abs(i.x-n.x),r=Math.abs(i.y-n.y);a<o&&r<o&&t.canvas.drawConnectLine(e,s)}++o}}}}e.Connector=a},9733:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadExternalConnectInteraction=void 0;const n=i(2730);e.loadExternalConnectInteraction=async function(t){await t.addInteractor("externalConnect",(t=>new n.Connector(t)))}},639:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Grabber=void 0;const n=i(7373),o=i(6331),s=i(4260);class a extends s.ExternalInteractorBase{constructor(t){super(t)}isEnabled(){const t=this.container,e=t.interactivity.mouse,i=t.actualOptions.interactivity.events;return i.onHover.enable&&!!e.position&&(0,n.isInArray)(o.HoverMode.grab,i.onHover.mode)}reset(){}interact(){var t;const e=this.container,i=e.actualOptions,o=i.interactivity;if(o.events.onHover.enable&&e.interactivity.status===n.Constants.mouseMoveEvent){const s=e.interactivity.mouse.position;if(!s)return;const a=e.retina.grabModeDistance,r=e.particles.quadTree.queryCircle(s,a);for(const l of r){const r=l.getPosition(),c=(0,n.getDistance)(r,s);if(c<=a){const r=o.modes.grab.links,d=r.opacity,h=d-c*d/a;if(h<=0)continue;const u=null!==(t=r.color)&&void 0!==t?t:l.options.links.color;if(!e.particles.grabLineColor){const t=i.interactivity.modes.grab.links;e.particles.grabLineColor=(0,n.getLinkRandomColor)(u,t.blink,t.consent)}const p=(0,n.getLinkColor)(l,void 0,e.particles.grabLineColor);if(!p)return;e.canvas.drawGrabLine(l,p,h,s)}}}}}e.Grabber=a},3066:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadExternalGrabInteraction=void 0;const n=i(639);e.loadExternalGrabInteraction=async function(t){await t.addInteractor("externalGrab",(t=>new n.Grabber(t)))}},7818:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Repulser=void 0;const n=i(6331),o=i(7373),s=i(5638),a=i(4260);class r extends a.ExternalInteractorBase{constructor(t){super(t)}isEnabled(){const t=this.container,e=t.actualOptions,i=t.interactivity.mouse,s=e.interactivity.events,a=s.onDiv,r=(0,o.isDivModeEnabled)(n.DivMode.repulse,a);if(!(r||s.onHover.enable&&i.position||s.onClick.enable&&i.clickPosition))return!1;const l=s.onHover.mode,c=s.onClick.mode;return(0,o.isInArray)(n.HoverMode.repulse,l)||(0,o.isInArray)(n.ClickMode.repulse,c)||r}reset(){}interact(){const t=this.container,e=t.actualOptions,i=t.interactivity.status===o.Constants.mouseMoveEvent,s=e.interactivity.events,a=s.onHover.enable,r=s.onHover.mode,l=s.onClick.enable,c=s.onClick.mode,d=s.onDiv;i&&a&&(0,o.isInArray)(n.HoverMode.repulse,r)?this.hoverRepulse():l&&(0,o.isInArray)(n.ClickMode.repulse,c)?this.clickRepulse():(0,o.divModeExecute)(n.DivMode.repulse,d,((t,e)=>this.singleSelectorRepulse(t,e)))}singleSelectorRepulse(t,e){const i=this.container,s=document.querySelectorAll(t);s.length&&s.forEach((t=>{const s=t,a=i.retina.pixelRatio,r={x:(s.offsetLeft+s.offsetWidth/2)*a,y:(s.offsetTop+s.offsetHeight/2)*a},l=s.offsetWidth/2*a,c=e.type===n.DivType.circle?new o.Circle(r.x,r.y,l):new o.Rectangle(s.offsetLeft*a,s.offsetTop*a,s.offsetWidth*a,s.offsetHeight*a),d=i.actualOptions.interactivity.modes.repulse.divs,h=(0,o.divMode)(d,s);this.processRepulse(r,l,c,h)}))}hoverRepulse(){const t=this.container,e=t.interactivity.mouse.position;if(!e)return;const i=t.retina.repulseModeDistance;this.processRepulse(e,i,new o.Circle(e.x,e.y,i))}processRepulse(t,e,i,n){var a;const r=this.container,l=r.particles.quadTree.query(i),c=r.actualOptions.interactivity.modes.repulse;for(const i of l){const{dx:r,dy:l,distance:d}=(0,o.getDistances)(i.position,t),h=(null!==(a=null==n?void 0:n.speed)&&void 0!==a?a:c.speed)*c.factor,u=(0,o.clamp)((0,o.calcEasing)(1-d/e,c.easing)*h,0,c.maxSpeed),p=s.Vector.create(0===d?h:r/d*u,0===d?h:l/d*u);i.position.addTo(p)}}clickRepulse(){const t=this.container;if(t.repulse.finish||(t.repulse.count||(t.repulse.count=0),t.repulse.count++,t.repulse.count===t.particles.count&&(t.repulse.finish=!0)),t.repulse.clicking){const e=t.retina.repulseModeDistance,i=Math.pow(e/6,3),n=t.interactivity.mouse.clickPosition;if(void 0===n)return;const a=new o.Circle(n.x,n.y,i),r=t.particles.quadTree.query(a);for(const e of r){const{dx:a,dy:r,distance:l}=(0,o.getDistances)(n,e.position),c=l**2,d=t.actualOptions.interactivity.modes.repulse.speed,h=-i*d/c;if(c<=i){t.repulse.particles.push(e);const i=s.Vector.create(a,r);i.length=h,e.velocity.setTo(i)}}}else if(!1===t.repulse.clicking){for(const e of t.repulse.particles)e.velocity.setTo(e.initialVelocity);t.repulse.particles=[]}}}e.Repulser=r},4842:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadExternalRepulseInteraction=void 0;const n=i(7818);e.loadExternalRepulseInteraction=async function(t){await t.addInteractor("externalRepulse",(t=>new n.Repulser(t)))}},557:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.TrailMaker=void 0;const n=i(7373),o=i(6331),s=i(4260);class a extends s.ExternalInteractorBase{constructor(t){super(t),this.delay=0}interact(t){var e,i,n,o;if(!this.container.retina.reduceFactor)return;const s=this.container,a=s.actualOptions.interactivity.modes.trail,r=1e3*a.delay/this.container.retina.reduceFactor;if(this.delay<r&&(this.delay+=t.value),this.delay<r)return;let l=!0;a.pauseOnStop&&(s.interactivity.mouse.position===this.lastPosition||(null===(e=s.interactivity.mouse.position)||void 0===e?void 0:e.x)===(null===(i=this.lastPosition)||void 0===i?void 0:i.x)&&(null===(n=s.interactivity.mouse.position)||void 0===n?void 0:n.y)===(null===(o=this.lastPosition)||void 0===o?void 0:o.y))&&(l=!1),s.interactivity.mouse.position?this.lastPosition={x:s.interactivity.mouse.position.x,y:s.interactivity.mouse.position.y}:delete this.lastPosition,l&&s.particles.push(a.quantity,s.interactivity.mouse,a.particles),this.delay-=r}isEnabled(){const t=this.container,e=t.actualOptions,i=t.interactivity.mouse,s=e.interactivity.events;return i.clicking&&i.inside&&!!i.position&&(0,n.isInArray)(o.ClickMode.trail,s.onClick.mode)||i.inside&&!!i.position&&(0,n.isInArray)(o.HoverMode.trail,s.onHover.mode)}reset(){}}e.TrailMaker=a},6910:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadExternalTrailInteraction=void 0;const n=i(557);e.loadExternalTrailInteraction=async function(t){await t.addInteractor("externalTrail",(t=>new n.TrailMaker(t)))}},8322:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Attractor=void 0;const n=i(7373),o=i(7472);class s extends o.ParticlesInteractorBase{constructor(t){super(t)}interact(t){var e;const i=this.container,o=null!==(e=t.retina.attractDistance)&&void 0!==e?e:i.retina.attractDistance,s=t.getPosition(),a=i.particles.quadTree.queryCircle(s,o);for(const e of a){if(t===e||!e.options.move.attract.enable||e.destroyed||e.spawning)continue;const i=e.getPosition(),{dx:o,dy:a}=(0,n.getDistances)(s,i),r=t.options.move.attract.rotate,l=o/(1e3*r.x),c=a/(1e3*r.y),d=e.size.value/t.size.value,h=1/d;t.velocity.x-=l*d,t.velocity.y-=c*d,e.velocity.x+=l*h,e.velocity.y+=c*h}}isEnabled(t){return t.options.move.attract.enable}reset(){}}e.Attractor=s},643:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadParticlesAttractInteraction=void 0;const n=i(8322);e.loadParticlesAttractInteraction=async function(t){await t.addInteractor("particlesAttract",(t=>new n.Attractor(t)))}},4041:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Collider=void 0;const n=i(6331),o=i(7373),s=i(7472);function a(t,e){(0,o.circleBounce)((0,o.circleBounceDataFromParticle)(t),(0,o.circleBounceDataFromParticle)(e))}class r extends s.ParticlesInteractorBase{constructor(t){super(t)}isEnabled(t){return t.options.collisions.enable}reset(){}interact(t){const e=this.container,i=t.getPosition(),n=t.getRadius(),s=e.particles.quadTree.queryCircle(i,2*n);for(const e of s){if(t===e||!e.options.collisions.enable||t.options.collisions.mode!==e.options.collisions.mode||e.destroyed||e.spawning)continue;const s=e.getPosition();Math.round(i.z)===Math.round(s.z)&&((0,o.getDistance)(i,s)<=n+e.getRadius()&&this.resolveCollision(t,e))}}resolveCollision(t,e){switch(t.options.collisions.mode){case n.CollisionMode.absorb:this.absorb(t,e);break;case n.CollisionMode.bounce:a(t,e);break;case n.CollisionMode.destroy:!function(t,e){t.unbreakable||e.unbreakable||a(t,e),void 0===t.getRadius()&&void 0!==e.getRadius()?t.destroy():void 0!==t.getRadius()&&void 0===e.getRadius()?e.destroy():void 0!==t.getRadius()&&void 0!==e.getRadius()&&(t.getRadius()>=e.getRadius()?e.destroy():t.destroy())}(t,e)}}absorb(t,e){const i=this.container,n=i.fpsLimit/1e3;if(void 0===t.getRadius()&&void 0!==e.getRadius())t.destroy();else if(void 0!==t.getRadius()&&void 0===e.getRadius())e.destroy();else if(void 0!==t.getRadius()&&void 0!==e.getRadius())if(t.getRadius()>=e.getRadius()){const s=(0,o.clamp)(t.getRadius()/e.getRadius(),0,e.getRadius())*n;t.size.value+=s,e.size.value-=s,e.getRadius()<=i.retina.pixelRatio&&(e.size.value=0,e.destroy())}else{const s=(0,o.clamp)(e.getRadius()/t.getRadius(),0,t.getRadius())*n;t.size.value-=s,e.size.value+=s,t.getRadius()<=i.retina.pixelRatio&&(t.size.value=0,t.destroy())}}}e.Collider=r},8989:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadParticlesCollisionsInteraction=void 0;const n=i(4041);e.loadParticlesCollisionsInteraction=async function(t){await t.addInteractor("particlesCollisions",(t=>new n.Collider(t)))}},6385:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.LinkInstance=void 0;const n=i(7373);e.LinkInstance=class{constructor(t){this.container=t}particleCreated(t){t.links=[]}particleDestroyed(t){t.links=[]}drawParticle(t,e){const i=e,n=this.container,o=n.particles,s=e.options;if(i.links.length>0){t.save();const e=i.links.filter((t=>n.particles.getLinkFrequency(i,t.destination)<=s.links.frequency));for(const t of e){const a=t.destination;if(s.links.triangles.enable){const r=e.map((t=>t.destination)),l=a.links.filter((t=>n.particles.getLinkFrequency(a,t.destination)<=a.options.links.frequency&&r.indexOf(t.destination)>=0));if(l.length)for(const e of l){const n=e.destination;o.getTriangleFrequency(i,a,n)>s.links.triangles.frequency||this.drawLinkTriangle(i,t,e)}}t.opacity>0&&n.retina.linksWidth>0&&this.drawLinkLine(i,t)}t.restore()}}drawLinkTriangle(t,e,i){var o;const s=this.container,a=s.actualOptions,r=e.destination,l=i.destination,c=t.options.links.triangles,d=null!==(o=c.opacity)&&void 0!==o?o:(e.opacity+i.opacity)/2;if(d<=0)return;const h=t.getPosition(),u=r.getPosition(),p=l.getPosition();s.canvas.draw((e=>{if((0,n.getDistance)(h,u)>s.retina.linksDistance||(0,n.getDistance)(p,u)>s.retina.linksDistance||(0,n.getDistance)(p,h)>s.retina.linksDistance)return;let i=(0,n.colorToRgb)(c.color);if(!i){const e=t.options.links,o=void 0!==e.id?s.particles.linksColors.get(e.id):s.particles.linksColor;i=(0,n.getLinkColor)(t,r,o)}i&&(0,n.drawLinkTriangle)(e,h,u,p,a.backgroundMask.enable,a.backgroundMask.composite,i,d)}))}drawLinkLine(t,e){const i=this.container,o=i.actualOptions,s=e.destination;let a=e.opacity;const r=t.getPosition(),l=s.getPosition();i.canvas.draw((e=>{var c,d;let h;const u=t.options.twinkle.lines;if(u.enable){const t=u.frequency,e=(0,n.colorToRgb)(u.color);Math.random()<t&&void 0!==e&&(h=e,a=u.opacity)}if(!h){const e=t.options.links,o=void 0!==e.id?i.particles.linksColors.get(e.id):i.particles.linksColor;h=(0,n.getLinkColor)(t,s,o)}if(!h)return;const p=null!==(c=t.retina.linksWidth)&&void 0!==c?c:i.retina.linksWidth,v=null!==(d=t.retina.linksDistance)&&void 0!==d?d:i.retina.linksDistance;(0,n.drawLinkLine)(e,p,r,l,v,i.canvas.size,t.options.links.warp,o.backgroundMask.enable,o.backgroundMask.composite,h,a,t.options.links.shadow)}))}}},9597:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Linker=void 0;const n=i(7373),o=i(7472);function s(t,e,i,o,s){let a=(0,n.getDistance)(t,e);if(!s||a<=i)return a;const r={x:e.x-o.width,y:e.y};if(a=(0,n.getDistance)(t,r),a<=i)return a;const l={x:e.x-o.width,y:e.y-o.height};if(a=(0,n.getDistance)(t,l),a<=i)return a;const c={x:e.x,y:e.y-o.height};return a=(0,n.getDistance)(t,c),a}class a extends o.ParticlesInteractorBase{constructor(t){super(t)}isEnabled(t){return t.options.links.enable}reset(){}interact(t){var e;t.links=[];const i=t.getPosition(),o=this.container,a=o.canvas.size;if(i.x<0||i.y<0||i.x>a.width||i.y>a.height)return;const r=t.options.links,l=r.opacity,c=null!==(e=t.retina.linksDistance)&&void 0!==e?e:o.retina.linksDistance,d=r.warp,h=d?new n.CircleWarp(i.x,i.y,c,a):new n.Circle(i.x,i.y,c),u=o.particles.quadTree.query(h);for(const e of u){const n=e.options.links;if(t===e||!n.enable||r.id!==n.id||e.spawning||e.destroyed||-1!==t.links.map((t=>t.destination)).indexOf(e)||-1!==e.links.map((t=>t.destination)).indexOf(t))continue;const o=e.getPosition();if(o.x<0||o.y<0||o.x>a.width||o.y>a.height)continue;const h=s(i,o,c,a,d&&n.warp);if(h>c)return;const u=(1-h/c)*l;this.setColor(t),t.links.push({destination:e,opacity:u})}}setColor(t){const e=this.container,i=t.options.links;let o=void 0===i.id?e.particles.linksColor:e.particles.linksColors.get(i.id);if(!o){const t=i.color;o=(0,n.getLinkRandomColor)(t,i.blink,i.consent),void 0===i.id?e.particles.linksColor=o:e.particles.linksColors.set(i.id,o)}}}e.Linker=a},884:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadParticlesLinksInteraction=e.loadInteraction=void 0;const n=i(9597),o=i(4152);async function s(t){await t.addInteractor("particlesLinks",(t=>new n.Linker(t)))}e.loadInteraction=s,e.loadParticlesLinksInteraction=async function(t){await s(t),await(0,o.loadPlugin)(t)}},4152:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadPlugin=void 0;const n=i(6385);class o{constructor(){this.id="links"}getPlugin(t){return new n.LinkInstance(t)}needsPlugin(){return!0}loadOptions(){}}e.loadPlugin=async function(t){const e=new o;await t.addPlugin(e)}},192:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.AnimatableColor=void 0;const n=i(3151),o=i(9410);class s extends n.OptionsColor{constructor(){super(),this.animation=new o.HslAnimation}static create(t,e){const i=new s;return i.load(t),void 0!==e&&("string"==typeof e||e instanceof Array?i.load({value:e}):i.load(e)),i}load(t){if(super.load(t),!t)return;const e=t.animation;void 0!==e&&(void 0!==e.enable?this.animation.h.load(e):this.animation.load(t.animation))}}e.AnimatableColor=s},2372:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GradientColorOpacityAnimation=e.GradientAngleAnimation=e.AnimatableGradientColor=e.GradientColorOpacity=e.GradientAngle=e.AnimatableGradient=void 0;const n=i(6331),o=i(192),s=i(7373);e.AnimatableGradient=class{constructor(){this.angle=new a,this.colors=[],this.type=n.GradientType.random}load(t){t&&(this.angle.load(t.angle),void 0!==t.colors&&(this.colors=t.colors.map((t=>{const e=new l;return e.load(t),e}))),void 0!==t.type&&(this.type=t.type))}};class a{constructor(){this.value=0,this.animation=new c,this.direction=n.RotateDirection.clockwise}load(t){t&&(this.animation.load(t.animation),void 0!==t.value&&(this.value=t.value),void 0!==t.direction&&(this.direction=t.direction))}}e.GradientAngle=a;class r{constructor(){this.value=0,this.animation=new d}load(t){t&&(this.animation.load(t.animation),void 0!==t.value&&(this.value=(0,s.setRangeValue)(t.value)))}}e.GradientColorOpacity=r;class l{constructor(){this.stop=0,this.value=new o.AnimatableColor}load(t){t&&(void 0!==t.stop&&(this.stop=t.stop),this.value=o.AnimatableColor.create(this.value,t.value),void 0!==t.opacity&&(this.opacity=new r,"number"==typeof t.opacity?this.opacity.value=t.opacity:this.opacity.load(t.opacity)))}}e.AnimatableGradientColor=l;class c{constructor(){this.count=0,this.enable=!1,this.speed=0,this.sync=!1}load(t){t&&(void 0!==t.count&&(this.count=t.count),void 0!==t.enable&&(this.enable=t.enable),void 0!==t.speed&&(this.speed=t.speed),void 0!==t.sync&&(this.sync=t.sync))}}e.GradientAngleAnimation=c;class d{constructor(){this.count=0,this.enable=!1,this.speed=0,this.sync=!1,this.startValue=n.StartValueType.random}load(t){t&&(void 0!==t.count&&(this.count=t.count),void 0!==t.enable&&(this.enable=t.enable),void 0!==t.speed&&(this.speed=t.speed),void 0!==t.sync&&(this.sync=t.sync),void 0!==t.startValue&&(this.startValue=t.startValue))}}e.GradientColorOpacityAnimation=d},9089:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.AnimationOptions=void 0,e.AnimationOptions=class{constructor(){this.count=0,this.enable=!1,this.speed=1,this.sync=!1}load(t){t&&(void 0!==t.count&&(this.count=t.count),void 0!==t.enable&&(this.enable=t.enable),void 0!==t.speed&&(this.speed=t.speed),void 0!==t.sync&&(this.sync=t.sync))}}},7133:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Background=void 0;const n=i(3151);e.Background=class{constructor(){this.color=new n.OptionsColor,this.color.value="",this.image="",this.position="",this.repeat="",this.size="",this.opacity=1}load(t){void 0!==t&&(void 0!==t.color&&(this.color=n.OptionsColor.create(this.color,t.color)),void 0!==t.image&&(this.image=t.image),void 0!==t.position&&(this.position=t.position),void 0!==t.repeat&&(this.repeat=t.repeat),void 0!==t.size&&(this.size=t.size),void 0!==t.opacity&&(this.opacity=t.opacity))}}},5649:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.BackgroundMask=void 0;const n=i(4065);e.BackgroundMask=class{constructor(){this.composite="destination-out",this.cover=new n.BackgroundMaskCover,this.enable=!1}load(t){if(void 0!==t){if(void 0!==t.composite&&(this.composite=t.composite),void 0!==t.cover){const e=t.cover,i="string"==typeof t.cover?{color:t.cover}:t.cover;this.cover.load(void 0!==e.color?e:{color:i})}void 0!==t.enable&&(this.enable=t.enable)}}}},4065:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.BackgroundMaskCover=void 0;const n=i(3151);e.BackgroundMaskCover=class{constructor(){this.color=new n.OptionsColor,this.opacity=1}load(t){void 0!==t&&(void 0!==t.color&&(this.color=n.OptionsColor.create(this.color,t.color)),void 0!==t.opacity&&(this.opacity=t.opacity))}}},5251:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ColorAnimation=void 0;const n=i(7373);e.ColorAnimation=class{constructor(){this.count=0,this.enable=!1,this.offset=0,this.speed=1,this.sync=!0}load(t){void 0!==t&&(void 0!==t.count&&(this.count=t.count),void 0!==t.enable&&(this.enable=t.enable),void 0!==t.offset&&(this.offset=(0,n.setRangeValue)(t.offset)),void 0!==t.speed&&(this.speed=t.speed),void 0!==t.sync&&(this.sync=t.sync))}}},8119:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.FullScreen=void 0,e.FullScreen=class{constructor(){this.enable=!0,this.zIndex=0}load(t){t&&(void 0!==t.enable&&(this.enable=t.enable),void 0!==t.zIndex&&(this.zIndex=t.zIndex))}}},9410:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.HslAnimation=void 0;const n=i(5251);e.HslAnimation=class{constructor(){this.h=new n.ColorAnimation,this.s=new n.ColorAnimation,this.l=new n.ColorAnimation}load(t){t&&(this.h.load(t.h),this.s.load(t.s),this.l.load(t.l))}}},8247:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ClickEvent=void 0,e.ClickEvent=class{constructor(){this.enable=!1,this.mode=[]}load(t){void 0!==t&&(void 0!==t.enable&&(this.enable=t.enable),void 0!==t.mode&&(this.mode=t.mode))}}},8643:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.DivEvent=void 0;const n=i(6331);e.DivEvent=class{constructor(){this.selectors=[],this.enable=!1,this.mode=[],this.type=n.DivType.circle}get elementId(){return this.ids}set elementId(t){this.ids=t}get el(){return this.elementId}set el(t){this.elementId=t}get ids(){return this.selectors instanceof Array?this.selectors.map((t=>t.replace("#",""))):this.selectors.replace("#","")}set ids(t){this.selectors=t instanceof Array?t.map((t=>`#${t}`)):`#${t}`}load(t){var e,i;if(void 0===t)return;const n=null!==(i=null!==(e=t.ids)&&void 0!==e?e:t.elementId)&&void 0!==i?i:t.el;void 0!==n&&(this.ids=n),void 0!==t.selectors&&(this.selectors=t.selectors),void 0!==t.enable&&(this.enable=t.enable),void 0!==t.mode&&(this.mode=t.mode),void 0!==t.type&&(this.type=t.type)}}},280:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Events=void 0;const n=i(8247),o=i(8643),s=i(406);e.Events=class{constructor(){this.onClick=new n.ClickEvent,this.onDiv=new o.DivEvent,this.onHover=new s.HoverEvent,this.resize=!0}get onclick(){return this.onClick}set onclick(t){this.onClick=t}get ondiv(){return this.onDiv}set ondiv(t){this.onDiv=t}get onhover(){return this.onHover}set onhover(t){this.onHover=t}load(t){var e,i,n;if(void 0===t)return;this.onClick.load(null!==(e=t.onClick)&&void 0!==e?e:t.onclick);const s=null!==(i=t.onDiv)&&void 0!==i?i:t.ondiv;void 0!==s&&(s instanceof Array?this.onDiv=s.map((t=>{const e=new o.DivEvent;return e.load(t),e})):(this.onDiv=new o.DivEvent,this.onDiv.load(s))),this.onHover.load(null!==(n=t.onHover)&&void 0!==n?n:t.onhover),void 0!==t.resize&&(this.resize=t.resize)}}},406:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.HoverEvent=void 0;const n=i(2409);e.HoverEvent=class{constructor(){this.enable=!1,this.mode=[],this.parallax=new n.Parallax}load(t){void 0!==t&&(void 0!==t.enable&&(this.enable=t.enable),void 0!==t.mode&&(this.mode=t.mode),this.parallax.load(t.parallax))}}},2409:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Parallax=void 0,e.Parallax=class{constructor(){this.enable=!1,this.force=2,this.smooth=10}load(t){void 0!==t&&(void 0!==t.enable&&(this.enable=t.enable),void 0!==t.force&&(this.force=t.force),void 0!==t.smooth&&(this.smooth=t.smooth))}}},1482:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Interactivity=void 0;const n=i(6331),o=i(280),s=i(8174);e.Interactivity=class{constructor(){this.detectsOn=n.InteractivityDetect.window,this.events=new o.Events,this.modes=new s.Modes}get detect_on(){return this.detectsOn}set detect_on(t){this.detectsOn=t}load(t){var e,i,o;if(void 0===t)return;const s=null!==(e=t.detectsOn)&&void 0!==e?e:t.detect_on;void 0!==s&&(this.detectsOn=s),this.events.load(t.events),this.modes.load(t.modes),!0===(null===(o=null===(i=t.modes)||void 0===i?void 0:i.slow)||void 0===o?void 0:o.active)&&(this.events.onHover.mode instanceof Array?this.events.onHover.mode.indexOf(n.HoverMode.slow)<0&&this.events.onHover.mode.push(n.HoverMode.slow):this.events.onHover.mode!==n.HoverMode.slow&&(this.events.onHover.mode=[this.events.onHover.mode,n.HoverMode.slow]))}}},9256:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Attract=void 0;const n=i(6331);e.Attract=class{constructor(){this.distance=200,this.duration=.4,this.easing=n.EasingType.easeOutQuad,this.factor=1,this.maxSpeed=50,this.speed=1}load(t){t&&(void 0!==t.distance&&(this.distance=t.distance),void 0!==t.duration&&(this.duration=t.duration),void 0!==t.easing&&(this.easing=t.easing),void 0!==t.factor&&(this.factor=t.factor),void 0!==t.maxSpeed&&(this.maxSpeed=t.maxSpeed),void 0!==t.speed&&(this.speed=t.speed))}}},9953:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Bounce=void 0,e.Bounce=class{constructor(){this.distance=200}load(t){t&&void 0!==t.distance&&(this.distance=t.distance)}}},3397:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Bubble=void 0;const n=i(1334),o=i(5779);class s extends o.BubbleBase{load(t){super.load(t),void 0!==t&&void 0!==t.divs&&(t.divs instanceof Array?this.divs=t.divs.map((t=>{const e=new n.BubbleDiv;return e.load(t),e})):((this.divs instanceof Array||!this.divs)&&(this.divs=new n.BubbleDiv),this.divs.load(t.divs)))}}e.Bubble=s},5779:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.BubbleBase=void 0;const n=i(3151);e.BubbleBase=class{constructor(){this.distance=200,this.duration=.4,this.mix=!1}load(t){void 0!==t&&(void 0!==t.distance&&(this.distance=t.distance),void 0!==t.duration&&(this.duration=t.duration),void 0!==t.mix&&(this.mix=t.mix),void 0!==t.opacity&&(this.opacity=t.opacity),void 0!==t.color&&(t.color instanceof Array?this.color=t.color.map((t=>n.OptionsColor.create(void 0,t))):(this.color instanceof Array&&(this.color=new n.OptionsColor),this.color=n.OptionsColor.create(this.color,t.color))),void 0!==t.size&&(this.size=t.size))}}},1334:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.BubbleDiv=void 0;const n=i(5779);class o extends n.BubbleBase{constructor(){super(),this.selectors=[]}get ids(){return this.selectors instanceof Array?this.selectors.map((t=>t.replace("#",""))):this.selectors.replace("#","")}set ids(t){this.selectors=t instanceof Array?t.map((t=>`#${t}`)):`#${t}`}load(t){super.load(t),void 0!==t&&(void 0!==t.ids&&(this.ids=t.ids),void 0!==t.selectors&&(this.selectors=t.selectors))}}e.BubbleDiv=o},2426:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Connect=void 0;const n=i(9531);e.Connect=class{constructor(){this.distance=80,this.links=new n.ConnectLinks,this.radius=60}get line_linked(){return this.links}set line_linked(t){this.links=t}get lineLinked(){return this.links}set lineLinked(t){this.links=t}load(t){var e,i;void 0!==t&&(void 0!==t.distance&&(this.distance=t.distance),this.links.load(null!==(i=null!==(e=t.links)&&void 0!==e?e:t.lineLinked)&&void 0!==i?i:t.line_linked),void 0!==t.radius&&(this.radius=t.radius))}}},9531:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ConnectLinks=void 0,e.ConnectLinks=class{constructor(){this.opacity=.5}load(t){void 0!==t&&void 0!==t.opacity&&(this.opacity=t.opacity)}}},2095:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Grab=void 0;const n=i(8985);e.Grab=class{constructor(){this.distance=100,this.links=new n.GrabLinks}get line_linked(){return this.links}set line_linked(t){this.links=t}get lineLinked(){return this.links}set lineLinked(t){this.links=t}load(t){var e,i;void 0!==t&&(void 0!==t.distance&&(this.distance=t.distance),this.links.load(null!==(i=null!==(e=t.links)&&void 0!==e?e:t.lineLinked)&&void 0!==i?i:t.line_linked))}}},8985:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GrabLinks=void 0;const n=i(3151);e.GrabLinks=class{constructor(){this.blink=!1,this.consent=!1,this.opacity=1}load(t){void 0!==t&&(void 0!==t.blink&&(this.blink=t.blink),void 0!==t.color&&(this.color=n.OptionsColor.create(this.color,t.color)),void 0!==t.consent&&(this.consent=t.consent),void 0!==t.opacity&&(this.opacity=t.opacity))}}},9867:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Light=void 0;const n=i(5302),o=i(3632);e.Light=class{constructor(){this.area=new n.LightArea,this.shadow=new o.LightShadow}load(t){void 0!==t&&(this.area.load(t.area),this.shadow.load(t.shadow))}}},5302:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.LightArea=void 0;const n=i(3272);e.LightArea=class{constructor(){this.gradient=new n.LightGradient,this.radius=1e3}load(t){void 0!==t&&(this.gradient.load(t.gradient),void 0!==t.radius&&(this.radius=t.radius))}}},3272:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.LightGradient=void 0;const n=i(3151);e.LightGradient=class{constructor(){this.start=new n.OptionsColor,this.stop=new n.OptionsColor,this.start.value="#ffffff",this.stop.value="#000000"}load(t){void 0!==t&&(this.start=n.OptionsColor.create(this.start,t.start),this.stop=n.OptionsColor.create(this.stop,t.stop))}}},3632:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.LightShadow=void 0;const n=i(3151);e.LightShadow=class{constructor(){this.color=new n.OptionsColor,this.color.value="#000000",this.length=2e3}load(t){void 0!==t&&(this.color=n.OptionsColor.create(this.color,t.color),void 0!==t.length&&(this.length=t.length))}}},8174:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Modes=void 0;const n=i(3397),o=i(2426),s=i(2095),a=i(8197),r=i(5691),l=i(3355),c=i(2939),d=i(1802),h=i(9256),u=i(9867),p=i(9953);e.Modes=class{constructor(){this.attract=new h.Attract,this.bounce=new p.Bounce,this.bubble=new n.Bubble,this.connect=new o.Connect,this.grab=new s.Grab,this.light=new u.Light,this.push=new r.Push,this.remove=new a.Remove,this.repulse=new l.Repulse,this.slow=new c.Slow,this.trail=new d.Trail}load(t){void 0!==t&&(this.attract.load(t.attract),this.bubble.load(t.bubble),this.connect.load(t.connect),this.grab.load(t.grab),this.light.load(t.light),this.push.load(t.push),this.remove.load(t.remove),this.repulse.load(t.repulse),this.slow.load(t.slow),this.trail.load(t.trail))}}},5691:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Push=void 0,e.Push=class{constructor(){this.default=!0,this.groups=[],this.quantity=4}get particles_nb(){return this.quantity}set particles_nb(t){this.quantity=t}load(t){var e;if(void 0===t)return;void 0!==t.default&&(this.default=t.default),void 0!==t.groups&&(this.groups=t.groups.map((t=>t))),this.groups.length||(this.default=!0);const i=null!==(e=t.quantity)&&void 0!==e?e:t.particles_nb;void 0!==i&&(this.quantity=i)}}},8197:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Remove=void 0,e.Remove=class{constructor(){this.quantity=2}get particles_nb(){return this.quantity}set particles_nb(t){this.quantity=t}load(t){var e;if(void 0===t)return;const i=null!==(e=t.quantity)&&void 0!==e?e:t.particles_nb;void 0!==i&&(this.quantity=i)}}},3355:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Repulse=void 0;const n=i(5879),o=i(5267);class s extends o.RepulseBase{load(t){super.load(t),void 0!==(null==t?void 0:t.divs)&&(t.divs instanceof Array?this.divs=t.divs.map((t=>{const e=new n.RepulseDiv;return e.load(t),e})):((this.divs instanceof Array||!this.divs)&&(this.divs=new n.RepulseDiv),this.divs.load(t.divs)))}}e.Repulse=s},5267:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.RepulseBase=void 0;const n=i(6331);e.RepulseBase=class{constructor(){this.distance=200,this.duration=.4,this.factor=100,this.speed=1,this.maxSpeed=50,this.easing=n.EasingType.easeOutQuad}load(t){t&&(void 0!==t.distance&&(this.distance=t.distance),void 0!==t.duration&&(this.duration=t.duration),void 0!==t.easing&&(this.easing=t.easing),void 0!==t.factor&&(this.factor=t.factor),void 0!==t.speed&&(this.speed=t.speed),void 0!==t.maxSpeed&&(this.maxSpeed=t.maxSpeed))}}},5879:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.RepulseDiv=void 0;const n=i(5267);class o extends n.RepulseBase{constructor(){super(),this.selectors=[]}get ids(){return this.selectors instanceof Array?this.selectors.map((t=>t.replace("#",""))):this.selectors.replace("#","")}set ids(t){this.selectors=t instanceof Array?t.map((()=>`#${t}`)):`#${t}`}load(t){super.load(t),void 0!==t&&(void 0!==t.ids&&(this.ids=t.ids),void 0!==t.selectors&&(this.selectors=t.selectors))}}e.RepulseDiv=o},2939:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Slow=void 0,e.Slow=class{constructor(){this.factor=3,this.radius=200}get active(){return!1}set active(t){}load(t){void 0!==t&&(void 0!==t.factor&&(this.factor=t.factor),void 0!==t.radius&&(this.radius=t.radius))}}},1802:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Trail=void 0;const n=i(7373);e.Trail=class{constructor(){this.delay=1,this.pauseOnStop=!1,this.quantity=1}load(t){void 0!==t&&(void 0!==t.delay&&(this.delay=t.delay),void 0!==t.quantity&&(this.quantity=t.quantity),void 0!==t.particles&&(this.particles=(0,n.deepExtend)({},t.particles)),void 0!==t.pauseOnStop&&(this.pauseOnStop=t.pauseOnStop))}}},8758:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ManualParticle=void 0;const n=i(7373);e.ManualParticle=class{load(t){var e,i;t&&(void 0!==t.position&&(this.position={x:null!==(e=t.position.x)&&void 0!==e?e:50,y:null!==(i=t.position.y)&&void 0!==i?i:50}),void 0!==t.options&&(this.options=(0,n.deepExtend)({},t.options)))}}},6218:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Motion=void 0;const n=i(420);e.Motion=class{constructor(){this.disable=!1,this.reduce=new n.MotionReduce}load(t){t&&(void 0!==t.disable&&(this.disable=t.disable),this.reduce.load(t.reduce))}}},420:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.MotionReduce=void 0,e.MotionReduce=class{constructor(){this.factor=4,this.value=!0}load(t){t&&(void 0!==t.factor&&(this.factor=t.factor),void 0!==t.value&&(this.value=t.value))}}},6989:function(t,e,i){var n,o,s=this&&this.__classPrivateFieldGet||function(t,e,i,n){if("a"===i&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===i?n:"a"===i?n.call(t):n?n.value:e.get(t)};Object.defineProperty(e,"__esModule",{value:!0}),e.Options=void 0;const a=i(1482),r=i(8029),l=i(5649),c=i(7133),d=i(7373),h=i(7851),u=i(6331),p=i(8119),v=i(6218),y=i(8758),g=i(7848);e.Options=class{constructor(){n.add(this),this.autoPlay=!0,this.background=new c.Background,this.backgroundMask=new l.BackgroundMask,this.fullScreen=new p.FullScreen,this.detectRetina=!0,this.duration=0,this.fpsLimit=60,this.interactivity=new a.Interactivity,this.manualParticles=[],this.motion=new v.Motion,this.particles=new r.ParticlesOptions,this.pauseOnBlur=!0,this.pauseOnOutsideViewport=!0,this.responsive=[],this.themes=[],this.zLayers=100}get fps_limit(){return this.fpsLimit}set fps_limit(t){this.fpsLimit=t}get retina_detect(){return this.detectRetina}set retina_detect(t){this.detectRetina=t}get backgroundMode(){return this.fullScreen}set backgroundMode(t){this.fullScreen.load(t)}load(t){var e,i,a,r,l;if(void 0===t)return;if(void 0!==t.preset)if(t.preset instanceof Array)for(const e of t.preset)this.importPreset(e);else this.importPreset(t.preset);void 0!==t.autoPlay&&(this.autoPlay=t.autoPlay);const c=null!==(e=t.detectRetina)&&void 0!==e?e:t.retina_detect;void 0!==c&&(this.detectRetina=c),void 0!==t.duration&&(this.duration=t.duration);const p=null!==(i=t.fpsLimit)&&void 0!==i?i:t.fps_limit;void 0!==p&&(this.fpsLimit=p),void 0!==t.pauseOnBlur&&(this.pauseOnBlur=t.pauseOnBlur),void 0!==t.pauseOnOutsideViewport&&(this.pauseOnOutsideViewport=t.pauseOnOutsideViewport),void 0!==t.zLayers&&(this.zLayers=t.zLayers),this.background.load(t.background);const v=null!==(a=t.fullScreen)&&void 0!==a?a:t.backgroundMode;if("boolean"==typeof v?this.fullScreen.enable=v:this.fullScreen.load(v),this.backgroundMask.load(t.backgroundMask),this.interactivity.load(t.interactivity),void 0!==t.manualParticles&&(this.manualParticles=t.manualParticles.map((t=>{const e=new y.ManualParticle;return e.load(t),e}))),this.motion.load(t.motion),this.particles.load(t.particles),d.Plugins.loadOptions(this,t),void 0!==t.responsive)for(const e of t.responsive){const t=new g.Responsive;t.load(e),this.responsive.push(t)}if(this.responsive.sort(((t,e)=>t.maxWidth-e.maxWidth)),void 0!==t.themes)for(const e of t.themes){const t=new h.Theme;t.load(e),this.themes.push(t)}this.defaultDarkTheme=null===(r=s(this,n,"m",o).call(this,u.ThemeMode.dark))||void 0===r?void 0:r.name,this.defaultLightTheme=null===(l=s(this,n,"m",o).call(this,u.ThemeMode.light))||void 0===l?void 0:l.name}setTheme(t){if(t){const e=this.themes.find((e=>e.name===t));e&&this.load(e.options)}else{const t="undefined"!=typeof matchMedia&&matchMedia("(prefers-color-scheme: dark)"),e=t&&t.matches,i=s(this,n,"m",o).call(this,e?u.ThemeMode.dark:u.ThemeMode.light);i&&this.load(i.options)}}setResponsive(t,e,i){this.load(i);const n=this.responsive.find((i=>i.mode===u.ResponsiveMode.screen&&screen?i.maxWidth*e>screen.availWidth:i.maxWidth*e>t));return this.load(null==n?void 0:n.options),null==n?void 0:n.maxWidth}importPreset(t){this.load(d.Plugins.getPreset(t))}},n=new WeakSet,o=function(t){var e;return null!==(e=this.themes.find((e=>e.default.value&&e.default.mode===t)))&&void 0!==e?e:this.themes.find((t=>t.default.value&&t.default.mode===u.ThemeMode.any))}},3151:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OptionsColor=void 0;class i{constructor(){this.value="#fff"}static create(t,e){const n=new i;return n.load(t),void 0!==e&&("string"==typeof e||e instanceof Array?n.load({value:e}):n.load(e)),n}load(t){void 0!==(null==t?void 0:t.value)&&(this.value=t.value)}}e.OptionsColor=i},2203:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Bounce=void 0;const n=i(3294);e.Bounce=class{constructor(){this.horizontal=new n.BounceFactor,this.vertical=new n.BounceFactor}load(t){t&&(this.horizontal.load(t.horizontal),this.vertical.load(t.vertical))}}},3294:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.BounceFactor=void 0;const n=i(5707);class o extends n.ValueWithRandom{constructor(){super(),this.random.minimumValue=.1,this.value=1}}e.BounceFactor=o},1958:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Collisions=void 0;const n=i(6331),o=i(2203),s=i(114);e.Collisions=class{constructor(){this.bounce=new o.Bounce,this.enable=!1,this.mode=n.CollisionMode.bounce,this.overlap=new s.CollisionsOverlap}load(t){void 0!==t&&(this.bounce.load(t.bounce),void 0!==t.enable&&(this.enable=t.enable),void 0!==t.mode&&(this.mode=t.mode),this.overlap.load(t.overlap))}}},114:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.CollisionsOverlap=void 0,e.CollisionsOverlap=class{constructor(){this.enable=!0,this.retries=0}load(t){t&&(void 0!==t.enable&&(this.enable=t.enable),void 0!==t.retries&&(this.retries=t.retries))}}},8455:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Destroy=void 0;const n=i(6331),o=i(4499);e.Destroy=class{constructor(){this.mode=n.DestroyMode.none,this.split=new o.Split}load(t){t&&(void 0!==t.mode&&(this.mode=t.mode),this.split.load(t.split))}}},4499:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Split=void 0;const n=i(8762),o=i(4250),s=i(7373);e.Split=class{constructor(){this.count=1,this.factor=new n.SplitFactor,this.rate=new o.SplitRate,this.sizeOffset=!0}load(t){t&&(void 0!==t.count&&(this.count=t.count),this.factor.load(t.factor),this.rate.load(t.rate),void 0!==t.particles&&(this.particles=(0,s.deepExtend)({},t.particles)),void 0!==t.sizeOffset&&(this.sizeOffset=t.sizeOffset))}}},8762:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SplitFactor=void 0;const n=i(5707);class o extends n.ValueWithRandom{constructor(){super(),this.value=3}}e.SplitFactor=o},4250:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SplitRate=void 0;const n=i(5707);class o extends n.ValueWithRandom{constructor(){super(),this.value={min:4,max:9}}}e.SplitRate=o},2165:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Life=void 0;const n=i(2121),o=i(3878);e.Life=class{constructor(){this.count=0,this.delay=new n.LifeDelay,this.duration=new o.LifeDuration}load(t){void 0!==t&&(void 0!==t.count&&(this.count=t.count),this.delay.load(t.delay),this.duration.load(t.duration))}}},2121:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.LifeDelay=void 0;const n=i(5707);class o extends n.ValueWithRandom{constructor(){super(),this.sync=!1}load(t){t&&(super.load(t),void 0!==t.sync&&(this.sync=t.sync))}}e.LifeDelay=o},3878:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.LifeDuration=void 0;const n=i(5707);class o extends n.ValueWithRandom{constructor(){super(),this.random.minimumValue=1e-4,this.sync=!1}load(t){void 0!==t&&(super.load(t),void 0!==t.sync&&(this.sync=t.sync))}}e.LifeDuration=o},8854:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Links=void 0;const n=i(9058),o=i(6836),s=i(3151);e.Links=class{constructor(){this.blink=!1,this.color=new s.OptionsColor,this.consent=!1,this.distance=100,this.enable=!1,this.frequency=1,this.opacity=1,this.shadow=new n.LinksShadow,this.triangles=new o.LinksTriangle,this.width=1,this.warp=!1}load(t){void 0!==t&&(void 0!==t.id&&(this.id=t.id),void 0!==t.blink&&(this.blink=t.blink),this.color=s.OptionsColor.create(this.color,t.color),void 0!==t.consent&&(this.consent=t.consent),void 0!==t.distance&&(this.distance=t.distance),void 0!==t.enable&&(this.enable=t.enable),void 0!==t.frequency&&(this.frequency=t.frequency),void 0!==t.opacity&&(this.opacity=t.opacity),this.shadow.load(t.shadow),this.triangles.load(t.triangles),void 0!==t.width&&(this.width=t.width),void 0!==t.warp&&(this.warp=t.warp))}}},9058:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.LinksShadow=void 0;const n=i(3151);e.LinksShadow=class{constructor(){this.blur=5,this.color=new n.OptionsColor,this.enable=!1,this.color.value="#00ff00"}load(t){void 0!==t&&(void 0!==t.blur&&(this.blur=t.blur),this.color=n.OptionsColor.create(this.color,t.color),void 0!==t.enable&&(this.enable=t.enable))}}},6836:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.LinksTriangle=void 0;const n=i(3151);e.LinksTriangle=class{constructor(){this.enable=!1,this.frequency=1}load(t){void 0!==t&&(void 0!==t.color&&(this.color=n.OptionsColor.create(this.color,t.color)),void 0!==t.enable&&(this.enable=t.enable),void 0!==t.frequency&&(this.frequency=t.frequency),void 0!==t.opacity&&(this.opacity=t.opacity))}}},8027:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Attract=void 0,e.Attract=class{constructor(){this.distance=200,this.enable=!1,this.rotate={x:3e3,y:3e3}}get rotateX(){return this.rotate.x}set rotateX(t){this.rotate.x=t}get rotateY(){return this.rotate.y}set rotateY(t){this.rotate.y=t}load(t){var e,i,n,o;if(!t)return;void 0!==t.distance&&(this.distance=t.distance),void 0!==t.enable&&(this.enable=t.enable);const s=null!==(i=null===(e=t.rotate)||void 0===e?void 0:e.x)&&void 0!==i?i:t.rotateX;void 0!==s&&(this.rotate.x=s);const a=null!==(o=null===(n=t.rotate)||void 0===n?void 0:n.y)&&void 0!==o?o:t.rotateY;void 0!==a&&(this.rotate.y=a)}}},95:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Move=void 0;const n=i(8027),o=i(6331),s=i(9045),a=i(762),r=i(2159),l=i(5640),c=i(1728),d=i(7373),h=i(2027);e.Move=class{constructor(){this.angle=new r.MoveAngle,this.attract=new n.Attract,this.decay=0,this.distance={},this.direction=o.MoveDirection.none,this.drift=0,this.enable=!1,this.gravity=new l.MoveGravity,this.path=new a.Path,this.outModes=new c.OutModes,this.random=!1,this.size=!1,this.speed=2,this.spin=new h.Spin,this.straight=!1,this.trail=new s.Trail,this.vibrate=!1,this.warp=!1}get collisions(){return!1}set collisions(t){}get bounce(){return this.collisions}set bounce(t){this.collisions=t}get out_mode(){return this.outMode}set out_mode(t){this.outMode=t}get outMode(){return this.outModes.default}set outMode(t){this.outModes.default=t}get noise(){return this.path}set noise(t){this.path=t}load(t){var e,i,n;if(void 0===t)return;void 0!==t.angle&&("number"==typeof t.angle?this.angle.value=t.angle:this.angle.load(t.angle)),this.attract.load(t.attract),void 0!==t.decay&&(this.decay=t.decay),void 0!==t.direction&&(this.direction=t.direction),void 0!==t.distance&&(this.distance="number"==typeof t.distance?{horizontal:t.distance,vertical:t.distance}:(0,d.deepExtend)({},t.distance)),void 0!==t.drift&&(this.drift=(0,d.setRangeValue)(t.drift)),void 0!==t.enable&&(this.enable=t.enable),this.gravity.load(t.gravity);const o=null!==(e=t.outMode)&&void 0!==e?e:t.out_mode;void 0===t.outModes&&void 0===o||("string"==typeof t.outModes||void 0===t.outModes&&void 0!==o?this.outModes.load({default:null!==(i=t.outModes)&&void 0!==i?i:o}):this.outModes.load(t.outModes)),this.path.load(null!==(n=t.path)&&void 0!==n?n:t.noise),void 0!==t.random&&(this.random=t.random),void 0!==t.size&&(this.size=t.size),void 0!==t.speed&&(this.speed=(0,d.setRangeValue)(t.speed)),this.spin.load(t.spin),void 0!==t.straight&&(this.straight=t.straight),this.trail.load(t.trail),void 0!==t.vibrate&&(this.vibrate=t.vibrate),void 0!==t.warp&&(this.warp=t.warp)}}},2159:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.MoveAngle=void 0,e.MoveAngle=class{constructor(){this.offset=0,this.value=90}load(t){void 0!==t&&(void 0!==t.offset&&(this.offset=t.offset),void 0!==t.value&&(this.value=t.value))}}},5640:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.MoveGravity=void 0,e.MoveGravity=class{constructor(){this.acceleration=9.81,this.enable=!1,this.inverse=!1,this.maxSpeed=50}load(t){t&&(void 0!==t.acceleration&&(this.acceleration=t.acceleration),void 0!==t.enable&&(this.enable=t.enable),void 0!==t.inverse&&(this.inverse=t.inverse),void 0!==t.maxSpeed&&(this.maxSpeed=t.maxSpeed))}}},1728:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OutModes=void 0;const n=i(551);e.OutModes=class{constructor(){this.default=n.OutMode.out}load(t){var e,i,n,o;t&&(void 0!==t.default&&(this.default=t.default),this.bottom=null!==(e=t.bottom)&&void 0!==e?e:t.default,this.left=null!==(i=t.left)&&void 0!==i?i:t.default,this.right=null!==(n=t.right)&&void 0!==n?n:t.default,this.top=null!==(o=t.top)&&void 0!==o?o:t.default)}}},762:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Path=void 0;const n=i(4918),o=i(7373);e.Path=class{constructor(){this.clamp=!0,this.delay=new n.PathDelay,this.enable=!1,this.options={}}load(t){void 0!==t&&(void 0!==t.clamp&&(this.clamp=t.clamp),this.delay.load(t.delay),void 0!==t.enable&&(this.enable=t.enable),this.generator=t.generator,t.options&&(this.options=(0,o.deepExtend)(this.options,t.options)))}}},4918:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.PathDelay=void 0;const n=i(5707);class o extends n.ValueWithRandom{constructor(){super()}}e.PathDelay=o},2027:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Spin=void 0;const n=i(7373);e.Spin=class{constructor(){this.acceleration=0,this.enable=!1}load(t){t&&(void 0!==t.acceleration&&(this.acceleration=(0,n.setRangeValue)(t.acceleration)),void 0!==t.enable&&(this.enable=t.enable),this.position=t.position?(0,n.deepExtend)({},t.position):void 0)}}},9045:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Trail=void 0;const n=i(3151);e.Trail=class{constructor(){this.enable=!1,this.length=10,this.fillColor=new n.OptionsColor,this.fillColor.value="#000000"}load(t){void 0!==t&&(void 0!==t.enable&&(this.enable=t.enable),this.fillColor=n.OptionsColor.create(this.fillColor,t.fillColor),void 0!==t.length&&(this.length=t.length))}}},8711:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Density=void 0,e.Density=class{constructor(){this.enable=!1,this.area=800,this.factor=1e3}get value_area(){return this.area}set value_area(t){this.area=t}load(t){var e;if(void 0===t)return;void 0!==t.enable&&(this.enable=t.enable);const i=null!==(e=t.area)&&void 0!==e?e:t.value_area;void 0!==i&&(this.area=i),void 0!==t.factor&&(this.factor=t.factor)}}},2338:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ParticlesNumber=void 0;const n=i(8711);e.ParticlesNumber=class{constructor(){this.density=new n.Density,this.limit=0,this.value=100}get max(){return this.limit}set max(t){this.limit=t}load(t){var e;if(void 0===t)return;this.density.load(t.density);const i=null!==(e=t.limit)&&void 0!==e?e:t.max;void 0!==i&&(this.limit=i),void 0!==t.value&&(this.value=t.value)}}},3748:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Opacity=void 0;const n=i(9257),o=i(5707),s=i(7373);class a extends o.ValueWithRandom{constructor(){super(),this.animation=new n.OpacityAnimation,this.random.minimumValue=.1,this.value=1}get anim(){return this.animation}set anim(t){this.animation=t}load(t){var e;if(!t)return;super.load(t);const i=null!==(e=t.animation)&&void 0!==e?e:t.anim;void 0!==i&&(this.animation.load(i),this.value=(0,s.setRangeValue)(this.value,this.animation.enable?this.animation.minimumValue:void 0))}}e.Opacity=a},9257:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OpacityAnimation=void 0;const n=i(6331),o=i(9089);class s extends o.AnimationOptions{constructor(){super(),this.destroy=n.DestroyType.none,this.enable=!1,this.speed=2,this.startValue=n.StartValueType.random,this.sync=!1}get opacity_min(){return this.minimumValue}set opacity_min(t){this.minimumValue=t}load(t){var e;void 0!==t&&(super.load(t),void 0!==t.destroy&&(this.destroy=t.destroy),void 0!==t.enable&&(this.enable=t.enable),this.minimumValue=null!==(e=t.minimumValue)&&void 0!==e?e:t.opacity_min,void 0!==t.speed&&(this.speed=t.speed),void 0!==t.startValue&&(this.startValue=t.startValue),void 0!==t.sync&&(this.sync=t.sync))}}e.OpacityAnimation=s},4145:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Orbit=void 0;const n=i(2301),o=i(3151),s=i(9089);e.Orbit=class{constructor(){this.animation=new s.AnimationOptions,this.enable=!1,this.opacity=1,this.rotation=new n.OrbitRotation,this.width=1}load(t){void 0!==t&&(this.animation.load(t.animation),this.rotation.load(t.rotation),void 0!==t.enable&&(this.enable=t.enable),void 0!==t.opacity&&(this.opacity=t.opacity),void 0!==t.width&&(this.width=t.width),void 0!==t.radius&&(this.radius=t.radius),void 0!==t.color&&(this.color=o.OptionsColor.create(this.color,t.color)))}}},2301:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OrbitRotation=void 0;const n=i(5707);class o extends n.ValueWithRandom{constructor(){super(),this.value=45,this.random.enable=!1,this.random.minimumValue=0}load(t){void 0!==t&&super.load(t)}}e.OrbitRotation=o},8029:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ParticlesOptions=void 0;const n=i(8854),o=i(95),s=i(2338),a=i(3748),r=i(9014),l=i(8863),c=i(3954),d=i(991),h=i(3111),u=i(1958),p=i(2745),v=i(192),y=i(2165),g=i(2203),f=i(8455),m=i(1610),b=i(1749),w=i(1750),A=i(753),S=i(7373),_=i(4145),P=i(6575),C=i(2372);e.ParticlesOptions=class{constructor(){this.bounce=new g.Bounce,this.collisions=new u.Collisions,this.color=new v.AnimatableColor,this.destroy=new f.Destroy,this.gradient=[],this.groups={},this.life=new y.Life,this.links=new n.Links,this.move=new o.Move,this.number=new s.ParticlesNumber,this.opacity=new a.Opacity,this.orbit=new _.Orbit,this.reduceDuplicates=!1,this.repulse=new P.Repulse,this.roll=new w.Roll,this.rotate=new c.Rotate,this.shadow=new d.Shadow,this.shape=new r.Shape,this.size=new l.Size,this.stroke=new h.Stroke,this.tilt=new b.Tilt,this.twinkle=new p.Twinkle,this.wobble=new m.Wobble,this.zIndex=new A.ZIndex}get line_linked(){return this.links}set line_linked(t){this.links=t}get lineLinked(){return this.links}set lineLinked(t){this.links=t}load(t){var e,i,n,o,s,a,r,l;if(void 0===t)return;this.bounce.load(t.bounce),this.color.load(v.AnimatableColor.create(this.color,t.color)),this.destroy.load(t.destroy),this.life.load(t.life);const c=null!==(i=null!==(e=t.links)&&void 0!==e?e:t.lineLinked)&&void 0!==i?i:t.line_linked;if(void 0!==c&&this.links.load(c),void 0!==t.groups)for(const e in t.groups){const i=t.groups[e];void 0!==i&&(this.groups[e]=(0,S.deepExtend)(null!==(n=this.groups[e])&&void 0!==n?n:{},i))}this.move.load(t.move),this.number.load(t.number),this.opacity.load(t.opacity),this.orbit.load(t.orbit),void 0!==t.reduceDuplicates&&(this.reduceDuplicates=t.reduceDuplicates),this.repulse.load(t.repulse),this.roll.load(t.roll),this.rotate.load(t.rotate),this.shape.load(t.shape),this.size.load(t.size),this.shadow.load(t.shadow),this.tilt.load(t.tilt),this.twinkle.load(t.twinkle),this.wobble.load(t.wobble),this.zIndex.load(t.zIndex);const d=null!==(s=null===(o=t.move)||void 0===o?void 0:o.collisions)&&void 0!==s?s:null===(a=t.move)||void 0===a?void 0:a.bounce;void 0!==d&&(this.collisions.enable=d),this.collisions.load(t.collisions);const u=null!==(r=t.stroke)&&void 0!==r?r:null===(l=t.shape)||void 0===l?void 0:l.stroke;u&&(u instanceof Array?this.stroke=u.map((t=>{const e=new h.Stroke;return e.load(t),e})):(this.stroke instanceof Array&&(this.stroke=new h.Stroke),this.stroke.load(u)));const p=t.gradient;p&&(p instanceof Array?this.gradient=p.map((t=>{const e=new C.AnimatableGradient;return e.load(t),e})):(this.gradient instanceof Array&&(this.gradient=new C.AnimatableGradient),this.gradient.load(p)))}}},6575:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Repulse=void 0;const n=i(5707);class o extends n.ValueWithRandom{constructor(){super(),this.enabled=!1,this.distance=1,this.duration=1,this.factor=1,this.speed=1}load(t){super.load(t),t&&(void 0!==t.enabled&&(this.enabled=t.enabled),void 0!==t.distance&&(this.distance=t.distance),void 0!==t.duration&&(this.duration=t.duration),void 0!==t.factor&&(this.factor=t.factor),void 0!==t.speed&&(this.speed=t.speed))}}e.Repulse=o},1750:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Roll=void 0;const n=i(3151),o=i(1372),s=i(7373),a=i(6331);e.Roll=class{constructor(){this.darken=new o.RollLight,this.enable=!1,this.enlighten=new o.RollLight,this.mode=a.RollMode.vertical,this.speed=25}load(t){t&&(void 0!==t.backColor&&(this.backColor=n.OptionsColor.create(this.backColor,t.backColor)),this.darken.load(t.darken),void 0!==t.enable&&(this.enable=t.enable),this.enlighten.load(t.enlighten),void 0!==t.mode&&(this.mode=t.mode),void 0!==t.speed&&(this.speed=(0,s.setRangeValue)(t.speed)))}}},1372:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.RollLight=void 0,e.RollLight=class{constructor(){this.enable=!1,this.value=0}load(t){t&&(void 0!==t.enable&&(this.enable=t.enable),void 0!==t.value&&(this.value=t.value))}}},3954:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Rotate=void 0;const n=i(8946),o=i(6331),s=i(5707);class a extends s.ValueWithRandom{constructor(){super(),this.animation=new n.RotateAnimation,this.direction=o.RotateDirection.clockwise,this.path=!1,this.value=0}load(t){t&&(super.load(t),void 0!==t.direction&&(this.direction=t.direction),this.animation.load(t.animation),void 0!==t.path&&(this.path=t.path))}}e.Rotate=a},8946:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.RotateAnimation=void 0,e.RotateAnimation=class{constructor(){this.enable=!1,this.speed=0,this.sync=!1}load(t){void 0!==t&&(void 0!==t.enable&&(this.enable=t.enable),void 0!==t.speed&&(this.speed=t.speed),void 0!==t.sync&&(this.sync=t.sync))}}},991:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Shadow=void 0;const n=i(3151);e.Shadow=class{constructor(){this.blur=0,this.color=new n.OptionsColor,this.enable=!1,this.offset={x:0,y:0},this.color.value="#000000"}load(t){void 0!==t&&(void 0!==t.blur&&(this.blur=t.blur),this.color=n.OptionsColor.create(this.color,t.color),void 0!==t.enable&&(this.enable=t.enable),void 0!==t.offset&&(void 0!==t.offset.x&&(this.offset.x=t.offset.x),void 0!==t.offset.y&&(this.offset.y=t.offset.y)))}}},9014:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Shape=void 0;const n=i(6331),o=i(7373);e.Shape=class{constructor(){this.options={},this.type=n.ShapeType.circle}get image(){var t;return null!==(t=this.options[n.ShapeType.image])&&void 0!==t?t:this.options[n.ShapeType.images]}set image(t){this.options[n.ShapeType.image]=t,this.options[n.ShapeType.images]=t}get custom(){return this.options}set custom(t){this.options=t}get images(){return this.image}set images(t){this.image=t}get stroke(){return[]}set stroke(t){}get character(){var t;return null!==(t=this.options[n.ShapeType.character])&&void 0!==t?t:this.options[n.ShapeType.char]}set character(t){this.options[n.ShapeType.character]=t,this.options[n.ShapeType.char]=t}get polygon(){var t;return null!==(t=this.options[n.ShapeType.polygon])&&void 0!==t?t:this.options[n.ShapeType.star]}set polygon(t){this.options[n.ShapeType.polygon]=t,this.options[n.ShapeType.star]=t}load(t){var e,i,s;if(void 0===t)return;const a=null!==(e=t.options)&&void 0!==e?e:t.custom;if(void 0!==a)for(const t in a){const e=a[t];void 0!==e&&(this.options[t]=(0,o.deepExtend)(null!==(i=this.options[t])&&void 0!==i?i:{},e))}this.loadShape(t.character,n.ShapeType.character,n.ShapeType.char,!0),this.loadShape(t.polygon,n.ShapeType.polygon,n.ShapeType.star,!1),this.loadShape(null!==(s=t.image)&&void 0!==s?s:t.images,n.ShapeType.image,n.ShapeType.images,!0),void 0!==t.type&&(this.type=t.type)}loadShape(t,e,i,n){var s,a,r,l;void 0!==t&&(t instanceof Array?(this.options[e]instanceof Array||(this.options[e]=[],this.options[i]&&!n||(this.options[i]=[])),this.options[e]=(0,o.deepExtend)(null!==(s=this.options[e])&&void 0!==s?s:[],t),this.options[i]&&!n||(this.options[i]=(0,o.deepExtend)(null!==(a=this.options[i])&&void 0!==a?a:[],t))):(this.options[e]instanceof Array&&(this.options[e]={},this.options[i]&&!n||(this.options[i]={})),this.options[e]=(0,o.deepExtend)(null!==(r=this.options[e])&&void 0!==r?r:{},t),this.options[i]&&!n||(this.options[i]=(0,o.deepExtend)(null!==(l=this.options[i])&&void 0!==l?l:{},t))))}}},8863:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Size=void 0;const n=i(5816),o=i(5707),s=i(7373);class a extends o.ValueWithRandom{constructor(){super(),this.animation=new n.SizeAnimation,this.random.minimumValue=1,this.value=3}get anim(){return this.animation}set anim(t){this.animation=t}load(t){var e;if(!t)return;super.load(t);const i=null!==(e=t.animation)&&void 0!==e?e:t.anim;void 0!==i&&(this.animation.load(i),this.value=(0,s.setRangeValue)(this.value,this.animation.enable?this.animation.minimumValue:void 0))}}e.Size=a},5816:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SizeAnimation=void 0;const n=i(6331),o=i(9089);class s extends o.AnimationOptions{constructor(){super(),this.destroy=n.DestroyType.none,this.enable=!1,this.speed=5,this.startValue=n.StartValueType.random,this.sync=!1}get size_min(){return this.minimumValue}set size_min(t){this.minimumValue=t}load(t){var e;void 0!==t&&(super.load(t),void 0!==t.destroy&&(this.destroy=t.destroy),void 0!==t.enable&&(this.enable=t.enable),this.minimumValue=null!==(e=t.minimumValue)&&void 0!==e?e:t.size_min,void 0!==t.speed&&(this.speed=t.speed),void 0!==t.startValue&&(this.startValue=t.startValue),void 0!==t.sync&&(this.sync=t.sync))}}e.SizeAnimation=s},3111:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Stroke=void 0;const n=i(192);e.Stroke=class{constructor(){this.width=0}load(t){void 0!==t&&(void 0!==t.color&&(this.color=n.AnimatableColor.create(this.color,t.color)),void 0!==t.width&&(this.width=t.width),void 0!==t.opacity&&(this.opacity=t.opacity))}}},1749:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Tilt=void 0;const n=i(994),o=i(6331),s=i(5707);class a extends s.ValueWithRandom{constructor(){super(),this.animation=new n.TiltAnimation,this.direction=o.TiltDirection.clockwise,this.enable=!1,this.value=0}load(t){t&&(super.load(t),this.animation.load(t.animation),void 0!==t.direction&&(this.direction=t.direction),void 0!==t.enable&&(this.enable=t.enable))}}e.Tilt=a},994:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.TiltAnimation=void 0,e.TiltAnimation=class{constructor(){this.enable=!1,this.speed=0,this.sync=!1}load(t){void 0!==t&&(void 0!==t.enable&&(this.enable=t.enable),void 0!==t.speed&&(this.speed=t.speed),void 0!==t.sync&&(this.sync=t.sync))}}},2745:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Twinkle=void 0;const n=i(4767);e.Twinkle=class{constructor(){this.lines=new n.TwinkleValues,this.particles=new n.TwinkleValues}load(t){void 0!==t&&(this.lines.load(t.lines),this.particles.load(t.particles))}}},4767:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.TwinkleValues=void 0;const n=i(3151);e.TwinkleValues=class{constructor(){this.enable=!1,this.frequency=.05,this.opacity=1}load(t){void 0!==t&&(void 0!==t.color&&(this.color=n.OptionsColor.create(this.color,t.color)),void 0!==t.enable&&(this.enable=t.enable),void 0!==t.frequency&&(this.frequency=t.frequency),void 0!==t.opacity&&(this.opacity=t.opacity))}}},1610:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Wobble=void 0;const n=i(7373);e.Wobble=class{constructor(){this.distance=5,this.enable=!1,this.speed=50}load(t){t&&(void 0!==t.distance&&(this.distance=(0,n.setRangeValue)(t.distance)),void 0!==t.enable&&(this.enable=t.enable),void 0!==t.speed&&(this.speed=(0,n.setRangeValue)(t.speed)))}}},753:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ZIndex=void 0;const n=i(5707);class o extends n.ValueWithRandom{constructor(){super(),this.opacityRate=1,this.sizeRate=1,this.velocityRate=1}load(t){super.load(t),t&&(void 0!==t.opacityRate&&(this.opacityRate=t.opacityRate),void 0!==t.sizeRate&&(this.sizeRate=t.sizeRate),void 0!==t.velocityRate&&(this.velocityRate=t.velocityRate))}}e.ZIndex=o},4624:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Random=void 0,e.Random=class{constructor(){this.enable=!1,this.minimumValue=0}load(t){t&&(void 0!==t.enable&&(this.enable=t.enable),void 0!==t.minimumValue&&(this.minimumValue=t.minimumValue))}}},7848:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Responsive=void 0;const n=i(7373),o=i(6331);e.Responsive=class{constructor(){this.maxWidth=1/0,this.options={},this.mode=o.ResponsiveMode.canvas}load(t){t&&(void 0!==t.maxWidth&&(this.maxWidth=t.maxWidth),void 0!==t.mode&&(t.mode===o.ResponsiveMode.screen?this.mode=o.ResponsiveMode.screen:this.mode=o.ResponsiveMode.canvas),void 0!==t.options&&(this.options=(0,n.deepExtend)({},t.options)))}}},7851:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Theme=void 0;const n=i(7373),o=i(827);e.Theme=class{constructor(){this.name="",this.default=new o.ThemeDefault}load(t){void 0!==t&&(void 0!==t.name&&(this.name=t.name),this.default.load(t.default),void 0!==t.options&&(this.options=(0,n.deepExtend)({},t.options)))}}},827:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ThemeDefault=void 0;const n=i(6331);e.ThemeDefault=class{constructor(){this.auto=!1,this.mode=n.ThemeMode.any,this.value=!1}load(t){t&&(void 0!==t.auto&&(this.auto=t.auto),void 0!==t.mode&&(this.mode=t.mode),void 0!==t.value&&(this.value=t.value))}}},5707:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ValueWithRandom=void 0;const n=i(4624),o=i(7373);e.ValueWithRandom=class{constructor(){this.random=new n.Random,this.value=0}load(t){t&&("boolean"==typeof t.random?this.random.enable=t.random:this.random.load(t.random),void 0!==t.value&&(this.value=(0,o.setRangeValue)(t.value,this.random.enable?this.random.minimumValue:void 0)))}}},2993:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.AbsorberInstance=void 0;const n=i(7373),o=i(5638),s=i(6331);e.AbsorberInstance=class{constructor(t,e,i,s){var a,r,l,c,d;this.absorbers=t,this.container=e,this.initialPosition=s?o.Vector.create(s.x,s.y):void 0,this.options=i,this.dragging=!1,this.name=this.options.name,this.opacity=this.options.opacity,this.size=(0,n.getRangeValue)(i.size.value)*e.retina.pixelRatio,this.mass=this.size*i.size.density*e.retina.reduceFactor;const h=i.size.limit;this.limit="number"==typeof h?{radius:h*e.retina.pixelRatio*e.retina.reduceFactor,mass:0}:{radius:(null!==(a=null==h?void 0:h.radius)&&void 0!==a?a:0)*e.retina.pixelRatio*e.retina.reduceFactor,mass:null!==(r=null==h?void 0:h.mass)&&void 0!==r?r:0};const u="string"==typeof i.color?{value:i.color}:i.color;this.color=null!==(l=(0,n.colorToRgb)(u))&&void 0!==l?l:{b:0,g:0,r:0},this.position=null!==(d=null===(c=this.initialPosition)||void 0===c?void 0:c.copy())&&void 0!==d?d:this.calcPosition()}attract(t){const e=this.container,i=this.options;if(i.draggable){const t=e.interactivity.mouse;t.clicking&&t.downPosition?(0,n.getDistance)(this.position,t.downPosition)<=this.size&&(this.dragging=!0):this.dragging=!1,this.dragging&&t.position&&(this.position.x=t.position.x,this.position.y=t.position.y)}const s=t.getPosition(),{dx:a,dy:r,distance:l}=(0,n.getDistances)(this.position,s),c=o.Vector.create(a,r);if(c.length=this.mass/Math.pow(l,2)*e.retina.reduceFactor,l<this.size+t.getRadius()){const n=.033*t.getRadius()*e.retina.pixelRatio;this.size>t.getRadius()&&l<this.size-t.getRadius()||void 0!==t.absorberOrbit&&t.absorberOrbit.length<0?i.destroy?t.destroy():(t.needsNewPosition=!0,this.updateParticlePosition(t,c)):(i.destroy&&(t.size.value-=n),this.updateParticlePosition(t,c)),(this.limit.radius<=0||this.size<this.limit.radius)&&(this.size+=n),(this.limit.mass<=0||this.mass<this.limit.mass)&&(this.mass+=n*this.options.size.density*e.retina.reduceFactor)}else this.updateParticlePosition(t,c)}resize(){const t=this.initialPosition;this.position=t&&(0,n.isPointInside)(t,this.container.canvas.size)?t:this.calcPosition()}draw(t){t.translate(this.position.x,this.position.y),t.beginPath(),t.arc(0,0,this.size,0,2*Math.PI,!1),t.closePath(),t.fillStyle=(0,n.getStyleFromRgb)(this.color,this.opacity),t.fill()}calcPosition(){var t,e;const i=this.container,n=this.options.position;return o.Vector.create((null!==(t=null==n?void 0:n.x)&&void 0!==t?t:100*Math.random())/100*i.canvas.size.width,(null!==(e=null==n?void 0:n.y)&&void 0!==e?e:100*Math.random())/100*i.canvas.size.height)}updateParticlePosition(t,e){var i;if(t.destroyed)return;const a=this.container,r=a.canvas.size;if(t.needsNewPosition&&(t.position.x=Math.floor(Math.random()*r.width),t.position.y=Math.floor(Math.random()*r.height),t.velocity.setTo(t.initialVelocity),t.absorberOrbit=void 0,t.needsNewPosition=!1),this.options.orbits){if(void 0===t.absorberOrbit&&(t.absorberOrbit=o.Vector.create(0,0),t.absorberOrbit.length=(0,n.getDistance)(t.getPosition(),this.position),t.absorberOrbit.angle=Math.random()*Math.PI*2),t.absorberOrbit.length<=this.size&&!this.options.destroy){const e=Math.min(r.width,r.height);t.absorberOrbit.length=e*(.2*Math.random()-.1+1)}void 0===t.absorberOrbitDirection&&(t.absorberOrbitDirection=t.velocity.x>=0?s.RotateDirection.clockwise:s.RotateDirection.counterClockwise);const l=t.absorberOrbit.length,c=t.absorberOrbit.angle,d=t.absorberOrbitDirection;t.velocity.x=0,t.velocity.y=0;const h={x:d===s.RotateDirection.clockwise?Math.cos:Math.sin,y:d===s.RotateDirection.clockwise?Math.sin:Math.cos};t.position.x=this.position.x+l*h.x(c),t.position.y=this.position.y+l*h.y(c),t.absorberOrbit.length-=e.length,t.absorberOrbit.angle+=(null!==(i=t.retina.moveSpeed)&&void 0!==i?i:0)*a.retina.pixelRatio/100*a.retina.reduceFactor}else{const i=o.Vector.origin;i.length=e.length,i.angle=e.angle,t.velocity.addTo(i)}}}},1861:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Absorbers=void 0;const n=i(2993),o=i(9372),s=i(5456),a=i(7373);e.Absorbers=class{constructor(t){this.container=t,this.array=[],this.absorbers=[],this.interactivityAbsorbers=[];const e=t;e.getAbsorber=t=>void 0===t||"number"==typeof t?this.array[t||0]:this.array.find((e=>e.name===t)),e.addAbsorber=(t,e)=>this.addAbsorber(t,e)}init(t){var e,i;if(!t)return;t.absorbers&&(t.absorbers instanceof Array?this.absorbers=t.absorbers.map((t=>{const e=new o.Absorber;return e.load(t),e})):(this.absorbers instanceof Array&&(this.absorbers=new o.Absorber),this.absorbers.load(t.absorbers)));const n=null===(i=null===(e=t.interactivity)||void 0===e?void 0:e.modes)||void 0===i?void 0:i.absorbers;if(n&&(n instanceof Array?this.interactivityAbsorbers=n.map((t=>{const e=new o.Absorber;return e.load(t),e})):(this.interactivityAbsorbers instanceof Array&&(this.interactivityAbsorbers=new o.Absorber),this.interactivityAbsorbers.load(n))),this.absorbers instanceof Array)for(const t of this.absorbers)this.addAbsorber(t);else this.addAbsorber(this.absorbers)}particleUpdate(t){for(const e of this.array)if(e.attract(t),t.destroyed)break}draw(t){for(const e of this.array)t.save(),e.draw(t),t.restore()}stop(){this.array=[]}resize(){for(const t of this.array)t.resize()}handleClickMode(t){const e=this.container,i=this.absorbers,n=this.interactivityAbsorbers;if(t===s.AbsorberClickMode.absorber){let t;n instanceof Array?n.length>0&&(t=(0,a.itemFromArray)(n)):t=n;const o=null!=t?t:i instanceof Array?(0,a.itemFromArray)(i):i,s=e.interactivity.mouse.clickPosition;this.addAbsorber(o,s)}}addAbsorber(t,e){const i=new n.AbsorberInstance(this,this.container,t,e);return this.array.push(i),i}removeAbsorber(t){const e=this.array.indexOf(t);e>=0&&this.array.splice(e,1)}}},5693:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.AbsorberClickMode=void 0,(e.AbsorberClickMode||(e.AbsorberClickMode={})).absorber="absorber"},5456:function(t,e,i){var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),o(i(5693),e)},9372:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Absorber=void 0;const n=i(9499),o=i(3151);e.Absorber=class{constructor(){this.color=new o.OptionsColor,this.color.value="#000000",this.draggable=!1,this.opacity=1,this.destroy=!0,this.orbits=!1,this.size=new n.AbsorberSize}load(t){void 0!==t&&(void 0!==t.color&&(this.color=o.OptionsColor.create(this.color,t.color)),void 0!==t.draggable&&(this.draggable=t.draggable),this.name=t.name,void 0!==t.opacity&&(this.opacity=t.opacity),void 0!==t.position&&(this.position={x:t.position.x,y:t.position.y}),void 0!==t.size&&this.size.load(t.size),void 0!==t.destroy&&(this.destroy=t.destroy),void 0!==t.orbits&&(this.orbits=t.orbits))}}},9499:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.AbsorberSize=void 0;const n=i(5707),o=i(6269);class s extends n.ValueWithRandom{constructor(){super(),this.density=5,this.random.minimumValue=1,this.value=50,this.limit=new o.AbsorberSizeLimit}load(t){t&&(super.load(t),void 0!==t.density&&(this.density=t.density),"number"==typeof t.limit?this.limit.radius=t.limit:this.limit.load(t.limit))}}e.AbsorberSize=s},6269:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.AbsorberSizeLimit=void 0,e.AbsorberSizeLimit=class{constructor(){this.radius=0,this.mass=0}load(t){t&&(void 0!==t.mass&&(this.mass=t.mass),void 0!==t.radius&&(this.radius=t.radius))}}},3785:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadAbsorbersPlugin=void 0;const n=i(1861),o=i(5456),s=i(9372),a=i(7373);class r{constructor(){this.id="absorbers"}getPlugin(t){return new n.Absorbers(t)}needsPlugin(t){var e,i,n;if(void 0===t)return!1;const s=t.absorbers;let r=!1;return s instanceof Array?s.length&&(r=!0):(void 0!==s||(null===(n=null===(i=null===(e=t.interactivity)||void 0===e?void 0:e.events)||void 0===i?void 0:i.onClick)||void 0===n?void 0:n.mode)&&(0,a.isInArray)(o.AbsorberClickMode.absorber,t.interactivity.events.onClick.mode))&&(r=!0),r}loadOptions(t,e){var i,n;if(!this.needsPlugin(t)&&!this.needsPlugin(e))return;const o=t;if(null==e?void 0:e.absorbers)if((null==e?void 0:e.absorbers)instanceof Array)o.absorbers=null==e?void 0:e.absorbers.map((t=>{const e=new s.Absorber;return e.load(t),e}));else{let t=o.absorbers;void 0===(null==t?void 0:t.load)&&(o.absorbers=t=new s.Absorber),t.load(null==e?void 0:e.absorbers)}const a=null===(n=null===(i=null==e?void 0:e.interactivity)||void 0===i?void 0:i.modes)||void 0===n?void 0:n.absorbers;if(a)if(a instanceof Array)o.interactivity.modes.absorbers=a.map((t=>{const e=new s.Absorber;return e.load(t),e}));else{let t=o.interactivity.modes.absorbers;void 0===(null==t?void 0:t.load)&&(o.interactivity.modes.absorbers=t=new s.Absorber),t.load(a)}}}e.loadAbsorbersPlugin=async function(t){const e=new r;await t.addPlugin(e)}},5357:function(t,e,i){var n,o,s=this&&this.__classPrivateFieldSet||function(t,e,i,n,o){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!o:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?o.call(t,i):o?o.value=i:e.set(t,i),i},a=this&&this.__classPrivateFieldGet||function(t,e,i,n){if("a"===i&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===i?n:"a"===i?n.call(t):n?n.value:e.get(t)};Object.defineProperty(e,"__esModule",{value:!0}),e.EmitterInstance=void 0;const r=i(7373),l=i(6331),c=i(6208),d=i(7579);e.EmitterInstance=class{constructor(t,e,i,a){var h,u,p,v,y,g,f;this.emitters=t,this.container=e,n.set(this,void 0),o.set(this,void 0),this.currentDuration=0,this.currentEmitDelay=0,this.currentSpawnDelay=0,this.initialPosition=a,this.emitterOptions=(0,r.deepExtend)({},i),this.spawnDelay=1e3*(null!==(h=this.emitterOptions.life.delay)&&void 0!==h?h:0)/this.container.retina.reduceFactor,this.position=null!==(u=this.initialPosition)&&void 0!==u?u:this.calcPosition(),this.name=i.name,this.shape=d.ShapeManager.getShape(i.shape),this.fill=i.fill,s(this,n,!this.emitterOptions.life.wait,"f"),s(this,o,!1,"f");let m=(0,r.deepExtend)({},this.emitterOptions.particles);null!=m||(m={}),null!==(p=m.move)&&void 0!==p||(m.move={}),null!==(v=(f=m.move).direction)&&void 0!==v||(f.direction=this.emitterOptions.direction),void 0!==this.emitterOptions.spawnColor&&(this.spawnColor=(0,r.colorToHsl)(this.emitterOptions.spawnColor)),this.paused=!this.emitterOptions.autoPlay,this.particlesOptions=m,this.size=null!==(y=this.emitterOptions.size)&&void 0!==y?y:(()=>{const t=new c.EmitterSize;return t.load({height:0,mode:l.SizeMode.percent,width:0}),t})(),this.lifeCount=null!==(g=this.emitterOptions.life.count)&&void 0!==g?g:-1,this.immortal=this.lifeCount<=0,this.play()}externalPlay(){this.paused=!1,this.play()}externalPause(){this.paused=!0,this.pause()}play(){var t;if(!this.paused&&this.container.retina.reduceFactor&&(this.lifeCount>0||this.immortal||!this.emitterOptions.life.count)&&(a(this,n,"f")||this.currentSpawnDelay>=(null!==(t=this.spawnDelay)&&void 0!==t?t:0))){if(void 0===this.emitDelay){const t=(0,r.getRangeValue)(this.emitterOptions.rate.delay);this.emitDelay=1e3*t/this.container.retina.reduceFactor}(this.lifeCount>0||this.immortal)&&this.prepareToDie()}}pause(){this.paused||delete this.emitDelay}resize(){const t=this.initialPosition;this.position=t&&(0,r.isPointInside)(t,this.container.canvas.size)?t:this.calcPosition()}update(t){var e,i,r;this.paused||(a(this,n,"f")&&(s(this,n,!1,"f"),this.currentSpawnDelay=null!==(e=this.spawnDelay)&&void 0!==e?e:0,this.currentEmitDelay=null!==(i=this.emitDelay)&&void 0!==i?i:0),a(this,o,"f")||(s(this,o,!0,"f"),this.emitParticles(this.emitterOptions.startCount)),void 0!==this.duration&&(this.currentDuration+=t.value,this.currentDuration>=this.duration&&(this.pause(),void 0!==this.spawnDelay&&delete this.spawnDelay,this.immortal||this.lifeCount--,this.lifeCount>0||this.immortal?(this.position=this.calcPosition(),this.spawnDelay=1e3*(null!==(r=this.emitterOptions.life.delay)&&void 0!==r?r:0)/this.container.retina.reduceFactor):this.destroy(),this.currentDuration-=this.duration,delete this.duration)),void 0!==this.spawnDelay&&(this.currentSpawnDelay+=t.value,this.currentSpawnDelay>=this.spawnDelay&&(this.play(),this.currentSpawnDelay-=this.currentSpawnDelay,delete this.spawnDelay)),void 0!==this.emitDelay&&(this.currentEmitDelay+=t.value,this.currentEmitDelay>=this.emitDelay&&(this.emit(),this.currentEmitDelay-=this.emitDelay)))}prepareToDie(){var t;if(this.paused)return;const e=null===(t=this.emitterOptions.life)||void 0===t?void 0:t.duration;this.container.retina.reduceFactor&&(this.lifeCount>0||this.immortal)&&void 0!==e&&e>0&&(this.duration=1e3*e)}destroy(){this.emitters.removeEmitter(this)}calcPosition(){var t,e;const i=this.container,n=this.emitterOptions.position;return{x:(null!==(t=null==n?void 0:n.x)&&void 0!==t?t:100*Math.random())/100*i.canvas.size.width,y:(null!==(e=null==n?void 0:n.y)&&void 0!==e?e:100*Math.random())/100*i.canvas.size.height}}emit(){if(this.paused)return;const t=(0,r.getRangeValue)(this.emitterOptions.rate.quantity);this.emitParticles(t)}emitParticles(t){var e,i,n;const o=this.container,s=this.position,a={x:this.size.mode===l.SizeMode.percent?o.canvas.size.width*this.size.width/100:this.size.width,y:this.size.mode===l.SizeMode.percent?o.canvas.size.height*this.size.height/100:this.size.height};for(let l=0;l<t;l++){const t=(0,r.deepExtend)({},this.particlesOptions);if(this.spawnColor){const i=null===(e=this.emitterOptions.spawnColor)||void 0===e?void 0:e.animation;if(i){const t=i;if(t.enable)this.spawnColor.h=this.setColorAnimation(t,this.spawnColor.h,360);else{const t=i;this.spawnColor.h=this.setColorAnimation(t.h,this.spawnColor.h,360),this.spawnColor.s=this.setColorAnimation(t.s,this.spawnColor.s,100),this.spawnColor.l=this.setColorAnimation(t.l,this.spawnColor.l,100)}}t.color?t.color.value=this.spawnColor:t.color={value:this.spawnColor}}const l=null!==(n=null===(i=this.shape)||void 0===i?void 0:i.randomPosition(s,a,this.fill))&&void 0!==n?n:s;o.particles.addParticle(l,t)}}setColorAnimation(t,e,i){var n;const o=this.container;if(!t.enable)return e;const s=(0,r.randomInRange)(t.offset),a=1e3*(0,r.getRangeValue)(this.emitterOptions.rate.delay)/o.retina.reduceFactor;return(e+(null!==(n=t.speed)&&void 0!==n?n:0)*o.fpsLimit/a+3.6*s)%i}},n=new WeakMap,o=new WeakMap},676:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Emitters=void 0;const n=i(5357),o=i(8327),s=i(4737),a=i(7373);e.Emitters=class{constructor(t){this.container=t,this.array=[],this.emitters=[],this.interactivityEmitters=[];const e=t;e.getEmitter=t=>void 0===t||"number"==typeof t?this.array[t||0]:this.array.find((e=>e.name===t)),e.addEmitter=(t,e)=>this.addEmitter(t,e),e.playEmitter=t=>{const i=e.getEmitter(t);i&&i.externalPlay()},e.pauseEmitter=t=>{const i=e.getEmitter(t);i&&i.externalPause()}}init(t){var e,i;if(!t)return;t.emitters&&(t.emitters instanceof Array?this.emitters=t.emitters.map((t=>{const e=new o.Emitter;return e.load(t),e})):(this.emitters instanceof Array&&(this.emitters=new o.Emitter),this.emitters.load(t.emitters)));const n=null===(i=null===(e=t.interactivity)||void 0===e?void 0:e.modes)||void 0===i?void 0:i.emitters;if(n&&(n instanceof Array?this.interactivityEmitters=n.map((t=>{const e=new o.Emitter;return e.load(t),e})):(this.interactivityEmitters instanceof Array&&(this.interactivityEmitters=new o.Emitter),this.interactivityEmitters.load(n))),this.emitters instanceof Array)for(const t of this.emitters)this.addEmitter(t);else this.addEmitter(this.emitters)}play(){for(const t of this.array)t.play()}pause(){for(const t of this.array)t.pause()}stop(){this.array=[]}update(t){for(const e of this.array)e.update(t)}handleClickMode(t){const e=this.container,i=this.emitters,n=this.interactivityEmitters;if(t===s.EmitterClickMode.emitter){let t;n instanceof Array?n.length>0&&(t=(0,a.itemFromArray)(n)):t=n;const o=null!=t?t:i instanceof Array?(0,a.itemFromArray)(i):i,s=e.interactivity.mouse.clickPosition;this.addEmitter((0,a.deepExtend)({},o),s)}}resize(){for(const t of this.array)t.resize()}addEmitter(t,e){const i=new n.EmitterInstance(this,this.container,t,e);return this.array.push(i),i}removeEmitter(t){const e=this.array.indexOf(t);e>=0&&this.array.splice(e,1)}}},4685:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},8597:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.EmitterClickMode=void 0,(e.EmitterClickMode||(e.EmitterClickMode={})).emitter="emitter"},8601:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.EmitterShapeType=void 0,(i=e.EmitterShapeType||(e.EmitterShapeType={})).circle="circle",i.square="square"},4737:function(t,e,i){var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),o(i(8597),e),o(i(8601),e)},8327:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Emitter=void 0;const n=i(4887),o=i(9571),s=i(7373),a=i(6208),r=i(192),l=i(4737);e.Emitter=class{constructor(){this.autoPlay=!0,this.fill=!0,this.life=new o.EmitterLife,this.rate=new n.EmitterRate,this.shape=l.EmitterShapeType.square,this.startCount=0}load(t){void 0!==t&&(void 0!==t.autoPlay&&(this.autoPlay=t.autoPlay),void 0!==t.size&&(void 0===this.size&&(this.size=new a.EmitterSize),this.size.load(t.size)),void 0!==t.direction&&(this.direction=t.direction),void 0!==t.fill&&(this.fill=t.fill),this.life.load(t.life),this.name=t.name,void 0!==t.particles&&(this.particles=(0,s.deepExtend)({},t.particles)),this.rate.load(t.rate),void 0!==t.shape&&(this.shape=t.shape),void 0!==t.position&&(this.position={x:t.position.x,y:t.position.y}),void 0!==t.spawnColor&&(void 0===this.spawnColor&&(this.spawnColor=new r.AnimatableColor),this.spawnColor.load(t.spawnColor)),void 0!==t.startCount&&(this.startCount=t.startCount))}}},9571:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.EmitterLife=void 0,e.EmitterLife=class{constructor(){this.wait=!1}load(t){void 0!==t&&(void 0!==t.count&&(this.count=t.count),void 0!==t.delay&&(this.delay=t.delay),void 0!==t.duration&&(this.duration=t.duration),void 0!==t.wait&&(this.wait=t.wait))}}},4887:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.EmitterRate=void 0;const n=i(7373);e.EmitterRate=class{constructor(){this.quantity=1,this.delay=.1}load(t){void 0!==t&&(void 0!==t.quantity&&(this.quantity=(0,n.setRangeValue)(t.quantity)),void 0!==t.delay&&(this.delay=(0,n.setRangeValue)(t.delay)))}}},6208:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.EmitterSize=void 0;const n=i(6331);e.EmitterSize=class{constructor(){this.mode=n.SizeMode.percent,this.height=0,this.width=0}load(t){void 0!==t&&(void 0!==t.mode&&(this.mode=t.mode),void 0!==t.height&&(this.height=t.height),void 0!==t.width&&(this.width=t.width))}}},7579:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ShapeManager=void 0;const i=new Map;class n{static addShape(t,e){n.getShape(t)||i.set(t,e)}static getShape(t){return i.get(t)}static getSupportedShapes(){return i.keys()}}e.ShapeManager=n},3969:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.CircleShape=void 0,e.CircleShape=class{randomPosition(t,e,i){const[n,o]=[e.x/2,e.y/2],s=((t,e)=>{const i=Math.random()/4,n=Math.atan(e/t*Math.tan(2*Math.PI*i)),o=Math.random();return o<.25?n:o<.5?Math.PI-n:o<.75?Math.PI+n:-n})(n,o),a=(d=s,(l=n)*(c=o)/Math.sqrt((c*Math.cos(d))**2+(l*Math.sin(d))**2)),r=i?a*Math.sqrt(Math.random()):a;var l,c,d;return{x:t.x+r*Math.cos(s),y:t.y+r*Math.sin(s)}}}},460:(t,e)=>{function i(t,e){return t+e*(Math.random()-.5)}Object.defineProperty(e,"__esModule",{value:!0}),e.SquareShape=void 0,e.SquareShape=class{randomPosition(t,e,n){if(n)return{x:i(t.x,e.x),y:i(t.y,e.y)};{const i=e.x/2,n=e.y/2,o=Math.floor(4*Math.random()),s=2*(Math.random()-.5);switch(o){case 0:return{x:t.x+s*i,y:t.y-n};case 1:return{x:t.x-i,y:t.y+s*n};case 2:return{x:t.x+s*i,y:t.y+n};default:return{x:t.x+i,y:t.y+s*n}}}}}},4919:function(t,e,i){var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),e.loadEmittersPlugin=void 0;const s=i(7373),a=i(676),r=i(4737),l=i(8327),c=i(7579),d=i(3969),h=i(460);class u{constructor(){this.id="emitters"}getPlugin(t){return new a.Emitters(t)}needsPlugin(t){var e,i,n;if(void 0===t)return!1;const o=t.emitters;return o instanceof Array&&!!o.length||void 0!==o||!!(null===(n=null===(i=null===(e=t.interactivity)||void 0===e?void 0:e.events)||void 0===i?void 0:i.onClick)||void 0===n?void 0:n.mode)&&(0,s.isInArray)(r.EmitterClickMode.emitter,t.interactivity.events.onClick.mode)}loadOptions(t,e){var i,n;if(!this.needsPlugin(t)&&!this.needsPlugin(e))return;const o=t;if(null==e?void 0:e.emitters)if((null==e?void 0:e.emitters)instanceof Array)o.emitters=null==e?void 0:e.emitters.map((t=>{const e=new l.Emitter;return e.load(t),e}));else{let t=o.emitters;void 0===(null==t?void 0:t.load)&&(o.emitters=t=new l.Emitter),t.load(null==e?void 0:e.emitters)}const s=null===(n=null===(i=null==e?void 0:e.interactivity)||void 0===i?void 0:i.modes)||void 0===n?void 0:n.emitters;if(s)if(s instanceof Array)o.interactivity.modes.emitters=s.map((t=>{const e=new l.Emitter;return e.load(t),e}));else{let t=o.interactivity.modes.emitters;void 0===(null==t?void 0:t.load)&&(o.interactivity.modes.emitters=t=new l.Emitter),t.load(s)}}}e.loadEmittersPlugin=async function(t){const e=new u;await t.addPlugin(e),t.addEmitterShape||(t.addEmitterShape=(t,e)=>{c.ShapeManager.addShape(t,e)}),t.addEmitterShape(r.EmitterShapeType.circle,new d.CircleShape),t.addEmitterShape(r.EmitterShapeType.square,new h.SquareShape)},o(i(4685),e)},9799:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.InlineArrangement=void 0,(i=e.InlineArrangement||(e.InlineArrangement={})).equidistant="equidistant",i.onePerPoint="one-per-point",i.perPoint="per-point",i.randomLength="random-length",i.randomPoint="random-point"},3673:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.MoveType=void 0,(i=e.MoveType||(e.MoveType={})).path="path",i.radius="radius"},1740:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.Type=void 0,(i=e.Type||(e.Type={})).inline="inline",i.inside="inside",i.outside="outside",i.none="none"},9361:function(t,e,i){var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),o(i(9799),e),o(i(3673),e),o(i(1740),e)},601:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Draw=void 0;const n=i(3623),o=i(3151);e.Draw=class{constructor(){this.enable=!1,this.stroke=new n.DrawStroke}get lineWidth(){return this.stroke.width}set lineWidth(t){this.stroke.width=t}get lineColor(){return this.stroke.color}set lineColor(t){this.stroke.color=o.OptionsColor.create(this.stroke.color,t)}load(t){var e;if(void 0!==t){void 0!==t.enable&&(this.enable=t.enable);const i=null!==(e=t.stroke)&&void 0!==e?e:{color:t.lineColor,width:t.lineWidth};this.stroke.load(i)}}}},3623:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.DrawStroke=void 0;const n=i(3151),o=i(7373);e.DrawStroke=class{constructor(){this.color=new n.OptionsColor,this.width=.5,this.opacity=1}load(t){var e;void 0!==t&&(this.color=n.OptionsColor.create(this.color,t.color),"string"==typeof this.color.value&&(this.opacity=null!==(e=(0,o.stringToAlpha)(this.color.value))&&void 0!==e?e:this.opacity),void 0!==t.opacity&&(this.opacity=t.opacity),void 0!==t.width&&(this.width=t.width))}}},3642:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Inline=void 0;const n=i(9361);e.Inline=class{constructor(){this.arrangement=n.InlineArrangement.onePerPoint}load(t){void 0!==t&&void 0!==t.arrangement&&(this.arrangement=t.arrangement)}}},9617:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.LocalSvg=void 0,e.LocalSvg=class{constructor(){this.path=[],this.size={height:0,width:0}}load(t){void 0!==t&&(void 0!==t.path&&(this.path=t.path),void 0!==t.size&&(void 0!==t.size.width&&(this.size.width=t.size.width),void 0!==t.size.height&&(this.size.height=t.size.height)))}}},8555:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Move=void 0;const n=i(9361);e.Move=class{constructor(){this.radius=10,this.type=n.MoveType.path}load(t){void 0!==t&&(void 0!==t.radius&&(this.radius=t.radius),void 0!==t.type&&(this.type=t.type))}}},8212:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.PolygonMask=void 0;const n=i(9361),o=i(601),s=i(8555),a=i(3642),r=i(9617),l=i(7373);e.PolygonMask=class{constructor(){this.draw=new o.Draw,this.enable=!1,this.inline=new a.Inline,this.move=new s.Move,this.scale=1,this.type=n.Type.none}get inlineArrangement(){return this.inline.arrangement}set inlineArrangement(t){this.inline.arrangement=t}load(t){var e;if(void 0!==t){this.draw.load(t.draw);const i=null!==(e=t.inline)&&void 0!==e?e:{arrangement:t.inlineArrangement};void 0!==i&&this.inline.load(i),this.move.load(t.move),void 0!==t.scale&&(this.scale=t.scale),void 0!==t.type&&(this.type=t.type),void 0!==t.enable?this.enable=t.enable:this.enable=this.type!==n.Type.none,void 0!==t.url&&(this.url=t.url),void 0!==t.data&&("string"==typeof t.data?this.data=t.data:(this.data=new r.LocalSvg,this.data.load(t.data))),void 0!==t.position&&(this.position=(0,l.deepExtend)({},t.position))}}}},5765:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.PolygonMaskInstance=void 0;const n=i(9361),o=i(7373),s=i(8212),a=i(6331),r=i(4015);e.PolygonMaskInstance=class{constructor(t){this.container=t,this.dimension={height:0,width:0},this.path2DSupported=!!window.Path2D,this.options=new s.PolygonMask,this.polygonMaskMoveRadius=this.options.move.radius*t.retina.pixelRatio}async initAsync(t){this.options.load(null==t?void 0:t.polygon);const e=this.options;this.polygonMaskMoveRadius=e.move.radius*this.container.retina.pixelRatio,e.enable&&await this.initRawData()}resize(){const t=this.container,e=this.options;e.enable&&e.type!==n.Type.none&&(this.redrawTimeout&&clearTimeout(this.redrawTimeout),this.redrawTimeout=window.setTimeout((async()=>{await this.initRawData(!0),t.particles.redraw()}),250))}stop(){delete this.raw,delete this.paths}particlesInitialization(){const t=this.options;return!(!t.enable||t.type!==n.Type.inline||t.inline.arrangement!==n.InlineArrangement.onePerPoint&&t.inline.arrangement!==n.InlineArrangement.perPoint||(this.drawPoints(),0))}particlePosition(t){var e,i;if(this.options.enable&&(null!==(i=null===(e=this.raw)||void 0===e?void 0:e.length)&&void 0!==i?i:0)>0)return(0,o.deepExtend)({},t||this.randomPoint())}particleBounce(t,e,i){return this.polygonBounce(t,e,i)}clickPositionValid(t){const e=this.options;return e.enable&&e.type!==n.Type.none&&e.type!==n.Type.inline&&this.checkInsidePolygon(t)}draw(t){var e;if(!(null===(e=this.paths)||void 0===e?void 0:e.length))return;const i=this.options,n=i.draw;if(!i.enable||!n.enable)return;const o=this.raw;for(const e of this.paths){const i=e.path2d,s=this.path2DSupported;t&&(s&&i&&this.offset?(0,r.drawPolygonMaskPath)(t,i,n.stroke,this.offset):o&&(0,r.drawPolygonMask)(t,o,n.stroke))}}polygonBounce(t,e,i){const s=this.options;if(!this.raw||!s.enable||i!==a.OutModeDirection.top)return!1;if(s.type===n.Type.inside||s.type===n.Type.outside){let e,i,n;const s=t.getPosition(),a=t.getRadius();for(let l=0,c=this.raw.length-1;l<this.raw.length;c=l++){const d=this.raw[l],h=this.raw[c];e=(0,r.calcClosestPtOnSegment)(d,h,s);const u=(0,o.getDistances)(s,e);if([i,n]=[u.dx,u.dy],u.distance<a)return(0,r.segmentBounce)(d,h,t.velocity),!0}if(e&&void 0!==i&&void 0!==n&&!this.checkInsidePolygon(s)){const i={x:1,y:1};return t.position.x>=e.x&&(i.x=-1),t.position.y>=e.y&&(i.y=-1),t.position.x=e.x+2*a*i.x,t.position.y=e.y+2*a*i.y,t.velocity.mult(-1),!0}}else if(s.type===n.Type.inline&&t.initialPosition&&(0,o.getDistance)(t.initialPosition,t.getPosition())>this.polygonMaskMoveRadius)return t.velocity.x=t.velocity.y/2-t.velocity.x,t.velocity.y=t.velocity.x/2-t.velocity.y,!0;return!1}checkInsidePolygon(t){var e,i;const s=this.container,a=this.options;if(!a.enable||a.type===n.Type.none||a.type===n.Type.inline)return!0;if(!this.raw)throw new Error(o.Constants.noPolygonFound);const r=s.canvas.size,l=null!==(e=null==t?void 0:t.x)&&void 0!==e?e:Math.random()*r.width,c=null!==(i=null==t?void 0:t.y)&&void 0!==i?i:Math.random()*r.height;let d=!1;for(let t=0,e=this.raw.length-1;t<this.raw.length;e=t++){const i=this.raw[t],n=this.raw[e];i.y>c!=n.y>c&&l<(n.x-i.x)*(c-i.y)/(n.y-i.y)+i.x&&(d=!d)}return a.type===n.Type.inside?d:a.type===n.Type.outside&&!d}parseSvgPath(t,e){var i,n,o;const s=null!=e&&e;if(void 0!==this.paths&&!s)return this.raw;const a=this.container,l=this.options,c=(new DOMParser).parseFromString(t,"image/svg+xml"),d=c.getElementsByTagName("svg")[0];let h=d.getElementsByTagName("path");h.length||(h=c.getElementsByTagName("path")),this.paths=[];for(let t=0;t<h.length;t++){const e=h.item(t);e&&this.paths.push({element:e,length:e.getTotalLength()})}const u=a.retina.pixelRatio,p=l.scale/u;this.dimension.width=parseFloat(null!==(i=d.getAttribute("width"))&&void 0!==i?i:"0")*p,this.dimension.height=parseFloat(null!==(n=d.getAttribute("height"))&&void 0!==n?n:"0")*p;const v=null!==(o=l.position)&&void 0!==o?o:{x:50,y:50};return this.offset={x:a.canvas.size.width*v.x/(100*u)-this.dimension.width/2,y:a.canvas.size.height*v.y/(100*u)-this.dimension.height/2},(0,r.parsePaths)(this.paths,p,this.offset)}async downloadSvgPath(t,e){const i=this.options,n=t||i.url,o=null!=e&&e;if(!n||void 0!==this.paths&&!o)return this.raw;const s=await fetch(n);if(!s.ok)throw new Error("tsParticles Error - Error occurred during polygon mask download");return this.parseSvgPath(await s.text(),e)}drawPoints(){if(this.raw)for(const t of this.raw)this.container.particles.addParticle({x:t.x,y:t.y})}randomPoint(){const t=this.container,e=this.options;let i;if(e.type===n.Type.inline)switch(e.inline.arrangement){case n.InlineArrangement.randomPoint:i=this.getRandomPoint();break;case n.InlineArrangement.randomLength:i=this.getRandomPointByLength();break;case n.InlineArrangement.equidistant:i=this.getEquidistantPointByIndex(t.particles.count);break;case n.InlineArrangement.onePerPoint:case n.InlineArrangement.perPoint:default:i=this.getPointByIndex(t.particles.count)}else i={x:Math.random()*t.canvas.size.width,y:Math.random()*t.canvas.size.height};return this.checkInsidePolygon(i)?i:this.randomPoint()}getRandomPoint(){if(!this.raw||!this.raw.length)throw new Error(o.Constants.noPolygonDataLoaded);const t=(0,o.itemFromArray)(this.raw);return{x:t.x,y:t.y}}getRandomPointByLength(){var t,e,i;const n=this.options;if(!this.raw||!this.raw.length||!(null===(t=this.paths)||void 0===t?void 0:t.length))throw new Error(o.Constants.noPolygonDataLoaded);const s=(0,o.itemFromArray)(this.paths),a=Math.floor(Math.random()*s.length)+1,r=s.element.getPointAtLength(a);return{x:r.x*n.scale+((null===(e=this.offset)||void 0===e?void 0:e.x)||0),y:r.y*n.scale+((null===(i=this.offset)||void 0===i?void 0:i.y)||0)}}getEquidistantPointByIndex(t){var e,i,n,s,a,r,l;const c=this.container.actualOptions,d=this.options;if(!this.raw||!this.raw.length||!(null===(e=this.paths)||void 0===e?void 0:e.length))throw new Error(o.Constants.noPolygonDataLoaded);let h,u=0;const p=this.paths.reduce(((t,e)=>t+e.length),0)/c.particles.number.value;for(const e of this.paths){const i=p*t-u;if(i<=e.length){h=e.element.getPointAtLength(i);break}u+=e.length}return{x:(null!==(i=null==h?void 0:h.x)&&void 0!==i?i:0)*d.scale+(null!==(s=null===(n=this.offset)||void 0===n?void 0:n.x)&&void 0!==s?s:0),y:(null!==(a=null==h?void 0:h.y)&&void 0!==a?a:0)*d.scale+(null!==(l=null===(r=this.offset)||void 0===r?void 0:r.y)&&void 0!==l?l:0)}}getPointByIndex(t){if(!this.raw||!this.raw.length)throw new Error(o.Constants.noPolygonDataLoaded);const e=this.raw[t%this.raw.length];return{x:e.x,y:e.y}}createPath2D(){var t,e;const i=this.options;if(this.path2DSupported&&(null===(t=this.paths)||void 0===t?void 0:t.length))for(const t of this.paths){const n=null===(e=t.element)||void 0===e?void 0:e.getAttribute("d");if(n){const e=new Path2D(n),o=document.createElementNS("http://www.w3.org/2000/svg","svg").createSVGMatrix(),s=new Path2D,a=o.scale(i.scale);s.addPath?(s.addPath(e,a),t.path2d=s):delete t.path2d}else delete t.path2d;!t.path2d&&this.raw&&(t.path2d=new Path2D,t.path2d.moveTo(this.raw[0].x,this.raw[0].y),this.raw.forEach(((e,i)=>{var n;i>0&&(null===(n=t.path2d)||void 0===n||n.lineTo(e.x,e.y))})),t.path2d.closePath())}}async initRawData(t){const e=this.options;if(e.url)this.raw=await this.downloadSvgPath(e.url,t);else if(e.data){const i=e.data;let n;if("string"!=typeof i){const t=i.path instanceof Array?i.path.map((t=>`<path d="${t}" />`)).join(""):`<path d="${i.path}" />`;n=`<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="${i.size.width}" height="${i.size.height}">${t}</svg>`}else n=i;this.raw=this.parseSvgPath(n,t)}this.createPath2D()}}},6031:()=>{!function(){try{if("undefined"==typeof window)return;"SVGPathSeg"in window||(window.SVGPathSeg=function(t,e,i){this.pathSegType=t,this.pathSegTypeAsLetter=e,this._owningPathSegList=i},window.SVGPathSeg.prototype.classname="SVGPathSeg",window.SVGPathSeg.PATHSEG_UNKNOWN=0,window.SVGPathSeg.PATHSEG_CLOSEPATH=1,window.SVGPathSeg.PATHSEG_MOVETO_ABS=2,window.SVGPathSeg.PATHSEG_MOVETO_REL=3,window.SVGPathSeg.PATHSEG_LINETO_ABS=4,window.SVGPathSeg.PATHSEG_LINETO_REL=5,window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS=6,window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL=7,window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS=8,window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL=9,window.SVGPathSeg.PATHSEG_ARC_ABS=10,window.SVGPathSeg.PATHSEG_ARC_REL=11,window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS=12,window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL=13,window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS=14,window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL=15,window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS=16,window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL=17,window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS=18,window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL=19,window.SVGPathSeg.prototype._segmentChanged=function(){this._owningPathSegList&&this._owningPathSegList.segmentChanged(this)},window.SVGPathSegClosePath=function(t){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CLOSEPATH,"z",t)},window.SVGPathSegClosePath.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegClosePath.prototype.toString=function(){return"[object SVGPathSegClosePath]"},window.SVGPathSegClosePath.prototype._asPathString=function(){return this.pathSegTypeAsLetter},window.SVGPathSegClosePath.prototype.clone=function(){return new window.SVGPathSegClosePath(void 0)},window.SVGPathSegMovetoAbs=function(t,e,i){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_MOVETO_ABS,"M",t),this._x=e,this._y=i},window.SVGPathSegMovetoAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegMovetoAbs.prototype.toString=function(){return"[object SVGPathSegMovetoAbs]"},window.SVGPathSegMovetoAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},window.SVGPathSegMovetoAbs.prototype.clone=function(){return new window.SVGPathSegMovetoAbs(void 0,this._x,this._y)},Object.defineProperty(window.SVGPathSegMovetoAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegMovetoAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegMovetoRel=function(t,e,i){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_MOVETO_REL,"m",t),this._x=e,this._y=i},window.SVGPathSegMovetoRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegMovetoRel.prototype.toString=function(){return"[object SVGPathSegMovetoRel]"},window.SVGPathSegMovetoRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},window.SVGPathSegMovetoRel.prototype.clone=function(){return new window.SVGPathSegMovetoRel(void 0,this._x,this._y)},Object.defineProperty(window.SVGPathSegMovetoRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegMovetoRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoAbs=function(t,e,i){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_LINETO_ABS,"L",t),this._x=e,this._y=i},window.SVGPathSegLinetoAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegLinetoAbs.prototype.toString=function(){return"[object SVGPathSegLinetoAbs]"},window.SVGPathSegLinetoAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},window.SVGPathSegLinetoAbs.prototype.clone=function(){return new window.SVGPathSegLinetoAbs(void 0,this._x,this._y)},Object.defineProperty(window.SVGPathSegLinetoAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegLinetoAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoRel=function(t,e,i){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_LINETO_REL,"l",t),this._x=e,this._y=i},window.SVGPathSegLinetoRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegLinetoRel.prototype.toString=function(){return"[object SVGPathSegLinetoRel]"},window.SVGPathSegLinetoRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},window.SVGPathSegLinetoRel.prototype.clone=function(){return new window.SVGPathSegLinetoRel(void 0,this._x,this._y)},Object.defineProperty(window.SVGPathSegLinetoRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegLinetoRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoCubicAbs=function(t,e,i,n,o,s,a){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS,"C",t),this._x=e,this._y=i,this._x1=n,this._y1=o,this._x2=s,this._y2=a},window.SVGPathSegCurvetoCubicAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegCurvetoCubicAbs.prototype.toString=function(){return"[object SVGPathSegCurvetoCubicAbs]"},window.SVGPathSegCurvetoCubicAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x1+" "+this._y1+" "+this._x2+" "+this._y2+" "+this._x+" "+this._y},window.SVGPathSegCurvetoCubicAbs.prototype.clone=function(){return new window.SVGPathSegCurvetoCubicAbs(void 0,this._x,this._y,this._x1,this._y1,this._x2,this._y2)},Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype,"x1",{get:function(){return this._x1},set:function(t){this._x1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype,"y1",{get:function(){return this._y1},set:function(t){this._y1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype,"x2",{get:function(){return this._x2},set:function(t){this._x2=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype,"y2",{get:function(){return this._y2},set:function(t){this._y2=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoCubicRel=function(t,e,i,n,o,s,a){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL,"c",t),this._x=e,this._y=i,this._x1=n,this._y1=o,this._x2=s,this._y2=a},window.SVGPathSegCurvetoCubicRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegCurvetoCubicRel.prototype.toString=function(){return"[object SVGPathSegCurvetoCubicRel]"},window.SVGPathSegCurvetoCubicRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x1+" "+this._y1+" "+this._x2+" "+this._y2+" "+this._x+" "+this._y},window.SVGPathSegCurvetoCubicRel.prototype.clone=function(){return new window.SVGPathSegCurvetoCubicRel(void 0,this._x,this._y,this._x1,this._y1,this._x2,this._y2)},Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype,"x1",{get:function(){return this._x1},set:function(t){this._x1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype,"y1",{get:function(){return this._y1},set:function(t){this._y1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype,"x2",{get:function(){return this._x2},set:function(t){this._x2=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype,"y2",{get:function(){return this._y2},set:function(t){this._y2=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoQuadraticAbs=function(t,e,i,n,o){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS,"Q",t),this._x=e,this._y=i,this._x1=n,this._y1=o},window.SVGPathSegCurvetoQuadraticAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegCurvetoQuadraticAbs.prototype.toString=function(){return"[object SVGPathSegCurvetoQuadraticAbs]"},window.SVGPathSegCurvetoQuadraticAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x1+" "+this._y1+" "+this._x+" "+this._y},window.SVGPathSegCurvetoQuadraticAbs.prototype.clone=function(){return new window.SVGPathSegCurvetoQuadraticAbs(void 0,this._x,this._y,this._x1,this._y1)},Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype,"x1",{get:function(){return this._x1},set:function(t){this._x1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype,"y1",{get:function(){return this._y1},set:function(t){this._y1=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoQuadraticRel=function(t,e,i,n,o){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL,"q",t),this._x=e,this._y=i,this._x1=n,this._y1=o},window.SVGPathSegCurvetoQuadraticRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegCurvetoQuadraticRel.prototype.toString=function(){return"[object SVGPathSegCurvetoQuadraticRel]"},window.SVGPathSegCurvetoQuadraticRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x1+" "+this._y1+" "+this._x+" "+this._y},window.SVGPathSegCurvetoQuadraticRel.prototype.clone=function(){return new window.SVGPathSegCurvetoQuadraticRel(void 0,this._x,this._y,this._x1,this._y1)},Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype,"x1",{get:function(){return this._x1},set:function(t){this._x1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype,"y1",{get:function(){return this._y1},set:function(t){this._y1=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegArcAbs=function(t,e,i,n,o,s,a,r){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_ARC_ABS,"A",t),this._x=e,this._y=i,this._r1=n,this._r2=o,this._angle=s,this._largeArcFlag=a,this._sweepFlag=r},window.SVGPathSegArcAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegArcAbs.prototype.toString=function(){return"[object SVGPathSegArcAbs]"},window.SVGPathSegArcAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._r1+" "+this._r2+" "+this._angle+" "+(this._largeArcFlag?"1":"0")+" "+(this._sweepFlag?"1":"0")+" "+this._x+" "+this._y},window.SVGPathSegArcAbs.prototype.clone=function(){return new window.SVGPathSegArcAbs(void 0,this._x,this._y,this._r1,this._r2,this._angle,this._largeArcFlag,this._sweepFlag)},Object.defineProperty(window.SVGPathSegArcAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcAbs.prototype,"r1",{get:function(){return this._r1},set:function(t){this._r1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcAbs.prototype,"r2",{get:function(){return this._r2},set:function(t){this._r2=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcAbs.prototype,"angle",{get:function(){return this._angle},set:function(t){this._angle=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcAbs.prototype,"largeArcFlag",{get:function(){return this._largeArcFlag},set:function(t){this._largeArcFlag=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcAbs.prototype,"sweepFlag",{get:function(){return this._sweepFlag},set:function(t){this._sweepFlag=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegArcRel=function(t,e,i,n,o,s,a,r){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_ARC_REL,"a",t),this._x=e,this._y=i,this._r1=n,this._r2=o,this._angle=s,this._largeArcFlag=a,this._sweepFlag=r},window.SVGPathSegArcRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegArcRel.prototype.toString=function(){return"[object SVGPathSegArcRel]"},window.SVGPathSegArcRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._r1+" "+this._r2+" "+this._angle+" "+(this._largeArcFlag?"1":"0")+" "+(this._sweepFlag?"1":"0")+" "+this._x+" "+this._y},window.SVGPathSegArcRel.prototype.clone=function(){return new window.SVGPathSegArcRel(void 0,this._x,this._y,this._r1,this._r2,this._angle,this._largeArcFlag,this._sweepFlag)},Object.defineProperty(window.SVGPathSegArcRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcRel.prototype,"r1",{get:function(){return this._r1},set:function(t){this._r1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcRel.prototype,"r2",{get:function(){return this._r2},set:function(t){this._r2=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcRel.prototype,"angle",{get:function(){return this._angle},set:function(t){this._angle=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcRel.prototype,"largeArcFlag",{get:function(){return this._largeArcFlag},set:function(t){this._largeArcFlag=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcRel.prototype,"sweepFlag",{get:function(){return this._sweepFlag},set:function(t){this._sweepFlag=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoHorizontalAbs=function(t,e){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS,"H",t),this._x=e},window.SVGPathSegLinetoHorizontalAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegLinetoHorizontalAbs.prototype.toString=function(){return"[object SVGPathSegLinetoHorizontalAbs]"},window.SVGPathSegLinetoHorizontalAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x},window.SVGPathSegLinetoHorizontalAbs.prototype.clone=function(){return new window.SVGPathSegLinetoHorizontalAbs(void 0,this._x)},Object.defineProperty(window.SVGPathSegLinetoHorizontalAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoHorizontalRel=function(t,e){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL,"h",t),this._x=e},window.SVGPathSegLinetoHorizontalRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegLinetoHorizontalRel.prototype.toString=function(){return"[object SVGPathSegLinetoHorizontalRel]"},window.SVGPathSegLinetoHorizontalRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x},window.SVGPathSegLinetoHorizontalRel.prototype.clone=function(){return new window.SVGPathSegLinetoHorizontalRel(void 0,this._x)},Object.defineProperty(window.SVGPathSegLinetoHorizontalRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoVerticalAbs=function(t,e){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS,"V",t),this._y=e},window.SVGPathSegLinetoVerticalAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegLinetoVerticalAbs.prototype.toString=function(){return"[object SVGPathSegLinetoVerticalAbs]"},window.SVGPathSegLinetoVerticalAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._y},window.SVGPathSegLinetoVerticalAbs.prototype.clone=function(){return new window.SVGPathSegLinetoVerticalAbs(void 0,this._y)},Object.defineProperty(window.SVGPathSegLinetoVerticalAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoVerticalRel=function(t,e){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL,"v",t),this._y=e},window.SVGPathSegLinetoVerticalRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegLinetoVerticalRel.prototype.toString=function(){return"[object SVGPathSegLinetoVerticalRel]"},window.SVGPathSegLinetoVerticalRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._y},window.SVGPathSegLinetoVerticalRel.prototype.clone=function(){return new window.SVGPathSegLinetoVerticalRel(void 0,this._y)},Object.defineProperty(window.SVGPathSegLinetoVerticalRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoCubicSmoothAbs=function(t,e,i,n,o){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS,"S",t),this._x=e,this._y=i,this._x2=n,this._y2=o},window.SVGPathSegCurvetoCubicSmoothAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegCurvetoCubicSmoothAbs.prototype.toString=function(){return"[object SVGPathSegCurvetoCubicSmoothAbs]"},window.SVGPathSegCurvetoCubicSmoothAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x2+" "+this._y2+" "+this._x+" "+this._y},window.SVGPathSegCurvetoCubicSmoothAbs.prototype.clone=function(){return new window.SVGPathSegCurvetoCubicSmoothAbs(void 0,this._x,this._y,this._x2,this._y2)},Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype,"x2",{get:function(){return this._x2},set:function(t){this._x2=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype,"y2",{get:function(){return this._y2},set:function(t){this._y2=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoCubicSmoothRel=function(t,e,i,n,o){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL,"s",t),this._x=e,this._y=i,this._x2=n,this._y2=o},window.SVGPathSegCurvetoCubicSmoothRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegCurvetoCubicSmoothRel.prototype.toString=function(){return"[object SVGPathSegCurvetoCubicSmoothRel]"},window.SVGPathSegCurvetoCubicSmoothRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x2+" "+this._y2+" "+this._x+" "+this._y},window.SVGPathSegCurvetoCubicSmoothRel.prototype.clone=function(){return new window.SVGPathSegCurvetoCubicSmoothRel(void 0,this._x,this._y,this._x2,this._y2)},Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype,"x2",{get:function(){return this._x2},set:function(t){this._x2=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype,"y2",{get:function(){return this._y2},set:function(t){this._y2=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoQuadraticSmoothAbs=function(t,e,i){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS,"T",t),this._x=e,this._y=i},window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype.toString=function(){return"[object SVGPathSegCurvetoQuadraticSmoothAbs]"},window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype.clone=function(){return new window.SVGPathSegCurvetoQuadraticSmoothAbs(void 0,this._x,this._y)},Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoQuadraticSmoothRel=function(t,e,i){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL,"t",t),this._x=e,this._y=i},window.SVGPathSegCurvetoQuadraticSmoothRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegCurvetoQuadraticSmoothRel.prototype.toString=function(){return"[object SVGPathSegCurvetoQuadraticSmoothRel]"},window.SVGPathSegCurvetoQuadraticSmoothRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},window.SVGPathSegCurvetoQuadraticSmoothRel.prototype.clone=function(){return new window.SVGPathSegCurvetoQuadraticSmoothRel(void 0,this._x,this._y)},Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),window.SVGPathElement.prototype.createSVGPathSegClosePath=function(){return new window.SVGPathSegClosePath(void 0)},window.SVGPathElement.prototype.createSVGPathSegMovetoAbs=function(t,e){return new window.SVGPathSegMovetoAbs(void 0,t,e)},window.SVGPathElement.prototype.createSVGPathSegMovetoRel=function(t,e){return new window.SVGPathSegMovetoRel(void 0,t,e)},window.SVGPathElement.prototype.createSVGPathSegLinetoAbs=function(t,e){return new window.SVGPathSegLinetoAbs(void 0,t,e)},window.SVGPathElement.prototype.createSVGPathSegLinetoRel=function(t,e){return new window.SVGPathSegLinetoRel(void 0,t,e)},window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicAbs=function(t,e,i,n,o,s){return new window.SVGPathSegCurvetoCubicAbs(void 0,t,e,i,n,o,s)},window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicRel=function(t,e,i,n,o,s){return new window.SVGPathSegCurvetoCubicRel(void 0,t,e,i,n,o,s)},window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticAbs=function(t,e,i,n){return new window.SVGPathSegCurvetoQuadraticAbs(void 0,t,e,i,n)},window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticRel=function(t,e,i,n){return new window.SVGPathSegCurvetoQuadraticRel(void 0,t,e,i,n)},window.SVGPathElement.prototype.createSVGPathSegArcAbs=function(t,e,i,n,o,s,a){return new window.SVGPathSegArcAbs(void 0,t,e,i,n,o,s,a)},window.SVGPathElement.prototype.createSVGPathSegArcRel=function(t,e,i,n,o,s,a){return new window.SVGPathSegArcRel(void 0,t,e,i,n,o,s,a)},window.SVGPathElement.prototype.createSVGPathSegLinetoHorizontalAbs=function(t){return new window.SVGPathSegLinetoHorizontalAbs(void 0,t)},window.SVGPathElement.prototype.createSVGPathSegLinetoHorizontalRel=function(t){return new window.SVGPathSegLinetoHorizontalRel(void 0,t)},window.SVGPathElement.prototype.createSVGPathSegLinetoVerticalAbs=function(t){return new window.SVGPathSegLinetoVerticalAbs(void 0,t)},window.SVGPathElement.prototype.createSVGPathSegLinetoVerticalRel=function(t){return new window.SVGPathSegLinetoVerticalRel(void 0,t)},window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothAbs=function(t,e,i,n){return new window.SVGPathSegCurvetoCubicSmoothAbs(void 0,t,e,i,n)},window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothRel=function(t,e,i,n){return new window.SVGPathSegCurvetoCubicSmoothRel(void 0,t,e,i,n)},window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothAbs=function(t,e){return new window.SVGPathSegCurvetoQuadraticSmoothAbs(void 0,t,e)},window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothRel=function(t,e){return new window.SVGPathSegCurvetoQuadraticSmoothRel(void 0,t,e)},"getPathSegAtLength"in window.SVGPathElement.prototype||(window.SVGPathElement.prototype.getPathSegAtLength=function(t){if(void 0===t||!isFinite(t))throw"Invalid arguments.";var e=document.createElementNS("http://www.w3.org/2000/svg","path");e.setAttribute("d",this.getAttribute("d"));var i=e.pathSegList.numberOfItems-1;if(i<=0)return 0;do{if(e.pathSegList.removeItem(i),t>e.getTotalLength())break;i--}while(i>0);return i})),"SVGPathSegList"in window&&"appendItem"in window.SVGPathSegList.prototype||(window.SVGPathSegList=function(t){this._pathElement=t,this._list=this._parsePath(this._pathElement.getAttribute("d")),this._mutationObserverConfig={attributes:!0,attributeFilter:["d"]},this._pathElementMutationObserver=new MutationObserver(this._updateListFromPathMutations.bind(this)),this._pathElementMutationObserver.observe(this._pathElement,this._mutationObserverConfig)},window.SVGPathSegList.prototype.classname="SVGPathSegList",Object.defineProperty(window.SVGPathSegList.prototype,"numberOfItems",{get:function(){return this._checkPathSynchronizedToList(),this._list.length},enumerable:!0}),Object.defineProperty(window.SVGPathSegList.prototype,"length",{get:function(){return this._checkPathSynchronizedToList(),this._list.length},enumerable:!0}),Object.defineProperty(window.SVGPathElement.prototype,"pathSegList",{get:function(){return this._pathSegList||(this._pathSegList=new window.SVGPathSegList(this)),this._pathSegList},enumerable:!0}),Object.defineProperty(window.SVGPathElement.prototype,"normalizedPathSegList",{get:function(){return this.pathSegList},enumerable:!0}),Object.defineProperty(window.SVGPathElement.prototype,"animatedPathSegList",{get:function(){return this.pathSegList},enumerable:!0}),Object.defineProperty(window.SVGPathElement.prototype,"animatedNormalizedPathSegList",{get:function(){return this.pathSegList},enumerable:!0}),window.SVGPathSegList.prototype._checkPathSynchronizedToList=function(){this._updateListFromPathMutations(this._pathElementMutationObserver.takeRecords())},window.SVGPathSegList.prototype._updateListFromPathMutations=function(t){if(this._pathElement){var e=!1;t.forEach((function(t){"d"==t.attributeName&&(e=!0)})),e&&(this._list=this._parsePath(this._pathElement.getAttribute("d")))}},window.SVGPathSegList.prototype._writeListToPath=function(){this._pathElementMutationObserver.disconnect(),this._pathElement.setAttribute("d",window.SVGPathSegList._pathSegArrayAsString(this._list)),this._pathElementMutationObserver.observe(this._pathElement,this._mutationObserverConfig)},window.SVGPathSegList.prototype.segmentChanged=function(t){this._writeListToPath()},window.SVGPathSegList.prototype.clear=function(){this._checkPathSynchronizedToList(),this._list.forEach((function(t){t._owningPathSegList=null})),this._list=[],this._writeListToPath()},window.SVGPathSegList.prototype.initialize=function(t){return this._checkPathSynchronizedToList(),this._list=[t],t._owningPathSegList=this,this._writeListToPath(),t},window.SVGPathSegList.prototype._checkValidIndex=function(t){if(isNaN(t)||t<0||t>=this.numberOfItems)throw"INDEX_SIZE_ERR"},window.SVGPathSegList.prototype.getItem=function(t){return this._checkPathSynchronizedToList(),this._checkValidIndex(t),this._list[t]},window.SVGPathSegList.prototype.insertItemBefore=function(t,e){return this._checkPathSynchronizedToList(),e>this.numberOfItems&&(e=this.numberOfItems),t._owningPathSegList&&(t=t.clone()),this._list.splice(e,0,t),t._owningPathSegList=this,this._writeListToPath(),t},window.SVGPathSegList.prototype.replaceItem=function(t,e){return this._checkPathSynchronizedToList(),t._owningPathSegList&&(t=t.clone()),this._checkValidIndex(e),this._list[e]=t,t._owningPathSegList=this,this._writeListToPath(),t},window.SVGPathSegList.prototype.removeItem=function(t){this._checkPathSynchronizedToList(),this._checkValidIndex(t);var e=this._list[t];return this._list.splice(t,1),this._writeListToPath(),e},window.SVGPathSegList.prototype.appendItem=function(t){return this._checkPathSynchronizedToList(),t._owningPathSegList&&(t=t.clone()),this._list.push(t),t._owningPathSegList=this,this._writeListToPath(),t},window.SVGPathSegList._pathSegArrayAsString=function(t){var e="",i=!0;return t.forEach((function(t){i?(i=!1,e+=t._asPathString()):e+=" "+t._asPathString()})),e},window.SVGPathSegList.prototype._parsePath=function(t){if(!t||0==t.length)return[];var e=this,i=function(){this.pathSegList=[]};i.prototype.appendSegment=function(t){this.pathSegList.push(t)};var n=function(t){this._string=t,this._currentIndex=0,this._endIndex=this._string.length,this._previousCommand=window.SVGPathSeg.PATHSEG_UNKNOWN,this._skipOptionalSpaces()};n.prototype._isCurrentSpace=function(){var t=this._string[this._currentIndex];return t<=" "&&(" "==t||"\n"==t||"\t"==t||"\r"==t||"\f"==t)},n.prototype._skipOptionalSpaces=function(){for(;this._currentIndex<this._endIndex&&this._isCurrentSpace();)this._currentIndex++;return this._currentIndex<this._endIndex},n.prototype._skipOptionalSpacesOrDelimiter=function(){return!(this._currentIndex<this._endIndex&&!this._isCurrentSpace()&&","!=this._string.charAt(this._currentIndex))&&(this._skipOptionalSpaces()&&this._currentIndex<this._endIndex&&","==this._string.charAt(this._currentIndex)&&(this._currentIndex++,this._skipOptionalSpaces()),this._currentIndex<this._endIndex)},n.prototype.hasMoreData=function(){return this._currentIndex<this._endIndex},n.prototype.peekSegmentType=function(){var t=this._string[this._currentIndex];return this._pathSegTypeFromChar(t)},n.prototype._pathSegTypeFromChar=function(t){switch(t){case"Z":case"z":return window.SVGPathSeg.PATHSEG_CLOSEPATH;case"M":return window.SVGPathSeg.PATHSEG_MOVETO_ABS;case"m":return window.SVGPathSeg.PATHSEG_MOVETO_REL;case"L":return window.SVGPathSeg.PATHSEG_LINETO_ABS;case"l":return window.SVGPathSeg.PATHSEG_LINETO_REL;case"C":return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS;case"c":return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL;case"Q":return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS;case"q":return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL;case"A":return window.SVGPathSeg.PATHSEG_ARC_ABS;case"a":return window.SVGPathSeg.PATHSEG_ARC_REL;case"H":return window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS;case"h":return window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL;case"V":return window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS;case"v":return window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL;case"S":return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS;case"s":return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL;case"T":return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS;case"t":return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL;default:return window.SVGPathSeg.PATHSEG_UNKNOWN}},n.prototype._nextCommandHelper=function(t,e){return("+"==t||"-"==t||"."==t||t>="0"&&t<="9")&&e!=window.SVGPathSeg.PATHSEG_CLOSEPATH?e==window.SVGPathSeg.PATHSEG_MOVETO_ABS?window.SVGPathSeg.PATHSEG_LINETO_ABS:e==window.SVGPathSeg.PATHSEG_MOVETO_REL?window.SVGPathSeg.PATHSEG_LINETO_REL:e:window.SVGPathSeg.PATHSEG_UNKNOWN},n.prototype.initialCommandIsMoveTo=function(){if(!this.hasMoreData())return!0;var t=this.peekSegmentType();return t==window.SVGPathSeg.PATHSEG_MOVETO_ABS||t==window.SVGPathSeg.PATHSEG_MOVETO_REL},n.prototype._parseNumber=function(){var t=0,e=0,i=1,n=0,o=1,s=1,a=this._currentIndex;if(this._skipOptionalSpaces(),this._currentIndex<this._endIndex&&"+"==this._string.charAt(this._currentIndex)?this._currentIndex++:this._currentIndex<this._endIndex&&"-"==this._string.charAt(this._currentIndex)&&(this._currentIndex++,o=-1),!(this._currentIndex==this._endIndex||(this._string.charAt(this._currentIndex)<"0"||this._string.charAt(this._currentIndex)>"9")&&"."!=this._string.charAt(this._currentIndex))){for(var r=this._currentIndex;this._currentIndex<this._endIndex&&this._string.charAt(this._currentIndex)>="0"&&this._string.charAt(this._currentIndex)<="9";)this._currentIndex++;if(this._currentIndex!=r)for(var l=this._currentIndex-1,c=1;l>=r;)e+=c*(this._string.charAt(l--)-"0"),c*=10;if(this._currentIndex<this._endIndex&&"."==this._string.charAt(this._currentIndex)){if(this._currentIndex++,this._currentIndex>=this._endIndex||this._string.charAt(this._currentIndex)<"0"||this._string.charAt(this._currentIndex)>"9")return;for(;this._currentIndex<this._endIndex&&this._string.charAt(this._currentIndex)>="0"&&this._string.charAt(this._currentIndex)<="9";)i*=10,n+=(this._string.charAt(this._currentIndex)-"0")/i,this._currentIndex+=1}if(this._currentIndex!=a&&this._currentIndex+1<this._endIndex&&("e"==this._string.charAt(this._currentIndex)||"E"==this._string.charAt(this._currentIndex))&&"x"!=this._string.charAt(this._currentIndex+1)&&"m"!=this._string.charAt(this._currentIndex+1)){if(this._currentIndex++,"+"==this._string.charAt(this._currentIndex)?this._currentIndex++:"-"==this._string.charAt(this._currentIndex)&&(this._currentIndex++,s=-1),this._currentIndex>=this._endIndex||this._string.charAt(this._currentIndex)<"0"||this._string.charAt(this._currentIndex)>"9")return;for(;this._currentIndex<this._endIndex&&this._string.charAt(this._currentIndex)>="0"&&this._string.charAt(this._currentIndex)<="9";)t*=10,t+=this._string.charAt(this._currentIndex)-"0",this._currentIndex++}var d=e+n;if(d*=o,t&&(d*=Math.pow(10,s*t)),a!=this._currentIndex)return this._skipOptionalSpacesOrDelimiter(),d}},n.prototype._parseArcFlag=function(){if(!(this._currentIndex>=this._endIndex)){var t=!1,e=this._string.charAt(this._currentIndex++);if("0"==e)t=!1;else{if("1"!=e)return;t=!0}return this._skipOptionalSpacesOrDelimiter(),t}},n.prototype.parseSegment=function(){var t=this._string[this._currentIndex],i=this._pathSegTypeFromChar(t);if(i==window.SVGPathSeg.PATHSEG_UNKNOWN){if(this._previousCommand==window.SVGPathSeg.PATHSEG_UNKNOWN)return null;if((i=this._nextCommandHelper(t,this._previousCommand))==window.SVGPathSeg.PATHSEG_UNKNOWN)return null}else this._currentIndex++;switch(this._previousCommand=i,i){case window.SVGPathSeg.PATHSEG_MOVETO_REL:return new window.SVGPathSegMovetoRel(e,this._parseNumber(),this._parseNumber());case window.SVGPathSeg.PATHSEG_MOVETO_ABS:return new window.SVGPathSegMovetoAbs(e,this._parseNumber(),this._parseNumber());case window.SVGPathSeg.PATHSEG_LINETO_REL:return new window.SVGPathSegLinetoRel(e,this._parseNumber(),this._parseNumber());case window.SVGPathSeg.PATHSEG_LINETO_ABS:return new window.SVGPathSegLinetoAbs(e,this._parseNumber(),this._parseNumber());case window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:return new window.SVGPathSegLinetoHorizontalRel(e,this._parseNumber());case window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:return new window.SVGPathSegLinetoHorizontalAbs(e,this._parseNumber());case window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL:return new window.SVGPathSegLinetoVerticalRel(e,this._parseNumber());case window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS:return new window.SVGPathSegLinetoVerticalAbs(e,this._parseNumber());case window.SVGPathSeg.PATHSEG_CLOSEPATH:return this._skipOptionalSpaces(),new window.SVGPathSegClosePath(e);case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL:var n={x1:this._parseNumber(),y1:this._parseNumber(),x2:this._parseNumber(),y2:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()};return new window.SVGPathSegCurvetoCubicRel(e,n.x,n.y,n.x1,n.y1,n.x2,n.y2);case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS:return n={x1:this._parseNumber(),y1:this._parseNumber(),x2:this._parseNumber(),y2:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()},new window.SVGPathSegCurvetoCubicAbs(e,n.x,n.y,n.x1,n.y1,n.x2,n.y2);case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:return n={x2:this._parseNumber(),y2:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()},new window.SVGPathSegCurvetoCubicSmoothRel(e,n.x,n.y,n.x2,n.y2);case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:return n={x2:this._parseNumber(),y2:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()},new window.SVGPathSegCurvetoCubicSmoothAbs(e,n.x,n.y,n.x2,n.y2);case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:return n={x1:this._parseNumber(),y1:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()},new window.SVGPathSegCurvetoQuadraticRel(e,n.x,n.y,n.x1,n.y1);case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:return n={x1:this._parseNumber(),y1:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()},new window.SVGPathSegCurvetoQuadraticAbs(e,n.x,n.y,n.x1,n.y1);case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:return new window.SVGPathSegCurvetoQuadraticSmoothRel(e,this._parseNumber(),this._parseNumber());case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:return new window.SVGPathSegCurvetoQuadraticSmoothAbs(e,this._parseNumber(),this._parseNumber());case window.SVGPathSeg.PATHSEG_ARC_REL:return n={x1:this._parseNumber(),y1:this._parseNumber(),arcAngle:this._parseNumber(),arcLarge:this._parseArcFlag(),arcSweep:this._parseArcFlag(),x:this._parseNumber(),y:this._parseNumber()},new window.SVGPathSegArcRel(e,n.x,n.y,n.x1,n.y1,n.arcAngle,n.arcLarge,n.arcSweep);case window.SVGPathSeg.PATHSEG_ARC_ABS:return n={x1:this._parseNumber(),y1:this._parseNumber(),arcAngle:this._parseNumber(),arcLarge:this._parseArcFlag(),arcSweep:this._parseArcFlag(),x:this._parseNumber(),y:this._parseNumber()},new window.SVGPathSegArcAbs(e,n.x,n.y,n.x1,n.y1,n.arcAngle,n.arcLarge,n.arcSweep);default:throw"Unknown path seg type."}};var o=new i,s=new n(t);if(!s.initialCommandIsMoveTo())return[];for(;s.hasMoreData();){var a=s.parseSegment();if(!a)return[];o.appendSegment(a)}return o.pathSegList})}catch(t){console.warn("An error occurred in tsParticles pathseg polyfill. If the Polygon Mask is not working, please open an issue here: https://github.com/matteobruni/tsparticles",t)}}()},3737:function(t,e,i){var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&n(e,t,i);return o(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.loadPolygonMaskPlugin=void 0;const a=i(5765),r=i(8212),l=i(9361),c=i(7373);class d{constructor(){this.id="polygonMask"}getPlugin(t){return new a.PolygonMaskInstance(t)}needsPlugin(t){var e,i,n;return null!==(i=null===(e=null==t?void 0:t.polygon)||void 0===e?void 0:e.enable)&&void 0!==i?i:void 0!==(null===(n=null==t?void 0:t.polygon)||void 0===n?void 0:n.type)&&t.polygon.type!==l.Type.none}loadOptions(t,e){if(!this.needsPlugin(e))return;const i=t;let n=i.polygon;void 0===(null==n?void 0:n.load)&&(i.polygon=n=new r.PolygonMask),n.load(null==e?void 0:e.polygon)}}e.loadPolygonMaskPlugin=async function(t){(0,c.isSsr)()||window.SVGPathSeg||await Promise.resolve().then((()=>s(i(6031))));const e=new d;await t.addPlugin(e)}},4015:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.segmentBounce=e.calcClosestPtOnSegment=e.parsePaths=e.drawPolygonMaskPath=e.drawPolygonMask=void 0;const n=i(7373);e.drawPolygonMask=function(t,e,i){const o=(0,n.colorToRgb)(i.color);if(o){t.beginPath(),t.moveTo(e[0].x,e[0].y);for(const i of e)t.lineTo(i.x,i.y);t.closePath(),t.strokeStyle=(0,n.getStyleFromRgb)(o),t.lineWidth=i.width,t.stroke()}},e.drawPolygonMaskPath=function(t,e,i,o){t.translate(o.x,o.y);const s=(0,n.colorToRgb)(i.color);s&&(t.strokeStyle=(0,n.getStyleFromRgb)(s,i.opacity),t.lineWidth=i.width,t.stroke(e))},e.parsePaths=function(t,e,i){var n;const o=[];for(const s of t){const t=s.element.pathSegList,a=null!==(n=null==t?void 0:t.numberOfItems)&&void 0!==n?n:0,r={x:0,y:0};for(let n=0;n<a;n++){const s=null==t?void 0:t.getItem(n),a=window.SVGPathSeg;switch(null==s?void 0:s.pathSegType){case a.PATHSEG_MOVETO_ABS:case a.PATHSEG_LINETO_ABS:case a.PATHSEG_CURVETO_CUBIC_ABS:case a.PATHSEG_CURVETO_QUADRATIC_ABS:case a.PATHSEG_ARC_ABS:case a.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:case a.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:{const t=s;r.x=t.x,r.y=t.y;break}case a.PATHSEG_LINETO_HORIZONTAL_ABS:r.x=s.x;break;case a.PATHSEG_LINETO_VERTICAL_ABS:r.y=s.y;break;case a.PATHSEG_LINETO_REL:case a.PATHSEG_MOVETO_REL:case a.PATHSEG_CURVETO_CUBIC_REL:case a.PATHSEG_CURVETO_QUADRATIC_REL:case a.PATHSEG_ARC_REL:case a.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:case a.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:{const t=s;r.x+=t.x,r.y+=t.y;break}case a.PATHSEG_LINETO_HORIZONTAL_REL:r.x+=s.x;break;case a.PATHSEG_LINETO_VERTICAL_REL:r.y+=s.y;break;case a.PATHSEG_UNKNOWN:case a.PATHSEG_CLOSEPATH:continue}o.push({x:r.x*e+i.x,y:r.y*e+i.y})}}return o},e.calcClosestPtOnSegment=function(t,e,i){const{dx:o,dy:s}=(0,n.getDistances)(i,t),{dx:a,dy:r}=(0,n.getDistances)(e,t),l=(o*a+s*r)/(a**2+r**2);let c=t.x+a*l,d=t.y+r*l;return l<0?(c=t.x,d=t.y):l>1&&(c=e.x,d=e.y),{x:c,y:d,isOnSegment:l>=0&&l<=1}},e.segmentBounce=function(t,e,i){const{dx:o,dy:s}=(0,n.getDistances)(t,e),a=Math.atan2(s,o),r=Math.sin(a),l=-Math.cos(a),c=2*(i.x*r+i.y*l);i.x-=c*r,i.y-=c*l}},7645:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.CircleDrawer=void 0,e.CircleDrawer=class{getSidesCount(){return 12}draw(t,e,i){t.arc(0,0,i,0,2*Math.PI,!1)}}},4472:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadCircleShape=void 0;const n=i(7645);e.loadCircleShape=async function(t){await t.addShape("circle",new n.CircleDrawer)}},5020:function(t,e,i){var n,o=this&&this.__classPrivateFieldSet||function(t,e,i,n,o){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!o:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?o.call(t,i):o?o.value=i:e.set(t,i),i},s=this&&this.__classPrivateFieldGet||function(t,e,i,n){if("a"===i&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===i?n:"a"===i?n.call(t):n?n.value:e.get(t)};Object.defineProperty(e,"__esModule",{value:!0}),e.ImageDrawer=void 0;const a=i(7373),r=i(6331),l=i(7656);e.ImageDrawer=class{constructor(){n.set(this,void 0),o(this,n,[],"f")}getSidesCount(){return 12}getImages(t){return s(this,n,"f").find((e=>e.id===t.id))||(s(this,n,"f").push({id:t.id,images:[]}),this.getImages(t))}addImage(t,e){const i=this.getImages(t);null==i||i.images.push(e)}async init(t){await this.loadImagesFromParticlesOptions(t,t.actualOptions.particles),await this.loadImagesFromParticlesOptions(t,t.actualOptions.interactivity.modes.trail.particles);for(const e of t.actualOptions.manualParticles)await this.loadImagesFromParticlesOptions(t,e.options);const e=t.actualOptions;if(e.emitters)if(e.emitters instanceof Array)for(const i of e.emitters)await this.loadImagesFromParticlesOptions(t,i.particles);else await this.loadImagesFromParticlesOptions(t,e.emitters.particles);const i=e.interactivity.modes.emitters;if(i)if(i instanceof Array)for(const e of i)await this.loadImagesFromParticlesOptions(t,e.particles);else await this.loadImagesFromParticlesOptions(t,i.particles)}destroy(){o(this,n,[],"f")}async loadImagesFromParticlesOptions(t,e){var i,o,l;const c=null==e?void 0:e.shape;if(!(null==c?void 0:c.type)||!c.options||!(0,a.isInArray)(r.ShapeType.image,c.type)&&!(0,a.isInArray)(r.ShapeType.images,c.type))return;const d=s(this,n,"f").findIndex((e=>e.id===t.id));d>=0&&s(this,n,"f").splice(d,1);const h=null!==(i=c.options[r.ShapeType.images])&&void 0!==i?i:c.options[r.ShapeType.image];if(h instanceof Array)for(const e of h)await this.loadImageShape(t,e);else await this.loadImageShape(t,h);if(null==e?void 0:e.groups)for(const i in e.groups){const n=e.groups[i];await this.loadImagesFromParticlesOptions(t,n)}(null===(l=null===(o=null==e?void 0:e.destroy)||void 0===o?void 0:o.split)||void 0===l?void 0:l.particles)&&await this.loadImagesFromParticlesOptions(t,null==e?void 0:e.destroy.split.particles)}async loadImageShape(t,e){try{const i=e.replaceColor?l.downloadSvgImage:l.loadImage,n=await i(e.src);n&&this.addImage(t,n)}catch(t){console.warn(`tsParticles error - ${e.src} not found`)}}draw(t,e,i,n){var o,s;if(!t)return;const a=e.image,r=null===(o=null==a?void 0:a.data)||void 0===o?void 0:o.element;if(!r)return;const l=null!==(s=null==a?void 0:a.ratio)&&void 0!==s?s:1,c={x:-i,y:-i};(null==a?void 0:a.data.svgData)&&(null==a?void 0:a.replaceColor)||(t.globalAlpha=n),t.drawImage(r,c.x,c.y,2*i,2*i/l),(null==a?void 0:a.data.svgData)&&(null==a?void 0:a.replaceColor)||(t.globalAlpha=1)}loadShape(t){var e,i,n,o,s,a,r;if("image"!==t.shape&&"images"!==t.shape)return;const c=this.getImages(t.container).images,d=t.shapeData,h=null!==(e=c.find((t=>t.source===d.src)))&&void 0!==e?e:c[0],u=t.getFillColor();let p;if(!h)return;if(void 0!==h.svgData&&d.replaceColor&&u){const e=(0,l.replaceColorSvg)(h,u,null!==(n=null===(i=t.opacity)||void 0===i?void 0:i.value)&&void 0!==n?n:1),s=new Blob([e],{type:"image/svg+xml"}),a=URL||window.URL||window.webkitURL||window,r=a.createObjectURL(s),c=new Image;p={data:Object.assign(Object.assign({},h),{svgData:e}),ratio:d.width/d.height,replaceColor:null!==(o=d.replaceColor)&&void 0!==o?o:d.replace_color,source:d.src},c.addEventListener("load",(()=>{const e=t.image;e&&(e.loaded=!0,h.element=c),a.revokeObjectURL(r)})),c.addEventListener("error",(()=>{a.revokeObjectURL(r),(0,l.loadImage)(d.src).then((e=>{const i=t.image;i&&(h.element=null==e?void 0:e.element,i.loaded=!0)}))})),c.src=r}else p={data:h,loaded:!0,ratio:d.width/d.height,replaceColor:null!==(s=d.replaceColor)&&void 0!==s?s:d.replace_color,source:d.src};p.ratio||(p.ratio=1);const v={image:p,fill:null!==(a=d.fill)&&void 0!==a?a:t.fill,close:null!==(r=d.close)&&void 0!==r?r:t.close};t.image=v.image,t.fill=v.fill,t.close=v.close}},n=new WeakMap},7656:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.replaceColorSvg=e.downloadSvgImage=e.loadImage=void 0;const n=i(7373);function o(t){return new Promise(((e,i)=>{if(!t)return void i("Error tsParticles - No image.src");const n={source:t,type:t.substr(t.length-3)},o=new Image;o.addEventListener("load",(()=>{n.element=o,e(n)})),o.addEventListener("error",(()=>{i(`Error tsParticles - loading image: ${t}`)})),o.src=t}))}e.loadImage=o,e.downloadSvgImage=async function(t){if(!t)throw new Error("Error tsParticles - No image.src");const e={source:t,type:t.substr(t.length-3)};if("svg"!==e.type)return o(t);const i=await fetch(e.source);if(!i.ok)throw new Error("Error tsParticles - Image not found");return e.svgData=await i.text(),e},e.replaceColorSvg=function(t,e,i){const{svgData:o}=t;if(!o)return"";if(o.includes("fill")){const t=/(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d.]+%?\))|currentcolor/gi;return o.replace(t,(()=>(0,n.getStyleFromHsl)(e,i)))}const s=o.indexOf(">");return`${o.substring(0,s)} fill="${(0,n.getStyleFromHsl)(e,i)}"${o.substring(s)}`}},6504:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadImageShape=void 0;const n=i(5020);e.loadImageShape=async function(t){const e=new n.ImageDrawer;await t.addShape("image",e),await t.addShape("images",e)}},4036:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.LineDrawer=void 0,e.LineDrawer=class{getSidesCount(){return 1}draw(t,e,i){t.moveTo(-i/2,0),t.lineTo(i/2,0)}}},9193:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadLineShape=void 0;const n=i(4036);e.loadLineShape=async function(t){await t.addShape("line",new n.LineDrawer)}},3677:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.PolygonDrawer=void 0;const n=i(3388);class o extends n.PolygonDrawerBase{getSidesData(t,e){var i,n;const o=t.shapeData,s=null!==(n=null!==(i=null==o?void 0:o.sides)&&void 0!==i?i:null==o?void 0:o.nb_sides)&&void 0!==n?n:5;return{count:{denominator:1,numerator:s},length:2.66*e/(s/3)}}getCenter(t,e){return{x:-e/(this.getSidesCount(t)/3.5),y:-e/.76}}}e.PolygonDrawer=o},3388:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.PolygonDrawerBase=void 0,e.PolygonDrawerBase=class{getSidesCount(t){var e,i;const n=t.shapeData;return null!==(i=null!==(e=null==n?void 0:n.sides)&&void 0!==e?e:null==n?void 0:n.nb_sides)&&void 0!==i?i:5}draw(t,e,i){const n=this.getCenter(e,i),o=this.getSidesData(e,i),s=o.count.numerator*o.count.denominator,a=o.count.numerator/o.count.denominator,r=180*(a-2)/a,l=Math.PI-Math.PI*r/180;if(t){t.beginPath(),t.translate(n.x,n.y),t.moveTo(0,0);for(let e=0;e<s;e++)t.lineTo(o.length,0),t.translate(o.length,0),t.rotate(l)}}}},8729:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.TriangleDrawer=void 0;const n=i(3388);class o extends n.PolygonDrawerBase{getSidesCount(){return 3}getSidesData(t,e){return{count:{denominator:2,numerator:3},length:2*e}}getCenter(t,e){return{x:-e,y:e/1.66}}}e.TriangleDrawer=o},302:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadPolygonShape=e.loadTriangleShape=e.loadGenericPolygonShape=void 0;const n=i(3677),o=i(8729);async function s(t){await t.addShape("polygon",new n.PolygonDrawer)}async function a(t){await t.addShape("triangle",new o.TriangleDrawer)}e.loadGenericPolygonShape=s,e.loadTriangleShape=a,e.loadPolygonShape=async function(t){await s(t),await a(t)}},8765:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SquareDrawer=void 0;const i=Math.sqrt(2);e.SquareDrawer=class{getSidesCount(){return 4}draw(t,e,n){t.rect(-n/i,-n/i,2*n/i,2*n/i)}}},2179:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadSquareShape=void 0;const n=i(8765);e.loadSquareShape=async function(t){const e=new n.SquareDrawer;await t.addShape("edge",e),await t.addShape("square",e)}},1796:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.StarDrawer=void 0,e.StarDrawer=class{getSidesCount(t){var e,i;const n=t.shapeData;return null!==(i=null!==(e=null==n?void 0:n.sides)&&void 0!==e?e:null==n?void 0:n.nb_sides)&&void 0!==i?i:5}draw(t,e,i){var n;const o=e.shapeData,s=this.getSidesCount(e),a=null!==(n=null==o?void 0:o.inset)&&void 0!==n?n:2;t.moveTo(0,0-i);for(let e=0;e<s;e++)t.rotate(Math.PI/s),t.lineTo(0,0-i*a),t.rotate(Math.PI/s),t.lineTo(0,0-i)}}},3806:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadStarShape=void 0;const n=i(1796);e.loadStarShape=async function(t){await t.addShape("star",new n.StarDrawer)}},1608:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.TextDrawer=e.validTypes=void 0;const n=i(7373);e.validTypes=["text","character","char"],e.TextDrawer=class{getSidesCount(){return 12}async init(t){const i=t.actualOptions;if(e.validTypes.find((t=>(0,n.isInArray)(t,i.particles.shape.type)))){const t=e.validTypes.map((t=>i.particles.shape.options[t])).find((t=>!!t));if(t instanceof Array){const e=[];for(const i of t)e.push((0,n.loadFont)(i));await Promise.allSettled(e)}else void 0!==t&&await(0,n.loadFont)(t)}}draw(t,e,i,o){var s,a,r;const l=e.shapeData;if(void 0===l)return;const c=l.value;if(void 0===c)return;const d=e;void 0===d.text&&(d.text=c instanceof Array?(0,n.itemFromArray)(c,e.randomIndexData):c);const h=d.text,u=null!==(s=l.style)&&void 0!==s?s:"",p=null!==(a=l.weight)&&void 0!==a?a:"400",v=2*Math.round(i),y=null!==(r=l.font)&&void 0!==r?r:"Verdana",g=e.fill,f=h.length*i/2;t.font=`${u} ${p} ${v}px "${y}"`;const m={x:-f,y:i/2};t.globalAlpha=o,g?t.fillText(h,m.x,m.y):t.strokeText(h,m.x,m.y),t.globalAlpha=1}}},4482:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadTextShape=void 0;const n=i(1608);e.loadTextShape=async function(t){const e=new n.TextDrawer;for(const i of n.validTypes)await t.addShape(i,e)}},7537:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},1613:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},8921:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},8791:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},1691:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},6862:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},5008:function(t,e,i){var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),o(i(1613),e),o(i(8921),e),o(i(8791),e),o(i(1691),e),o(i(6862),e),o(i(7537),e)},9011:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.AngleUpdater=void 0;const n=i(6331),o=i(7373);e.AngleUpdater=class{constructor(t){this.container=t}init(t){const e=t.options.rotate;t.rotate={enable:e.animation.enable,value:(0,o.getRangeValue)(e.value)*Math.PI/180};let i=e.direction;switch(i===n.RotateDirection.random&&(i=Math.floor(2*Math.random())>0?n.RotateDirection.counterClockwise:n.RotateDirection.clockwise),i){case n.RotateDirection.counterClockwise:case"counterClockwise":t.rotate.status=n.AnimationStatus.decreasing;break;case n.RotateDirection.clockwise:t.rotate.status=n.AnimationStatus.increasing}const s=t.options.rotate.animation;s.enable&&(t.rotate.velocity=s.speed/360*this.container.retina.reduceFactor,s.sync||(t.rotate.velocity*=Math.random()))}isEnabled(t){const e=t.options.rotate,i=e.animation;return!t.destroyed&&!t.spawning&&!e.path&&i.enable}update(t,e){this.isEnabled(t)&&function(t,e){var i;const o=t.rotate;if(!o)return;const s=t.options.rotate.animation,a=(null!==(i=o.velocity)&&void 0!==i?i:0)*e.factor,r=2*Math.PI;if(s.enable)switch(o.status){case n.AnimationStatus.increasing:o.value+=a,o.value>r&&(o.value-=r);break;case n.AnimationStatus.decreasing:default:o.value-=a,o.value<0&&(o.value+=r)}}(t,e)}}},4441:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadAngleUpdater=void 0;const n=i(9011);e.loadAngleUpdater=async function(t){await t.addParticleUpdater("angle",(t=>new n.AngleUpdater(t)))}},6293:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ColorUpdater=void 0;const n=i(6331),o=i(7373);function s(t,e,i,s,a){var r;const l=e;if(!l||!i.enable)return;const c=(0,o.randomInRange)(i.offset),d=(null!==(r=e.velocity)&&void 0!==r?r:0)*t.factor+3.6*c;a&&l.status!==n.AnimationStatus.increasing?(l.value-=d,l.value<0&&(l.status=n.AnimationStatus.increasing,l.value+=l.value)):(l.value+=d,a&&l.value>s&&(l.status=n.AnimationStatus.decreasing,l.value-=l.value%s)),l.value>s&&(l.value%=s)}e.ColorUpdater=class{constructor(t){this.container=t}init(t){const e=(0,o.colorToHsl)(t.options.color,t.id,t.options.reduceDuplicates);e&&(t.color=(0,o.getHslAnimationFromHsl)(e,t.options.color.animation,this.container.retina.reduceFactor))}isEnabled(t){var e,i,n;const o=t.options.color.animation;return!t.destroyed&&!t.spawning&&(void 0!==(null===(e=t.color)||void 0===e?void 0:e.h.value)&&o.h.enable||void 0!==(null===(i=t.color)||void 0===i?void 0:i.s.value)&&o.s.enable||void 0!==(null===(n=t.color)||void 0===n?void 0:n.l.value)&&o.l.enable)}update(t,e){!function(t,e){var i,n,o;const a=t.options.color.animation;void 0!==(null===(i=t.color)||void 0===i?void 0:i.h)&&s(e,t.color.h,a.h,360,!1),void 0!==(null===(n=t.color)||void 0===n?void 0:n.s)&&s(e,t.color.s,a.s,100,!0),void 0!==(null===(o=t.color)||void 0===o?void 0:o.l)&&s(e,t.color.l,a.l,100,!0)}(t,e)}}},4784:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadColorUpdater=void 0;const n=i(6293);e.loadColorUpdater=async function(t){await t.addParticleUpdater("color",(t=>new n.ColorUpdater(t)))}},8152:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.LifeUpdater=void 0;const n=i(7373);e.LifeUpdater=class{constructor(t){this.container=t}init(){}isEnabled(t){return!t.destroyed}update(t,e){if(!this.isEnabled(t))return;const i=t.life;let o=!1;if(t.spawning){if(i.delayTime+=e.value,!(i.delayTime>=t.life.delay))return;o=!0,t.spawning=!1,i.delayTime=0,i.time=0}if(-1===i.duration)return;if(t.spawning)return;if(o?i.time=0:i.time+=e.value,i.time<i.duration)return;if(i.time=0,t.life.count>0&&t.life.count--,0===t.life.count)return void t.destroy();const s=this.container.canvas.size,a=(0,n.setRangeValue)(0,s.width),r=(0,n.setRangeValue)(0,s.width);t.position.x=(0,n.randomInRange)(a),t.position.y=(0,n.randomInRange)(r),t.spawning=!0,i.delayTime=0,i.time=0,t.reset();const l=t.options.life;i.delay=1e3*(0,n.getRangeValue)(l.delay.value),i.duration=1e3*(0,n.getRangeValue)(l.duration.value)}}},6717:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadLifeUpdater=void 0;const n=i(8152);e.loadLifeUpdater=async function(t){await t.addParticleUpdater("life",(t=>new n.LifeUpdater(t)))}},1923:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OpacityUpdater=void 0;const n=i(6331),o=i(7373);e.OpacityUpdater=class{constructor(t){this.container=t}init(t){const e=t.options.opacity;t.opacity={enable:e.animation.enable,max:(0,o.getRangeMax)(e.value),min:(0,o.getRangeMin)(e.value),value:(0,o.getRangeValue)(e.value),loops:0,maxLoops:e.animation.count};const i=e.animation;if(i.enable){t.opacity.status=n.AnimationStatus.increasing;const s=e.value;switch(t.opacity.min=(0,o.getRangeMin)(s),t.opacity.max=(0,o.getRangeMax)(s),i.startValue){case n.StartValueType.min:t.opacity.value=t.opacity.min,t.opacity.status=n.AnimationStatus.increasing;break;case n.StartValueType.random:t.opacity.value=(0,o.randomInRange)(t.opacity),t.opacity.status=Math.random()>=.5?n.AnimationStatus.increasing:n.AnimationStatus.decreasing;break;case n.StartValueType.max:default:t.opacity.value=t.opacity.max,t.opacity.status=n.AnimationStatus.decreasing}t.opacity.velocity=i.speed/100*this.container.retina.reduceFactor,i.sync||(t.opacity.velocity*=Math.random())}}isEnabled(t){var e,i,n;return!t.destroyed&&!t.spawning&&!!t.opacity&&t.opacity.enable&&((null!==(e=t.opacity.maxLoops)&&void 0!==e?e:0)<=0||(null!==(i=t.opacity.loops)&&void 0!==i?i:0)<(null!==(n=t.opacity.maxLoops)&&void 0!==n?n:0))}update(t,e){this.isEnabled(t)&&function(t,e){var i,s,a,r,l;if(!t.opacity)return;const c=t.opacity.min,d=t.opacity.max;if(!t.destroyed&&t.opacity.enable&&((null!==(i=t.opacity.maxLoops)&&void 0!==i?i:0)<=0||(null!==(s=t.opacity.loops)&&void 0!==s?s:0)<(null!==(a=t.opacity.maxLoops)&&void 0!==a?a:0))){switch(t.opacity.status){case n.AnimationStatus.increasing:t.opacity.value>=d?(t.opacity.status=n.AnimationStatus.decreasing,t.opacity.loops||(t.opacity.loops=0),t.opacity.loops++):t.opacity.value+=(null!==(r=t.opacity.velocity)&&void 0!==r?r:0)*e.factor;break;case n.AnimationStatus.decreasing:t.opacity.value<=c?(t.opacity.status=n.AnimationStatus.increasing,t.opacity.loops||(t.opacity.loops=0),t.opacity.loops++):t.opacity.value-=(null!==(l=t.opacity.velocity)&&void 0!==l?l:0)*e.factor}!function(t,e,i,o){switch(t.options.opacity.animation.destroy){case n.DestroyType.max:e>=o&&t.destroy();break;case n.DestroyType.min:e<=i&&t.destroy()}}(t,t.opacity.value,c,d),t.destroyed||(t.opacity.value=(0,o.clamp)(t.opacity.value,c,d))}}(t,e)}}},3202:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadOpacityUpdater=void 0;const n=i(1923);e.loadOpacityUpdater=async function(t){await t.addParticleUpdater("opacity",(t=>new n.OpacityUpdater(t)))}},9138:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OutOfCanvasUpdater=void 0;const n=i(7373),o=i(6331),s=i(8055);e.OutOfCanvasUpdater=class{constructor(t){this.container=t}init(){}isEnabled(t){return!t.destroyed&&!t.spawning}update(t,e){var i,n,s,a;const r=t.options.move.outModes;this.updateOutMode(t,e,null!==(i=r.bottom)&&void 0!==i?i:r.default,o.OutModeDirection.bottom),this.updateOutMode(t,e,null!==(n=r.left)&&void 0!==n?n:r.default,o.OutModeDirection.left),this.updateOutMode(t,e,null!==(s=r.right)&&void 0!==s?s:r.default,o.OutModeDirection.right),this.updateOutMode(t,e,null!==(a=r.top)&&void 0!==a?a:r.default,o.OutModeDirection.top)}updateOutMode(t,e,i,n){switch(i){case o.OutMode.bounce:case o.OutMode.bounceVertical:case o.OutMode.bounceHorizontal:case"bounceVertical":case"bounceHorizontal":case o.OutMode.split:this.bounce(t,e,n,i);break;case o.OutMode.destroy:this.destroy(t,n);break;case o.OutMode.out:this.out(t,n);break;case o.OutMode.none:default:this.none(t,n)}}destroy(t,e){const i=this.container;(0,n.isPointInside)(t.position,i.canvas.size,t.getRadius(),e)||i.particles.remove(t,void 0,!0)}out(t,e){const i=this.container;if((0,n.isPointInside)(t.position,i.canvas.size,t.getRadius(),e))return;const s=t.options.move.warp,a=i.canvas.size,r={bottom:a.height+t.getRadius()+t.offset.y,left:-t.getRadius()-t.offset.x,right:a.width+t.getRadius()+t.offset.x,top:-t.getRadius()-t.offset.y},l=t.getRadius(),c=(0,n.calculateBounds)(t.position,l);e===o.OutModeDirection.right&&c.left>a.width+t.offset.x?(t.position.x=r.left,t.initialPosition.x=t.position.x,s||(t.position.y=Math.random()*a.height,t.initialPosition.y=t.position.y)):e===o.OutModeDirection.left&&c.right<-t.offset.x&&(t.position.x=r.right,t.initialPosition.x=t.position.x,s||(t.position.y=Math.random()*a.height,t.initialPosition.y=t.position.y)),e===o.OutModeDirection.bottom&&c.top>a.height+t.offset.y?(s||(t.position.x=Math.random()*a.width,t.initialPosition.x=t.position.x),t.position.y=r.top,t.initialPosition.y=t.position.y):e===o.OutModeDirection.top&&c.bottom<-t.offset.y&&(s||(t.position.x=Math.random()*a.width,t.initialPosition.x=t.position.x),t.position.y=r.bottom,t.initialPosition.y=t.position.y)}bounce(t,e,i,o){const a=this.container;let r=!1;for(const[,n]of a.plugins)if(void 0!==n.particleBounce&&(r=n.particleBounce(t,e,i)),r)break;if(r)return;const l=t.getPosition(),c=t.offset,d=t.getRadius(),h=(0,n.calculateBounds)(l,d),u=a.canvas.size;(0,s.bounceHorizontal)({particle:t,outMode:o,direction:i,bounds:h,canvasSize:u,offset:c,size:d}),(0,s.bounceVertical)({particle:t,outMode:o,direction:i,bounds:h,canvasSize:u,offset:c,size:d})}none(t,e){if(t.options.move.distance.horizontal&&(e===o.OutModeDirection.left||e===o.OutModeDirection.right)||t.options.move.distance.vertical&&(e===o.OutModeDirection.top||e===o.OutModeDirection.bottom))return;const i=t.options.move.gravity,s=this.container,a=s.canvas.size,r=t.getRadius();if(i.enable){const n=t.position;(!i.inverse&&n.y>a.height+r&&e===o.OutModeDirection.bottom||i.inverse&&n.y<-r&&e===o.OutModeDirection.top)&&s.particles.remove(t)}else{if(t.velocity.y>0&&t.position.y<=a.height+r||t.velocity.y<0&&t.position.y>=-r||t.velocity.x>0&&t.position.x<=a.width+r||t.velocity.x<0&&t.position.x>=-r)return;(0,n.isPointInside)(t.position,s.canvas.size,r,e)||s.particles.remove(t)}}}},8055:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.bounceVertical=e.bounceHorizontal=void 0;const n=i(6331),o=i(7373);e.bounceHorizontal=function(t){if(t.outMode!==n.OutMode.bounce&&t.outMode!==n.OutMode.bounceHorizontal&&"bounceHorizontal"!==t.outMode&&t.outMode!==n.OutMode.split)return;const e=t.particle.velocity.x;let i=!1;if(t.direction===n.OutModeDirection.right&&t.bounds.right>=t.canvasSize.width&&e>0||t.direction===n.OutModeDirection.left&&t.bounds.left<=0&&e<0){const e=(0,o.getRangeValue)(t.particle.options.bounce.horizontal.value);t.particle.velocity.x*=-e,i=!0}if(!i)return;const s=t.offset.x+t.size;t.bounds.right>=t.canvasSize.width?t.particle.position.x=t.canvasSize.width-s:t.bounds.left<=0&&(t.particle.position.x=s),t.outMode===n.OutMode.split&&t.particle.destroy()},e.bounceVertical=function(t){if(t.outMode===n.OutMode.bounce||t.outMode===n.OutMode.bounceVertical||"bounceVertical"===t.outMode||t.outMode===n.OutMode.split){const e=t.particle.velocity.y;let i=!1;if(t.direction===n.OutModeDirection.bottom&&t.bounds.bottom>=t.canvasSize.height&&e>0||t.direction===n.OutModeDirection.top&&t.bounds.top<=0&&e<0){const e=(0,o.getRangeValue)(t.particle.options.bounce.vertical.value);t.particle.velocity.y*=-e,i=!0}if(!i)return;const s=t.offset.y+t.size;t.bounds.bottom>=t.canvasSize.height?t.particle.position.y=t.canvasSize.height-s:t.bounds.top<=0&&(t.particle.position.y=s),t.outMode===n.OutMode.split&&t.particle.destroy()}}},6086:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadOutModesUpdater=void 0;const n=i(9138);e.loadOutModesUpdater=async function(t){await t.addParticleUpdater("outModes",(t=>new n.OutOfCanvasUpdater(t)))}},8486:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.RollUpdater=void 0;const n=i(7373),o=i(6331);e.RollUpdater=class{init(t){const e=t.options.roll;if(e.enable)if(t.roll={angle:Math.random()*Math.PI*2,speed:(0,n.getRangeValue)(e.speed)/360},e.backColor)t.backColor=(0,n.colorToHsl)(e.backColor);else if(e.darken.enable&&e.enlighten.enable){const i=Math.random()>=.5?o.AlterType.darken:o.AlterType.enlighten;t.roll.alter={type:i,value:i===o.AlterType.darken?e.darken.value:e.enlighten.value}}else e.darken.enable?t.roll.alter={type:o.AlterType.darken,value:e.darken.value}:e.enlighten.enable&&(t.roll.alter={type:o.AlterType.enlighten,value:e.enlighten.value});else t.roll={angle:0,speed:0}}isEnabled(t){const e=t.options.roll;return!t.destroyed&&!t.spawning&&e.enable}update(t,e){this.isEnabled(t)&&function(t,e){const i=t.options.roll;if(!t.roll||!i.enable)return;const n=t.roll.speed*e.factor,o=2*Math.PI;t.roll.angle+=n,t.roll.angle>o&&(t.roll.angle-=o)}(t,e)}}},2124:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadRollUpdater=void 0;const n=i(8486);e.loadRollUpdater=async function(t){await t.addParticleUpdater("roll",(()=>new n.RollUpdater))}},457:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SizeUpdater=void 0;const n=i(6331),o=i(7373);e.SizeUpdater=class{init(){}isEnabled(t){var e,i,n;return!t.destroyed&&!t.spawning&&t.size.enable&&((null!==(e=t.size.loops)&&void 0!==e?e:0)<=0||(null!==(i=t.size.loops)&&void 0!==i?i:0)<(null!==(n=t.size.maxLoops)&&void 0!==n?n:0))}update(t,e){this.isEnabled(t)&&function(t,e){var i,s,a,r;const l=(null!==(i=t.size.velocity)&&void 0!==i?i:0)*e.factor,c=t.size.min,d=t.size.max;if(!t.destroyed&&t.size.enable&&((null!==(s=t.size.loops)&&void 0!==s?s:0)<=0||(null!==(a=t.size.loops)&&void 0!==a?a:0)<(null!==(r=t.size.maxLoops)&&void 0!==r?r:0))){switch(t.size.status){case n.AnimationStatus.increasing:t.size.value>=d?(t.size.status=n.AnimationStatus.decreasing,t.size.loops||(t.size.loops=0),t.size.loops++):t.size.value+=l;break;case n.AnimationStatus.decreasing:t.size.value<=c?(t.size.status=n.AnimationStatus.increasing,t.size.loops||(t.size.loops=0),t.size.loops++):t.size.value-=l}!function(t,e,i,o){switch(t.options.size.animation.destroy){case n.DestroyType.max:e>=o&&t.destroy();break;case n.DestroyType.min:e<=i&&t.destroy()}}(t,t.size.value,c,d),t.destroyed||(t.size.value=(0,o.clamp)(t.size.value,c,d))}}(t,e)}}},1004:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadSizeUpdater=void 0;const n=i(457);e.loadSizeUpdater=async function(t){await t.addParticleUpdater("size",(()=>new n.SizeUpdater))}},2965:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.StrokeColorUpdater=void 0;const n=i(7373),o=i(6331);function s(t,e,i,s,a){var r;const l=e;if(!l||!l.enable)return;const c=(0,n.randomInRange)(i.offset),d=(null!==(r=e.velocity)&&void 0!==r?r:0)*t.factor+3.6*c;a&&l.status!==o.AnimationStatus.increasing?(l.value-=d,l.value<0&&(l.status=o.AnimationStatus.increasing,l.value+=l.value)):(l.value+=d,a&&l.value>s&&(l.status=o.AnimationStatus.decreasing,l.value-=l.value%s)),l.value>s&&(l.value%=s)}e.StrokeColorUpdater=class{constructor(t){this.container=t}init(t){var e,i;const o=this.container;t.stroke=t.options.stroke instanceof Array?(0,n.itemFromArray)(t.options.stroke,t.id,t.options.reduceDuplicates):t.options.stroke,t.strokeWidth=t.stroke.width*o.retina.pixelRatio;const s=null!==(e=(0,n.colorToHsl)(t.stroke.color))&&void 0!==e?e:t.getFillColor();s&&(t.strokeColor=(0,n.getHslAnimationFromHsl)(s,null===(i=t.stroke.color)||void 0===i?void 0:i.animation,o.retina.reduceFactor))}isEnabled(t){var e,i,n,o;const s=null===(e=t.stroke)||void 0===e?void 0:e.color;return!t.destroyed&&!t.spawning&&!!s&&(void 0!==(null===(i=t.strokeColor)||void 0===i?void 0:i.h.value)&&s.animation.h.enable||void 0!==(null===(n=t.strokeColor)||void 0===n?void 0:n.s.value)&&s.animation.s.enable||void 0!==(null===(o=t.strokeColor)||void 0===o?void 0:o.l.value)&&s.animation.l.enable)}update(t,e){this.isEnabled(t)&&function(t,e){var i,n,o,a,r,l,c,d,h,u;if(!(null===(i=t.stroke)||void 0===i?void 0:i.color))return;const p=t.stroke.color.animation,v=null!==(o=null===(n=t.strokeColor)||void 0===n?void 0:n.h)&&void 0!==o?o:null===(a=t.color)||void 0===a?void 0:a.h;v&&s(e,v,p.h,360,!1);const y=null!==(l=null===(r=t.strokeColor)||void 0===r?void 0:r.s)&&void 0!==l?l:null===(c=t.color)||void 0===c?void 0:c.s;y&&s(e,y,p.s,100,!0);const g=null!==(h=null===(d=t.strokeColor)||void 0===d?void 0:d.l)&&void 0!==h?h:null===(u=t.color)||void 0===u?void 0:u.l;g&&s(e,g,p.l,100,!0)}(t,e)}}},7065:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadStrokeColorUpdater=void 0;const n=i(2965);e.loadStrokeColorUpdater=async function(t){await t.addParticleUpdater("strokeColor",(t=>new n.StrokeColorUpdater(t)))}},6505:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.TiltUpdater=void 0;const n=i(6331),o=i(7373);e.TiltUpdater=class{constructor(t){this.container=t}init(t){const e=t.options.tilt;t.tilt={enable:e.enable,value:(0,o.getRangeValue)(e.value)*Math.PI/180,sinDirection:Math.random()>=.5?1:-1,cosDirection:Math.random()>=.5?1:-1};let i=e.direction;switch(i===n.TiltDirection.random&&(i=Math.floor(2*Math.random())>0?n.TiltDirection.counterClockwise:n.TiltDirection.clockwise),i){case n.TiltDirection.counterClockwise:case"counterClockwise":t.tilt.status=n.AnimationStatus.decreasing;break;case n.TiltDirection.clockwise:t.tilt.status=n.AnimationStatus.increasing}const s=t.options.tilt.animation;s.enable&&(t.tilt.velocity=s.speed/360*this.container.retina.reduceFactor,s.sync||(t.tilt.velocity*=Math.random()))}isEnabled(t){const e=t.options.tilt.animation;return!t.destroyed&&!t.spawning&&e.enable}update(t,e){this.isEnabled(t)&&function(t,e){var i;if(!t.tilt)return;const o=t.options.tilt.animation,s=(null!==(i=t.tilt.velocity)&&void 0!==i?i:0)*e.factor,a=2*Math.PI;if(o.enable)switch(t.tilt.status){case n.AnimationStatus.increasing:t.tilt.value+=s,t.tilt.value>a&&(t.tilt.value-=a);break;case n.AnimationStatus.decreasing:default:t.tilt.value-=s,t.tilt.value<0&&(t.tilt.value+=a)}}(t,e)}}},2453:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadTiltUpdater=void 0;const n=i(6505);e.loadTiltUpdater=async function(t){await t.addParticleUpdater("tilt",(t=>new n.TiltUpdater(t)))}},8467:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.WobbleUpdater=void 0;const n=i(7373);e.WobbleUpdater=class{constructor(t){this.container=t}init(t){const e=t.options.wobble;e.enable?t.wobble={angle:Math.random()*Math.PI*2,speed:(0,n.getRangeValue)(e.speed)/360}:t.wobble={angle:0,speed:0},t.retina.wobbleDistance=(0,n.getRangeValue)(e.distance)*this.container.retina.pixelRatio}isEnabled(t){return!t.destroyed&&!t.spawning&&t.options.wobble.enable}update(t,e){this.isEnabled(t)&&function(t,e){var i;if(!t.options.wobble.enable||!t.wobble)return;const n=t.wobble.speed*e.factor,o=(null!==(i=t.retina.wobbleDistance)&&void 0!==i?i:0)*e.factor/(1e3/60),s=2*Math.PI;t.wobble.angle+=n,t.wobble.angle>s&&(t.wobble.angle-=s),t.position.x+=o*Math.cos(t.wobble.angle),t.position.y+=o*Math.abs(Math.sin(t.wobble.angle))}(t,e)}}},7175:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadWobbleUpdater=void 0;const n=i(8467);e.loadWobbleUpdater=async function(t){await t.addParticleUpdater("wobble",(t=>new n.WobbleUpdater(t)))}},1680:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.alterHsl=e.drawEllipse=e.drawParticlePlugin=e.drawPlugin=e.drawShapeAfterEffect=e.drawShape=e.drawParticle=e.drawGrabLine=e.gradient=e.drawConnectLine=e.drawLinkTriangle=e.drawLinkLine=e.clear=e.paintBase=void 0;const n=i(3939),o=i(2323),s=i(6331);function a(t,e,i){t.beginPath(),t.moveTo(e.x,e.y),t.lineTo(i.x,i.y),t.closePath()}function r(t,e,i,n,o,s){if(!i.shape)return;const a=t.drawers.get(i.shape);a&&a.draw(e,i,n,o,s,t.retina.pixelRatio)}function l(t,e,i,n,o,s){if(!i.shape)return;const a=t.drawers.get(i.shape);(null==a?void 0:a.afterEffect)&&a.afterEffect(e,i,n,o,s,t.retina.pixelRatio)}e.paintBase=function(t,e,i){t.save(),t.fillStyle=null!=i?i:"rgba(0,0,0,0)",t.fillRect(0,0,e.width,e.height),t.restore()},e.clear=function(t,e){t.clearRect(0,0,e.width,e.height)},e.drawLinkLine=function(t,e,i,s,r,l,c,d,h,u,p,v){let y=!1;if((0,n.getDistance)(i,s)<=r)a(t,i,s),y=!0;else if(c){let e,o;const c={x:s.x-l.width,y:s.y},d=(0,n.getDistances)(i,c);if(d.distance<=r){const t=i.y-d.dy/d.dx*i.x;e={x:0,y:t},o={x:l.width,y:t}}else{const t={x:s.x,y:s.y-l.height},a=(0,n.getDistances)(i,t);if(a.distance<=r){const t=-(i.y-a.dy/a.dx*i.x)/(a.dy/a.dx);e={x:t,y:0},o={x:t,y:l.height}}else{const t={x:s.x-l.width,y:s.y-l.height},a=(0,n.getDistances)(i,t);if(a.distance<=r){const t=i.y-a.dy/a.dx*i.x;e={x:-t/(a.dy/a.dx),y:t},o={x:e.x+l.width,y:e.y+l.height}}}}e&&o&&(a(t,i,e),a(t,s,o),y=!0)}if(y){if(t.lineWidth=e,d&&(t.globalCompositeOperation=h),t.strokeStyle=(0,o.getStyleFromRgb)(u,p),v.enable){const e=(0,o.colorToRgb)(v.color);e&&(t.shadowBlur=v.blur,t.shadowColor=(0,o.getStyleFromRgb)(e))}t.stroke()}},e.drawLinkTriangle=function(t,e,i,n,s,a,r,l){!function(t,e,i,n){t.beginPath(),t.moveTo(e.x,e.y),t.lineTo(i.x,i.y),t.lineTo(n.x,n.y),t.closePath()}(t,e,i,n),s&&(t.globalCompositeOperation=a),t.fillStyle=(0,o.getStyleFromRgb)(r,l),t.fill()},e.drawConnectLine=function(t,e,i,n,o){t.save(),a(t,n,o),t.lineWidth=e,t.strokeStyle=i,t.stroke(),t.restore()},e.gradient=function(t,e,i,n){const s=Math.floor(i.getRadius()/e.getRadius()),a=e.getFillColor(),r=i.getFillColor();if(!a||!r)return;const l=e.getPosition(),c=i.getPosition(),d=(0,o.colorMix)(a,r,e.getRadius(),i.getRadius()),h=t.createLinearGradient(l.x,l.y,c.x,c.y);return h.addColorStop(0,(0,o.getStyleFromHsl)(a,n)),h.addColorStop(s>1?1:s,(0,o.getStyleFromRgb)(d,n)),h.addColorStop(1,(0,o.getStyleFromHsl)(r,n)),h},e.drawGrabLine=function(t,e,i,n,s,r){t.save(),a(t,i,n),t.strokeStyle=(0,o.getStyleFromRgb)(s,r),t.lineWidth=e,t.stroke(),t.restore()},e.drawParticle=function(t,e,i,n,a,c,d,h,u,p,v,y){var g,f,m,b,w,A;const S=i.getPosition(),_=i.options.tilt,P=i.options.roll;if(e.save(),_.enable||P.enable){const t=P.enable&&i.roll,n=_.enable&&i.tilt,o=t&&(P.mode===s.RollMode.horizontal||P.mode===s.RollMode.both),a=t&&(P.mode===s.RollMode.vertical||P.mode===s.RollMode.both);e.setTransform(o?Math.cos(i.roll.angle):1,n?Math.cos(i.tilt.value)*i.tilt.cosDirection:0,n?Math.sin(i.tilt.value)*i.tilt.sinDirection:0,a?Math.sin(i.roll.angle):1,S.x,S.y)}else e.translate(S.x,S.y);e.beginPath();const C=(null!==(f=null===(g=i.rotate)||void 0===g?void 0:g.value)&&void 0!==f?f:0)+(i.options.rotate.path?i.velocity.angle:0);0!==C&&e.rotate(C),d&&(e.globalCompositeOperation=h);const x=i.shadowColor;if(v.enable&&x&&(e.shadowBlur=v.blur,e.shadowColor=(0,o.getStyleFromRgb)(x),e.shadowOffsetX=v.offset.x,e.shadowOffsetY=v.offset.y),y){const t=y.angle.value,i=y.type===s.GradientType.radial?e.createRadialGradient(0,0,0,0,0,u):e.createLinearGradient(Math.cos(t)*-u,Math.sin(t)*-u,Math.cos(t)*u,Math.sin(t)*u);for(const t of y.colors)i.addColorStop(t.stop,(0,o.getStyleFromHsl)({h:t.value.h.value,s:t.value.s.value,l:t.value.l.value},null!==(b=null===(m=t.opacity)||void 0===m?void 0:m.value)&&void 0!==b?b:p));e.fillStyle=i}else a&&(e.fillStyle=a);const E=i.stroke;e.lineWidth=null!==(w=i.strokeWidth)&&void 0!==w?w:0,c&&(e.strokeStyle=c),r(t,e,i,u,p,n),(null!==(A=null==E?void 0:E.width)&&void 0!==A?A:0)>0&&e.stroke(),i.close&&e.closePath(),i.fill&&e.fill(),e.restore(),e.save(),_.enable&&i.tilt?e.setTransform(1,Math.cos(i.tilt.value)*i.tilt.cosDirection,Math.sin(i.tilt.value)*i.tilt.sinDirection,1,S.x,S.y):e.translate(S.x,S.y),0!==C&&e.rotate(C),d&&(e.globalCompositeOperation=h),l(t,e,i,u,p,n),e.restore()},e.drawShape=r,e.drawShapeAfterEffect=l,e.drawPlugin=function(t,e,i){e.draw&&(t.save(),e.draw(t,i),t.restore())},e.drawParticlePlugin=function(t,e,i,n){void 0!==e.drawParticle&&(t.save(),e.drawParticle(t,i,n),t.restore())},e.drawEllipse=function(t,e,i,n,s,a,r,l,c){const d=e.getPosition();if(i&&(t.strokeStyle=(0,o.getStyleFromHsl)(i,s)),0===a)return;t.lineWidth=a;const h=r*Math.PI/180;t.beginPath(),t.ellipse(d.x,d.y,n/2,2*n,h,l,c),t.stroke()},e.alterHsl=function(t,e,i){return{h:t.h,s:t.s,l:t.l+(e===s.AlterType.darken?-1:1)*i}}},3232:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Circle=void 0;const n=i(2679),o=i(3939);class s extends n.Range{constructor(t,e,i){super(t,e),this.radius=i}contains(t){return(0,o.getDistance)(t,this.position)<=this.radius}intersects(t){const e=t,i=t,n=this.position,o=t.position,s=Math.abs(o.x-n.x),a=Math.abs(o.y-n.y),r=this.radius;if(void 0!==i.radius)return r+i.radius>Math.sqrt(s*s+a+a);if(void 0!==e.size){const t=e.size.width,i=e.size.height,n=Math.pow(s-t,2)+Math.pow(a-i,2);return!(s>r+t||a>r+i)&&(s<=t||a<=i||n<=r*r)}return!1}}e.Circle=s},5407:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.CircleWarp=void 0;const n=i(8191),o=i(3232);class s extends o.Circle{constructor(t,e,i,n){super(t,e,i),this.canvasSize=n,this.canvasSize={height:n.height,width:n.width}}contains(t){if(super.contains(t))return!0;const e={x:t.x-this.canvasSize.width,y:t.y};if(super.contains(e))return!0;const i={x:t.x-this.canvasSize.width,y:t.y-this.canvasSize.height};if(super.contains(i))return!0;const n={x:t.x,y:t.y-this.canvasSize.height};return super.contains(n)}intersects(t){if(super.intersects(t))return!0;const e=t,i=t,s={x:t.position.x-this.canvasSize.width,y:t.position.y-this.canvasSize.height};if(void 0!==i.radius){const t=new o.Circle(s.x,s.y,2*i.radius);return super.intersects(t)}if(void 0!==e.size){const t=new n.Rectangle(s.x,s.y,2*e.size.width,2*e.size.height);return super.intersects(t)}return!1}}e.CircleWarp=s},2323:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.getHslAnimationFromHsl=e.getHslFromAnimation=e.getLinkRandomColor=e.getLinkColor=e.colorMix=e.getStyleFromHsv=e.getStyleFromHsl=e.getStyleFromRgb=e.getRandomRgbColor=e.rgbaToHsva=e.rgbToHsv=e.hsvaToRgba=e.hsvToRgb=e.hsvaToHsla=e.hsvToHsl=e.hslaToHsva=e.hslToHsv=e.hslaToRgba=e.hslToRgb=e.stringToRgb=e.stringToAlpha=e.rgbToHsl=e.colorToHsl=e.colorToRgb=void 0;const n=i(1611),o=i(1565),s=i(3939),a=i(6331);function r(t,e,i){let n=i;return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+(e-t)*(2/3-n)*6:t}function l(t){if(t.startsWith("rgb")){const e=/rgba?\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([\d.]+)\s*)?\)/i.exec(t);return e?{a:e.length>4?parseFloat(e[5]):1,b:parseInt(e[3],10),g:parseInt(e[2],10),r:parseInt(e[1],10)}:void 0}if(t.startsWith("hsl")){const e=/hsla?\(\s*(\d+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(,\s*([\d.]+)\s*)?\)/i.exec(t);return e?p({a:e.length>4?parseFloat(e[5]):1,h:parseInt(e[1],10),l:parseInt(e[3],10),s:parseInt(e[2],10)}):void 0}if(t.startsWith("hsv")){const e=/hsva?\(\s*(\d+)°\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(,\s*([\d.]+)\s*)?\)/i.exec(t);return e?f({a:e.length>4?parseFloat(e[5]):1,h:parseInt(e[1],10),s:parseInt(e[2],10),v:parseInt(e[3],10)}):void 0}{const e=/^#?([a-f\d])([a-f\d])([a-f\d])([a-f\d])?$/i,i=t.replace(e,((t,e,i,n,o)=>e+e+i+i+n+n+(void 0!==o?o+o:""))),n=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})?$/i.exec(i);return n?{a:void 0!==n[4]?parseInt(n[4],16)/255:1,b:parseInt(n[3],16),g:parseInt(n[2],16),r:parseInt(n[1],16)}:void 0}}function c(t,e,i=!0){var s,a,r;if(void 0===t)return;const l="string"==typeof t?{value:t}:t;let d;if("string"==typeof l.value)d=l.value===o.Constants.randomColorValue?b():h(l.value);else if(l.value instanceof Array)d=c({value:(0,n.itemFromArray)(l.value,e,i)});else{const t=l.value,e=null!==(s=t.rgb)&&void 0!==s?s:l.value;if(void 0!==e.r)d=e;else{const e=null!==(a=t.hsl)&&void 0!==a?a:l.value;if(void 0!==e.h&&void 0!==e.l)d=u(e);else{const e=null!==(r=t.hsv)&&void 0!==r?r:l.value;void 0!==e.h&&void 0!==e.v&&(d=g(e))}}}return d}function d(t){const e=t.r/255,i=t.g/255,n=t.b/255,o=Math.max(e,i,n),s=Math.min(e,i,n),a={h:0,l:(o+s)/2,s:0};return o!=s&&(a.s=a.l<.5?(o-s)/(o+s):(o-s)/(2-o-s),a.h=e===o?(i-n)/(o-s):a.h=i===o?2+(n-e)/(o-s):4+(e-i)/(o-s)),a.l*=100,a.s*=100,a.h*=60,a.h<0&&(a.h+=360),a}function h(t){return l(t)}function u(t){const e={b:0,g:0,r:0},i={h:t.h/360,l:t.l/100,s:t.s/100};if(0===i.s)e.b=i.l,e.g=i.l,e.r=i.l;else{const t=i.l<.5?i.l*(1+i.s):i.l+i.s-i.l*i.s,n=2*i.l-t;e.r=r(n,t,i.h+1/3),e.g=r(n,t,i.h),e.b=r(n,t,i.h-1/3)}return e.r=Math.floor(255*e.r),e.g=Math.floor(255*e.g),e.b=Math.floor(255*e.b),e}function p(t){const e=u(t);return{a:t.a,b:e.b,g:e.g,r:e.r}}function v(t){const e=t.l/100,i=e+t.s/100*Math.min(e,1-e),n=i?2*(1-e/i):0;return{h:t.h,s:100*n,v:100*i}}function y(t){const e=t.v/100,i=e*(1-t.s/100/2),n=0===i||1===i?0:(e-i)/Math.min(i,1-i);return{h:t.h,l:100*i,s:100*n}}function g(t){const e={b:0,g:0,r:0},i=t.h/60,n=t.s/100,o=t.v/100,s=o*n,a=s*(1-Math.abs(i%2-1));let r;if(i>=0&&i<=1?r={r:s,g:a,b:0}:i>1&&i<=2?r={r:a,g:s,b:0}:i>2&&i<=3?r={r:0,g:s,b:a}:i>3&&i<=4?r={r:0,g:a,b:s}:i>4&&i<=5?r={r:a,g:0,b:s}:i>5&&i<=6&&(r={r:s,g:0,b:a}),r){const t=o-s;e.r=Math.floor(255*(r.r+t)),e.g=Math.floor(255*(r.g+t)),e.b=Math.floor(255*(r.b+t))}return e}function f(t){const e=g(t);return{a:t.a,b:e.b,g:e.g,r:e.r}}function m(t){const e={r:t.r/255,g:t.g/255,b:t.b/255},i=Math.max(e.r,e.g,e.b),n=i-Math.min(e.r,e.g,e.b);let o=0;return i===e.r?o=(e.g-e.b)/n*60:i===e.g?o=60*(2+(e.b-e.r)/n):i===e.b&&(o=60*(4+(e.r-e.g)/n)),{h:o,s:100*(i?n/i:0),v:100*i}}function b(t){const e=null!=t?t:0;return{b:Math.floor((0,s.randomInRange)((0,s.setRangeValue)(e,256))),g:Math.floor((0,s.randomInRange)((0,s.setRangeValue)(e,256))),r:Math.floor((0,s.randomInRange)((0,s.setRangeValue)(e,256)))}}function w(t,e){return`hsla(${t.h}, ${t.s}%, ${t.l}%, ${null!=e?e:1})`}function A(t,e,i,n){let o=t,a=e;return void 0===o.r&&(o=u(t)),void 0===a.r&&(a=u(e)),{b:(0,s.mix)(o.b,a.b,i,n),g:(0,s.mix)(o.g,a.g,i,n),r:(0,s.mix)(o.r,a.r,i,n)}}function S(t,e,i){if(t.enable=e.enable,t.enable){if(t.velocity=e.speed/100*i,e.sync)return;t.status=a.AnimationStatus.increasing,t.velocity*=Math.random(),t.value&&(t.value*=Math.random())}else t.velocity=0}e.colorToRgb=c,e.colorToHsl=function(t,e,i=!0){const n=c(t,e,i);return void 0!==n?d(n):void 0},e.rgbToHsl=d,e.stringToAlpha=function(t){var e;return null===(e=l(t))||void 0===e?void 0:e.a},e.stringToRgb=h,e.hslToRgb=u,e.hslaToRgba=p,e.hslToHsv=v,e.hslaToHsva=function(t){const e=v(t);return{a:t.a,h:e.h,s:e.s,v:e.v}},e.hsvToHsl=y,e.hsvaToHsla=function(t){const e=y(t);return{a:t.a,h:e.h,l:e.l,s:e.s}},e.hsvToRgb=g,e.hsvaToRgba=f,e.rgbToHsv=m,e.rgbaToHsva=function(t){const e=m(t);return{a:t.a,h:e.h,s:e.s,v:e.v}},e.getRandomRgbColor=b,e.getStyleFromRgb=function(t,e){return`rgba(${t.r}, ${t.g}, ${t.b}, ${null!=e?e:1})`},e.getStyleFromHsl=w,e.getStyleFromHsv=function(t,e){return w(y(t),e)},e.colorMix=A,e.getLinkColor=function(t,e,i){var n,s;if(i===o.Constants.randomColorValue)return b();if("mid"!==i)return i;{const i=null!==(n=t.getFillColor())&&void 0!==n?n:t.getStrokeColor(),o=null!==(s=null==e?void 0:e.getFillColor())&&void 0!==s?s:null==e?void 0:e.getStrokeColor();if(i&&o&&e)return A(i,o,t.getRadius(),e.getRadius());{const t=null!=i?i:o;if(t)return u(t)}}},e.getLinkRandomColor=function(t,e,i){const n="string"==typeof t?t:t.value;return n===o.Constants.randomColorValue?i?c({value:n}):e?o.Constants.randomColorValue:o.Constants.midColorValue:c({value:n})},e.getHslFromAnimation=function(t){return void 0!==t?{h:t.h.value,s:t.s.value,l:t.l.value}:void 0},e.getHslAnimationFromHsl=function(t,e,i){const n={h:{enable:!1,value:t.h},s:{enable:!1,value:t.s},l:{enable:!1,value:t.l}};return e&&(S(n.h,e.h,i),S(n.s,e.s,i),S(n.l,e.l,i)),n}},1565:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Constants=void 0;class i{}e.Constants=i,i.canvasClass="tsparticles-canvas-el",i.randomColorValue="random",i.midColorValue="mid",i.touchEndEvent="touchend",i.mouseDownEvent="mousedown",i.mouseUpEvent="mouseup",i.mouseMoveEvent="mousemove",i.touchStartEvent="touchstart",i.touchMoveEvent="touchmove",i.mouseLeaveEvent="mouseleave",i.mouseOutEvent="mouseout",i.touchCancelEvent="touchcancel",i.resizeEvent="resize",i.visibilityChangeEvent="visibilitychange",i.noPolygonDataLoaded="No polygon data loaded.",i.noPolygonFound="No polygon found, you need to specify SVG url in config."},6270:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.EventListeners=void 0;const n=i(6331),o=i(1565),s=i(1611);function a(t,e,i,n,o){if(n){let n={passive:!0};"boolean"==typeof o?n.capture=o:void 0!==o&&(n=o),t.addEventListener(e,i,n)}else{const n=o;t.removeEventListener(e,i,n)}}e.EventListeners=class{constructor(t){this.container=t,this.canPush=!0,this.mouseMoveHandler=t=>this.mouseTouchMove(t),this.touchStartHandler=t=>this.mouseTouchMove(t),this.touchMoveHandler=t=>this.mouseTouchMove(t),this.touchEndHandler=()=>this.mouseTouchFinish(),this.mouseLeaveHandler=()=>this.mouseTouchFinish(),this.touchCancelHandler=()=>this.mouseTouchFinish(),this.touchEndClickHandler=t=>this.mouseTouchClick(t),this.mouseUpHandler=t=>this.mouseTouchClick(t),this.mouseDownHandler=()=>this.mouseDown(),this.visibilityChangeHandler=()=>this.handleVisibilityChange(),this.themeChangeHandler=t=>this.handleThemeChange(t),this.oldThemeChangeHandler=t=>this.handleThemeChange(t),this.resizeHandler=()=>this.handleWindowResize()}addListeners(){this.manageListeners(!0)}removeListeners(){this.manageListeners(!1)}manageListeners(t){var e;const i=this.container,r=i.actualOptions,l=r.interactivity.detectsOn;let c=o.Constants.mouseLeaveEvent;if(l===n.InteractivityDetect.window)i.interactivity.element=window,c=o.Constants.mouseOutEvent;else if(l===n.InteractivityDetect.parent&&i.canvas.element){const t=i.canvas.element;i.interactivity.element=null!==(e=t.parentElement)&&void 0!==e?e:t.parentNode}else i.interactivity.element=i.canvas.element;const d=!(0,s.isSsr)()&&"undefined"!=typeof matchMedia&&matchMedia("(prefers-color-scheme: dark)");d&&(void 0!==d.addEventListener?a(d,"change",this.themeChangeHandler,t):void 0!==d.addListener&&(t?d.addListener(this.oldThemeChangeHandler):d.removeListener(this.oldThemeChangeHandler)));const h=i.interactivity.element;if(!h)return;const u=h;(r.interactivity.events.onHover.enable||r.interactivity.events.onClick.enable)&&(a(h,o.Constants.mouseMoveEvent,this.mouseMoveHandler,t),a(h,o.Constants.touchStartEvent,this.touchStartHandler,t),a(h,o.Constants.touchMoveEvent,this.touchMoveHandler,t),r.interactivity.events.onClick.enable?(a(h,o.Constants.touchEndEvent,this.touchEndClickHandler,t),a(h,o.Constants.mouseUpEvent,this.mouseUpHandler,t),a(h,o.Constants.mouseDownEvent,this.mouseDownHandler,t)):a(h,o.Constants.touchEndEvent,this.touchEndHandler,t),a(h,c,this.mouseLeaveHandler,t),a(h,o.Constants.touchCancelEvent,this.touchCancelHandler,t)),i.canvas.element&&(i.canvas.element.style.pointerEvents=u===i.canvas.element?"initial":"none"),r.interactivity.events.resize&&("undefined"!=typeof ResizeObserver?this.resizeObserver&&!t?(i.canvas.element&&this.resizeObserver.unobserve(i.canvas.element),this.resizeObserver.disconnect(),delete this.resizeObserver):!this.resizeObserver&&t&&i.canvas.element&&(this.resizeObserver=new ResizeObserver((t=>{t.find((t=>t.target===i.canvas.element))&&this.handleWindowResize()})),this.resizeObserver.observe(i.canvas.element)):a(window,o.Constants.resizeEvent,this.resizeHandler,t)),document&&a(document,o.Constants.visibilityChangeEvent,this.visibilityChangeHandler,t,!1)}handleWindowResize(){this.resizeTimeout&&(clearTimeout(this.resizeTimeout),delete this.resizeTimeout),this.resizeTimeout=setTimeout((()=>{var t;return null===(t=this.container.canvas)||void 0===t?void 0:t.windowResize()}),500)}handleVisibilityChange(){const t=this.container,e=t.actualOptions;this.mouseTouchFinish(),e.pauseOnBlur&&((null===document||void 0===document?void 0:document.hidden)?(t.pageHidden=!0,t.pause()):(t.pageHidden=!1,t.getAnimationStatus()?t.play(!0):t.draw(!0)))}mouseDown(){const t=this.container.interactivity;if(t){const e=t.mouse;e.clicking=!0,e.downPosition=e.position}}mouseTouchMove(t){var e,i,s,a,r,l,c;const d=this.container,h=d.actualOptions;if(void 0===(null===(e=d.interactivity)||void 0===e?void 0:e.element))return;let u;d.interactivity.mouse.inside=!0;const p=d.canvas.element;if(t.type.startsWith("mouse")){this.canPush=!0;const e=t;if(d.interactivity.element===window){if(p){const t=p.getBoundingClientRect();u={x:e.clientX-t.left,y:e.clientY-t.top}}}else if(h.interactivity.detectsOn===n.InteractivityDetect.parent){const t=e.target,n=e.currentTarget,o=d.canvas.element;if(t&&n&&o){const i=t.getBoundingClientRect(),s=n.getBoundingClientRect(),a=o.getBoundingClientRect();u={x:e.offsetX+2*i.left-(s.left+a.left),y:e.offsetY+2*i.top-(s.top+a.top)}}else u={x:null!==(i=e.offsetX)&&void 0!==i?i:e.clientX,y:null!==(s=e.offsetY)&&void 0!==s?s:e.clientY}}else e.target===d.canvas.element&&(u={x:null!==(a=e.offsetX)&&void 0!==a?a:e.clientX,y:null!==(r=e.offsetY)&&void 0!==r?r:e.clientY})}else{this.canPush="touchmove"!==t.type;const e=t,i=e.touches[e.touches.length-1],n=null==p?void 0:p.getBoundingClientRect();u={x:i.clientX-(null!==(l=null==n?void 0:n.left)&&void 0!==l?l:0),y:i.clientY-(null!==(c=null==n?void 0:n.top)&&void 0!==c?c:0)}}const v=d.retina.pixelRatio;u&&(u.x*=v,u.y*=v),d.interactivity.mouse.position=u,d.interactivity.status=o.Constants.mouseMoveEvent}mouseTouchFinish(){const t=this.container.interactivity;if(void 0===t)return;const e=t.mouse;delete e.position,delete e.clickPosition,delete e.downPosition,t.status=o.Constants.mouseLeaveEvent,e.inside=!1,e.clicking=!1}mouseTouchClick(t){const e=this.container,i=e.actualOptions,n=e.interactivity.mouse;n.inside=!0;let o=!1;const s=n.position;if(void 0!==s&&i.interactivity.events.onClick.enable){for(const[,t]of e.plugins)if(void 0!==t.clickPositionValid&&(o=t.clickPositionValid(s),o))break;o||this.doMouseTouchClick(t),n.clicking=!1}}doMouseTouchClick(t){const e=this.container,i=e.actualOptions;if(this.canPush){const t=e.interactivity.mouse.position;if(!t)return;e.interactivity.mouse.clickPosition={x:t.x,y:t.y},e.interactivity.mouse.clickTime=(new Date).getTime();const n=i.interactivity.events.onClick;if(n.mode instanceof Array)for(const t of n.mode)this.handleClickMode(t);else this.handleClickMode(n.mode)}"touchend"===t.type&&setTimeout((()=>this.mouseTouchFinish()),500)}handleThemeChange(t){const e=t.matches?this.container.options.defaultDarkTheme:this.container.options.defaultLightTheme,i=this.container.options.themes.find((t=>t.name===e));i&&i.default.auto&&this.container.loadTheme(e)}handleClickMode(t){const e=this.container,i=e.actualOptions,o=i.interactivity.modes.push.quantity,a=i.interactivity.modes.remove.quantity;switch(t){case n.ClickMode.push:if(o>0){const t=i.interactivity.modes.push,n=(0,s.itemFromArray)([void 0,...t.groups]),a=void 0!==n?e.actualOptions.particles.groups[n]:void 0;e.particles.push(o,e.interactivity.mouse,a,n)}break;case n.ClickMode.remove:e.particles.removeQuantity(a);break;case n.ClickMode.bubble:e.bubble.clicking=!0;break;case n.ClickMode.repulse:e.repulse.clicking=!0,e.repulse.count=0;for(const t of e.repulse.particles)t.velocity.setTo(t.initialVelocity);e.repulse.particles=[],e.repulse.finish=!1,setTimeout((()=>{e.destroyed||(e.repulse.clicking=!1)}),1e3*i.interactivity.modes.repulse.duration);break;case n.ClickMode.attract:e.attract.clicking=!0,e.attract.count=0;for(const t of e.attract.particles)t.velocity.setTo(t.initialVelocity);e.attract.particles=[],e.attract.finish=!1,setTimeout((()=>{e.destroyed||(e.attract.clicking=!1)}),1e3*i.interactivity.modes.attract.duration);break;case n.ClickMode.pause:e.getAnimationStatus()?e.pause():e.play()}for(const[,i]of e.plugins)i.handleClickMode&&i.handleClickMode(t)}}},3939:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.calcEasing=e.collisionVelocity=e.getParticleBaseVelocity=e.getParticleDirectionAngle=e.getDistance=e.getDistances=e.getValue=e.setRangeValue=e.getRangeMax=e.getRangeMin=e.getRangeValue=e.randomInRange=e.mix=e.clamp=void 0;const n=i(6331),o=i(5638);function s(t){const e=l(t);let i=r(t);return e===i&&(i=0),Math.random()*(e-i)+i}function a(t){return"number"==typeof t?t:s(t)}function r(t){return"number"==typeof t?t:t.min}function l(t){return"number"==typeof t?t:t.max}function c(t,e){if(t===e||void 0===e&&"number"==typeof t)return t;const i=r(t),n=l(t);return void 0!==e?{min:Math.min(i,e),max:Math.max(n,e)}:c(i,n)}function d(t,e){const i=t.x-e.x,n=t.y-e.y;return{dx:i,dy:n,distance:Math.sqrt(i*i+n*n)}}e.clamp=function(t,e,i){return Math.min(Math.max(t,e),i)},e.mix=function(t,e,i,n){return Math.floor((t*i+e*n)/(i+n))},e.randomInRange=s,e.getRangeValue=a,e.getRangeMin=r,e.getRangeMax=l,e.setRangeValue=c,e.getValue=function(t){const e=t.random,{enable:i,minimumValue:n}="boolean"==typeof e?{enable:e,minimumValue:0}:e;return a(i?c(t.value,n):t.value)},e.getDistances=d,e.getDistance=function(t,e){return d(t,e).distance},e.getParticleDirectionAngle=function(t){if("number"==typeof t)return t*Math.PI/180;switch(t){case n.MoveDirection.top:return-Math.PI/2;case n.MoveDirection.topRight:return-Math.PI/4;case n.MoveDirection.right:return 0;case n.MoveDirection.bottomRight:return Math.PI/4;case n.MoveDirection.bottom:return Math.PI/2;case n.MoveDirection.bottomLeft:return 3*Math.PI/4;case n.MoveDirection.left:return Math.PI;case n.MoveDirection.topLeft:return-3*Math.PI/4;case n.MoveDirection.none:default:return Math.random()*Math.PI*2}},e.getParticleBaseVelocity=function(t){const e=o.Vector.origin;return e.length=1,e.angle=t,e},e.collisionVelocity=function(t,e,i,n){return o.Vector.create(t.x*(i-n)/(i+n)+2*e.x*n/(i+n),t.y)},e.calcEasing=function(t,e){switch(e){case n.EasingType.easeOutQuad:return 1-(1-t)**2;case n.EasingType.easeOutCubic:return 1-(1-t)**3;case n.EasingType.easeOutQuart:return 1-(1-t)**4;case n.EasingType.easeOutQuint:return 1-(1-t)**5;case n.EasingType.easeOutExpo:return 1===t?1:1-Math.pow(2,-10*t);case n.EasingType.easeOutSine:return Math.sin(t*Math.PI/2);case n.EasingType.easeOutBack:{const e=1.70158;return 1+(e+1)*Math.pow(t-1,3)+e*Math.pow(t-1,2)}case n.EasingType.easeOutCirc:return Math.sqrt(1-Math.pow(t-1,2));default:return t}}},4587:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Plugins=void 0;const i=[],n=new Map,o=new Map,s=new Map,a=new Map,r=new Map,l=new Map,c=new Map;class d{static getPlugin(t){return i.find((e=>e.id===t))}static addPlugin(t){d.getPlugin(t.id)||i.push(t)}static getAvailablePlugins(t){const e=new Map;for(const n of i)n.needsPlugin(t.actualOptions)&&e.set(n.id,n.getPlugin(t));return e}static loadOptions(t,e){for(const n of i)n.loadOptions(t,e)}static getPreset(t){return r.get(t)}static addPreset(t,e,i=!1){!i&&d.getPreset(t)||r.set(t,e)}static addShapeDrawer(t,e){d.getShapeDrawer(t)||l.set(t,e)}static getShapeDrawer(t){return l.get(t)}static getSupportedShapes(){return l.keys()}static getPathGenerator(t){return c.get(t)}static addPathGenerator(t,e){d.getPathGenerator(t)||c.set(t,e)}static getInteractors(t,e=!1){let i=s.get(t);return i&&!e||(i=[...n.values()].map((e=>e(t))),s.set(t,i)),i}static addInteractor(t,e){n.set(t,e)}static getUpdaters(t,e=!1){let i=a.get(t);return i&&!e||(i=[...o.values()].map((e=>e(t))),a.set(t,i)),i}static addParticleUpdater(t,e){o.set(t,e)}}e.Plugins=d},7525:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Point=void 0,e.Point=class{constructor(t,e){this.position=t,this.particle=e}}},2234:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.QuadTree=void 0;const n=i(8191),o=i(3232),s=i(5407),a=i(3939);class r{constructor(t,e){this.rectangle=t,this.capacity=e,this.points=[],this.divided=!1}subdivide(){const t=this.rectangle.position.x,e=this.rectangle.position.y,i=this.rectangle.size.width,o=this.rectangle.size.height,s=this.capacity;this.northEast=new r(new n.Rectangle(t,e,i/2,o/2),s),this.northWest=new r(new n.Rectangle(t+i/2,e,i/2,o/2),s),this.southEast=new r(new n.Rectangle(t,e+o/2,i/2,o/2),s),this.southWest=new r(new n.Rectangle(t+i/2,e+o/2,i/2,o/2),s),this.divided=!0}insert(t){var e,i,n,o,s;return!!this.rectangle.contains(t.position)&&(this.points.length<this.capacity?(this.points.push(t),!0):(this.divided||this.subdivide(),null!==(s=(null===(e=this.northEast)||void 0===e?void 0:e.insert(t))||(null===(i=this.northWest)||void 0===i?void 0:i.insert(t))||(null===(n=this.southEast)||void 0===n?void 0:n.insert(t))||(null===(o=this.southWest)||void 0===o?void 0:o.insert(t)))&&void 0!==s&&s))}queryCircle(t,e){return this.query(new o.Circle(t.x,t.y,e))}queryCircleWarp(t,e,i){const n=i,o=i;return this.query(new s.CircleWarp(t.x,t.y,e,void 0!==n.canvas?n.canvas.size:o))}queryRectangle(t,e){return this.query(new n.Rectangle(t.x,t.y,e.width,e.height))}query(t,e){var i,n,o,s;const r=null!=e?e:[];if(!t.intersects(this.rectangle))return[];for(const e of this.points)!t.contains(e.position)&&(0,a.getDistance)(t.position,e.position)>e.particle.getRadius()||r.push(e.particle);return this.divided&&(null===(i=this.northEast)||void 0===i||i.query(t,r),null===(n=this.northWest)||void 0===n||n.query(t,r),null===(o=this.southEast)||void 0===o||o.query(t,r),null===(s=this.southWest)||void 0===s||s.query(t,r)),r}}e.QuadTree=r},2679:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Range=void 0,e.Range=class{constructor(t,e){this.position={x:t,y:e}}}},8191:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Rectangle=void 0;const n=i(2679);class o extends n.Range{constructor(t,e,i,n){super(t,e),this.size={height:n,width:i}}contains(t){const e=this.size.width,i=this.size.height,n=this.position;return t.x>=n.x&&t.x<=n.x+e&&t.y>=n.y&&t.y<=n.y+i}intersects(t){const e=t,i=t,n=this.size.width,o=this.size.height,s=this.position,a=t.position;if(void 0!==i.radius)return i.intersects(this);if(void 0!==e.size){const t=e.size,i=t.width,r=t.height;return a.x<s.x+n&&a.x+i>s.x&&a.y<s.y+o&&a.y+r>s.y}return!1}}e.Rectangle=o},1611:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.rectBounce=e.circleBounce=e.circleBounceDataFromParticle=e.divMode=e.singleDivModeExecute=e.divModeExecute=e.isDivModeEnabled=e.deepExtend=e.calculateBounds=e.areBoundsInside=e.isPointInside=e.itemFromArray=e.arrayRandomIndex=e.loadFont=e.isInArray=e.cancelAnimation=e.animate=e.isSsr=void 0;const n=i(6331),o=i(3939),s=i(5638);function a(t,e,i,n,o,s){const a={bounced:!1};return e.min>=n.min&&e.min<=n.max&&e.max>=n.min&&e.max<=n.max&&(t.max>=i.min&&t.max<=(i.max+i.min)/2&&o>0||t.min<=i.max&&t.min>(i.max+i.min)/2&&o<0)&&(a.velocity=o*-s,a.bounced=!0),a}function r(t,e){if(e instanceof Array){for(const i of e)if(t.matches(i))return!0;return!1}return t.matches(e)}function l(){return"undefined"==typeof window||!window||void 0===window.document||!window.document}function c(t,e){return t===e||e instanceof Array&&e.indexOf(t)>-1}function d(t){return Math.floor(Math.random()*t.length)}function h(t,e,i){let o=!0;return i&&i!==n.OutModeDirection.bottom||(o=t.top<e.height),!o||i&&i!==n.OutModeDirection.left||(o=t.right>0),!o||i&&i!==n.OutModeDirection.right||(o=t.left<e.width),!o||i&&i!==n.OutModeDirection.top||(o=t.bottom>0),o}function u(t,e){return{bottom:t.y+e,left:t.x-e,right:t.x+e,top:t.y-e}}function p(t,e){const i=t.selectors;if(i instanceof Array)for(const n of i)e(n,t);else e(i,t)}e.isSsr=l,e.animate=function(){return l()?t=>setTimeout(t):t=>(window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||window.setTimeout)(t)},e.cancelAnimation=function(){return l()?t=>clearTimeout(t):t=>(window.cancelAnimationFrame||window.webkitCancelRequestAnimationFrame||window.mozCancelRequestAnimationFrame||window.oCancelRequestAnimationFrame||window.msCancelRequestAnimationFrame||window.clearTimeout)(t)},e.isInArray=c,e.loadFont=async function(t){var e,i;try{await document.fonts.load(`${null!==(e=t.weight)&&void 0!==e?e:"400"} 36px '${null!==(i=t.font)&&void 0!==i?i:"Verdana"}'`)}catch(t){}},e.arrayRandomIndex=d,e.itemFromArray=function(t,e,i=!0){return t[void 0!==e&&i?e%t.length:d(t)]},e.isPointInside=function(t,e,i,n){return h(u(t,null!=i?i:0),e,n)},e.areBoundsInside=h,e.calculateBounds=u,e.deepExtend=function t(e,...i){for(const n of i){if(null==n)continue;if("object"!=typeof n){e=n;continue}const i=Array.isArray(n);!i||"object"==typeof e&&e&&Array.isArray(e)?i||"object"==typeof e&&e&&!Array.isArray(e)||(e={}):e=[];for(const i in n){if("__proto__"===i)continue;const o=n[i],s="object"==typeof o,a=e;a[i]=s&&Array.isArray(o)?o.map((e=>t(a[i],e))):t(a[i],o)}}return e},e.isDivModeEnabled=function(t,e){return e instanceof Array?!!e.find((e=>e.enable&&c(t,e.mode))):c(t,e.mode)},e.divModeExecute=function(t,e,i){if(e instanceof Array)for(const n of e){const e=n.mode;n.enable&&c(t,e)&&p(n,i)}else{const n=e.mode;e.enable&&c(t,n)&&p(e,i)}},e.singleDivModeExecute=p,e.divMode=function(t,e){if(e&&t)return t instanceof Array?t.find((t=>r(e,t.selectors))):r(e,t.selectors)?t:void 0},e.circleBounceDataFromParticle=function(t){return{position:t.getPosition(),radius:t.getRadius(),mass:t.getMass(),velocity:t.velocity,factor:s.Vector.create((0,o.getValue)(t.options.bounce.horizontal),(0,o.getValue)(t.options.bounce.vertical))}},e.circleBounce=function(t,e){const{x:i,y:n}=t.velocity.sub(e.velocity),[s,a]=[t.position,e.position],{dx:r,dy:l}=(0,o.getDistances)(a,s);if(i*r+n*l>=0){const i=-Math.atan2(l,r),n=t.mass,s=e.mass,a=t.velocity.rotate(i),c=e.velocity.rotate(i),d=(0,o.collisionVelocity)(a,c,n,s),h=(0,o.collisionVelocity)(c,a,n,s),u=d.rotate(-i),p=h.rotate(-i);t.velocity.x=u.x*t.factor.x,t.velocity.y=u.y*t.factor.y,e.velocity.x=p.x*e.factor.x,e.velocity.y=p.y*e.factor.y}},e.rectBounce=function(t,e){const i=u(t.getPosition(),t.getRadius()),n=a({min:i.left,max:i.right},{min:i.top,max:i.bottom},{min:e.left,max:e.right},{min:e.top,max:e.bottom},t.velocity.x,(0,o.getValue)(t.options.bounce.horizontal));n.bounced&&(void 0!==n.velocity&&(t.velocity.x=n.velocity),void 0!==n.position&&(t.position.x=n.position));const s=a({min:i.top,max:i.bottom},{min:i.left,max:i.right},{min:e.top,max:e.bottom},{min:e.left,max:e.right},t.velocity.y,(0,o.getValue)(t.options.bounce.vertical));s.bounced&&(void 0!==s.velocity&&(t.velocity.y=s.velocity),void 0!==s.position&&(t.position.y=s.position))}},7373:function(t,e,i){var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),o(i(1680),e),o(i(3232),e),o(i(5407),e),o(i(2323),e),o(i(1565),e),o(i(6270),e),o(i(3939),e),o(i(4587),e),o(i(7525),e),o(i(2234),e),o(i(2679),e),o(i(8191),e),o(i(1611),e)},5961:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadFull=void 0;const n=i(8788),o=i(6910),s=i(2453),a=i(7175),r=i(3785),l=i(4919),c=i(3737),d=i(2124);e.loadFull=async function(t){await(0,n.loadSlim)(t),await(0,o.loadExternalTrailInteraction)(t),await(0,d.loadRollUpdater)(t),await(0,s.loadTiltUpdater)(t),await(0,a.loadWobbleUpdater)(t),await(0,r.loadAbsorbersPlugin)(t),await(0,l.loadEmittersPlugin)(t),await(0,c.loadPolygonMaskPlugin)(t)}},6824:function(t,e,i){var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),e.tsParticles=e.pJSDom=e.particlesJS=e.Main=e.Rectangle=e.Point=e.Constants=e.CircleWarp=e.Circle=void 0;const s=i(21),a=i(9359);Object.defineProperty(e,"Main",{enumerable:!0,get:function(){return a.Main}});const r=i(7373);Object.defineProperty(e,"Circle",{enumerable:!0,get:function(){return r.Circle}}),Object.defineProperty(e,"CircleWarp",{enumerable:!0,get:function(){return r.CircleWarp}}),Object.defineProperty(e,"Constants",{enumerable:!0,get:function(){return r.Constants}}),Object.defineProperty(e,"Point",{enumerable:!0,get:function(){return r.Point}}),Object.defineProperty(e,"Rectangle",{enumerable:!0,get:function(){return r.Rectangle}});const l=i(5961),c=new a.Main;e.tsParticles=c,c.init();const{particlesJS:d,pJSDom:h}=(0,s.initPjs)(c);e.particlesJS=d,e.pJSDom=h,(0,l.loadFull)(c),o(i(5638),e),o(i(5624),e),o(i(6331),e),o(i(5456),e),o(i(4737),e),o(i(9361),e),o(i(1680),e),o(i(2323),e),o(i(3939),e),o(i(1611),e),o(i(5008),e),o(i(3936),e),o(i(7051),e),o(i(4260),e),o(i(7472),e)},9359:function(t,e,i){var n,o=this&&this.__classPrivateFieldSet||function(t,e,i,n,o){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!o:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?o.call(t,i):o?o.value=i:e.set(t,i),i},s=this&&this.__classPrivateFieldGet||function(t,e,i,n){if("a"===i&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===i?n:"a"===i?n.call(t):n?n.value:e.get(t)};Object.defineProperty(e,"__esModule",{value:!0}),e.Main=void 0;const a=i(7373),r=i(6301);e.Main=class{constructor(){n.set(this,void 0),o(this,n,!1,"f")}init(){s(this,n,"f")||o(this,n,!0,"f")}async loadFromArray(t,e,i){return r.Loader.load(t,e,i)}async load(t,e){return r.Loader.load(t,e)}async set(t,e,i){return r.Loader.set(t,e,i)}async loadJSON(t,e,i){return r.Loader.loadJSON(t,e,i)}async setJSON(t,e,i,n){return r.Loader.setJSON(t,e,i,n)}setOnClickHandler(t){r.Loader.setOnClickHandler(t)}dom(){return r.Loader.dom()}domItem(t){return r.Loader.domItem(t)}async refresh(){for(const t of this.dom())await t.refresh()}async addShape(t,e,i,n,o){let s;s="function"==typeof e?{afterEffect:n,destroy:o,draw:e,init:i}:e,a.Plugins.addShapeDrawer(t,s),await this.refresh()}async addPreset(t,e,i=!1){a.Plugins.addPreset(t,e,i),await this.refresh()}async addPlugin(t){a.Plugins.addPlugin(t),await this.refresh()}async addPathGenerator(t,e){a.Plugins.addPathGenerator(t,e),await this.refresh()}async addInteractor(t,e){a.Plugins.addInteractor(t,e),await this.refresh()}async addParticleUpdater(t,e){a.Plugins.addParticleUpdater(t,e),await this.refresh()}},n=new WeakMap},21:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.initPjs=void 0,e.initPjs=t=>{const e=(e,i)=>t.load(e,i);return e.load=(e,i,n)=>{t.loadJSON(e,i).then((t=>{t&&n(t)})).catch((()=>{n(void 0)}))},e.setOnClickHandler=e=>{t.setOnClickHandler(e)},{particlesJS:e,pJSDom:t.dom()}}},8788:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadSlim=void 0;const n=i(4472),o=i(6717),s=i(9733),a=i(3202),r=i(6504),l=i(302),c=i(5313),d=i(2770),h=i(3066),u=i(3806),p=i(643),v=i(2179),y=i(7065),g=i(4784),f=i(8989),m=i(4441),b=i(6086),w=i(4842),A=i(9193),S=i(1966),_=i(4482),P=i(884),C=i(1004);e.loadSlim=async function(t){await(0,d.loadExternalAttractInteraction)(t),await(0,S.loadExternalBounceInteraction)(t),await(0,c.loadExternalBubbleInteraction)(t),await(0,s.loadExternalConnectInteraction)(t),await(0,h.loadExternalGrabInteraction)(t),await(0,w.loadExternalRepulseInteraction)(t),await(0,p.loadParticlesAttractInteraction)(t),await(0,f.loadParticlesCollisionsInteraction)(t),await(0,P.loadParticlesLinksInteraction)(t),await(0,n.loadCircleShape)(t),await(0,r.loadImageShape)(t),await(0,A.loadLineShape)(t),await(0,l.loadPolygonShape)(t),await(0,v.loadSquareShape)(t),await(0,u.loadStarShape)(t),await(0,_.loadTextShape)(t),await(0,o.loadLifeUpdater)(t),await(0,a.loadOpacityUpdater)(t),await(0,C.loadSizeUpdater)(t),await(0,m.loadAngleUpdater)(t),await(0,g.loadColorUpdater)(t),await(0,y.loadStrokeColorUpdater)(t),await(0,b.loadOutModesUpdater)(t)}},8644:(t,e,i)=>{t.exports=i.p+"7cec79e041a3fedd1b2e.svg"},9097:(t,e,i)=>{t.exports=i.p+"39b05538588d274e774c.svg"},1634:(t,e,i)=>{t.exports=i.p+"7f33d3ead7aa46431bfc.svg"},1190:(t,e,i)=>{t.exports=i.p+"9e5d032d941716597a91.svg"}},e={};function i(n){var o=e[n];if(void 0!==o)return o.exports;var s=e[n]={id:n,exports:{}};return t[n].call(s.exports,s,s.exports,i),s.exports}i.m=t,i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;i.g.importScripts&&(t=i.g.location+"");var e=i.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=t})(),i.b=document.baseURI||self.location.href,(()=>{const t={callApi:async function(t){document.body.appendChild(e.returnLoading());const i=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${t}&appid=94a2aad4a38121e794735a95ee415a76`,{mode:"cors"});if(!i.ok)throw document.body.removeChild(document.querySelector(".loading-begin")),new Error(i.status);return await i.json()}},e={returnLoading:()=>{const t=document.createElement("div"),e=document.createElement("div");return t.classList.add("loading-begin"),e.classList.add("text"),e.innerHTML='\n    <div class="loader">\n    </div>',t.appendChild(e),t}},n=t;var o=i(6824);const s={evaluate:function(t){"Rain"==t||"Snow"==t?function(t){const e=document.createElement("div");e.id="tsparticles",document.body.appendChild(e),"Rain"==t?o.tsParticles.load("tsparticles",{particles:{number:{value:70,density:{value_area:400}},color:{value:"#fff"},stroke:{width:1},shape:{type:"polygon",polygon:{sides:1,nb_sides:1}},rotate:{value:90},size:{value:3},move:{enable:!0,direction:"bottom",straight:!0,speed:20}}}):o.tsParticles.load("tsparticles",{particles:{number:{value:60,density:{enable:!0,value_area:800}},size:{value:6,random:!0},opacity:{value:5,random:!0},move:{enable:!0,direction:"bottom"},shape:{value:"circle"}}})}(t):function(){const t=document.querySelector("#tsparticles");t&&document.body.removeChild(t)}()}};var a=i(1190),r=i(8644);const l=()=>({getUpTriangle:async function(){return a},getDownTriangle:async function(){return r}});var c=i(3379),d=i.n(c),h=i(7795),u=i.n(h),p=i(569),v=i.n(p),y=i(3565),g=i.n(y),f=i(9216),m=i.n(f),b=i(4589),w=i.n(b),A=i(5150),S={};S.styleTagTransform=w(),S.setAttributes=g(),S.insert=v().bind(null,"head"),S.domAPI=u(),S.insertStyleElement=m(),d()(A.Z,S),A.Z&&A.Z.locals&&A.Z.locals;const _=()=>{const t=document.querySelector(".weather-display");return{updateData:e=>{t.innerHTML="";const i=document.createElement("div");i.classList.add("temp-info");const n=document.createElement("div");n.classList.add("sun");const o=document.createElement("div");o.classList.add("temp-data"),o.appendChild((t=>{const e=document.createElement("div");return e.classList.add("display-current-temp"),e.textContent=`${Math.round(t-273)}°C`,e})(e.main.temp)),o.appendChild((t=>{const e=document.createElement("div");return e.classList.add("min-temp"),l().getDownTriangle().then((t=>{const i=new Image;i.src=t,i.classList.add("min-temp-logo"),e.appendChild(i)})),e.textContent=`${Math.round(t-273)}°C`,e})(e.main.temp_min)),o.appendChild((t=>{const e=document.createElement("div");return e.classList.add("max-temp"),l().getUpTriangle().then((t=>{const i=new Image;i.src=t,i.classList.add("max-temp-logo"),e.appendChild(i)})),e.textContent=`${Math.round(t-273)}°C`,e})(e.main.temp_max)),i.appendChild(o),i.appendChild((t=>{const e=document.createElement("div");return e.textContent=t,e.classList.add("display-condition"),e})(e.weather[0].main)),i.appendChild((t=>{const e=document.createElement("div");return e.textContent=t,e.classList.add("display-city-name"),e})(e.name)),t.appendChild(n),t.appendChild(i),(t=>{const e=document.querySelector(".sun");e.removeAttribute("style"),"Haze"==t||"Smoke"==t?(document.body.style.background="linear-gradient(rgb(198 198 198 / 50%), rgb(0 113 195 / 73%), rgb(17, 152, 250))",e.style.boxShadow="0 0 2px 0 rgb(255,255,0)"):"Mist"==t?(document.body.style.background="linear-gradient(silver, #0095ff)",e.style.boxShadow="0 0 3px 0 rgb(255,255,0)"):"Snow"==t?(document.body.style.background="rgb(139,175,199)",e.style.opacity=.9):"Clouds"==t?(document.body.style.background="linear-gradient(rgb(87, 92, 95), rgb(121,117,117))",e.setAttribute("style","opacity: 0.7; box-shadow:0 0 2px 0px rgb(255,255,0);")):"Rain"==t?(document.body.style.background="rgb(5, 43, 69)",e.setAttribute("style","opacity: 0.8; box-shadow:0 0 2px 0px rgb(255,255,0);")):"Drizzle"==t?(document.body.style.background="rgb(67,89,104)",e.setAttribute("style","opacity: 0.8;\n      box-shadow: 0 0 2px 1px rgb(255,255,0)")):"Thunderstorm"==t?document.body.style.background="rgb(1,14,24)":document.body.removeAttribute("style"),s.evaluate(t)})(e.weather[0].main),document.body.removeChild(document.querySelector(".loading-begin"))}}};window.addEventListener("DOMContentLoaded",(()=>{n.callApi("New Delhi").then((t=>_().updateData(t))).catch((t=>{}))})),window.addEventListener("DOMContentLoaded",(()=>{const t=document.forms[0];function e(t){console.log(t);const e=document.createElement("div");"404"==t.message?e.textContent="Invalid City Name":e.textContent="Empty Input",e.classList.add("display-error"),e.addEventListener("animationend",(t=>{document.body.removeChild(e)})),document.body.appendChild(e)}t.onsubmit=function(i){const o=t.elements[0].value,s=document.querySelector(".display-error");if(s&&document.body.removeChild(s),i.preventDefault(),""==o)return e(new Error("Empty")),void t.reset();n.callApi(o).then((t=>{_().updateData(t)})).catch((t=>{e(t)})),t.elements[0].blur(),t.reset()}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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ckJ5TyxFQUFXRyxTQUFTNU8sRUFBVU0sTSxhQ3JDOUMzRSxPQUFPQyxlQUFlM0csRUFBUyxhQUFjLENBQUU0RyxPQUFPLEssYUNBdERGLE9BQU9DLGVBQWUzRyxFQUFTLGFBQWMsQ0FBRTRHLE9BQU8sSyxhQ0F0REYsT0FBT0MsZUFBZTNHLEVBQVMsYUFBYyxDQUFFNEcsT0FBTyxLLGFDQXRERixPQUFPQyxlQUFlM0csRUFBUyxhQUFjLENBQUU0RyxPQUFPLEssYUNBdERGLE9BQU9DLGVBQWUzRyxFQUFTLGFBQWMsQ0FBRTRHLE9BQU8sSyxhQ0F0REYsT0FBT0MsZUFBZTNHLEVBQVMsYUFBYyxDQUFFNEcsT0FBTyxLLGFDQXRERixPQUFPQyxlQUFlM0csRUFBUyxhQUFjLENBQUU0RyxPQUFPLEssYUNBdERGLE9BQU9DLGVBQWUzRyxFQUFTLGFBQWMsQ0FBRTRHLE9BQU8sSyxhQ0F0REYsT0FBT0MsZUFBZTNHLEVBQVMsYUFBYyxDQUFFNEcsT0FBTyxLLGFDQXRERixPQUFPQyxlQUFlM0csRUFBUyxhQUFjLENBQUU0RyxPQUFPLEssWUNBdERGLE9BQU9DLGVBQWUzRyxFQUFTLGFBQWMsQ0FBRTRHLE9BQU8sSyxZQ0F0REYsT0FBT0MsZUFBZTNHLEVBQVMsYUFBYyxDQUFFNEcsT0FBTyxLLGFDQXRERixPQUFPQyxlQUFlM0csRUFBUyxhQUFjLENBQUU0RyxPQUFPLEssYUNBdERGLE9BQU9DLGVBQWUzRyxFQUFTLGFBQWMsQ0FBRTRHLE9BQU8sSyxhQ0F0REYsT0FBT0MsZUFBZTNHLEVBQVMsYUFBYyxDQUFFNEcsT0FBTyxLLGFDQXRERixPQUFPQyxlQUFlM0csRUFBUyxhQUFjLENBQUU0RyxPQUFPLEssYUNBdERGLE9BQU9DLGVBQWUzRyxFQUFTLGFBQWMsQ0FBRTRHLE9BQU8sSyxZQ0F0REYsT0FBT0MsZUFBZTNHLEVBQVMsYUFBYyxDQUFFNEcsT0FBTyxLLFlDQXRERixPQUFPQyxlQUFlM0csRUFBUyxhQUFjLENBQUU0RyxPQUFPLEssYUNBdERGLE9BQU9DLGVBQWUzRyxFQUFTLGFBQWMsQ0FBRTRH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RSxFQUFJRyxRQUNORCxFQUFTcEIsWUFBYyxvQkFFdkJvQixFQUFTcEIsWUFBYyxjQUV6Qm9CLEVBQVNwQyxVQUFVNThDLElBQUksaUJBQ3ZCZy9DLEVBQVNyeUQsaUJBQWlCLGdCQUFpQjdRLElBQ3pDTixTQUFTK2dFLEtBQUsxL0QsWUFBWW1pRSxNQUU1QnhqRSxTQUFTK2dFLEtBQUt0Z0UsWUFBWStpRSxHQWxCNUJMLEVBQVVPLFNBcUJWLFNBQXNCcGpFLEdBQ3BCLE1BQU13Z0UsRUFuQkNxQyxFQUFVUSxTQUFTLEdBQUc5aEUsTUFvQnZCMmhFLEVBQVd4akUsU0FBU0MsY0FBYyxrQkFNeEMsR0FMSXVqRSxHQUNGeGpFLFNBQVMrZ0UsS0FBSzEvRCxZQUFZbWlFLEdBRTVCbGpFLEVBQUVzakUsaUJBRWMsSUFBWjlDLEVBR0YsT0FGQXVDLEVBQVksSUFBSTdpRSxNQUFNLGVBQ3RCMmlFLEVBQVV2ekQsUUFHWixVQUNXa3hELEdBQ1J2ZixNQUFNL2pELElBQ0xva0UsSUFBaUJFLFdBQVd0a0UsTUFFN0J3c0IsT0FBTzdWLElBQ05rdkQsRUFBWWx2RCxNQUVoQmd2RCxFQUFVUSxTQUFTLEdBQUcxZ0MsT0FDdEJrZ0MsRUFBVXZ6RCxhIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9zcmMvbWFpbi5jc3MiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvQ29yZS9DYW52YXMuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvQ29yZS9Db250YWluZXIuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvQ29yZS9FeHRlcm5hbEludGVyYWN0b3JCYXNlLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL0NvcmUvRnJhbWVNYW5hZ2VyLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL0NvcmUvSW50ZXJhY3Rpb25NYW5hZ2VyLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL0NvcmUvSW50ZXJmYWNlcy9Db2xvcnMuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvQ29yZS9JbnRlcmZhY2VzL0dyYWRpZW50cy5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9Db3JlL0ludGVyZmFjZXMvSUF0dHJhY3QuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvQ29yZS9JbnRlcmZhY2VzL0lCb3VuZHMuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvQ29yZS9JbnRlcmZhY2VzL0lCdWJibGUuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvQ29yZS9JbnRlcmZhY2VzL0lCdWJibGVQYXJ0aWNsZURhdGEuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvQ29yZS9JbnRlcmZhY2VzL0lDaXJjbGVCb3VuY2VyLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL0NvcmUvSW50ZXJmYWNlcy9JQ29udGFpbmVySW50ZXJhY3Rpdml0eS5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9Db3JlL0ludGVyZmFjZXMvSUNvbnRhaW5lclBsdWdpbi5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9Db3JlL0ludGVyZmFjZXMvSUNvb3JkaW5hdGVzLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL0NvcmUvSW50ZXJmYWNlcy9JRGVsdGEuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvQ29yZS9JbnRlcmZhY2VzL0lEaW1lbnNpb24uanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvQ29yZS9JbnRlcmZhY2VzL0lEaXN0YW5jZS5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9Db3JlL0ludGVyZmFjZXMvSUV4dGVybmFsSW50ZXJhY3Rvci5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9Db3JlL0ludGVyZmFjZXMvSUludGVyYWN0b3IuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvQ29yZS9JbnRlcmZhY2VzL0lNb3VzZURhdGEuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvQ29yZS9JbnRlcmZhY2VzL0lNb3ZlUGF0aEdlbmVyYXRvci5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9Db3JlL0ludGVyZmFjZXMvSVBhcnRpY2xlLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL0NvcmUvSW50ZXJmYWNlcy9JUGFydGljbGVHcmFkaWVudEFuaW1hdGlvbi5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9Db3JlL0ludGVyZmFjZXMvSVBhcnRpY2xlR3JhZGllbnRDb2xvckFuaW1hdGlvbi5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9Db3JlL0ludGVyZmFjZXMvSVBhcnRpY2xlSHNsQW5pbWF0aW9uLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL0NvcmUvSW50ZXJmYWNlcy9JUGFydGljbGVMaWZlLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL0NvcmUvSW50ZXJmYWNlcy9JUGFydGljbGVMb29wcy5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9Db3JlL0ludGVyZmFjZXMvSVBhcnRpY2xlUmV0aW5hUHJvcHMuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvQ29yZS9JbnRlcmZhY2VzL0lQYXJ0aWNsZVNwaW4uanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvQ29yZS9JbnRlcmZhY2VzL0lQYXJ0aWNsZVVwZGF0ZXIuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvQ29yZS9JbnRlcmZhY2VzL0lQYXJ0aWNsZVZhbHVlQW5pbWF0aW9uLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL0NvcmUvSW50ZXJmYWNlcy9JUGFydGljbGVzSW50ZXJhY3Rvci5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9Db3JlL0ludGVyZmFjZXMvSVBsdWdpbi5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9Db3JlL0ludGVyZmFjZXMvSVJhbmdlVmFsdWUuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvQ29yZS9JbnRlcmZhY2VzL0lSZWN0U2lkZVJlc3VsdC5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9Db3JlL0ludGVyZmFjZXMvSVJlcHVsc2UuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvQ29yZS9JbnRlcmZhY2VzL0lTaGFwZURyYXdlci5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9Db3JlL0ludGVyZmFjZXMvSVNoYXBlVmFsdWVzLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL0NvcmUvSW50ZXJmYWNlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9Db3JlL0xvYWRlci5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9Db3JlL1BhcnRpY2xlLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL0NvcmUvUGFydGljbGUvTW92ZXIuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvQ29yZS9QYXJ0aWNsZS9WZWN0b3IuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvQ29yZS9QYXJ0aWNsZS9WZWN0b3IzZC5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9Db3JlL1BhcnRpY2xlcy5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9Db3JlL1BhcnRpY2xlc0ludGVyYWN0b3JCYXNlLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL0NvcmUvUmV0aW5hLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL0VudW1zL0FuaW1hdGlvblN0YXR1cy5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9FbnVtcy9EaXJlY3Rpb25zL01vdmVEaXJlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvRW51bXMvRGlyZWN0aW9ucy9PdXRNb2RlRGlyZWN0aW9uLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL0VudW1zL0RpcmVjdGlvbnMvUm90YXRlRGlyZWN0aW9uLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL0VudW1zL0RpcmVjdGlvbnMvVGlsdERpcmVjdGlvbi5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9FbnVtcy9EaXJlY3Rpb25zL2luZGV4LmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL0VudW1zL0ludGVyYWN0aXZpdHlEZXRlY3QuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvRW51bXMvTW9kZXMvQ2xpY2tNb2RlLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL0VudW1zL01vZGVzL0NvbGxpc2lvbk1vZGUuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvRW51bXMvTW9kZXMvRGVzdHJveU1vZGUuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvRW51bXMvTW9kZXMvRGl2TW9kZS5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9FbnVtcy9Nb2Rlcy9Ib3Zlck1vZGUuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvRW51bXMvTW9kZXMvT3V0TW9kZS5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9FbnVtcy9Nb2Rlcy9SZXNwb25zaXZlTW9kZS5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9FbnVtcy9Nb2Rlcy9Sb2xsTW9kZS5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9FbnVtcy9Nb2Rlcy9TaXplTW9kZS5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9FbnVtcy9Nb2Rlcy9UaGVtZU1vZGUuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvRW51bXMvTW9kZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvRW51bXMvVHlwZXMvQWx0ZXJUeXBlLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL0VudW1zL1R5cGVzL0Rlc3Ryb3lUeXBlLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL0VudW1zL1R5cGVzL0RpdlR5cGUuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvRW51bXMvVHlwZXMvRWFzaW5nVHlwZS5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9FbnVtcy9UeXBlcy9HcmFkaWVudFR5cGUuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvRW51bXMvVHlwZXMvSW50ZXJhY3RvclR5cGUuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvRW51bXMvVHlwZXMvT3JiaXRUeXBlLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL0VudW1zL1R5cGVzL1NoYXBlVHlwZS5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9FbnVtcy9UeXBlcy9TdGFydFZhbHVlVHlwZS5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9FbnVtcy9UeXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9FbnVtcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9JbnRlcmFjdGlvbnMvRXh0ZXJuYWwvQXR0cmFjdC9BdHRyYWN0b3IuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvSW50ZXJhY3Rpb25zL0V4dGVybmFsL0F0dHJhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvSW50ZXJhY3Rpb25zL0V4dGVybmFsL0JvdW5jZS9Cb3VuY2VyLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL0ludGVyYWN0aW9ucy9FeHRlcm5hbC9Cb3VuY2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvSW50ZXJhY3Rpb25zL0V4dGVybmFsL0J1YmJsZS9CdWJibGVyLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL0ludGVyYWN0aW9ucy9FeHRlcm5hbC9CdWJibGUvUHJvY2Vzc0J1YmJsZVR5cGUuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvSW50ZXJhY3Rpb25zL0V4dGVybmFsL0J1YmJsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9JbnRlcmFjdGlvbnMvRXh0ZXJuYWwvQ29ubmVjdC9Db25uZWN0b3IuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvSW50ZXJhY3Rpb25zL0V4dGVybmFsL0Nvbm5lY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvSW50ZXJhY3Rpb25zL0V4dGVybmFsL0dyYWIvR3JhYmJlci5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9JbnRlcmFjdGlvbnMvRXh0ZXJuYWwvR3JhYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9JbnRlcmFjdGlvbnMvRXh0ZXJuYWwvUmVwdWxzZS9SZXB1bHNlci5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9JbnRlcmFjdGlvbnMvRXh0ZXJuYWwvUmVwdWxzZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9JbnRlcmFjdGlvbnMvRXh0ZXJuYWwvVHJhaWwvVHJhaWxNYWtlci5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9JbnRlcmFjdGlvbnMvRXh0ZXJuYWwvVHJhaWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvSW50ZXJhY3Rpb25zL1BhcnRpY2xlcy9BdHRyYWN0L0F0dHJhY3Rvci5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9JbnRlcmFjdGlvbnMvUGFydGljbGVzL0F0dHJhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvSW50ZXJhY3Rpb25zL1BhcnRpY2xlcy9Db2xsaXNpb25zL0NvbGxpZGVyLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL0ludGVyYWN0aW9ucy9QYXJ0aWNsZXMvQ29sbGlzaW9ucy9pbmRleC5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9JbnRlcmFjdGlvbnMvUGFydGljbGVzL0xpbmtzL0xpbmtJbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9JbnRlcmFjdGlvbnMvUGFydGljbGVzL0xpbmtzL0xpbmtlci5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9JbnRlcmFjdGlvbnMvUGFydGljbGVzL0xpbmtzL2luZGV4LmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL0ludGVyYWN0aW9ucy9QYXJ0aWNsZXMvTGlua3MvcGx1Z2luLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL09wdGlvbnMvQ2xhc3Nlcy9BbmltYXRhYmxlQ29sb3IuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvT3B0aW9ucy9DbGFzc2VzL0FuaW1hdGFibGVHcmFkaWVudC5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9PcHRpb25zL0NsYXNzZXMvQW5pbWF0aW9uT3B0aW9ucy5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9PcHRpb25zL0NsYXNzZXMvQmFja2dyb3VuZC9CYWNrZ3JvdW5kLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL09wdGlvbnMvQ2xhc3Nlcy9CYWNrZ3JvdW5kTWFzay9CYWNrZ3JvdW5kTWFzay5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9PcHRpb25zL0NsYXNzZXMvQmFja2dyb3VuZE1hc2svQmFja2dyb3VuZE1hc2tDb3Zlci5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9PcHRpb25zL0NsYXNzZXMvQ29sb3JBbmltYXRpb24uanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvT3B0aW9ucy9DbGFzc2VzL0Z1bGxTY3JlZW4vRnVsbFNjcmVlbi5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9PcHRpb25zL0NsYXNzZXMvSHNsQW5pbWF0aW9uLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL09wdGlvbnMvQ2xhc3Nlcy9JbnRlcmFjdGl2aXR5L0V2ZW50cy9DbGlja0V2ZW50LmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL09wdGlvbnMvQ2xhc3Nlcy9JbnRlcmFjdGl2aXR5L0V2ZW50cy9EaXZFdmVudC5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9PcHRpb25zL0NsYXNzZXMvSW50ZXJhY3Rpdml0eS9FdmVudHMvRXZlbnRzLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL09wdGlvbnMvQ2xhc3Nlcy9JbnRlcmFjdGl2aXR5L0V2ZW50cy9Ib3ZlckV2ZW50LmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL09wdGlvbnMvQ2xhc3Nlcy9JbnRlcmFjdGl2aXR5L0V2ZW50cy9QYXJhbGxheC5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9PcHRpb25zL0NsYXNzZXMvSW50ZXJhY3Rpdml0eS9JbnRlcmFjdGl2aXR5LmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL09wdGlvbnMvQ2xhc3Nlcy9JbnRlcmFjdGl2aXR5L01vZGVzL0F0dHJhY3QuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvT3B0aW9ucy9DbGFzc2VzL0ludGVyYWN0aXZpdHkvTW9kZXMvQm91bmNlLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL09wdGlvbnMvQ2xhc3Nlcy9JbnRlcmFjdGl2aXR5L01vZGVzL0J1YmJsZS5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9PcHRpb25zL0NsYXNzZXMvSW50ZXJhY3Rpdml0eS9Nb2Rlcy9CdWJibGVCYXNlLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL09wdGlvbnMvQ2xhc3Nlcy9JbnRlcmFjdGl2aXR5L01vZGVzL0J1YmJsZURpdi5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9PcHRpb25zL0NsYXNzZXMvSW50ZXJhY3Rpdml0eS9Nb2Rlcy9Db25uZWN0LmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL09wdGlvbnMvQ2xhc3Nlcy9JbnRlcmFjdGl2aXR5L01vZGVzL0Nvbm5lY3RMaW5rcy5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9PcHRpb25zL0NsYXNzZXMvSW50ZXJhY3Rpdml0eS9Nb2Rlcy9HcmFiLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL09wdGlvbnMvQ2xhc3Nlcy9JbnRlcmFjdGl2aXR5L01vZGVzL0dyYWJMaW5rcy5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9PcHRpb25zL0NsYXNzZXMvSW50ZXJhY3Rpdml0eS9Nb2Rlcy9MaWdodC5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9PcHRpb25zL0NsYXNzZXMvSW50ZXJhY3Rpdml0eS9Nb2Rlcy9MaWdodEFyZWEuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvT3B0aW9ucy9DbGFzc2VzL0ludGVyYWN0aXZpdHkvTW9kZXMvTGlnaHRHcmFkaWVudC5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9PcHRpb25zL0NsYXNzZXMvSW50ZXJhY3Rpdml0eS9Nb2Rlcy9MaWdodFNoYWRvdy5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9PcHRpb25zL0NsYXNzZXMvSW50ZXJhY3Rpdml0eS9Nb2Rlcy9Nb2Rlcy5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9PcHRpb25zL0NsYXNzZXMvSW50ZXJhY3Rpdml0eS9Nb2Rlcy9QdXNoLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL09wdGlvbnMvQ2xhc3Nlcy9JbnRlcmFjdGl2aXR5L01vZGVzL1JlbW92ZS5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9PcHRpb25zL0NsYXNzZXMvSW50ZXJhY3Rpdml0eS9Nb2Rlcy9SZXB1bHNlLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL09wdGlvbnMvQ2xhc3Nlcy9JbnRlcmFjdGl2aXR5L01vZGVzL1JlcHVsc2VCYXNlLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL09wdGlvbnMvQ2xhc3Nlcy9JbnRlcmFjdGl2aXR5L01vZGVzL1JlcHVsc2VEaXYuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvT3B0aW9ucy9DbGFzc2VzL0ludGVyYWN0aXZpdHkvTW9kZXMvU2xvdy5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9PcHRpb25zL0NsYXNzZXMvSW50ZXJhY3Rpdml0eS9Nb2Rlcy9UcmFpbC5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9PcHRpb25zL0NsYXNzZXMvTWFudWFsUGFydGljbGUuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvT3B0aW9ucy9DbGFzc2VzL01vdGlvbi9Nb3Rpb24uanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvT3B0aW9ucy9DbGFzc2VzL01vdGlvbi9Nb3Rpb25SZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvT3B0aW9ucy9DbGFzc2VzL09wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvT3B0aW9ucy9DbGFzc2VzL09wdGlvbnNDb2xvci5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9PcHRpb25zL0NsYXNzZXMvUGFydGljbGVzL0JvdW5jZS9Cb3VuY2UuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvT3B0aW9ucy9DbGFzc2VzL1BhcnRpY2xlcy9Cb3VuY2UvQm91bmNlRmFjdG9yLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL09wdGlvbnMvQ2xhc3Nlcy9QYXJ0aWNsZXMvQ29sbGlzaW9ucy9Db2xsaXNpb25zLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL09wdGlvbnMvQ2xhc3Nlcy9QYXJ0aWNsZXMvQ29sbGlzaW9ucy9Db2xsaXNpb25zT3ZlcmxhcC5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9PcHRpb25zL0NsYXNzZXMvUGFydGljbGVzL0Rlc3Ryb3kvRGVzdHJveS5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9PcHRpb25zL0NsYXNzZXMvUGFydGljbGVzL0Rlc3Ryb3kvU3BsaXQuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvT3B0aW9ucy9DbGFzc2VzL1BhcnRpY2xlcy9EZXN0cm95L1NwbGl0RmFjdG9yLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL09wdGlvbnMvQ2xhc3Nlcy9QYXJ0aWNsZXMvRGVzdHJveS9TcGxpdFJhdGUuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvT3B0aW9ucy9DbGFzc2VzL1BhcnRpY2xlcy9MaWZlL0xpZmUuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvT3B0aW9ucy9DbGFzc2VzL1BhcnRpY2xlcy9MaWZlL0xpZmVEZWxheS5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9PcHRpb25zL0NsYXNzZXMvUGFydGljbGVzL0xpZmUvTGlmZUR1cmF0aW9uLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL09wdGlvbnMvQ2xhc3Nlcy9QYXJ0aWNsZXMvTGlua3MvTGlua3MuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvT3B0aW9ucy9DbGFzc2VzL1BhcnRpY2xlcy9MaW5rcy9MaW5rc1NoYWRvdy5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9PcHRpb25zL0NsYXNzZXMvUGFydGljbGVzL0xpbmtzL0xpbmtzVHJpYW5nbGUuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvT3B0aW9ucy9DbGFzc2VzL1BhcnRpY2xlcy9Nb3ZlL0F0dHJhY3QuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvT3B0aW9ucy9DbGFzc2VzL1BhcnRpY2xlcy9Nb3ZlL01vdmUuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvT3B0aW9ucy9DbGFzc2VzL1BhcnRpY2xlcy9Nb3ZlL01vdmVBbmdsZS5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9PcHRpb25zL0NsYXNzZXMvUGFydGljbGVzL01vdmUvTW92ZUdyYXZpdHkuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvT3B0aW9ucy9DbGFzc2VzL1BhcnRpY2xlcy9Nb3ZlL091dE1vZGVzLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL09wdGlvbnMvQ2xhc3Nlcy9QYXJ0aWNsZXMvTW92ZS9QYXRoL1BhdGguanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvT3B0aW9ucy9DbGFzc2VzL1BhcnRpY2xlcy9Nb3ZlL1BhdGgvUGF0aERlbGF5LmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL09wdGlvbnMvQ2xhc3Nlcy9QYXJ0aWNsZXMvTW92ZS9TcGluLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL09wdGlvbnMvQ2xhc3Nlcy9QYXJ0aWNsZXMvTW92ZS9UcmFpbC5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9PcHRpb25zL0NsYXNzZXMvUGFydGljbGVzL051bWJlci9EZW5zaXR5LmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL09wdGlvbnMvQ2xhc3Nlcy9QYXJ0aWNsZXMvTnVtYmVyL1BhcnRpY2xlc051bWJlci5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9PcHRpb25zL0NsYXNzZXMvUGFydGljbGVzL09wYWNpdHkvT3BhY2l0eS5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9PcHRpb25zL0NsYXNzZXMvUGFydGljbGVzL09wYWNpdHkvT3BhY2l0eUFuaW1hdGlvbi5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9PcHRpb25zL0NsYXNzZXMvUGFydGljbGVzL09yYml0L09yYml0LmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL09wdGlvbnMvQ2xhc3Nlcy9QYXJ0aWNsZXMvT3JiaXQvT3JiaXRSb3RhdGlvbi5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9PcHRpb25zL0NsYXNzZXMvUGFydGljbGVzL1BhcnRpY2xlc09wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvT3B0aW9ucy9DbGFzc2VzL1BhcnRpY2xlcy9SZXB1bHNlL1JlcHVsc2UuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvT3B0aW9ucy9DbGFzc2VzL1BhcnRpY2xlcy9Sb2xsL1JvbGwuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvT3B0aW9ucy9DbGFzc2VzL1BhcnRpY2xlcy9Sb2xsL1JvbGxMaWdodC5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9PcHRpb25zL0NsYXNzZXMvUGFydGljbGVzL1JvdGF0ZS9Sb3RhdGUuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvT3B0aW9ucy9DbGFzc2VzL1BhcnRpY2xlcy9Sb3RhdGUvUm90YXRlQW5pbWF0aW9uLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL09wdGlvbnMvQ2xhc3Nlcy9QYXJ0aWNsZXMvU2hhZG93LmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL09wdGlvbnMvQ2xhc3Nlcy9QYXJ0aWNsZXMvU2hhcGUvU2hhcGUuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvT3B0aW9ucy9DbGFzc2VzL1BhcnRpY2xlcy9TaXplL1NpemUuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvT3B0aW9ucy9DbGFzc2VzL1BhcnRpY2xlcy9TaXplL1NpemVBbmltYXRpb24uanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvT3B0aW9ucy9DbGFzc2VzL1BhcnRpY2xlcy9TdHJva2UuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvT3B0aW9ucy9DbGFzc2VzL1BhcnRpY2xlcy9UaWx0L1RpbHQuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvT3B0aW9ucy9DbGFzc2VzL1BhcnRpY2xlcy9UaWx0L1RpbHRBbmltYXRpb24uanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvT3B0aW9ucy9DbGFzc2VzL1BhcnRpY2xlcy9Ud2lua2xlL1R3aW5rbGUuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvT3B0aW9ucy9DbGFzc2VzL1BhcnRpY2xlcy9Ud2lua2xlL1R3aW5rbGVWYWx1ZXMuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvT3B0aW9ucy9DbGFzc2VzL1BhcnRpY2xlcy9Xb2JibGUvV29iYmxlLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL09wdGlvbnMvQ2xhc3Nlcy9QYXJ0aWNsZXMvWkluZGV4L1pJbmRleC5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9PcHRpb25zL0NsYXNzZXMvUmFuZG9tLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL09wdGlvbnMvQ2xhc3Nlcy9SZXNwb25zaXZlLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL09wdGlvbnMvQ2xhc3Nlcy9UaGVtZS9UaGVtZS5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9PcHRpb25zL0NsYXNzZXMvVGhlbWUvVGhlbWVEZWZhdWx0LmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL09wdGlvbnMvQ2xhc3Nlcy9WYWx1ZVdpdGhSYW5kb20uanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvUGx1Z2lucy9BYnNvcmJlcnMvQWJzb3JiZXJJbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9QbHVnaW5zL0Fic29yYmVycy9BYnNvcmJlcnMuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvUGx1Z2lucy9BYnNvcmJlcnMvRW51bXMvQWJzb3JiZXJDbGlja01vZGUuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvUGx1Z2lucy9BYnNvcmJlcnMvRW51bXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvUGx1Z2lucy9BYnNvcmJlcnMvT3B0aW9ucy9DbGFzc2VzL0Fic29yYmVyLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL1BsdWdpbnMvQWJzb3JiZXJzL09wdGlvbnMvQ2xhc3Nlcy9BYnNvcmJlclNpemUuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvUGx1Z2lucy9BYnNvcmJlcnMvT3B0aW9ucy9DbGFzc2VzL0Fic29yYmVyU2l6ZUxpbWl0LmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL1BsdWdpbnMvQWJzb3JiZXJzL3BsdWdpbi5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9QbHVnaW5zL0VtaXR0ZXJzL0VtaXR0ZXJJbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9QbHVnaW5zL0VtaXR0ZXJzL0VtaXR0ZXJzLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL1BsdWdpbnMvRW1pdHRlcnMvRW1pdHRlcnNNYWluLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL1BsdWdpbnMvRW1pdHRlcnMvRW51bXMvRW1pdHRlckNsaWNrTW9kZS5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9QbHVnaW5zL0VtaXR0ZXJzL0VudW1zL0VtaXR0ZXJTaGFwZVR5cGUuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvUGx1Z2lucy9FbWl0dGVycy9FbnVtcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9QbHVnaW5zL0VtaXR0ZXJzL09wdGlvbnMvQ2xhc3Nlcy9FbWl0dGVyLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL1BsdWdpbnMvRW1pdHRlcnMvT3B0aW9ucy9DbGFzc2VzL0VtaXR0ZXJMaWZlLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL1BsdWdpbnMvRW1pdHRlcnMvT3B0aW9ucy9DbGFzc2VzL0VtaXR0ZXJSYXRlLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL1BsdWdpbnMvRW1pdHRlcnMvT3B0aW9ucy9DbGFzc2VzL0VtaXR0ZXJTaXplLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL1BsdWdpbnMvRW1pdHRlcnMvU2hhcGVNYW5hZ2VyLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL1BsdWdpbnMvRW1pdHRlcnMvU2hhcGVzL0NpcmNsZS9DaXJjbGVTaGFwZS5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9QbHVnaW5zL0VtaXR0ZXJzL1NoYXBlcy9TcXVhcmUvU3F1YXJlU2hhcGUuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvUGx1Z2lucy9FbWl0dGVycy9wbHVnaW4uanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvUGx1Z2lucy9Qb2x5Z29uTWFzay9FbnVtcy9JbmxpbmVBcnJhbmdlbWVudC5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9QbHVnaW5zL1BvbHlnb25NYXNrL0VudW1zL01vdmVUeXBlLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL1BsdWdpbnMvUG9seWdvbk1hc2svRW51bXMvVHlwZS5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9QbHVnaW5zL1BvbHlnb25NYXNrL0VudW1zL2luZGV4LmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL1BsdWdpbnMvUG9seWdvbk1hc2svT3B0aW9ucy9DbGFzc2VzL0RyYXcuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvUGx1Z2lucy9Qb2x5Z29uTWFzay9PcHRpb25zL0NsYXNzZXMvRHJhd1N0cm9rZS5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9QbHVnaW5zL1BvbHlnb25NYXNrL09wdGlvbnMvQ2xhc3Nlcy9JbmxpbmUuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvUGx1Z2lucy9Qb2x5Z29uTWFzay9PcHRpb25zL0NsYXNzZXMvTG9jYWxTdmcuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvUGx1Z2lucy9Qb2x5Z29uTWFzay9PcHRpb25zL0NsYXNzZXMvTW92ZS5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9QbHVnaW5zL1BvbHlnb25NYXNrL09wdGlvbnMvQ2xhc3Nlcy9Qb2x5Z29uTWFzay5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9QbHVnaW5zL1BvbHlnb25NYXNrL1BvbHlnb25NYXNrSW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvUGx1Z2lucy9Qb2x5Z29uTWFzay9wYXRoc2VnLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL1BsdWdpbnMvUG9seWdvbk1hc2svcGx1Z2luLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL1BsdWdpbnMvUG9seWdvbk1hc2svdXRpbHMuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvU2hhcGVzL0NpcmNsZS9DaXJjbGVEcmF3ZXIuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvU2hhcGVzL0NpcmNsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9TaGFwZXMvSW1hZ2UvSW1hZ2VEcmF3ZXIuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvU2hhcGVzL0ltYWdlL1V0aWxzLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL1NoYXBlcy9JbWFnZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9TaGFwZXMvTGluZS9MaW5lRHJhd2VyLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL1NoYXBlcy9MaW5lL2luZGV4LmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL1NoYXBlcy9Qb2x5Z29uL1BvbHlnb25EcmF3ZXIuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvU2hhcGVzL1BvbHlnb24vUG9seWdvbkRyYXdlckJhc2UuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvU2hhcGVzL1BvbHlnb24vVHJpYW5nbGVEcmF3ZXIuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvU2hhcGVzL1BvbHlnb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvU2hhcGVzL1NxdWFyZS9TcXVhcmVEcmF3ZXIuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvU2hhcGVzL1NxdWFyZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9TaGFwZXMvU3Rhci9TdGFyRHJhd2VyLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL1NoYXBlcy9TdGFyL2luZGV4LmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL1NoYXBlcy9UZXh0L1RleHREcmF3ZXIuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvU2hhcGVzL1RleHQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvVHlwZXMvUGF0aE9wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvVHlwZXMvUmFuZ2VWYWx1ZS5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9UeXBlcy9SZWN1cnNpdmVQYXJ0aWFsLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL1R5cGVzL1NoYXBlRGF0YS5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9UeXBlcy9TaGFwZURyYXdlckZ1bmN0aW9ucy5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9UeXBlcy9TaW5nbGVPck11bHRpcGxlLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL1R5cGVzL2luZGV4LmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL1VwZGF0ZXJzL0FuZ2xlL0FuZ2xlVXBkYXRlci5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9VcGRhdGVycy9BbmdsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9VcGRhdGVycy9Db2xvci9Db2xvclVwZGF0ZXIuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvVXBkYXRlcnMvQ29sb3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvVXBkYXRlcnMvTGlmZS9MaWZlVXBkYXRlci5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9VcGRhdGVycy9MaWZlL2luZGV4LmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL1VwZGF0ZXJzL09wYWNpdHkvT3BhY2l0eVVwZGF0ZXIuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvVXBkYXRlcnMvT3BhY2l0eS9pbmRleC5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9VcGRhdGVycy9PdXRNb2Rlcy9PdXRPZkNhbnZhc1VwZGF0ZXIuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvVXBkYXRlcnMvT3V0TW9kZXMvVXRpbHMuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvVXBkYXRlcnMvT3V0TW9kZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvVXBkYXRlcnMvUm9sbC9Sb2xsVXBkYXRlci5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9VcGRhdGVycy9Sb2xsL2luZGV4LmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL1VwZGF0ZXJzL1NpemUvU2l6ZVVwZGF0ZXIuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvVXBkYXRlcnMvU2l6ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9VcGRhdGVycy9TdHJva2VDb2xvci9TdHJva2VDb2xvclVwZGF0ZXIuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvVXBkYXRlcnMvU3Ryb2tlQ29sb3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvVXBkYXRlcnMvVGlsdC9UaWx0VXBkYXRlci5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9VcGRhdGVycy9UaWx0L2luZGV4LmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL1VwZGF0ZXJzL1dvYmJsZS9Xb2JibGVVcGRhdGVyLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL1VwZGF0ZXJzL1dvYmJsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9VdGlscy9DYW52YXNVdGlscy5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9VdGlscy9DaXJjbGUuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvVXRpbHMvQ2lyY2xlV2FycC5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9VdGlscy9Db2xvclV0aWxzLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL1V0aWxzL0NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9VdGlscy9FdmVudExpc3RlbmVycy5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9VdGlscy9OdW1iZXJVdGlscy5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9VdGlscy9QbHVnaW5zLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL1V0aWxzL1BvaW50LmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL1V0aWxzL1F1YWRUcmVlLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL1V0aWxzL1JhbmdlLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL1V0aWxzL1JlY3RhbmdsZS5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9VdGlscy9VdGlscy5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9VdGlscy9pbmRleC5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy9mdWxsLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL2luZGV4LmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL21haW4uanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMvcGpzLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzL3NsaW0uanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL1dlYXRoZXItQXBwL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL3NyYy9hcGlMb2FkaW5nSGFuZGxlci5qcyIsIndlYnBhY2s6Ly9XZWF0aGVyLUFwcC8uL3NyYy9wYXJ0aWNsZUhhbmRsZXIuanMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9zcmMvaW1hZ2VIYW5kbGVyLmpzIiwid2VicGFjazovL1dlYXRoZXItQXBwLy4vc3JjL21haW4uY3NzP2RkZDMiLCJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fID0gbmV3IFVSTChcIi4vYXNzZXRzL2hpbGxzMS5zdmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyA9IG5ldyBVUkwoXCIuL2Fzc2V0cy9oaWxsczIuc3ZnXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiQGltcG9ydCB1cmwoaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1Qb3BwaW5zOndnaHRANDAwOzUwMDs3MDAmZGlzcGxheT1zd2FwKTtcIl0pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIkBpbXBvcnQgdXJsKGh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9TStQTFVTKzI6d2dodEA1MDA7NzAwJmRpc3BsYXk9c3dhcCk7XCJdKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLyogUkVTRVQgQ1NTICAqL1xcblxcbioge1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMDtcXG4gIGJvcmRlcjogMDtcXG4gIGZvbnQtc2l6ZTogMTAwJTtcXG4gIGZvbnQ6IGluaGVyaXQ7XFxuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XFxufVxcblxcbi8qIEhUTUw1IGRpc3BsYXktcm9sZSByZXNldCBmb3Igb2xkZXIgYnJvd3NlcnMgKi9cXG5hcnRpY2xlLFxcbmFzaWRlLFxcbmRldGFpbHMsXFxuZmlnY2FwdGlvbixcXG5maWd1cmUsXFxuZm9vdGVyLFxcbmhlYWRlcixcXG5oZ3JvdXAsXFxubWVudSxcXG5uYXYsXFxuc2VjdGlvbiB7XFxuICBkaXNwbGF5OiBibG9jaztcXG59XFxuYm9keSB7XFxuICBsaW5lLWhlaWdodDogMTtcXG59XFxub2wsXFxudWwge1xcbiAgbGlzdC1zdHlsZTogbm9uZTtcXG59XFxuYmxvY2txdW90ZSxcXG5xIHtcXG4gIHF1b3Rlczogbm9uZTtcXG59XFxuYmxvY2txdW90ZTpiZWZvcmUsXFxuYmxvY2txdW90ZTphZnRlcixcXG5xOmJlZm9yZSxcXG5xOmFmdGVyIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgY29udGVudDogbm9uZTtcXG59XFxudGFibGUge1xcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcXG4gIGJvcmRlci1zcGFjaW5nOiAwO1xcbn1cXG5cXG4vKiBMT0FERVIgICovXFxuLmxvYWRlciB7XFxuICB3aWR0aDogNjBweDtcXG4gIGhlaWdodDogNjBweDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgYW5pbWF0aW9uOiBzcGluIDAuOHMgZWFzZS1pbi1vdXQgaW5maW5pdGU7XFxufVxcblxcbkBrZXlmcmFtZXMgc3BpbiB7XFxuICAwJSB7XFxuICAgIHRyYW5zZm9ybTogcm90YXRlKC0xODBkZWcpO1xcbiAgfVxcbiAgNTAlIHtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0zMHB4KTtcXG4gIH1cXG4gIDcwJSB7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKTtcXG4gIH1cXG4gIDc1JSB7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMTBweCk7XFxuICB9XFxuICAxMDAlIHtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApO1xcbiAgfVxcbn1cXG4vKiBQQVJUSUNMRVMgKi9cXG4jdHNwYXJ0aWNsZXMge1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbjogMDtcXG4gIHotaW5kZXg6IC0xO1xcbn1cXG5cXG5jYW52YXMge1xcbiAgaGVpZ2h0OiA4MDBweCAhaW1wb3J0YW50O1xcbiAgd2lkdGg6IDEwMCUgIWltcG9ydGFudDtcXG59XFxuXFxuLyogRVJST1IgICovXFxuLmRpc3BsYXktZXJyb3Ige1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xMDAlKTtcXG4gIGFuaW1hdGlvbjogZXJyb3ItcG9wLWluIDNzIGVhc2UtaW4tb3V0IGZvcndhcmRzO1xcblxcbiAgY29sb3I6IHdoaXRlO1xcbiAgZm9udC13ZWlnaHQ6IDUwMDtcXG4gIGZvbnQtc2l6ZTogMjBweDtcXG5cXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigyNTUsIDMwLCAzMCk7XFxuICBwYWRkaW5nOiAxMHB4IDIwcHg7XFxuICBib3JkZXItcmFkaXVzOiAwIDAgMTBweCAxMHB4O1xcbn1cXG5cXG5Aa2V5ZnJhbWVzIGVycm9yLXBvcC1pbiB7XFxuICAwJSB7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMTAwJSk7XFxuICB9XFxuICAyNSUge1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCk7XFxuICB9XFxuICA1MCUge1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCk7XFxuICB9XFxuICA3NSUge1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCk7XFxuICB9XFxuICAxMDAlIHtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xMDAlKTtcXG4gIH1cXG59XFxuXFxuLyogSEVBREVSICovXFxuaGVhZGVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIHdpZHRoOiBtaW4oMTAwMHB4LCA4MCUpO1xcbiAgbWFyZ2luLXRvcDogNzBweDtcXG59XFxuXFxuaGVhZGVyID4gaDEge1xcbiAgbWFyZ2luOiAwO1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgZm9udC13ZWlnaHQ6IDcwMDtcXG4gIGZvbnQtc2l6ZTogNTJweDtcXG4gIHBhZGRpbmc6IDM2cHggMDtcXG59XFxuXFxuLnVzZXItaW5wdXQge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIHdpZHRoOiA4MCU7XFxufVxcblxcbi5jaXR5LW5hbWUge1xcbiAgYmFja2dyb3VuZDogI2ZmZjtcXG4gIGJvcmRlci1yYWRpdXM6IDUwcHg7XFxuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMDtcXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwO1xcbiAgcGFkZGluZzogNXB4O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgZm9udC1zaXplOiAzNXB4O1xcbiAgZm9udC13ZWlnaHQ6IDcwMDtcXG4gIGNvbG9yOiAjNGQ0YjRiO1xcbiAgZm9udC1mYW1pbHk6IFxcXCJQb3BwaW5zXFxcIiwgVmVyZGFuYSwgR2VuZXZhLCBUYWhvbWEsIHNhbnMtc2VyaWY7XFxuXFxuICBib3JkZXI6IG5vbmU7XFxuICB3aWR0aDogOTAlO1xcbn1cXG5cXG4uY2l0eS1uYW1lOmZvY3VzIHtcXG4gIG91dGxpbmU6IG5vbmU7XFxufVxcblxcbjo6cGxhY2Vob2xkZXIge1xcbiAgZm9udC13ZWlnaHQ6IDcwMDtcXG4gIGNvbG9yOiAjNGQ0YjRiO1xcbiAgb3BhY2l0eTogMTtcXG4gIGZvbnQtc2l6ZTogMzVweDtcXG5cXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiUG9wcGluc1xcXCIsIFZlcmRhbmEsIEdlbmV2YSwgVGFob21hLCBzYW5zLXNlcmlmO1xcbn1cXG5cXG4uY2l0eS1uYW1lOmZvY3VzOjpwbGFjZWhvbGRlciB7XFxuICBjb2xvcjogdHJhbnNwYXJlbnQ7XFxufVxcblxcbi51c2VyLWlucHV0ID4gYnV0dG9uIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgZm9udC1mYW1pbHk6IFxcXCJQb3BwaW5zXFxcIjtcXG4gIGZvbnQtc2l6ZTogMzVweDtcXG5cXG4gIHBhZGRpbmc6IDNweCAxMHB4O1xcbiAgZm9udC13ZWlnaHQ6IDcwMDtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAzNXB4O1xcbiAgYm9yZGVyOiBzb2xpZCAycHggd2hpdGU7XFxuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMzVweDtcXG4gIGJvcmRlci1sZWZ0LXdpZHRoOiAwO1xcblxcbiAgd2lkdGg6IDEwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIG1pbi13aWR0aDogNzBweDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbi51c2VyLWlucHV0IGltZyB7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgaGVpZ2h0OiAzMHB4O1xcbiAgd2lkdGg6IGF1dG87XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBib3R0b206IDJweDtcXG59XFxuXFxuLyogV0VBVEhFUiBESVNQTEFZICovXFxuLndlYXRoZXItZGlzcGxheSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgd2lkdGg6IDcwJTtcXG4gIG9wYWNpdHk6IDE7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGNvbG9yOiAjZmZmO1xcblxcbiAgZm9udC1zaXplOiA1MHB4O1xcbiAgcGFkZGluZzogODBweCAyMHB4O1xcbiAgZ2FwOiA1MHB4O1xcbn1cXG5cXG4udGVtcC1pbmZvIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgZm9udC1zaXplOiA1MHB4O1xcbiAgZ2FwOiAxMHB4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxufVxcblxcbi50ZW1wLWRhdGEge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBnYXA6IDE1cHg7XFxufVxcblxcbi5kaXNwbGF5LWNpdHktbmFtZSB7XFxuICBmb250LXNpemU6IDQ1cHg7XFxuICBmb250LXdlaWdodDogNTAwO1xcbn1cXG5cXG4uZGlzcGxheS1jb25kaXRpb24ge1xcbiAgZm9udC1zaXplOiA0MHB4O1xcbiAgZm9udC13ZWlnaHQ6IDUwMDtcXG4gIGxldHRlci1zcGFjaW5nOiAwLjFlbTtcXG59XFxuXFxuLmRpc3BsYXktY3VycmVudC10ZW1wIHtcXG4gIHBhZGRpbmctcmlnaHQ6IDEwcHg7XFxuICBmb250LXdlaWdodDogNzAwO1xcbiAgbGluZS1oZWlnaHQ6IDQwcHg7XFxuICBib3JkZXItcmlnaHQ6IDVweCBzb2xpZCAjZmZmO1xcbn1cXG5cXG5Aa2V5ZnJhbWVzIHNsaWRlLWluIHtcXG4gIGZyb20ge1xcbiAgICBvcGFjaXR5OiAwO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTEwMHB4KTtcXG4gIH1cXG4gIHRvIHtcXG4gICAgb3BhY2l0eTogMTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApO1xcbiAgfVxcbn1cXG5cXG4uaW5mby1kaXNwbGF5IHtcXG4gIGZvbnQtc2l6ZTogMzBweDtcXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICBmb250LWZhbWlseTogXFxcIk0gUExVUyAyXFxcIiwgVmVyZGFuYSwgR2VuZXZhLCBUYWhvbWEsIHNhbnMtc2VyaWY7XFxuICBjb2xvcjogd2hpdGU7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBnYXA6IDIwcHg7XFxuICB0cmFuc2l0aW9uOiBhbGwgMC43cyBlYXNlLWluLW91dDtcXG59XFxuXFxuLndoaXRlLWJsb2NrIHtcXG4gIGhlaWdodDogNzBweDtcXG4gIHdpZHRoOiA3cHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbn1cXG5cXG4uaW5mbyB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBnYXA6IDEwMHB4O1xcbn1cXG5cXG4uaW5mby1ob2xkZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICB3aWR0aDogNDUwcHg7XFxufVxcblxcbi5tYXgtdGVtcCxcXG4ubWluLXRlbXAge1xcbiAgZm9udC1zaXplOiAyNXB4O1xcbiAgZm9udC13ZWlnaHQ6IDUwMDtcXG59XFxuXFxuLm1heC10ZW1wLWxvZ28sXFxuLm1pbi10ZW1wLWxvZ28ge1xcbiAgaGVpZ2h0OiAyMHB4O1xcbiAgbWFyZ2luLWxlZnQ6IDdweDtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG59XFxuXFxuLmNhc3QtdGVtcCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIHRleHQtYWxpZ246IGxlZnQ7XFxuICBnYXA6IDJweDtcXG59XFxuXFxuLmh1bWlkaXR5IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBnYXA6IDVweDtcXG59XFxuXFxuLmh1bWlkaXR5ID4gaW1nIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG59XFxuXFxuLmNhc3Qge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgZm9udC13ZWlnaHQ6IDcwMDtcXG4gIGxldHRlci1zcGFjaW5nOiAycHg7XFxufVxcblxcbi5taXNjIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgZ2FwOiA1cHg7XFxufVxcblxcbi53aW5kIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgZ2FwOiAycHg7XFxufVxcblxcbi53aW5kID4gaW1nIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG59XFxuXFxuLyogTE9BRElORyAqL1xcbi5sb2FkaW5nLWJlZ2luIHtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiUG9wcGluc1xcXCIsIFZlcmRhbmEsIEdlbmV2YSwgVGFob21hLCBzYW5zLXNlcmlmO1xcbiAgZm9udC1zaXplOiA2MHB4O1xcbiAgZm9udC13ZWlnaHQ6IDUwMDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcblxcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgbWluLWhlaWdodDogMTAwdmg7XFxuICBoZWlnaHQ6IDEwMHZoO1xcbiAgd2lkdGg6IDEwMCU7XFxuXFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAxMjIzYWVmO1xcbiAgei1pbmRleDogMTA7XFxufVxcblxcbi8qIFdFQVRIRVIgRUZGRUNUcyAqL1xcbi5zdW4ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmYwMDtcXG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XFxuICBoZWlnaHQ6IDE1MHB4O1xcbiAgd2lkdGg6IDE1MHB4O1xcbiAgei1pbmRleDogLTI7XFxuXFxuICBib3JkZXI6IG5vbmU7XFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICBib3gtc2hhZG93OiAwIDAgNjBweCAxMHB4IHJnYigyNTUgMjU1IDApO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICB0cmFuc2Zvcm06IHNjYWxlKDApO1xcbiAgYW5pbWF0aW9uOiBzaG93LWluIDAuNHMgZWFzZS1pbi1vdXQgZm9yd2FyZHM7XFxuXFxuICBiYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW47XFxufVxcblxcbkBrZXlmcmFtZXMgc2hvdy1pbiB7XFxuICAwJSB7XFxuICAgIHRyYW5zZm9ybTogc2NhbGUoMCk7XFxuICB9XFxuICA1MCUge1xcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEuMik7XFxuICB9XFxuICAxMDAlIHtcXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcXG4gIH1cXG59XFxuXFxuLmhpbGxzLWNvbnRhaW5lciB7XFxuICBtaW4taGVpZ2h0OiA0MDBweDtcXG4gIGhlaWdodDogNDV2aDtcXG4gIHdpZHRoOiAxMDAlO1xcblxcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgb3ZlcmZsb3c6IGNsaXA7XFxufVxcblxcbi5oaWxsczEsXFxuLmhpbGxzMiB7XFxuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJvdHRvbTogLTFweDtcXG5cXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbn1cXG4uaGlsbHMxIHtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gKyBcIik7XFxuICBoZWlnaHQ6IDcwJTtcXG4gIHotaW5kZXg6IDk7XFxufVxcblxcbi5oaWxsczIge1xcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyArIFwiKTtcXG4gIHotaW5kZXg6IDg7XFxufVxcblxcbi8qIEJPRFkgKi9cXG5ib2R5LFxcbmh0bWwge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJQb3BwaW5zXFxcIiwgc2Fucy1zZXJpZiwgVmVyZGFuYSwgR2VuZXZhLCBUYWhvbWE7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBtaW4taGVpZ2h0OiAxMDB2aDtcXG4gIGhlaWdodDogMTAwJTtcXG59XFxuXFxuYm9keTo6LXdlYmtpdC1zY3JvbGxiYXIge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuYm9keSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuXFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgYmFja2dyb3VuZDogIzAwOTVmZjtcXG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQgIWltcG9ydGFudDtcXG4gIGJhY2tncm91bmQtYXR0YWNobWVudDogZml4ZWQgIWltcG9ydGFudDtcXG5cXG4gIC1tcy1vdmVyZmxvdy1zdHlsZTogbm9uZTtcXG4gIHNjcm9sbGJhci13aWR0aDogMjBweDtcXG59XFxuXFxuKiB7XFxuICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMCk7XFxufVxcblxcbmZvb3RlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAzMDAwO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuXFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcblxcbiAgY29sb3I6IHdoaXRlO1xcbiAgZm9udC1zaXplOiAzMHB4O1xcbn1cXG5cXG4uY3JlZGl0cyB7XFxuICBwYWRkaW5nOiAzMHB4O1xcbiAgbGluZS1oZWlnaHQ6IDMwcHg7XFxufVxcblxcbi8qIE1FRElBIFFVRVJJRVMgKi9cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xcbiAgLyogSEVBREVSICAqL1xcbiAgaGVhZGVyIHtcXG4gICAgd2lkdGg6IDg1JTtcXG4gIH1cXG5cXG4gIC5jaXR5LW5hbWUsXFxuICAqOjpwbGFjZWhvbGRlcixcXG4gIC51c2VyLWlucHV0ID4gYnV0dG9uIHtcXG4gICAgZm9udC1zaXplOiAzMHB4O1xcbiAgfVxcblxcbiAgLmNpdHktbmFtZSB7XFxuICAgIHdpZHRoOiA4NSU7XFxuICB9XFxuICAudXNlci1pbnB1dCA+IGJ1dHRvbiB7XFxuICAgIHdpZHRoOiAxNSU7XFxuICAgIG1pbi13aWR0aDogNTBweDtcXG4gIH1cXG4gIC8qIFdFQVRIRVIgRElTUExBWSAgKi9cXG4gIC53ZWF0aGVyLWRpc3BsYXkge1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgfVxcblxcbiAgLmRpc3BsYXktY3VycmVudC10ZW1wLFxcbiAgLmRpc3BsYXktY29uZGl0aW9uLFxcbiAgLmRpc3BsYXktY2l0eS1uYW1lIHtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBmb250LXNpemU6IDM2cHg7XFxuICB9XFxuXFxuICAvKiBDUkVESVRTICAqL1xcbiAgLmNyZWRpdHMge1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIGZvbnQtc2l6ZTogMjVweDtcXG4gIH1cXG5cXG4gIC8qIExPQURJTkcgICovXFxuICAubG9hZGluZy1iZWdpbiB7XFxuICAgIGZvbnQtc2l6ZTogNTBweDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDQwcHgpIHtcXG4gIC8qIEVSUk9SICAqL1xcbiAgLmRpc3BsYXktZXJyb3Ige1xcbiAgICB3aWR0aDogNzUlO1xcbiAgfVxcblxcbiAgLyogSEVBREVSICAqL1xcbiAgaGVhZGVyIHtcXG4gICAgd2lkdGg6IDk1JTtcXG4gIH1cXG5cXG4gIC8qIFdFQVRIRVIgRElTUExBWSAqL1xcbiAgLmRpc3BsYXktY3VycmVudC10ZW1wIHtcXG4gICAgZm9udC1zaXplOiA0NXB4O1xcbiAgICBib3JkZXItcmlnaHQ6IG5vbmU7XFxuICAgIHBhZGRpbmc6IDA7XFxuICB9XFxuXFxuICAudGVtcC1kYXRhIHtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgZ2FwOiAxMHB4O1xcbiAgfVxcblxcbiAgLmNpdHktbmFtZSxcXG4gICo6OnBsYWNlaG9sZGVyLFxcbiAgLnVzZXItaW5wdXQgPiBidXR0b24ge1xcbiAgICBmb250LXNpemU6IDIzcHg7XFxuICB9XFxuXFxuICAudXNlci1pbnB1dCA+IGJ1dHRvbiB7XFxuICAgIHdpZHRoOiAxMCU7XFxuICAgIG1pbi13aWR0aDogNDBweDtcXG4gIH1cXG4gIC5jaXR5LW5hbWUge1xcbiAgICB3aWR0aDogOTAlO1xcbiAgfVxcbiAgLnVzZXItaW5wdXQgaW1nIHtcXG4gICAgaGVpZ2h0OiAyMnB4O1xcbiAgfVxcbiAgLyogTE9BRElORyAgKi9cXG4gIC5sb2FkaW5nLWJlZ2luIHtcXG4gICAgZm9udC1zaXplOiA0NXB4O1xcbiAgfVxcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvbWFpbi5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBR0EsZUFBZTs7QUFFZjtFQUNFLFNBQVM7RUFDVCxVQUFVO0VBQ1YsU0FBUztFQUNULGVBQWU7RUFDZixhQUFhO0VBQ2Isd0JBQXdCO0FBQzFCOztBQUVBLGdEQUFnRDtBQUNoRDs7Ozs7Ozs7Ozs7RUFXRSxjQUFjO0FBQ2hCO0FBQ0E7RUFDRSxjQUFjO0FBQ2hCO0FBQ0E7O0VBRUUsZ0JBQWdCO0FBQ2xCO0FBQ0E7O0VBRUUsWUFBWTtBQUNkO0FBQ0E7Ozs7RUFJRSxXQUFXO0VBQ1gsYUFBYTtBQUNmO0FBQ0E7RUFDRSx5QkFBeUI7RUFDekIsaUJBQWlCO0FBQ25COztBQUVBLFlBQVk7QUFDWjtFQUNFLFdBQVc7RUFDWCxZQUFZO0VBQ1osdUJBQXVCO0VBQ3ZCLHlDQUF5QztBQUMzQzs7QUFFQTtFQUNFO0lBQ0UsMEJBQTBCO0VBQzVCO0VBQ0E7SUFDRSw0QkFBNEI7RUFDOUI7RUFDQTtJQUNFLHdCQUF3QjtFQUMxQjtFQUNBO0lBQ0UsNEJBQTRCO0VBQzlCO0VBQ0E7SUFDRSx3QkFBd0I7RUFDMUI7QUFDRjtBQUNBLGNBQWM7QUFDZDtFQUNFLGVBQWU7RUFDZixNQUFNO0VBQ04sT0FBTztFQUNQLFNBQVM7RUFDVCxRQUFRO0VBQ1IsVUFBVTtFQUNWLFNBQVM7RUFDVCxXQUFXO0FBQ2I7O0FBRUE7RUFDRSx3QkFBd0I7RUFDeEIsc0JBQXNCO0FBQ3hCOztBQUVBLFdBQVc7QUFDWDtFQUNFLGtCQUFrQjtFQUNsQiw0QkFBNEI7RUFDNUIsK0NBQStDOztFQUUvQyxZQUFZO0VBQ1osZ0JBQWdCO0VBQ2hCLGVBQWU7O0VBRWYsa0NBQWtDO0VBQ2xDLGtCQUFrQjtFQUNsQiw0QkFBNEI7QUFDOUI7O0FBRUE7RUFDRTtJQUNFLDRCQUE0QjtFQUM5QjtFQUNBO0lBQ0Usd0JB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LGFBQWE7RUFDYjtJQUNFLGVBQWU7RUFDakI7QUFDRlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IHVybChcXFwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1Qb3BwaW5zOndnaHRANDAwOzUwMDs3MDAmZGlzcGxheT1zd2FwXFxcIik7XFxuQGltcG9ydCB1cmwoXFxcImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9TStQTFVTKzI6d2dodEA1MDA7NzAwJmRpc3BsYXk9c3dhcFxcXCIpO1xcblxcbi8qIFJFU0VUIENTUyAgKi9cXG5cXG4qIHtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxuICBib3JkZXI6IDA7XFxuICBmb250LXNpemU6IDEwMCU7XFxuICBmb250OiBpbmhlcml0O1xcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xcbn1cXG5cXG4vKiBIVE1MNSBkaXNwbGF5LXJvbGUgcmVzZXQgZm9yIG9sZGVyIGJyb3dzZXJzICovXFxuYXJ0aWNsZSxcXG5hc2lkZSxcXG5kZXRhaWxzLFxcbmZpZ2NhcHRpb24sXFxuZmlndXJlLFxcbmZvb3RlcixcXG5oZWFkZXIsXFxuaGdyb3VwLFxcbm1lbnUsXFxubmF2LFxcbnNlY3Rpb24ge1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcbmJvZHkge1xcbiAgbGluZS1oZWlnaHQ6IDE7XFxufVxcbm9sLFxcbnVsIHtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxufVxcbmJsb2NrcXVvdGUsXFxucSB7XFxuICBxdW90ZXM6IG5vbmU7XFxufVxcbmJsb2NrcXVvdGU6YmVmb3JlLFxcbmJsb2NrcXVvdGU6YWZ0ZXIsXFxucTpiZWZvcmUsXFxucTphZnRlciB7XFxuICBjb250ZW50OiBcXFwiXFxcIjtcXG4gIGNvbnRlbnQ6IG5vbmU7XFxufVxcbnRhYmxlIHtcXG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XFxuICBib3JkZXItc3BhY2luZzogMDtcXG59XFxuXFxuLyogTE9BREVSICAqL1xcbi5sb2FkZXIge1xcbiAgd2lkdGg6IDYwcHg7XFxuICBoZWlnaHQ6IDYwcHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIGFuaW1hdGlvbjogc3BpbiAwLjhzIGVhc2UtaW4tb3V0IGluZmluaXRlO1xcbn1cXG5cXG5Aa2V5ZnJhbWVzIHNwaW4ge1xcbiAgMCUge1xcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtMTgwZGVnKTtcXG4gIH1cXG4gIDUwJSB7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMzBweCk7XFxuICB9XFxuICA3MCUge1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCk7XFxuICB9XFxuICA3NSUge1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTEwcHgpO1xcbiAgfVxcbiAgMTAwJSB7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKTtcXG4gIH1cXG59XFxuLyogUEFSVElDTEVTICovXFxuI3RzcGFydGljbGVzIHtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICBib3R0b206IDA7XFxuICByaWdodDogMDtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IDA7XFxuICB6LWluZGV4OiAtMTtcXG59XFxuXFxuY2FudmFzIHtcXG4gIGhlaWdodDogODAwcHggIWltcG9ydGFudDtcXG4gIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7XFxufVxcblxcbi8qIEVSUk9SICAqL1xcbi5kaXNwbGF5LWVycm9yIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMTAwJSk7XFxuICBhbmltYXRpb246IGVycm9yLXBvcC1pbiAzcyBlYXNlLWluLW91dCBmb3J3YXJkcztcXG5cXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICBmb250LXNpemU6IDIwcHg7XFxuXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjU1LCAzMCwgMzApO1xcbiAgcGFkZGluZzogMTBweCAyMHB4O1xcbiAgYm9yZGVyLXJhZGl1czogMCAwIDEwcHggMTBweDtcXG59XFxuXFxuQGtleWZyYW1lcyBlcnJvci1wb3AtaW4ge1xcbiAgMCUge1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTEwMCUpO1xcbiAgfVxcbiAgMjUlIHtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApO1xcbiAgfVxcbiAgNTAlIHtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApO1xcbiAgfVxcbiAgNzUlIHtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApO1xcbiAgfVxcbiAgMTAwJSB7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMTAwJSk7XFxuICB9XFxufVxcblxcbi8qIEhFQURFUiAqL1xcbmhlYWRlciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICB3aWR0aDogbWluKDEwMDBweCwgODAlKTtcXG4gIG1hcmdpbi10b3A6IDcwcHg7XFxufVxcblxcbmhlYWRlciA+IGgxIHtcXG4gIG1hcmdpbjogMDtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XFxuICBmb250LXNpemU6IDUycHg7XFxuICBwYWRkaW5nOiAzNnB4IDA7XFxufVxcblxcbi51c2VyLWlucHV0IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICB3aWR0aDogODAlO1xcbn1cXG5cXG4uY2l0eS1uYW1lIHtcXG4gIGJhY2tncm91bmQ6ICNmZmY7XFxuICBib3JkZXItcmFkaXVzOiA1MHB4O1xcbiAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDA7XFxuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMDtcXG4gIHBhZGRpbmc6IDVweDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGZvbnQtc2l6ZTogMzVweDtcXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XFxuICBjb2xvcjogIzRkNGI0YjtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiUG9wcGluc1xcXCIsIFZlcmRhbmEsIEdlbmV2YSwgVGFob21hLCBzYW5zLXNlcmlmO1xcblxcbiAgYm9yZGVyOiBub25lO1xcbiAgd2lkdGg6IDkwJTtcXG59XFxuXFxuLmNpdHktbmFtZTpmb2N1cyB7XFxuICBvdXRsaW5lOiBub25lO1xcbn1cXG5cXG46OnBsYWNlaG9sZGVyIHtcXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XFxuICBjb2xvcjogIzRkNGI0YjtcXG4gIG9wYWNpdHk6IDE7XFxuICBmb250LXNpemU6IDM1cHg7XFxuXFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBmb250LWZhbWlseTogXFxcIlBvcHBpbnNcXFwiLCBWZXJkYW5hLCBHZW5ldmEsIFRhaG9tYSwgc2Fucy1zZXJpZjtcXG59XFxuXFxuLmNpdHktbmFtZTpmb2N1czo6cGxhY2Vob2xkZXIge1xcbiAgY29sb3I6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG4udXNlci1pbnB1dCA+IGJ1dHRvbiB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiUG9wcGluc1xcXCI7XFxuICBmb250LXNpemU6IDM1cHg7XFxuXFxuICBwYWRkaW5nOiAzcHggMTBweDtcXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XFxuICBib3JkZXI6IG5vbmU7XFxuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMzVweDtcXG4gIGJvcmRlcjogc29saWQgMnB4IHdoaXRlO1xcbiAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDM1cHg7XFxuICBib3JkZXItbGVmdC13aWR0aDogMDtcXG5cXG4gIHdpZHRoOiAxMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBtaW4td2lkdGg6IDcwcHg7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4udXNlci1pbnB1dCBpbWcge1xcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG4gIGhlaWdodDogMzBweDtcXG4gIHdpZHRoOiBhdXRvO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgYm90dG9tOiAycHg7XFxufVxcblxcbi8qIFdFQVRIRVIgRElTUExBWSAqL1xcbi53ZWF0aGVyLWRpc3BsYXkge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIHdpZHRoOiA3MCU7XFxuICBvcGFjaXR5OiAxO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBjb2xvcjogI2ZmZjtcXG5cXG4gIGZvbnQtc2l6ZTogNTBweDtcXG4gIHBhZGRpbmc6IDgwcHggMjBweDtcXG4gIGdhcDogNTBweDtcXG59XFxuXFxuLnRlbXAtaW5mbyB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGZvbnQtc2l6ZTogNTBweDtcXG4gIGdhcDogMTBweDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbn1cXG5cXG4udGVtcC1kYXRhIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgZ2FwOiAxNXB4O1xcbn1cXG5cXG4uZGlzcGxheS1jaXR5LW5hbWUge1xcbiAgZm9udC1zaXplOiA0NXB4O1xcbiAgZm9udC13ZWlnaHQ6IDUwMDtcXG59XFxuXFxuLmRpc3BsYXktY29uZGl0aW9uIHtcXG4gIGZvbnQtc2l6ZTogNDBweDtcXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICBsZXR0ZXItc3BhY2luZzogMC4xZW07XFxufVxcblxcbi5kaXNwbGF5LWN1cnJlbnQtdGVtcCB7XFxuICBwYWRkaW5nLXJpZ2h0OiAxMHB4O1xcbiAgZm9udC13ZWlnaHQ6IDcwMDtcXG4gIGxpbmUtaGVpZ2h0OiA0MHB4O1xcbiAgYm9yZGVyLXJpZ2h0OiA1cHggc29saWQgI2ZmZjtcXG59XFxuXFxuQGtleWZyYW1lcyBzbGlkZS1pbiB7XFxuICBmcm9tIHtcXG4gICAgb3BhY2l0eTogMDtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xMDBweCk7XFxuICB9XFxuICB0byB7XFxuICAgIG9wYWNpdHk6IDE7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKTtcXG4gIH1cXG59XFxuXFxuLmluZm8tZGlzcGxheSB7XFxuICBmb250LXNpemU6IDMwcHg7XFxuICBmb250LXdlaWdodDogNTAwO1xcbiAgZm9udC1mYW1pbHk6IFxcXCJNIFBMVVMgMlxcXCIsIFZlcmRhbmEsIEdlbmV2YSwgVGFob21hLCBzYW5zLXNlcmlmO1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgZ2FwOiAyMHB4O1xcbiAgdHJhbnNpdGlvbjogYWxsIDAuN3MgZWFzZS1pbi1vdXQ7XFxufVxcblxcbi53aGl0ZS1ibG9jayB7XFxuICBoZWlnaHQ6IDcwcHg7XFxuICB3aWR0aDogN3B4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG59XFxuXFxuLmluZm8ge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgZ2FwOiAxMDBweDtcXG59XFxuXFxuLmluZm8taG9sZGVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgd2lkdGg6IDQ1MHB4O1xcbn1cXG5cXG4ubWF4LXRlbXAsXFxuLm1pbi10ZW1wIHtcXG4gIGZvbnQtc2l6ZTogMjVweDtcXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XFxufVxcblxcbi5tYXgtdGVtcC1sb2dvLFxcbi5taW4tdGVtcC1sb2dvIHtcXG4gIGhlaWdodDogMjBweDtcXG4gIG1hcmdpbi1sZWZ0OiA3cHg7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcblxcbi5jYXN0LXRlbXAge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICB0ZXh0LWFsaWduOiBsZWZ0O1xcbiAgZ2FwOiAycHg7XFxufVxcblxcbi5odW1pZGl0eSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZ2FwOiA1cHg7XFxufVxcblxcbi5odW1pZGl0eSA+IGltZyB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcblxcbi5jYXN0IHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XFxuICBsZXR0ZXItc3BhY2luZzogMnB4O1xcbn1cXG5cXG4ubWlzYyB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGdhcDogNXB4O1xcbn1cXG5cXG4ud2luZCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGdhcDogMnB4O1xcbn1cXG5cXG4ud2luZCA+IGltZyB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcblxcbi8qIExPQURJTkcgKi9cXG4ubG9hZGluZy1iZWdpbiB7XFxuICBjb2xvcjogd2hpdGU7XFxuICBmb250LWZhbWlseTogXFxcIlBvcHBpbnNcXFwiLCBWZXJkYW5hLCBHZW5ldmEsIFRhaG9tYSwgc2Fucy1zZXJpZjtcXG4gIGZvbnQtc2l6ZTogNjBweDtcXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICB3aWR0aDogMTAwJTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG5cXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIG1pbi1oZWlnaHQ6IDEwMHZoO1xcbiAgaGVpZ2h0OiAxMDB2aDtcXG4gIHdpZHRoOiAxMDAlO1xcblxcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMTIyM2FlZjtcXG4gIHotaW5kZXg6IDEwO1xcbn1cXG5cXG4vKiBXRUFUSEVSIEVGRkVDVHMgKi9cXG4uc3VuIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmZmMDA7XFxuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xcbiAgaGVpZ2h0OiAxNTBweDtcXG4gIHdpZHRoOiAxNTBweDtcXG4gIHotaW5kZXg6IC0yO1xcblxcbiAgYm9yZGVyOiBub25lO1xcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgYm94LXNoYWRvdzogMCAwIDYwcHggMTBweCByZ2IoMjU1IDI1NSAwKTtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgdHJhbnNmb3JtOiBzY2FsZSgwKTtcXG4gIGFuaW1hdGlvbjogc2hvdy1pbiAwLjRzIGVhc2UtaW4tb3V0IGZvcndhcmRzO1xcblxcbiAgYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuO1xcbn1cXG5cXG5Aa2V5ZnJhbWVzIHNob3ctaW4ge1xcbiAgMCUge1xcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDApO1xcbiAgfVxcbiAgNTAlIHtcXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxLjIpO1xcbiAgfVxcbiAgMTAwJSB7XFxuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XFxuICB9XFxufVxcblxcbi5oaWxscy1jb250YWluZXIge1xcbiAgbWluLWhlaWdodDogNDAwcHg7XFxuICBoZWlnaHQ6IDQ1dmg7XFxuICB3aWR0aDogMTAwJTtcXG5cXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIG92ZXJmbG93OiBjbGlwO1xcbn1cXG5cXG4uaGlsbHMxLFxcbi5oaWxsczIge1xcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcXG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBib3R0b206IC0xcHg7XFxuXFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG59XFxuLmhpbGxzMSB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXFxcIi4vYXNzZXRzL2hpbGxzMS5zdmdcXFwiKTtcXG4gIGhlaWdodDogNzAlO1xcbiAgei1pbmRleDogOTtcXG59XFxuXFxuLmhpbGxzMiB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXFxcIi4vYXNzZXRzL2hpbGxzMi5zdmdcXFwiKTtcXG4gIHotaW5kZXg6IDg7XFxufVxcblxcbi8qIEJPRFkgKi9cXG5ib2R5LFxcbmh0bWwge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJQb3BwaW5zXFxcIiwgc2Fucy1zZXJpZiwgVmVyZGFuYSwgR2VuZXZhLCBUYWhvbWE7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBtaW4taGVpZ2h0OiAxMDB2aDtcXG4gIGhlaWdodDogMTAwJTtcXG59XFxuXFxuYm9keTo6LXdlYmtpdC1zY3JvbGxiYXIge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuYm9keSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuXFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgYmFja2dyb3VuZDogIzAwOTVmZjtcXG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQgIWltcG9ydGFudDtcXG4gIGJhY2tncm91bmQtYXR0YWNobWVudDogZml4ZWQgIWltcG9ydGFudDtcXG5cXG4gIC1tcy1vdmVyZmxvdy1zdHlsZTogbm9uZTtcXG4gIHNjcm9sbGJhci13aWR0aDogMjBweDtcXG59XFxuXFxuKiB7XFxuICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMCk7XFxufVxcblxcbmZvb3RlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAzMDAwO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuXFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcblxcbiAgY29sb3I6IHdoaXRlO1xcbiAgZm9udC1zaXplOiAzMHB4O1xcbn1cXG5cXG4uY3JlZGl0cyB7XFxuICBwYWRkaW5nOiAzMHB4O1xcbiAgbGluZS1oZWlnaHQ6IDMwcHg7XFxufVxcblxcbi8qIE1FRElBIFFVRVJJRVMgKi9cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xcbiAgLyogSEVBREVSICAqL1xcbiAgaGVhZGVyIHtcXG4gICAgd2lkdGg6IDg1JTtcXG4gIH1cXG5cXG4gIC5jaXR5LW5hbWUsXFxuICAqOjpwbGFjZWhvbGRlcixcXG4gIC51c2VyLWlucHV0ID4gYnV0dG9uIHtcXG4gICAgZm9udC1zaXplOiAzMHB4O1xcbiAgfVxcblxcbiAgLmNpdHktbmFtZSB7XFxuICAgIHdpZHRoOiA4NSU7XFxuICB9XFxuICAudXNlci1pbnB1dCA+IGJ1dHRvbiB7XFxuICAgIHdpZHRoOiAxNSU7XFxuICAgIG1pbi13aWR0aDogNTBweDtcXG4gIH1cXG4gIC8qIFdFQVRIRVIgRElTUExBWSAgKi9cXG4gIC53ZWF0aGVyLWRpc3BsYXkge1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgfVxcblxcbiAgLmRpc3BsYXktY3VycmVudC10ZW1wLFxcbiAgLmRpc3BsYXktY29uZGl0aW9uLFxcbiAgLmRpc3BsYXktY2l0eS1uYW1lIHtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBmb250LXNpemU6IDM2cHg7XFxuICB9XFxuXFxuICAvKiBDUkVESVRTICAqL1xcbiAgLmNyZWRpdHMge1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIGZvbnQtc2l6ZTogMjVweDtcXG4gIH1cXG5cXG4gIC8qIExPQURJTkcgICovXFxuICAubG9hZGluZy1iZWdpbiB7XFxuICAgIGZvbnQtc2l6ZTogNTBweDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDQwcHgpIHtcXG4gIC8qIEVSUk9SICAqL1xcbiAgLmRpc3BsYXktZXJyb3Ige1xcbiAgICB3aWR0aDogNzUlO1xcbiAgfVxcblxcbiAgLyogSEVBREVSICAqL1xcbiAgaGVhZGVyIHtcXG4gICAgd2lkdGg6IDk1JTtcXG4gIH1cXG5cXG4gIC8qIFdFQVRIRVIgRElTUExBWSAqL1xcbiAgLmRpc3BsYXktY3VycmVudC10ZW1wIHtcXG4gICAgZm9udC1zaXplOiA0NXB4O1xcbiAgICBib3JkZXItcmlnaHQ6IG5vbmU7XFxuICAgIHBhZGRpbmc6IDA7XFxuICB9XFxuXFxuICAudGVtcC1kYXRhIHtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgZ2FwOiAxMHB4O1xcbiAgfVxcblxcbiAgLmNpdHktbmFtZSxcXG4gICo6OnBsYWNlaG9sZGVyLFxcbiAgLnVzZXItaW5wdXQgPiBidXR0b24ge1xcbiAgICBmb250LXNpemU6IDIzcHg7XFxuICB9XFxuXFxuICAudXNlci1pbnB1dCA+IGJ1dHRvbiB7XFxuICAgIHdpZHRoOiAxMCU7XFxuICAgIG1pbi13aWR0aDogNDBweDtcXG4gIH1cXG4gIC5jaXR5LW5hbWUge1xcbiAgICB3aWR0aDogOTAlO1xcbiAgfVxcbiAgLnVzZXItaW5wdXQgaW1nIHtcXG4gICAgaGVpZ2h0OiAyMnB4O1xcbiAgfVxcbiAgLyogTE9BRElORyAgKi9cXG4gIC5sb2FkaW5nLWJlZ2luIHtcXG4gICAgZm9udC1zaXplOiA0NXB4O1xcbiAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdXJsID0gU3RyaW5nKHVybC5fX2VzTW9kdWxlID8gdXJsLmRlZmF1bHQgOiB1cmwpOyAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cblxuICBpZiAoL15bJ1wiXS4qWydcIl0kLy50ZXN0KHVybCkpIHtcbiAgICB1cmwgPSB1cmwuc2xpY2UoMSwgLTEpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgIHVybCArPSBvcHRpb25zLmhhc2g7XG4gIH0gLy8gU2hvdWxkIHVybCBiZSB3cmFwcGVkP1xuICAvLyBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuXG5cbiAgaWYgKC9bXCInKCkgXFx0XFxuXXwoJTIwKS8udGVzdCh1cmwpIHx8IG9wdGlvbnMubmVlZFF1b3Rlcykge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQodXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgXCJcXFxcblwiKSwgXCJcXFwiXCIpO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcblxuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdXBkYXRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuXG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cblxuICBjc3MgKz0gb2JqLmNzcztcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNhbnZhcyA9IHZvaWQgMDtcbmNvbnN0IFV0aWxzXzEgPSByZXF1aXJlKFwiLi4vVXRpbHNcIik7XG5jb25zdCBVdGlsc18yID0gcmVxdWlyZShcIi4uL1V0aWxzXCIpO1xuY2xhc3MgQ2FudmFzIHtcbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXIpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgICAgIHRoaXMuc2l6ZSA9IHtcbiAgICAgICAgICAgIGhlaWdodDogMCxcbiAgICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBudWxsO1xuICAgICAgICB0aGlzLmdlbmVyYXRlZENhbnZhcyA9IGZhbHNlO1xuICAgIH1cbiAgICBpbml0KCkge1xuICAgICAgICB0aGlzLnJlc2l6ZSgpO1xuICAgICAgICB0aGlzLmluaXRTdHlsZSgpO1xuICAgICAgICB0aGlzLmluaXRDb3ZlcigpO1xuICAgICAgICB0aGlzLmluaXRUcmFpbCgpO1xuICAgICAgICB0aGlzLmluaXRCYWNrZ3JvdW5kKCk7XG4gICAgICAgIHRoaXMucGFpbnQoKTtcbiAgICB9XG4gICAgbG9hZENhbnZhcyhjYW52YXMsIGdlbmVyYXRlZENhbnZhcykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICghY2FudmFzLmNsYXNzTmFtZSkge1xuICAgICAgICAgICAgY2FudmFzLmNsYXNzTmFtZSA9IFV0aWxzXzEuQ29uc3RhbnRzLmNhbnZhc0NsYXNzO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmdlbmVyYXRlZENhbnZhcykge1xuICAgICAgICAgICAgKF9hID0gdGhpcy5lbGVtZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5nZW5lcmF0ZWRDYW52YXMgPSBnZW5lcmF0ZWRDYW52YXMgIT09IG51bGwgJiYgZ2VuZXJhdGVkQ2FudmFzICE9PSB2b2lkIDAgPyBnZW5lcmF0ZWRDYW52YXMgOiB0aGlzLmdlbmVyYXRlZENhbnZhcztcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gY2FudmFzO1xuICAgICAgICB0aGlzLm9yaWdpbmFsU3R5bGUgPSAoMCwgVXRpbHNfMS5kZWVwRXh0ZW5kKSh7fSwgdGhpcy5lbGVtZW50LnN0eWxlKTtcbiAgICAgICAgdGhpcy5zaXplLmhlaWdodCA9IGNhbnZhcy5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIHRoaXMuc2l6ZS53aWR0aCA9IGNhbnZhcy5vZmZzZXRXaWR0aDtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gdGhpcy5lbGVtZW50LmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgdGhpcy5jb250YWluZXIucmV0aW5hLmluaXQoKTtcbiAgICAgICAgdGhpcy5pbml0QmFja2dyb3VuZCgpO1xuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh0aGlzLmdlbmVyYXRlZENhbnZhcykge1xuICAgICAgICAgICAgKF9hID0gdGhpcy5lbGVtZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kcmF3KChjdHgpID0+IHtcbiAgICAgICAgICAgICgwLCBVdGlsc18yLmNsZWFyKShjdHgsIHRoaXMuc2l6ZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBwYWludCgpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuY29udGFpbmVyLmFjdHVhbE9wdGlvbnM7XG4gICAgICAgIHRoaXMuZHJhdygoY3R4KSA9PiB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5iYWNrZ3JvdW5kTWFzay5lbmFibGUgJiYgb3B0aW9ucy5iYWNrZ3JvdW5kTWFzay5jb3ZlciAmJiB0aGlzLmNvdmVyQ29sb3IpIHtcbiAgICAgICAgICAgICAgICAoMCwgVXRpbHNfMi5jbGVhcikoY3R4LCB0aGlzLnNpemUpO1xuICAgICAgICAgICAgICAgIHRoaXMucGFpbnRCYXNlKCgwLCBVdGlsc18xLmdldFN0eWxlRnJvbVJnYikodGhpcy5jb3ZlckNvbG9yLCB0aGlzLmNvdmVyQ29sb3IuYSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wYWludEJhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNsZWFyKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5jb250YWluZXIuYWN0dWFsT3B0aW9ucztcbiAgICAgICAgY29uc3QgdHJhaWwgPSBvcHRpb25zLnBhcnRpY2xlcy5tb3ZlLnRyYWlsO1xuICAgICAgICBpZiAob3B0aW9ucy5iYWNrZ3JvdW5kTWFzay5lbmFibGUpIHtcbiAgICAgICAgICAgIHRoaXMucGFpbnQoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0cmFpbC5lbmFibGUgJiYgdHJhaWwubGVuZ3RoID4gMCAmJiB0aGlzLnRyYWlsRmlsbENvbG9yKSB7XG4gICAgICAgICAgICB0aGlzLnBhaW50QmFzZSgoMCwgVXRpbHNfMS5nZXRTdHlsZUZyb21SZ2IpKHRoaXMudHJhaWxGaWxsQ29sb3IsIDEgLyB0cmFpbC5sZW5ndGgpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZHJhdygoY3R4KSA9PiB7XG4gICAgICAgICAgICAgICAgKDAsIFV0aWxzXzIuY2xlYXIpKGN0eCwgdGhpcy5zaXplKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHdpbmRvd1Jlc2l6ZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcjtcbiAgICAgICAgdGhpcy5yZXNpemUoKTtcbiAgICAgICAgY29uc3QgbmVlZHNSZWZyZXNoID0gY29udGFpbmVyLnVwZGF0ZUFjdHVhbE9wdGlvbnMoKTtcbiAgICAgICAgY29udGFpbmVyLnBhcnRpY2xlcy5zZXREZW5zaXR5KCk7XG4gICAgICAgIGZvciAoY29uc3QgWywgcGx1Z2luXSBvZiBjb250YWluZXIucGx1Z2lucykge1xuICAgICAgICAgICAgaWYgKHBsdWdpbi5yZXNpemUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHBsdWdpbi5yZXNpemUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobmVlZHNSZWZyZXNoKSB7XG4gICAgICAgICAgICBjb250YWluZXIucmVmcmVzaCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlc2l6ZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcjtcbiAgICAgICAgY29uc3QgcHhSYXRpbyA9IGNvbnRhaW5lci5yZXRpbmEucGl4ZWxSYXRpbztcbiAgICAgICAgY29uc3Qgc2l6ZSA9IGNvbnRhaW5lci5jYW52YXMuc2l6ZTtcbiAgICAgICAgY29uc3Qgb2xkU2l6ZSA9IHtcbiAgICAgICAgICAgIHdpZHRoOiBzaXplLndpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiBzaXplLmhlaWdodCxcbiAgICAgICAgfTtcbiAgICAgICAgc2l6ZS53aWR0aCA9IHRoaXMuZWxlbWVudC5vZmZzZXRXaWR0aCAqIHB4UmF0aW87XG4gICAgICAgIHNpemUuaGVpZ2h0ID0gdGhpcy5lbGVtZW50Lm9mZnNldEhlaWdodCAqIHB4UmF0aW87XG4gICAgICAgIHRoaXMuZWxlbWVudC53aWR0aCA9IHNpemUud2lkdGg7XG4gICAgICAgIHRoaXMuZWxlbWVudC5oZWlnaHQgPSBzaXplLmhlaWdodDtcbiAgICAgICAgaWYgKHRoaXMuY29udGFpbmVyLnN0YXJ0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMucmVzaXplRmFjdG9yID0ge1xuICAgICAgICAgICAgICAgIHdpZHRoOiBzaXplLndpZHRoIC8gb2xkU2l6ZS53aWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHNpemUuaGVpZ2h0IC8gb2xkU2l6ZS5oZWlnaHQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGRyYXdDb25uZWN0TGluZShwMSwgcDIpIHtcbiAgICAgICAgdGhpcy5kcmF3KChjdHgpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGNvbnN0IGxpbmVTdHlsZSA9IHRoaXMubGluZVN0eWxlKHAxLCBwMik7XG4gICAgICAgICAgICBpZiAoIWxpbmVTdHlsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHBvczEgPSBwMS5nZXRQb3NpdGlvbigpO1xuICAgICAgICAgICAgY29uc3QgcG9zMiA9IHAyLmdldFBvc2l0aW9uKCk7XG4gICAgICAgICAgICAoMCwgVXRpbHNfMS5kcmF3Q29ubmVjdExpbmUpKGN0eCwgKF9hID0gcDEucmV0aW5hLmxpbmtzV2lkdGgpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRoaXMuY29udGFpbmVyLnJldGluYS5saW5rc1dpZHRoLCBsaW5lU3R5bGUsIHBvczEsIHBvczIpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZHJhd0dyYWJMaW5lKHBhcnRpY2xlLCBsaW5lQ29sb3IsIG9wYWNpdHksIG1vdXNlUG9zKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyO1xuICAgICAgICB0aGlzLmRyYXcoKGN0eCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgY29uc3QgYmVnaW5Qb3MgPSBwYXJ0aWNsZS5nZXRQb3NpdGlvbigpO1xuICAgICAgICAgICAgKDAsIFV0aWxzXzEuZHJhd0dyYWJMaW5lKShjdHgsIChfYSA9IHBhcnRpY2xlLnJldGluYS5saW5rc1dpZHRoKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBjb250YWluZXIucmV0aW5hLmxpbmtzV2lkdGgsIGJlZ2luUG9zLCBtb3VzZVBvcywgbGluZUNvbG9yLCBvcGFjaXR5KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGRyYXdQYXJ0aWNsZShwYXJ0aWNsZSwgZGVsdGEpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2Y7XG4gICAgICAgIGlmIChwYXJ0aWNsZS5zcGF3bmluZyB8fCBwYXJ0aWNsZS5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwZkNvbG9yID0gcGFydGljbGUuZ2V0RmlsbENvbG9yKCk7XG4gICAgICAgIGNvbnN0IHBzQ29sb3IgPSAoX2EgPSBwYXJ0aWNsZS5nZXRTdHJva2VDb2xvcigpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBwZkNvbG9yO1xuICAgICAgICBpZiAoIXBmQ29sb3IgJiYgIXBzQ29sb3IpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgW2ZDb2xvciwgc0NvbG9yXSA9IHRoaXMuZ2V0UGx1Z2luUGFydGljbGVDb2xvcnMocGFydGljbGUpO1xuICAgICAgICBjb25zdCBwT3B0aW9ucyA9IHBhcnRpY2xlLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHR3aW5rbGUgPSBwT3B0aW9ucy50d2lua2xlLnBhcnRpY2xlcztcbiAgICAgICAgY29uc3QgdHdpbmtsaW5nID0gdHdpbmtsZS5lbmFibGUgJiYgTWF0aC5yYW5kb20oKSA8IHR3aW5rbGUuZnJlcXVlbmN5O1xuICAgICAgICBpZiAoIWZDb2xvciB8fCAhc0NvbG9yKSB7XG4gICAgICAgICAgICBjb25zdCB0d2lua2xlUmdiID0gKDAsIFV0aWxzXzEuY29sb3JUb0hzbCkodHdpbmtsZS5jb2xvcik7XG4gICAgICAgICAgICBpZiAoIWZDb2xvcikge1xuICAgICAgICAgICAgICAgIGZDb2xvciA9IHR3aW5rbGluZyAmJiB0d2lua2xlUmdiICE9PSB1bmRlZmluZWQgPyB0d2lua2xlUmdiIDogcGZDb2xvciA/IHBmQ29sb3IgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXNDb2xvcikge1xuICAgICAgICAgICAgICAgIHNDb2xvciA9IHR3aW5rbGluZyAmJiB0d2lua2xlUmdiICE9PSB1bmRlZmluZWQgPyB0d2lua2xlUmdiIDogcHNDb2xvciA/IHBzQ29sb3IgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuY29udGFpbmVyLmFjdHVhbE9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHpJbmRleE9wdGlvbnMgPSBwYXJ0aWNsZS5vcHRpb25zLnpJbmRleDtcbiAgICAgICAgY29uc3Qgek9wYWNpdHlGYWN0b3IgPSAoMSAtIHBhcnRpY2xlLnpJbmRleEZhY3RvcikgKiogekluZGV4T3B0aW9ucy5vcGFjaXR5UmF0ZTtcbiAgICAgICAgY29uc3QgcmFkaXVzID0gcGFydGljbGUuZ2V0UmFkaXVzKCk7XG4gICAgICAgIGNvbnN0IG9wYWNpdHkgPSB0d2lua2xpbmcgPyB0d2lua2xlLm9wYWNpdHkgOiAoX2QgPSAoX2IgPSBwYXJ0aWNsZS5idWJibGUub3BhY2l0eSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogKF9jID0gcGFydGljbGUub3BhY2l0eSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLnZhbHVlKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiAxO1xuICAgICAgICBjb25zdCBzdHJva2VPcGFjaXR5ID0gKF9mID0gKF9lID0gcGFydGljbGUuc3Ryb2tlKSA9PT0gbnVsbCB8fCBfZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Uub3BhY2l0eSkgIT09IG51bGwgJiYgX2YgIT09IHZvaWQgMCA/IF9mIDogb3BhY2l0eTtcbiAgICAgICAgY29uc3Qgek9wYWNpdHkgPSBvcGFjaXR5ICogek9wYWNpdHlGYWN0b3I7XG4gICAgICAgIGNvbnN0IGZpbGxDb2xvclZhbHVlID0gZkNvbG9yID8gKDAsIFV0aWxzXzEuZ2V0U3R5bGVGcm9tSHNsKShmQ29sb3IsIHpPcGFjaXR5KSA6IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKCFmaWxsQ29sb3JWYWx1ZSAmJiAhc0NvbG9yKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kcmF3KChjdHgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHpTaXplRmFjdG9yID0gKDEgLSBwYXJ0aWNsZS56SW5kZXhGYWN0b3IpICoqIHpJbmRleE9wdGlvbnMuc2l6ZVJhdGU7XG4gICAgICAgICAgICBjb25zdCB6U3Ryb2tlT3BhY2l0eSA9IHN0cm9rZU9wYWNpdHkgKiB6T3BhY2l0eUZhY3RvcjtcbiAgICAgICAgICAgIGNvbnN0IHN0cm9rZUNvbG9yVmFsdWUgPSBzQ29sb3IgPyAoMCwgVXRpbHNfMS5nZXRTdHlsZUZyb21Ic2wpKHNDb2xvciwgelN0cm9rZU9wYWNpdHkpIDogZmlsbENvbG9yVmFsdWU7XG4gICAgICAgICAgICBpZiAocmFkaXVzIDw9IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcjtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdXBkYXRlciBvZiBjb250YWluZXIucGFydGljbGVzLnVwZGF0ZXJzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHVwZGF0ZXIuYmVmb3JlRHJhdykge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVyLmJlZm9yZURyYXcocGFydGljbGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICgwLCBVdGlsc18xLmRyYXdQYXJ0aWNsZSkodGhpcy5jb250YWluZXIsIGN0eCwgcGFydGljbGUsIGRlbHRhLCBmaWxsQ29sb3JWYWx1ZSwgc3Ryb2tlQ29sb3JWYWx1ZSwgb3B0aW9ucy5iYWNrZ3JvdW5kTWFzay5lbmFibGUsIG9wdGlvbnMuYmFja2dyb3VuZE1hc2suY29tcG9zaXRlLCByYWRpdXMgKiB6U2l6ZUZhY3Rvciwgek9wYWNpdHksIHBhcnRpY2xlLm9wdGlvbnMuc2hhZG93LCBwYXJ0aWNsZS5ncmFkaWVudCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHVwZGF0ZXIgb2YgY29udGFpbmVyLnBhcnRpY2xlcy51cGRhdGVycykge1xuICAgICAgICAgICAgICAgIGlmICh1cGRhdGVyLmFmdGVyRHJhdykge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVyLmFmdGVyRHJhdyhwYXJ0aWNsZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZHJhd1BsdWdpbihwbHVnaW4sIGRlbHRhKSB7XG4gICAgICAgIHRoaXMuZHJhdygoY3R4KSA9PiB7XG4gICAgICAgICAgICAoMCwgVXRpbHNfMS5kcmF3UGx1Z2luKShjdHgsIHBsdWdpbiwgZGVsdGEpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZHJhd1BhcnRpY2xlUGx1Z2luKHBsdWdpbiwgcGFydGljbGUsIGRlbHRhKSB7XG4gICAgICAgIHRoaXMuZHJhdygoY3R4KSA9PiB7XG4gICAgICAgICAgICAoMCwgVXRpbHNfMS5kcmF3UGFydGljbGVQbHVnaW4pKGN0eCwgcGx1Z2luLCBwYXJ0aWNsZSwgZGVsdGEpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaW5pdEJhY2tncm91bmQoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLmNvbnRhaW5lci5hY3R1YWxPcHRpb25zO1xuICAgICAgICBjb25zdCBiYWNrZ3JvdW5kID0gb3B0aW9ucy5iYWNrZ3JvdW5kO1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5lbGVtZW50O1xuICAgICAgICBjb25zdCBlbGVtZW50U3R5bGUgPSBlbGVtZW50ID09PSBudWxsIHx8IGVsZW1lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGVsZW1lbnQuc3R5bGU7XG4gICAgICAgIGlmICghZWxlbWVudFN0eWxlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJhY2tncm91bmQuY29sb3IpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gKDAsIFV0aWxzXzEuY29sb3JUb1JnYikoYmFja2dyb3VuZC5jb2xvcik7XG4gICAgICAgICAgICBlbGVtZW50U3R5bGUuYmFja2dyb3VuZENvbG9yID0gY29sb3IgPyAoMCwgVXRpbHNfMS5nZXRTdHlsZUZyb21SZ2IpKGNvbG9yLCBiYWNrZ3JvdW5kLm9wYWNpdHkpIDogXCJcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVsZW1lbnRTdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIGVsZW1lbnRTdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSBiYWNrZ3JvdW5kLmltYWdlIHx8IFwiXCI7XG4gICAgICAgIGVsZW1lbnRTdHlsZS5iYWNrZ3JvdW5kUG9zaXRpb24gPSBiYWNrZ3JvdW5kLnBvc2l0aW9uIHx8IFwiXCI7XG4gICAgICAgIGVsZW1lbnRTdHlsZS5iYWNrZ3JvdW5kUmVwZWF0ID0gYmFja2dyb3VuZC5yZXBlYXQgfHwgXCJcIjtcbiAgICAgICAgZWxlbWVudFN0eWxlLmJhY2tncm91bmRTaXplID0gYmFja2dyb3VuZC5zaXplIHx8IFwiXCI7XG4gICAgfVxuICAgIGRyYXcoY2IpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbnRleHQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2IodGhpcy5jb250ZXh0KTtcbiAgICB9XG4gICAgaW5pdENvdmVyKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5jb250YWluZXIuYWN0dWFsT3B0aW9ucztcbiAgICAgICAgY29uc3QgY292ZXIgPSBvcHRpb25zLmJhY2tncm91bmRNYXNrLmNvdmVyO1xuICAgICAgICBjb25zdCBjb2xvciA9IGNvdmVyLmNvbG9yO1xuICAgICAgICBjb25zdCBjb3ZlclJnYiA9ICgwLCBVdGlsc18xLmNvbG9yVG9SZ2IpKGNvbG9yKTtcbiAgICAgICAgaWYgKGNvdmVyUmdiKSB7XG4gICAgICAgICAgICB0aGlzLmNvdmVyQ29sb3IgPSB7XG4gICAgICAgICAgICAgICAgcjogY292ZXJSZ2IucixcbiAgICAgICAgICAgICAgICBnOiBjb3ZlclJnYi5nLFxuICAgICAgICAgICAgICAgIGI6IGNvdmVyUmdiLmIsXG4gICAgICAgICAgICAgICAgYTogY292ZXIub3BhY2l0eSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgaW5pdFRyYWlsKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5jb250YWluZXIuYWN0dWFsT3B0aW9ucztcbiAgICAgICAgY29uc3QgdHJhaWwgPSBvcHRpb25zLnBhcnRpY2xlcy5tb3ZlLnRyYWlsO1xuICAgICAgICBjb25zdCBmaWxsQ29sb3IgPSAoMCwgVXRpbHNfMS5jb2xvclRvUmdiKSh0cmFpbC5maWxsQ29sb3IpO1xuICAgICAgICBpZiAoZmlsbENvbG9yKSB7XG4gICAgICAgICAgICBjb25zdCB0cmFpbCA9IG9wdGlvbnMucGFydGljbGVzLm1vdmUudHJhaWw7XG4gICAgICAgICAgICB0aGlzLnRyYWlsRmlsbENvbG9yID0ge1xuICAgICAgICAgICAgICAgIHI6IGZpbGxDb2xvci5yLFxuICAgICAgICAgICAgICAgIGc6IGZpbGxDb2xvci5nLFxuICAgICAgICAgICAgICAgIGI6IGZpbGxDb2xvci5iLFxuICAgICAgICAgICAgICAgIGE6IDEgLyB0cmFpbC5sZW5ndGgsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldFBsdWdpblBhcnRpY2xlQ29sb3JzKHBhcnRpY2xlKSB7XG4gICAgICAgIGxldCBmQ29sb3I7XG4gICAgICAgIGxldCBzQ29sb3I7XG4gICAgICAgIGZvciAoY29uc3QgWywgcGx1Z2luXSBvZiB0aGlzLmNvbnRhaW5lci5wbHVnaW5zKSB7XG4gICAgICAgICAgICBpZiAoIWZDb2xvciAmJiBwbHVnaW4ucGFydGljbGVGaWxsQ29sb3IpIHtcbiAgICAgICAgICAgICAgICBmQ29sb3IgPSAoMCwgVXRpbHNfMS5jb2xvclRvSHNsKShwbHVnaW4ucGFydGljbGVGaWxsQ29sb3IocGFydGljbGUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghc0NvbG9yICYmIHBsdWdpbi5wYXJ0aWNsZVN0cm9rZUNvbG9yKSB7XG4gICAgICAgICAgICAgICAgc0NvbG9yID0gKDAsIFV0aWxzXzEuY29sb3JUb0hzbCkocGx1Z2luLnBhcnRpY2xlU3Ryb2tlQ29sb3IocGFydGljbGUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmQ29sb3IgJiYgc0NvbG9yKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtmQ29sb3IsIHNDb2xvcl07XG4gICAgfVxuICAgIGluaXRTdHlsZSgpIHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuZWxlbWVudCwgb3B0aW9ucyA9IHRoaXMuY29udGFpbmVyLmFjdHVhbE9wdGlvbnM7XG4gICAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9yaWdpbmFsU3R5bGUgPSB0aGlzLm9yaWdpbmFsU3R5bGU7XG4gICAgICAgIGlmIChvcHRpb25zLmZ1bGxTY3JlZW4uZW5hYmxlKSB7XG4gICAgICAgICAgICB0aGlzLm9yaWdpbmFsU3R5bGUgPSAoMCwgVXRpbHNfMS5kZWVwRXh0ZW5kKSh7fSwgZWxlbWVudC5zdHlsZSk7XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gXCJmaXhlZFwiO1xuICAgICAgICAgICAgZWxlbWVudC5zdHlsZS56SW5kZXggPSBvcHRpb25zLmZ1bGxTY3JlZW4uekluZGV4LnRvU3RyaW5nKDEwKTtcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUudG9wID0gXCIwXCI7XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLmxlZnQgPSBcIjBcIjtcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3JpZ2luYWxTdHlsZSkge1xuICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9IG9yaWdpbmFsU3R5bGUucG9zaXRpb247XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLnpJbmRleCA9IG9yaWdpbmFsU3R5bGUuekluZGV4O1xuICAgICAgICAgICAgZWxlbWVudC5zdHlsZS50b3AgPSBvcmlnaW5hbFN0eWxlLnRvcDtcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUubGVmdCA9IG9yaWdpbmFsU3R5bGUubGVmdDtcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUud2lkdGggPSBvcmlnaW5hbFN0eWxlLndpZHRoO1xuICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBvcmlnaW5hbFN0eWxlLmhlaWdodDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwYWludEJhc2UoYmFzZUNvbG9yKSB7XG4gICAgICAgIHRoaXMuZHJhdygoY3R4KSA9PiB7XG4gICAgICAgICAgICAoMCwgVXRpbHNfMS5wYWludEJhc2UpKGN0eCwgdGhpcy5zaXplLCBiYXNlQ29sb3IpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgbGluZVN0eWxlKHAxLCBwMikge1xuICAgICAgICByZXR1cm4gdGhpcy5kcmF3KChjdHgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLmNvbnRhaW5lci5hY3R1YWxPcHRpb25zO1xuICAgICAgICAgICAgY29uc3QgY29ubmVjdE9wdGlvbnMgPSBvcHRpb25zLmludGVyYWN0aXZpdHkubW9kZXMuY29ubmVjdDtcbiAgICAgICAgICAgIHJldHVybiAoMCwgVXRpbHNfMS5ncmFkaWVudCkoY3R4LCBwMSwgcDIsIGNvbm5lY3RPcHRpb25zLmxpbmtzLm9wYWNpdHkpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLkNhbnZhcyA9IENhbnZhcztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db250YWluZXIgPSB2b2lkIDA7XG5jb25zdCBDYW52YXNfMSA9IHJlcXVpcmUoXCIuL0NhbnZhc1wiKTtcbmNvbnN0IFBhcnRpY2xlc18xID0gcmVxdWlyZShcIi4vUGFydGljbGVzXCIpO1xuY29uc3QgUmV0aW5hXzEgPSByZXF1aXJlKFwiLi9SZXRpbmFcIik7XG5jb25zdCBGcmFtZU1hbmFnZXJfMSA9IHJlcXVpcmUoXCIuL0ZyYW1lTWFuYWdlclwiKTtcbmNvbnN0IE9wdGlvbnNfMSA9IHJlcXVpcmUoXCIuLi9PcHRpb25zL0NsYXNzZXMvT3B0aW9uc1wiKTtcbmNvbnN0IFV0aWxzXzEgPSByZXF1aXJlKFwiLi4vVXRpbHNcIik7XG5jb25zdCBWZWN0b3JfMSA9IHJlcXVpcmUoXCIuL1BhcnRpY2xlL1ZlY3RvclwiKTtcbmNsYXNzIENvbnRhaW5lciB7XG4gICAgY29uc3RydWN0b3IoaWQsIHNvdXJjZU9wdGlvbnMsIC4uLnByZXNldHMpIHtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLmZwc0xpbWl0ID0gNjA7XG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSAwO1xuICAgICAgICB0aGlzLmxpZmVUaW1lID0gMDtcbiAgICAgICAgdGhpcy5maXJzdFN0YXJ0ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zdGFydGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5sYXN0RnJhbWVUaW1lID0gMDtcbiAgICAgICAgdGhpcy56TGF5ZXJzID0gMTAwO1xuICAgICAgICB0aGlzLnBhZ2VIaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fc291cmNlT3B0aW9ucyA9IHNvdXJjZU9wdGlvbnM7XG4gICAgICAgIHRoaXMuX2luaXRpYWxTb3VyY2VPcHRpb25zID0gc291cmNlT3B0aW9ucztcbiAgICAgICAgdGhpcy5yZXRpbmEgPSBuZXcgUmV0aW5hXzEuUmV0aW5hKHRoaXMpO1xuICAgICAgICB0aGlzLmNhbnZhcyA9IG5ldyBDYW52YXNfMS5DYW52YXModGhpcyk7XG4gICAgICAgIHRoaXMucGFydGljbGVzID0gbmV3IFBhcnRpY2xlc18xLlBhcnRpY2xlcyh0aGlzKTtcbiAgICAgICAgdGhpcy5kcmF3ZXIgPSBuZXcgRnJhbWVNYW5hZ2VyXzEuRnJhbWVNYW5hZ2VyKHRoaXMpO1xuICAgICAgICB0aGlzLnByZXNldHMgPSBwcmVzZXRzO1xuICAgICAgICB0aGlzLnBhdGhHZW5lcmF0b3IgPSB7XG4gICAgICAgICAgICBnZW5lcmF0ZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHYgPSBWZWN0b3JfMS5WZWN0b3IuY3JlYXRlKDAsIDApO1xuICAgICAgICAgICAgICAgIHYubGVuZ3RoID0gTWF0aC5yYW5kb20oKTtcbiAgICAgICAgICAgICAgICB2LmFuZ2xlID0gTWF0aC5yYW5kb20oKSAqIE1hdGguUEkgKiAyO1xuICAgICAgICAgICAgICAgIHJldHVybiB2O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGluaXQ6ICgpID0+IHtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1cGRhdGU6ICgpID0+IHtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaW50ZXJhY3Rpdml0eSA9IHtcbiAgICAgICAgICAgIG1vdXNlOiB7XG4gICAgICAgICAgICAgICAgY2xpY2tpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGluc2lkZTogZmFsc2UsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmJ1YmJsZSA9IHt9O1xuICAgICAgICB0aGlzLnJlcHVsc2UgPSB7IHBhcnRpY2xlczogW10gfTtcbiAgICAgICAgdGhpcy5hdHRyYWN0ID0geyBwYXJ0aWNsZXM6IFtdIH07XG4gICAgICAgIHRoaXMucGx1Z2lucyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5kcmF3ZXJzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLmRlbnNpdHkgPSAxO1xuICAgICAgICB0aGlzLl9vcHRpb25zID0gbmV3IE9wdGlvbnNfMS5PcHRpb25zKCk7XG4gICAgICAgIHRoaXMuYWN0dWFsT3B0aW9ucyA9IG5ldyBPcHRpb25zXzEuT3B0aW9ucygpO1xuICAgICAgICB0aGlzLmV2ZW50TGlzdGVuZXJzID0gbmV3IFV0aWxzXzEuRXZlbnRMaXN0ZW5lcnModGhpcyk7XG4gICAgICAgIGlmICh0eXBlb2YgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgIT09IFwidW5kZWZpbmVkXCIgJiYgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKGVudHJpZXMpID0+IHRoaXMuaW50ZXJzZWN0aW9uTWFuYWdlcihlbnRyaWVzKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vcHRpb25zO1xuICAgIH1cbiAgICBnZXQgc291cmNlT3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NvdXJjZU9wdGlvbnM7XG4gICAgfVxuICAgIHBsYXkoZm9yY2UpIHtcbiAgICAgICAgY29uc3QgbmVlZHNVcGRhdGUgPSB0aGlzLnBhdXNlZCB8fCBmb3JjZTtcbiAgICAgICAgaWYgKHRoaXMuZmlyc3RTdGFydCAmJiAhdGhpcy5hY3R1YWxPcHRpb25zLmF1dG9QbGF5KSB7XG4gICAgICAgICAgICB0aGlzLmZpcnN0U3RhcnQgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5wYXVzZWQpIHtcbiAgICAgICAgICAgIHRoaXMucGF1c2VkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5lZWRzVXBkYXRlKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFssIHBsdWdpbl0gb2YgdGhpcy5wbHVnaW5zKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBsdWdpbi5wbGF5KSB7XG4gICAgICAgICAgICAgICAgICAgIHBsdWdpbi5wbGF5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZHJhdyhuZWVkc1VwZGF0ZSB8fCBmYWxzZSk7XG4gICAgfVxuICAgIHBhdXNlKCkge1xuICAgICAgICBpZiAodGhpcy5kcmF3QW5pbWF0aW9uRnJhbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgKDAsIFV0aWxzXzEuY2FuY2VsQW5pbWF0aW9uKSgpKHRoaXMuZHJhd0FuaW1hdGlvbkZyYW1lKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmRyYXdBbmltYXRpb25GcmFtZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5wYXVzZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IFssIHBsdWdpbl0gb2YgdGhpcy5wbHVnaW5zKSB7XG4gICAgICAgICAgICBpZiAocGx1Z2luLnBhdXNlKSB7XG4gICAgICAgICAgICAgICAgcGx1Z2luLnBhdXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLnBhZ2VIaWRkZW4pIHtcbiAgICAgICAgICAgIHRoaXMucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkcmF3KGZvcmNlKSB7XG4gICAgICAgIGxldCByZWZyZXNoVGltZSA9IGZvcmNlO1xuICAgICAgICB0aGlzLmRyYXdBbmltYXRpb25GcmFtZSA9ICgwLCBVdGlsc18xLmFuaW1hdGUpKCkoKHRpbWVzdGFtcCkgPT4ge1xuICAgICAgICAgICAgaWYgKHJlZnJlc2hUaW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0RnJhbWVUaW1lID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHJlZnJlc2hUaW1lID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRyYXdlci5uZXh0RnJhbWUodGltZXN0YW1wKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldEFuaW1hdGlvblN0YXR1cygpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLnBhdXNlZCAmJiAhdGhpcy5wYWdlSGlkZGVuO1xuICAgIH1cbiAgICBzZXROb2lzZShub2lzZU9yR2VuZXJhdG9yLCBpbml0LCB1cGRhdGUpIHtcbiAgICAgICAgdGhpcy5zZXRQYXRoKG5vaXNlT3JHZW5lcmF0b3IsIGluaXQsIHVwZGF0ZSk7XG4gICAgfVxuICAgIHNldFBhdGgocGF0aE9yR2VuZXJhdG9yLCBpbml0LCB1cGRhdGUpIHtcbiAgICAgICAgaWYgKCFwYXRoT3JHZW5lcmF0b3IpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHBhdGhPckdlbmVyYXRvciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aGlzLnBhdGhHZW5lcmF0b3IuZ2VuZXJhdGUgPSBwYXRoT3JHZW5lcmF0b3I7XG4gICAgICAgICAgICBpZiAoaW5pdCkge1xuICAgICAgICAgICAgICAgIHRoaXMucGF0aEdlbmVyYXRvci5pbml0ID0gaW5pdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh1cGRhdGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhdGhHZW5lcmF0b3IudXBkYXRlID0gdXBkYXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHBhdGhPckdlbmVyYXRvci5nZW5lcmF0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMucGF0aEdlbmVyYXRvci5nZW5lcmF0ZSA9IHBhdGhPckdlbmVyYXRvci5nZW5lcmF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwYXRoT3JHZW5lcmF0b3IuaW5pdCkge1xuICAgICAgICAgICAgICAgIHRoaXMucGF0aEdlbmVyYXRvci5pbml0ID0gcGF0aE9yR2VuZXJhdG9yLmluaXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGF0aE9yR2VuZXJhdG9yLnVwZGF0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMucGF0aEdlbmVyYXRvci51cGRhdGUgPSBwYXRoT3JHZW5lcmF0b3IudXBkYXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICB0aGlzLmNhbnZhcy5kZXN0cm95KCk7XG4gICAgICAgIGZvciAoY29uc3QgWywgZHJhd2VyXSBvZiB0aGlzLmRyYXdlcnMpIHtcbiAgICAgICAgICAgIGlmIChkcmF3ZXIuZGVzdHJveSkge1xuICAgICAgICAgICAgICAgIGRyYXdlci5kZXN0cm95KHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHRoaXMuZHJhd2Vycy5rZXlzKCkpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd2Vycy5kZWxldGUoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgfVxuICAgIGV4cG9ydEltZyhjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmV4cG9ydEltYWdlKGNhbGxiYWNrKTtcbiAgICB9XG4gICAgZXhwb3J0SW1hZ2UoY2FsbGJhY2ssIHR5cGUsIHF1YWxpdHkpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5jYW52YXMuZWxlbWVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRvQmxvYihjYWxsYmFjaywgdHlwZSAhPT0gbnVsbCAmJiB0eXBlICE9PSB2b2lkIDAgPyB0eXBlIDogXCJpbWFnZS9wbmdcIiwgcXVhbGl0eSk7XG4gICAgfVxuICAgIGV4cG9ydENvbmZpZ3VyYXRpb24oKSB7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLmFjdHVhbE9wdGlvbnMsIHVuZGVmaW5lZCwgMik7XG4gICAgfVxuICAgIHJlZnJlc2goKSB7XG4gICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5zdGFydCgpO1xuICAgIH1cbiAgICByZXNldCgpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IG5ldyBPcHRpb25zXzEuT3B0aW9ucygpO1xuICAgICAgICByZXR1cm4gdGhpcy5yZWZyZXNoKCk7XG4gICAgfVxuICAgIHN0b3AoKSB7XG4gICAgICAgIGlmICghdGhpcy5zdGFydGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5maXJzdFN0YXJ0ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zdGFydGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMucmVtb3ZlTGlzdGVuZXJzKCk7XG4gICAgICAgIHRoaXMucGF1c2UoKTtcbiAgICAgICAgdGhpcy5wYXJ0aWNsZXMuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5jYW52YXMuY2xlYXIoKTtcbiAgICAgICAgaWYgKHRoaXMuaW50ZXJhY3Rpdml0eS5lbGVtZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgJiYgdGhpcy5pbnRlcnNlY3Rpb25PYnNlcnZlcikge1xuICAgICAgICAgICAgdGhpcy5pbnRlcnNlY3Rpb25PYnNlcnZlci5vYnNlcnZlKHRoaXMuaW50ZXJhY3Rpdml0eS5lbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IFssIHBsdWdpbl0gb2YgdGhpcy5wbHVnaW5zKSB7XG4gICAgICAgICAgICBpZiAocGx1Z2luLnN0b3ApIHtcbiAgICAgICAgICAgICAgICBwbHVnaW4uc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHRoaXMucGx1Z2lucy5rZXlzKCkpIHtcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucy5kZWxldGUoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBhcnRpY2xlcy5saW5rc0NvbG9ycyA9IG5ldyBNYXAoKTtcbiAgICAgICAgZGVsZXRlIHRoaXMucGFydGljbGVzLmdyYWJMaW5lQ29sb3I7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnBhcnRpY2xlcy5saW5rc0NvbG9yO1xuICAgICAgICB0aGlzLl9zb3VyY2VPcHRpb25zID0gdGhpcy5fb3B0aW9ucztcbiAgICB9XG4gICAgYXN5bmMgbG9hZFRoZW1lKG5hbWUpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50VGhlbWUgPSBuYW1lO1xuICAgICAgICBhd2FpdCB0aGlzLnJlZnJlc2goKTtcbiAgICB9XG4gICAgYXN5bmMgc3RhcnQoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXJ0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCB0aGlzLmluaXQoKTtcbiAgICAgICAgdGhpcy5zdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5ldmVudExpc3RlbmVycy5hZGRMaXN0ZW5lcnMoKTtcbiAgICAgICAgaWYgKHRoaXMuaW50ZXJhY3Rpdml0eS5lbGVtZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgJiYgdGhpcy5pbnRlcnNlY3Rpb25PYnNlcnZlcikge1xuICAgICAgICAgICAgdGhpcy5pbnRlcnNlY3Rpb25PYnNlcnZlci5vYnNlcnZlKHRoaXMuaW50ZXJhY3Rpdml0eS5lbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IFssIHBsdWdpbl0gb2YgdGhpcy5wbHVnaW5zKSB7XG4gICAgICAgICAgICBpZiAocGx1Z2luLnN0YXJ0QXN5bmMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHBsdWdpbi5zdGFydEFzeW5jKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwbHVnaW4uc3RhcnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHBsdWdpbi5zdGFydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMucGxheSgpO1xuICAgIH1cbiAgICBhZGRDbGlja0hhbmRsZXIoY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3QgZWwgPSB0aGlzLmludGVyYWN0aXZpdHkuZWxlbWVudDtcbiAgICAgICAgaWYgKCFlbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNsaWNrT3JUb3VjaEhhbmRsZXIgPSAoZSwgcG9zLCByYWRpdXMpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHB4UmF0aW8gPSB0aGlzLnJldGluYS5waXhlbFJhdGlvLCBwb3NSZXRpbmEgPSB7XG4gICAgICAgICAgICAgICAgeDogcG9zLnggKiBweFJhdGlvLFxuICAgICAgICAgICAgICAgIHk6IHBvcy55ICogcHhSYXRpbyxcbiAgICAgICAgICAgIH0sIHBhcnRpY2xlcyA9IHRoaXMucGFydGljbGVzLnF1YWRUcmVlLnF1ZXJ5Q2lyY2xlKHBvc1JldGluYSwgcmFkaXVzICogcHhSYXRpbyk7XG4gICAgICAgICAgICBjYWxsYmFjayhlLCBwYXJ0aWNsZXMpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBjbGlja0hhbmRsZXIgPSAoZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuZGVzdHJveWVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbW91c2VFdmVudCA9IGU7XG4gICAgICAgICAgICBjb25zdCBwb3MgPSB7XG4gICAgICAgICAgICAgICAgeDogbW91c2VFdmVudC5vZmZzZXRYIHx8IG1vdXNlRXZlbnQuY2xpZW50WCxcbiAgICAgICAgICAgICAgICB5OiBtb3VzZUV2ZW50Lm9mZnNldFkgfHwgbW91c2VFdmVudC5jbGllbnRZLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNsaWNrT3JUb3VjaEhhbmRsZXIoZSwgcG9zLCAxKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgdG91Y2hTdGFydEhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0b3VjaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRvdWNoTW92ZWQgPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgdG91Y2hNb3ZlSGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRvdWNoTW92ZWQgPSB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCB0b3VjaEVuZEhhbmRsZXIgPSAoZSkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgICAgICBpZiAodGhpcy5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodG91Y2hlZCAmJiAhdG91Y2hNb3ZlZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvdWNoRXZlbnQgPSBlO1xuICAgICAgICAgICAgICAgIGxldCBsYXN0VG91Y2ggPSB0b3VjaEV2ZW50LnRvdWNoZXNbdG91Y2hFdmVudC50b3VjaGVzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgIGlmICghbGFzdFRvdWNoKSB7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RUb3VjaCA9IHRvdWNoRXZlbnQuY2hhbmdlZFRvdWNoZXNbdG91Y2hFdmVudC5jaGFuZ2VkVG91Y2hlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFsYXN0VG91Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBjYW52YXNSZWN0ID0gKF9hID0gdGhpcy5jYW52YXMuZWxlbWVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgeDogbGFzdFRvdWNoLmNsaWVudFggLSAoKF9iID0gY2FudmFzUmVjdCA9PT0gbnVsbCB8fCBjYW52YXNSZWN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjYW52YXNSZWN0LmxlZnQpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IDApLFxuICAgICAgICAgICAgICAgICAgICB5OiBsYXN0VG91Y2guY2xpZW50WSAtICgoX2MgPSBjYW52YXNSZWN0ID09PSBudWxsIHx8IGNhbnZhc1JlY3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNhbnZhc1JlY3QudG9wKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAwKSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNsaWNrT3JUb3VjaEhhbmRsZXIoZSwgcG9zLCBNYXRoLm1heChsYXN0VG91Y2gucmFkaXVzWCwgbGFzdFRvdWNoLnJhZGl1c1kpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRvdWNoTW92ZWQgPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgdG91Y2hDYW5jZWxIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuZGVzdHJveWVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdG91Y2hNb3ZlZCA9IGZhbHNlO1xuICAgICAgICB9O1xuICAgICAgICBsZXQgdG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICBsZXQgdG91Y2hNb3ZlZCA9IGZhbHNlO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgY2xpY2tIYW5kbGVyKTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgdG91Y2hTdGFydEhhbmRsZXIpO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIHRvdWNoTW92ZUhhbmRsZXIpO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgdG91Y2hFbmRIYW5kbGVyKTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoY2FuY2VsXCIsIHRvdWNoQ2FuY2VsSGFuZGxlcik7XG4gICAgfVxuICAgIHVwZGF0ZUFjdHVhbE9wdGlvbnMoKSB7XG4gICAgICAgIHRoaXMuYWN0dWFsT3B0aW9ucy5yZXNwb25zaXZlID0gW107XG4gICAgICAgIGNvbnN0IG5ld01heFdpZHRoID0gdGhpcy5hY3R1YWxPcHRpb25zLnNldFJlc3BvbnNpdmUodGhpcy5jYW52YXMuc2l6ZS53aWR0aCwgdGhpcy5yZXRpbmEucGl4ZWxSYXRpbywgdGhpcy5fb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuYWN0dWFsT3B0aW9ucy5zZXRUaGVtZSh0aGlzLmN1cnJlbnRUaGVtZSk7XG4gICAgICAgIGlmICh0aGlzLnJlc3BvbnNpdmVNYXhXaWR0aCAhPSBuZXdNYXhXaWR0aCkge1xuICAgICAgICAgICAgdGhpcy5yZXNwb25zaXZlTWF4V2lkdGggPSBuZXdNYXhXaWR0aDtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgYXN5bmMgaW5pdCgpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IG5ldyBPcHRpb25zXzEuT3B0aW9ucygpO1xuICAgICAgICBmb3IgKGNvbnN0IHByZXNldCBvZiB0aGlzLnByZXNldHMpIHtcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMubG9hZChVdGlsc18xLlBsdWdpbnMuZ2V0UHJlc2V0KHByZXNldCkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNoYXBlcyA9IFV0aWxzXzEuUGx1Z2lucy5nZXRTdXBwb3J0ZWRTaGFwZXMoKTtcbiAgICAgICAgZm9yIChjb25zdCB0eXBlIG9mIHNoYXBlcykge1xuICAgICAgICAgICAgY29uc3QgZHJhd2VyID0gVXRpbHNfMS5QbHVnaW5zLmdldFNoYXBlRHJhd2VyKHR5cGUpO1xuICAgICAgICAgICAgaWYgKGRyYXdlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuZHJhd2Vycy5zZXQodHlwZSwgZHJhd2VyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9vcHRpb25zLmxvYWQodGhpcy5faW5pdGlhbFNvdXJjZU9wdGlvbnMpO1xuICAgICAgICB0aGlzLl9vcHRpb25zLmxvYWQodGhpcy5fc291cmNlT3B0aW9ucyk7XG4gICAgICAgIHRoaXMuYWN0dWFsT3B0aW9ucyA9IG5ldyBPcHRpb25zXzEuT3B0aW9ucygpO1xuICAgICAgICB0aGlzLmFjdHVhbE9wdGlvbnMubG9hZCh0aGlzLl9vcHRpb25zKTtcbiAgICAgICAgdGhpcy5yZXRpbmEuaW5pdCgpO1xuICAgICAgICB0aGlzLmNhbnZhcy5pbml0KCk7XG4gICAgICAgIHRoaXMudXBkYXRlQWN0dWFsT3B0aW9ucygpO1xuICAgICAgICB0aGlzLmNhbnZhcy5pbml0QmFja2dyb3VuZCgpO1xuICAgICAgICB0aGlzLmNhbnZhcy5yZXNpemUoKTtcbiAgICAgICAgdGhpcy56TGF5ZXJzID0gdGhpcy5hY3R1YWxPcHRpb25zLnpMYXllcnM7XG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSAoMCwgVXRpbHNfMS5nZXRSYW5nZVZhbHVlKSh0aGlzLmFjdHVhbE9wdGlvbnMuZHVyYXRpb24pO1xuICAgICAgICB0aGlzLmxpZmVUaW1lID0gMDtcbiAgICAgICAgdGhpcy5mcHNMaW1pdCA9IHRoaXMuYWN0dWFsT3B0aW9ucy5mcHNMaW1pdCA+IDAgPyB0aGlzLmFjdHVhbE9wdGlvbnMuZnBzTGltaXQgOiA2MDtcbiAgICAgICAgY29uc3QgYXZhaWxhYmxlUGx1Z2lucyA9IFV0aWxzXzEuUGx1Z2lucy5nZXRBdmFpbGFibGVQbHVnaW5zKHRoaXMpO1xuICAgICAgICBmb3IgKGNvbnN0IFtpZCwgcGx1Z2luXSBvZiBhdmFpbGFibGVQbHVnaW5zKSB7XG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMuc2V0KGlkLCBwbHVnaW4pO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgWywgZHJhd2VyXSBvZiB0aGlzLmRyYXdlcnMpIHtcbiAgICAgICAgICAgIGlmIChkcmF3ZXIuaW5pdCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IGRyYXdlci5pbml0KHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgWywgcGx1Z2luXSBvZiB0aGlzLnBsdWdpbnMpIHtcbiAgICAgICAgICAgIGlmIChwbHVnaW4uaW5pdCkge1xuICAgICAgICAgICAgICAgIHBsdWdpbi5pbml0KHRoaXMuYWN0dWFsT3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwbHVnaW4uaW5pdEFzeW5jICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBwbHVnaW4uaW5pdEFzeW5jKHRoaXMuYWN0dWFsT3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGF0aE9wdGlvbnMgPSB0aGlzLmFjdHVhbE9wdGlvbnMucGFydGljbGVzLm1vdmUucGF0aDtcbiAgICAgICAgaWYgKHBhdGhPcHRpb25zLmdlbmVyYXRvcikge1xuICAgICAgICAgICAgY29uc3QgY3VzdG9tR2VuZXJhdG9yID0gVXRpbHNfMS5QbHVnaW5zLmdldFBhdGhHZW5lcmF0b3IocGF0aE9wdGlvbnMuZ2VuZXJhdG9yKTtcbiAgICAgICAgICAgIGlmIChjdXN0b21HZW5lcmF0b3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoY3VzdG9tR2VuZXJhdG9yLmluaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXRoR2VuZXJhdG9yLmluaXQgPSBjdXN0b21HZW5lcmF0b3IuaW5pdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGN1c3RvbUdlbmVyYXRvci5nZW5lcmF0ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhdGhHZW5lcmF0b3IuZ2VuZXJhdGUgPSBjdXN0b21HZW5lcmF0b3IuZ2VuZXJhdGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjdXN0b21HZW5lcmF0b3IudXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGF0aEdlbmVyYXRvci51cGRhdGUgPSBjdXN0b21HZW5lcmF0b3IudXBkYXRlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBhcnRpY2xlcy5pbml0KCk7XG4gICAgICAgIHRoaXMucGFydGljbGVzLnNldERlbnNpdHkoKTtcbiAgICAgICAgZm9yIChjb25zdCBbLCBwbHVnaW5dIG9mIHRoaXMucGx1Z2lucykge1xuICAgICAgICAgICAgaWYgKHBsdWdpbi5wYXJ0aWNsZXNTZXR1cCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcGx1Z2luLnBhcnRpY2xlc1NldHVwKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaW50ZXJzZWN0aW9uTWFuYWdlcihlbnRyaWVzKSB7XG4gICAgICAgIGlmICghdGhpcy5hY3R1YWxPcHRpb25zLnBhdXNlT25PdXRzaWRlVmlld3BvcnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpIHtcbiAgICAgICAgICAgIGlmIChlbnRyeS50YXJnZXQgIT09IHRoaXMuaW50ZXJhY3Rpdml0eS5lbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucGF1c2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQ29udGFpbmVyID0gQ29udGFpbmVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkV4dGVybmFsSW50ZXJhY3RvckJhc2UgPSB2b2lkIDA7XG5jb25zdCBFbnVtc18xID0gcmVxdWlyZShcIi4uL0VudW1zXCIpO1xuY2xhc3MgRXh0ZXJuYWxJbnRlcmFjdG9yQmFzZSB7XG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICB0aGlzLnR5cGUgPSBFbnVtc18xLkludGVyYWN0b3JUeXBlLkV4dGVybmFsO1xuICAgIH1cbn1cbmV4cG9ydHMuRXh0ZXJuYWxJbnRlcmFjdG9yQmFzZSA9IEV4dGVybmFsSW50ZXJhY3RvckJhc2U7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRnJhbWVNYW5hZ2VyID0gdm9pZCAwO1xuY2xhc3MgRnJhbWVNYW5hZ2VyIHtcbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXIpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgfVxuICAgIG5leHRGcmFtZSh0aW1lc3RhbXApIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXI7XG4gICAgICAgICAgICBpZiAoY29udGFpbmVyLmxhc3RGcmFtZVRpbWUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgIHRpbWVzdGFtcCA8IGNvbnRhaW5lci5sYXN0RnJhbWVUaW1lICsgMTAwMCAvIGNvbnRhaW5lci5mcHNMaW1pdCkge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5kcmF3KGZhbHNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAoX2EgPSBjb250YWluZXIubGFzdEZyYW1lVGltZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogKGNvbnRhaW5lci5sYXN0RnJhbWVUaW1lID0gdGltZXN0YW1wKTtcbiAgICAgICAgICAgIGNvbnN0IGRlbHRhVmFsdWUgPSB0aW1lc3RhbXAgLSBjb250YWluZXIubGFzdEZyYW1lVGltZTtcbiAgICAgICAgICAgIGNvbnN0IGRlbHRhID0ge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBkZWx0YVZhbHVlLFxuICAgICAgICAgICAgICAgIGZhY3RvcjogKDYwICogZGVsdGFWYWx1ZSkgLyAxMDAwLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnRhaW5lci5saWZlVGltZSArPSBkZWx0YS52YWx1ZTtcbiAgICAgICAgICAgIGNvbnRhaW5lci5sYXN0RnJhbWVUaW1lID0gdGltZXN0YW1wO1xuICAgICAgICAgICAgaWYgKGRlbHRhVmFsdWUgPiAxMDAwKSB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmRyYXcoZmFsc2UpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRhaW5lci5wYXJ0aWNsZXMuZHJhdyhkZWx0YSk7XG4gICAgICAgICAgICBpZiAoY29udGFpbmVyLmR1cmF0aW9uID4gMCAmJiBjb250YWluZXIubGlmZVRpbWUgPiBjb250YWluZXIuZHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBjb250YWluZXIuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb250YWluZXIuZ2V0QW5pbWF0aW9uU3RhdHVzKCkpIHtcbiAgICAgICAgICAgICAgICBjb250YWluZXIuZHJhdyhmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJ0c1BhcnRpY2xlcyBlcnJvciBpbiBhbmltYXRpb24gbG9vcFwiLCBlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuRnJhbWVNYW5hZ2VyID0gRnJhbWVNYW5hZ2VyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkludGVyYWN0aW9uTWFuYWdlciA9IHZvaWQgMDtcbmNvbnN0IFV0aWxzXzEgPSByZXF1aXJlKFwiLi4vVXRpbHNcIik7XG5jb25zdCBFbnVtc18xID0gcmVxdWlyZShcIi4uL0VudW1zXCIpO1xuY2xhc3MgSW50ZXJhY3Rpb25NYW5hZ2VyIHtcbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXIpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgICAgIHRoaXMuZXh0ZXJuYWxJbnRlcmFjdG9ycyA9IFtdO1xuICAgICAgICB0aGlzLnBhcnRpY2xlSW50ZXJhY3RvcnMgPSBbXTtcbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgfVxuICAgIGluaXQoKSB7XG4gICAgICAgIGNvbnN0IGludGVyYWN0b3JzID0gVXRpbHNfMS5QbHVnaW5zLmdldEludGVyYWN0b3JzKHRoaXMuY29udGFpbmVyLCB0cnVlKTtcbiAgICAgICAgZm9yIChjb25zdCBpbnRlcmFjdG9yIG9mIGludGVyYWN0b3JzKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGludGVyYWN0b3IudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgRW51bXNfMS5JbnRlcmFjdG9yVHlwZS5FeHRlcm5hbDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5leHRlcm5hbEludGVyYWN0b3JzLnB1c2goaW50ZXJhY3Rvcik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgRW51bXNfMS5JbnRlcmFjdG9yVHlwZS5QYXJ0aWNsZXM6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFydGljbGVJbnRlcmFjdG9ycy5wdXNoKGludGVyYWN0b3IpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBleHRlcm5hbEludGVyYWN0KGRlbHRhKSB7XG4gICAgICAgIGZvciAoY29uc3QgaW50ZXJhY3RvciBvZiB0aGlzLmV4dGVybmFsSW50ZXJhY3RvcnMpIHtcbiAgICAgICAgICAgIGlmIChpbnRlcmFjdG9yLmlzRW5hYmxlZCgpKSB7XG4gICAgICAgICAgICAgICAgaW50ZXJhY3Rvci5pbnRlcmFjdChkZWx0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcGFydGljbGVzSW50ZXJhY3QocGFydGljbGUsIGRlbHRhKSB7XG4gICAgICAgIGZvciAoY29uc3QgaW50ZXJhY3RvciBvZiB0aGlzLmV4dGVybmFsSW50ZXJhY3RvcnMpIHtcbiAgICAgICAgICAgIGludGVyYWN0b3IucmVzZXQocGFydGljbGUpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgaW50ZXJhY3RvciBvZiB0aGlzLnBhcnRpY2xlSW50ZXJhY3RvcnMpIHtcbiAgICAgICAgICAgIGlmIChpbnRlcmFjdG9yLmlzRW5hYmxlZChwYXJ0aWNsZSkpIHtcbiAgICAgICAgICAgICAgICBpbnRlcmFjdG9yLmludGVyYWN0KHBhcnRpY2xlLCBkZWx0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkludGVyYWN0aW9uTWFuYWdlciA9IEludGVyYWN0aW9uTWFuYWdlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9Db2xvcnNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0dyYWRpZW50c1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vSUF0dHJhY3RcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0lCb3VuZHNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0lCdWJibGVcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0lCdWJibGVQYXJ0aWNsZURhdGFcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0lDaXJjbGVCb3VuY2VyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9JQ29udGFpbmVySW50ZXJhY3Rpdml0eVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vSUNvbnRhaW5lclBsdWdpblwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vSUNvb3JkaW5hdGVzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9JRGVsdGFcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0lEaW1lbnNpb25cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0lEaXN0YW5jZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vSUV4dGVybmFsSW50ZXJhY3RvclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vSUludGVyYWN0b3JcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0lNb3VzZURhdGFcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0lNb3ZlUGF0aEdlbmVyYXRvclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vSVBhcnRpY2xlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9JUGFydGljbGVHcmFkaWVudEFuaW1hdGlvblwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vSVBhcnRpY2xlR3JhZGllbnRDb2xvckFuaW1hdGlvblwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vSVBhcnRpY2xlSHNsQW5pbWF0aW9uXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9JUGFydGljbGVMaWZlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9JUGFydGljbGVMb29wc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vSVBhcnRpY2xlUmV0aW5hUHJvcHNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0lQYXJ0aWNsZVNwaW5cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0lQYXJ0aWNsZVVwZGF0ZXJcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0lQYXJ0aWNsZVZhbHVlQW5pbWF0aW9uXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9JUGFydGljbGVzSW50ZXJhY3RvclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vSVBsdWdpblwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vSVJhbmdlVmFsdWVcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0lSZWN0U2lkZVJlc3VsdFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vSVJlcHVsc2VcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0lTaGFwZURyYXdlclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vSVNoYXBlVmFsdWVzXCIpLCBleHBvcnRzKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Mb2FkZXIgPSB2b2lkIDA7XG5jb25zdCBDb250YWluZXJfMSA9IHJlcXVpcmUoXCIuL0NvbnRhaW5lclwiKTtcbmNvbnN0IFV0aWxzXzEgPSByZXF1aXJlKFwiLi4vVXRpbHNcIik7XG5jb25zdCB0c1BhcnRpY2xlc0RvbSA9IFtdO1xuZnVuY3Rpb24gZmV0Y2hFcnJvcihzdGF0dXNDb2RlKSB7XG4gICAgY29uc29sZS5lcnJvcihgRXJyb3IgdHNQYXJ0aWNsZXMgLSBmZXRjaCBzdGF0dXM6ICR7c3RhdHVzQ29kZX1gKTtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgdHNQYXJ0aWNsZXMgLSBGaWxlIGNvbmZpZyBub3QgZm91bmRcIik7XG59XG5jbGFzcyBMb2FkZXIge1xuICAgIHN0YXRpYyBkb20oKSB7XG4gICAgICAgIHJldHVybiB0c1BhcnRpY2xlc0RvbTtcbiAgICB9XG4gICAgc3RhdGljIGRvbUl0ZW0oaW5kZXgpIHtcbiAgICAgICAgY29uc3QgZG9tID0gTG9hZGVyLmRvbSgpO1xuICAgICAgICBjb25zdCBpdGVtID0gZG9tW2luZGV4XTtcbiAgICAgICAgaWYgKGl0ZW0gJiYgIWl0ZW0uZGVzdHJveWVkKSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgfVxuICAgICAgICBkb20uc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gICAgc3RhdGljIGFzeW5jIGxvYWRPcHRpb25zKHBhcmFtcykge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgY29uc3QgdGFnSWQgPSAoX2EgPSBwYXJhbXMudGFnSWQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGB0c3BhcnRpY2xlcyR7TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDApfWA7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucywgaW5kZXggfSA9IHBhcmFtcztcbiAgICAgICAgbGV0IGRvbUNvbnRhaW5lciA9IChfYiA9IHBhcmFtcy5lbGVtZW50KSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YWdJZCk7XG4gICAgICAgIGlmICghZG9tQ29udGFpbmVyKSB7XG4gICAgICAgICAgICBkb21Db250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgZG9tQ29udGFpbmVyLmlkID0gdGFnSWQ7XG4gICAgICAgICAgICAoX2MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYm9keVwiKSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmFwcGVuZChkb21Db250YWluZXIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGN1cnJlbnRPcHRpb25zID0gb3B0aW9ucyBpbnN0YW5jZW9mIEFycmF5ID8gKDAsIFV0aWxzXzEuaXRlbUZyb21BcnJheSkob3B0aW9ucywgaW5kZXgpIDogb3B0aW9ucztcbiAgICAgICAgY29uc3QgZG9tID0gTG9hZGVyLmRvbSgpO1xuICAgICAgICBjb25zdCBvbGRJbmRleCA9IGRvbS5maW5kSW5kZXgoKHYpID0+IHYuaWQgPT09IHRhZ0lkKTtcbiAgICAgICAgaWYgKG9sZEluZGV4ID49IDApIHtcbiAgICAgICAgICAgIGNvbnN0IG9sZCA9IExvYWRlci5kb21JdGVtKG9sZEluZGV4KTtcbiAgICAgICAgICAgIGlmIChvbGQgJiYgIW9sZC5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgICBvbGQuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIGRvbS5zcGxpY2Uob2xkSW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBjYW52YXNFbDtcbiAgICAgICAgbGV0IGdlbmVyYXRlZENhbnZhcztcbiAgICAgICAgaWYgKGRvbUNvbnRhaW5lci50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiY2FudmFzXCIpIHtcbiAgICAgICAgICAgIGNhbnZhc0VsID0gZG9tQ29udGFpbmVyO1xuICAgICAgICAgICAgZ2VuZXJhdGVkQ2FudmFzID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBleGlzdGluZ0NhbnZhc2VzID0gZG9tQ29udGFpbmVyLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiY2FudmFzXCIpO1xuICAgICAgICAgICAgaWYgKGV4aXN0aW5nQ2FudmFzZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY2FudmFzRWwgPSBleGlzdGluZ0NhbnZhc2VzWzBdO1xuICAgICAgICAgICAgICAgIGlmICghY2FudmFzRWwuY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbnZhc0VsLmNsYXNzTmFtZSA9IFV0aWxzXzEuQ29uc3RhbnRzLmNhbnZhc0NsYXNzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBnZW5lcmF0ZWRDYW52YXMgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGdlbmVyYXRlZENhbnZhcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgY2FudmFzRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuICAgICAgICAgICAgICAgIGNhbnZhc0VsLmNsYXNzTmFtZSA9IFV0aWxzXzEuQ29uc3RhbnRzLmNhbnZhc0NsYXNzO1xuICAgICAgICAgICAgICAgIGNhbnZhc0VsLnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG4gICAgICAgICAgICAgICAgY2FudmFzRWwuc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XG4gICAgICAgICAgICAgICAgZG9tQ29udGFpbmVyLmFwcGVuZENoaWxkKGNhbnZhc0VsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdJdGVtID0gbmV3IENvbnRhaW5lcl8xLkNvbnRhaW5lcih0YWdJZCwgY3VycmVudE9wdGlvbnMpO1xuICAgICAgICBpZiAob2xkSW5kZXggPj0gMCkge1xuICAgICAgICAgICAgZG9tLnNwbGljZShvbGRJbmRleCwgMCwgbmV3SXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkb20ucHVzaChuZXdJdGVtKTtcbiAgICAgICAgfVxuICAgICAgICBuZXdJdGVtLmNhbnZhcy5sb2FkQ2FudmFzKGNhbnZhc0VsLCBnZW5lcmF0ZWRDYW52YXMpO1xuICAgICAgICBhd2FpdCBuZXdJdGVtLnN0YXJ0KCk7XG4gICAgICAgIHJldHVybiBuZXdJdGVtO1xuICAgIH1cbiAgICBzdGF0aWMgYXN5bmMgbG9hZFJlbW90ZU9wdGlvbnMocGFyYW1zKSB7XG4gICAgICAgIGNvbnN0IHsgdXJsOiBqc29uVXJsLCBpbmRleCB9ID0gcGFyYW1zO1xuICAgICAgICBjb25zdCB1cmwgPSBqc29uVXJsIGluc3RhbmNlb2YgQXJyYXkgPyAoMCwgVXRpbHNfMS5pdGVtRnJvbUFycmF5KShqc29uVXJsLCBpbmRleCkgOiBqc29uVXJsO1xuICAgICAgICBpZiAoIXVybCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsKTtcbiAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgZmV0Y2hFcnJvcihyZXNwb25zZS5zdGF0dXMpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIHJldHVybiBhd2FpdCBMb2FkZXIubG9hZE9wdGlvbnMoe1xuICAgICAgICAgICAgdGFnSWQ6IHBhcmFtcy50YWdJZCxcbiAgICAgICAgICAgIGVsZW1lbnQ6IHBhcmFtcy5lbGVtZW50LFxuICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICBvcHRpb25zOiBkYXRhLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdGljIGxvYWQodGFnSWQsIG9wdGlvbnMsIGluZGV4KSB7XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHsgaW5kZXggfTtcbiAgICAgICAgaWYgKHR5cGVvZiB0YWdJZCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgcGFyYW1zLnRhZ0lkID0gdGFnSWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwYXJhbXMub3B0aW9ucyA9IHRhZ0lkO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgcGFyYW1zLmluZGV4ID0gb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgPyBvcHRpb25zIDogcGFyYW1zLmluZGV4O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGFyYW1zLm9wdGlvbnMgPSBvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCA/IG9wdGlvbnMgOiBwYXJhbXMub3B0aW9ucztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5sb2FkT3B0aW9ucyhwYXJhbXMpO1xuICAgIH1cbiAgICBzdGF0aWMgYXN5bmMgc2V0KGlkLCBkb21Db250YWluZXIsIG9wdGlvbnMsIGluZGV4KSB7XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHsgaW5kZXggfTtcbiAgICAgICAgaWYgKHR5cGVvZiBpZCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgcGFyYW1zLnRhZ0lkID0gaWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwYXJhbXMuZWxlbWVudCA9IGlkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkb21Db250YWluZXIgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgcGFyYW1zLmVsZW1lbnQgPSBkb21Db250YWluZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwYXJhbXMub3B0aW9ucyA9IGRvbUNvbnRhaW5lcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHBhcmFtcy5pbmRleCA9IG9wdGlvbnM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwYXJhbXMub3B0aW9ucyA9IG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwID8gb3B0aW9ucyA6IHBhcmFtcy5vcHRpb25zO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmxvYWRPcHRpb25zKHBhcmFtcyk7XG4gICAgfVxuICAgIHN0YXRpYyBhc3luYyBsb2FkSlNPTih0YWdJZCwganNvblVybCwgaW5kZXgpIHtcbiAgICAgICAgbGV0IHVybCwgaWQ7XG4gICAgICAgIGlmICh0eXBlb2YganNvblVybCA9PT0gXCJudW1iZXJcIiB8fCBqc29uVXJsID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHVybCA9IHRhZ0lkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWQgPSB0YWdJZDtcbiAgICAgICAgICAgIHVybCA9IGpzb25Vcmw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGF3YWl0IExvYWRlci5sb2FkUmVtb3RlT3B0aW9ucyh7IHRhZ0lkOiBpZCwgdXJsLCBpbmRleCB9KTtcbiAgICB9XG4gICAgc3RhdGljIGFzeW5jIHNldEpTT04oaWQsIGRvbUNvbnRhaW5lciwganNvblVybCwgaW5kZXgpIHtcbiAgICAgICAgbGV0IHVybCwgbmV3SWQsIG5ld0luZGV4LCBlbGVtZW50O1xuICAgICAgICBpZiAoaWQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgZWxlbWVudCA9IGlkO1xuICAgICAgICAgICAgdXJsID0gZG9tQ29udGFpbmVyO1xuICAgICAgICAgICAgbmV3SW5kZXggPSBqc29uVXJsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbmV3SWQgPSBpZDtcbiAgICAgICAgICAgIGVsZW1lbnQgPSBkb21Db250YWluZXI7XG4gICAgICAgICAgICB1cmwgPSBqc29uVXJsO1xuICAgICAgICAgICAgbmV3SW5kZXggPSBpbmRleDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXdhaXQgTG9hZGVyLmxvYWRSZW1vdGVPcHRpb25zKHsgdGFnSWQ6IG5ld0lkLCB1cmwsIGluZGV4OiBuZXdJbmRleCwgZWxlbWVudCB9KTtcbiAgICB9XG4gICAgc3RhdGljIHNldE9uQ2xpY2tIYW5kbGVyKGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IGRvbSA9IExvYWRlci5kb20oKTtcbiAgICAgICAgaWYgKGRvbS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbiBvbmx5IHNldCBjbGljayBoYW5kbGVycyBhZnRlciBjYWxsaW5nIHRzUGFydGljbGVzLmxvYWQoKSBvciB0c1BhcnRpY2xlcy5sb2FkSlNPTigpXCIpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgZG9tSXRlbSBvZiBkb20pIHtcbiAgICAgICAgICAgIGRvbUl0ZW0uYWRkQ2xpY2tIYW5kbGVyKGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuTG9hZGVyID0gTG9hZGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBhcnRpY2xlID0gdm9pZCAwO1xuY29uc3QgUGFydGljbGVzT3B0aW9uc18xID0gcmVxdWlyZShcIi4uL09wdGlvbnMvQ2xhc3Nlcy9QYXJ0aWNsZXMvUGFydGljbGVzT3B0aW9uc1wiKTtcbmNvbnN0IFNoYXBlXzEgPSByZXF1aXJlKFwiLi4vT3B0aW9ucy9DbGFzc2VzL1BhcnRpY2xlcy9TaGFwZS9TaGFwZVwiKTtcbmNvbnN0IEVudW1zXzEgPSByZXF1aXJlKFwiLi4vRW51bXNcIik7XG5jb25zdCBVdGlsc18xID0gcmVxdWlyZShcIi4uL1V0aWxzXCIpO1xuY29uc3QgVmVjdG9yXzEgPSByZXF1aXJlKFwiLi9QYXJ0aWNsZS9WZWN0b3JcIik7XG5jb25zdCBWZWN0b3IzZF8xID0gcmVxdWlyZShcIi4vUGFydGljbGUvVmVjdG9yM2RcIik7XG5jb25zdCBmaXhPdXRNb2RlID0gKGRhdGEpID0+IHtcbiAgICBpZiAoKDAsIFV0aWxzXzEuaXNJbkFycmF5KShkYXRhLm91dE1vZGUsIGRhdGEuY2hlY2tNb2RlcykgfHwgKDAsIFV0aWxzXzEuaXNJbkFycmF5KShkYXRhLm91dE1vZGUsIGRhdGEuY2hlY2tNb2RlcykpIHtcbiAgICAgICAgaWYgKGRhdGEuY29vcmQgPiBkYXRhLm1heENvb3JkIC0gZGF0YS5yYWRpdXMgKiAyKSB7XG4gICAgICAgICAgICBkYXRhLnNldENiKC1kYXRhLnJhZGl1cyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGF0YS5jb29yZCA8IGRhdGEucmFkaXVzICogMikge1xuICAgICAgICAgICAgZGF0YS5zZXRDYihkYXRhLnJhZGl1cyk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuY2xhc3MgUGFydGljbGUge1xuICAgIGNvbnN0cnVjdG9yKGlkLCBjb250YWluZXIsIHBvc2l0aW9uLCBvdmVycmlkZU9wdGlvbnMsIGdyb3VwKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2gsIF9qO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICB0aGlzLmdyb3VwID0gZ3JvdXA7XG4gICAgICAgIHRoaXMuZmlsbCA9IHRydWU7XG4gICAgICAgIHRoaXMuY2xvc2UgPSB0cnVlO1xuICAgICAgICB0aGlzLmxhc3RQYXRoVGltZSA9IDA7XG4gICAgICAgIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMudW5icmVha2FibGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zcGxpdENvdW50ID0gMDtcbiAgICAgICAgdGhpcy5taXNwbGFjZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5yZXRpbmEgPSB7XG4gICAgICAgICAgICBtYXhEaXN0YW5jZToge30sXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHB4UmF0aW8gPSBjb250YWluZXIucmV0aW5hLnBpeGVsUmF0aW87XG4gICAgICAgIGNvbnN0IG1haW5PcHRpb25zID0gY29udGFpbmVyLmFjdHVhbE9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHBhcnRpY2xlc09wdGlvbnMgPSBuZXcgUGFydGljbGVzT3B0aW9uc18xLlBhcnRpY2xlc09wdGlvbnMoKTtcbiAgICAgICAgcGFydGljbGVzT3B0aW9ucy5sb2FkKG1haW5PcHRpb25zLnBhcnRpY2xlcyk7XG4gICAgICAgIGNvbnN0IHNoYXBlVHlwZSA9IHBhcnRpY2xlc09wdGlvbnMuc2hhcGUudHlwZTtcbiAgICAgICAgY29uc3QgcmVkdWNlRHVwbGljYXRlcyA9IHBhcnRpY2xlc09wdGlvbnMucmVkdWNlRHVwbGljYXRlcztcbiAgICAgICAgdGhpcy5zaGFwZSA9IHNoYXBlVHlwZSBpbnN0YW5jZW9mIEFycmF5ID8gKDAsIFV0aWxzXzEuaXRlbUZyb21BcnJheSkoc2hhcGVUeXBlLCB0aGlzLmlkLCByZWR1Y2VEdXBsaWNhdGVzKSA6IHNoYXBlVHlwZTtcbiAgICAgICAgaWYgKG92ZXJyaWRlT3B0aW9ucyA9PT0gbnVsbCB8fCBvdmVycmlkZU9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG92ZXJyaWRlT3B0aW9ucy5zaGFwZSkge1xuICAgICAgICAgICAgaWYgKG92ZXJyaWRlT3B0aW9ucy5zaGFwZS50eXBlKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3ZlcnJpZGVTaGFwZVR5cGUgPSBvdmVycmlkZU9wdGlvbnMuc2hhcGUudHlwZTtcbiAgICAgICAgICAgICAgICB0aGlzLnNoYXBlID1cbiAgICAgICAgICAgICAgICAgICAgb3ZlcnJpZGVTaGFwZVR5cGUgaW5zdGFuY2VvZiBBcnJheVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAoMCwgVXRpbHNfMS5pdGVtRnJvbUFycmF5KShvdmVycmlkZVNoYXBlVHlwZSwgdGhpcy5pZCwgcmVkdWNlRHVwbGljYXRlcylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogb3ZlcnJpZGVTaGFwZVR5cGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzaGFwZU9wdGlvbnMgPSBuZXcgU2hhcGVfMS5TaGFwZSgpO1xuICAgICAgICAgICAgc2hhcGVPcHRpb25zLmxvYWQob3ZlcnJpZGVPcHRpb25zLnNoYXBlKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnNoYXBlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zaGFwZURhdGEgPSB0aGlzLmxvYWRTaGFwZURhdGEoc2hhcGVPcHRpb25zLCByZWR1Y2VEdXBsaWNhdGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2hhcGVEYXRhID0gdGhpcy5sb2FkU2hhcGVEYXRhKHBhcnRpY2xlc09wdGlvbnMuc2hhcGUsIHJlZHVjZUR1cGxpY2F0ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvdmVycmlkZU9wdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcGFydGljbGVzT3B0aW9ucy5sb2FkKG92ZXJyaWRlT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgoX2EgPSB0aGlzLnNoYXBlRGF0YSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnBhcnRpY2xlcykgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcGFydGljbGVzT3B0aW9ucy5sb2FkKChfYiA9IHRoaXMuc2hhcGVEYXRhKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IucGFydGljbGVzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZpbGwgPSAoX2QgPSAoX2MgPSB0aGlzLnNoYXBlRGF0YSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmZpbGwpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IHRoaXMuZmlsbDtcbiAgICAgICAgdGhpcy5jbG9zZSA9IChfZiA9IChfZSA9IHRoaXMuc2hhcGVEYXRhKSA9PT0gbnVsbCB8fCBfZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2UuY2xvc2UpICE9PSBudWxsICYmIF9mICE9PSB2b2lkIDAgPyBfZiA6IHRoaXMuY2xvc2U7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHBhcnRpY2xlc09wdGlvbnM7XG4gICAgICAgIHRoaXMucGF0aERlbGF5ID0gKDAsIFV0aWxzXzEuZ2V0VmFsdWUpKHRoaXMub3B0aW9ucy5tb3ZlLnBhdGguZGVsYXkpICogMTAwMDtcbiAgICAgICAgY29uc3QgekluZGV4VmFsdWUgPSAoMCwgVXRpbHNfMS5nZXRSYW5nZVZhbHVlKSh0aGlzLm9wdGlvbnMuekluZGV4LnZhbHVlKTtcbiAgICAgICAgY29udGFpbmVyLnJldGluYS5pbml0UGFydGljbGUodGhpcyk7XG4gICAgICAgIGNvbnN0IHNpemVPcHRpb25zID0gdGhpcy5vcHRpb25zLnNpemUsIHNpemVSYW5nZSA9IHNpemVPcHRpb25zLnZhbHVlO1xuICAgICAgICB0aGlzLnNpemUgPSB7XG4gICAgICAgICAgICBlbmFibGU6IHNpemVPcHRpb25zLmFuaW1hdGlvbi5lbmFibGUsXG4gICAgICAgICAgICB2YWx1ZTogKDAsIFV0aWxzXzEuZ2V0VmFsdWUpKHNpemVPcHRpb25zKSAqIGNvbnRhaW5lci5yZXRpbmEucGl4ZWxSYXRpbyxcbiAgICAgICAgICAgIG1heDogKDAsIFV0aWxzXzEuZ2V0UmFuZ2VNYXgpKHNpemVSYW5nZSkgKiBweFJhdGlvLFxuICAgICAgICAgICAgbWluOiAoMCwgVXRpbHNfMS5nZXRSYW5nZU1pbikoc2l6ZVJhbmdlKSAqIHB4UmF0aW8sXG4gICAgICAgICAgICBsb29wczogMCxcbiAgICAgICAgICAgIG1heExvb3BzOiBzaXplT3B0aW9ucy5hbmltYXRpb24uY291bnQsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHNpemVBbmltYXRpb24gPSBzaXplT3B0aW9ucy5hbmltYXRpb247XG4gICAgICAgIGlmIChzaXplQW5pbWF0aW9uLmVuYWJsZSkge1xuICAgICAgICAgICAgdGhpcy5zaXplLnN0YXR1cyA9IEVudW1zXzEuQW5pbWF0aW9uU3RhdHVzLmluY3JlYXNpbmc7XG4gICAgICAgICAgICBzd2l0Y2ggKHNpemVBbmltYXRpb24uc3RhcnRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgRW51bXNfMS5TdGFydFZhbHVlVHlwZS5taW46XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2l6ZS52YWx1ZSA9IHRoaXMuc2l6ZS5taW47XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2l6ZS5zdGF0dXMgPSBFbnVtc18xLkFuaW1hdGlvblN0YXR1cy5pbmNyZWFzaW5nO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEVudW1zXzEuU3RhcnRWYWx1ZVR5cGUucmFuZG9tOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNpemUudmFsdWUgPSAoMCwgVXRpbHNfMS5yYW5kb21JblJhbmdlKSh0aGlzLnNpemUpICogcHhSYXRpbztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaXplLnN0YXR1cyA9IE1hdGgucmFuZG9tKCkgPj0gMC41ID8gRW51bXNfMS5BbmltYXRpb25TdGF0dXMuaW5jcmVhc2luZyA6IEVudW1zXzEuQW5pbWF0aW9uU3RhdHVzLmRlY3JlYXNpbmc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgRW51bXNfMS5TdGFydFZhbHVlVHlwZS5tYXg6XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaXplLnZhbHVlID0gdGhpcy5zaXplLm1heDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaXplLnN0YXR1cyA9IEVudW1zXzEuQW5pbWF0aW9uU3RhdHVzLmRlY3JlYXNpbmc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zaXplLnZlbG9jaXR5ID1cbiAgICAgICAgICAgICAgICAoKChfZyA9IHRoaXMucmV0aW5hLnNpemVBbmltYXRpb25TcGVlZCkgIT09IG51bGwgJiYgX2cgIT09IHZvaWQgMCA/IF9nIDogY29udGFpbmVyLnJldGluYS5zaXplQW5pbWF0aW9uU3BlZWQpIC8gMTAwKSAqXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5yZXRpbmEucmVkdWNlRmFjdG9yO1xuICAgICAgICAgICAgaWYgKCFzaXplQW5pbWF0aW9uLnN5bmMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNpemUudmVsb2NpdHkgKj0gTWF0aC5yYW5kb20oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRpcmVjdGlvbiA9ICgwLCBVdGlsc18xLmdldFBhcnRpY2xlRGlyZWN0aW9uQW5nbGUpKHRoaXMub3B0aW9ucy5tb3ZlLmRpcmVjdGlvbik7XG4gICAgICAgIHRoaXMuYnViYmxlID0ge1xuICAgICAgICAgICAgaW5SYW5nZTogZmFsc2UsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaW5pdGlhbFZlbG9jaXR5ID0gdGhpcy5jYWxjdWxhdGVWZWxvY2l0eSgpO1xuICAgICAgICB0aGlzLnZlbG9jaXR5ID0gdGhpcy5pbml0aWFsVmVsb2NpdHkuY29weSgpO1xuICAgICAgICB0aGlzLm1vdmVEZWNheSA9IDEgLSAoMCwgVXRpbHNfMS5nZXRSYW5nZVZhbHVlKSh0aGlzLm9wdGlvbnMubW92ZS5kZWNheSk7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSB0aGlzLmNhbGNQb3NpdGlvbihjb250YWluZXIsIHBvc2l0aW9uLCAoMCwgVXRpbHNfMS5jbGFtcCkoekluZGV4VmFsdWUsIDAsIGNvbnRhaW5lci56TGF5ZXJzKSk7XG4gICAgICAgIHRoaXMuaW5pdGlhbFBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbi5jb3B5KCk7XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gVmVjdG9yXzEuVmVjdG9yLm9yaWdpbjtcbiAgICAgICAgY29uc3QgcGFydGljbGVzID0gY29udGFpbmVyLnBhcnRpY2xlcztcbiAgICAgICAgcGFydGljbGVzLm5lZWRzU29ydCA9IHBhcnRpY2xlcy5uZWVkc1NvcnQgfHwgcGFydGljbGVzLmxhc3RaSW5kZXggPCB0aGlzLnBvc2l0aW9uLno7XG4gICAgICAgIHBhcnRpY2xlcy5sYXN0WkluZGV4ID0gdGhpcy5wb3NpdGlvbi56O1xuICAgICAgICB0aGlzLnpJbmRleEZhY3RvciA9IHRoaXMucG9zaXRpb24ueiAvIGNvbnRhaW5lci56TGF5ZXJzO1xuICAgICAgICB0aGlzLnNpZGVzID0gMjQ7XG4gICAgICAgIGxldCBkcmF3ZXIgPSBjb250YWluZXIuZHJhd2Vycy5nZXQodGhpcy5zaGFwZSk7XG4gICAgICAgIGlmICghZHJhd2VyKSB7XG4gICAgICAgICAgICBkcmF3ZXIgPSBVdGlsc18xLlBsdWdpbnMuZ2V0U2hhcGVEcmF3ZXIodGhpcy5zaGFwZSk7XG4gICAgICAgICAgICBpZiAoZHJhd2VyKSB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmRyYXdlcnMuc2V0KHRoaXMuc2hhcGUsIGRyYXdlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRyYXdlciA9PT0gbnVsbCB8fCBkcmF3ZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRyYXdlci5sb2FkU2hhcGUpIHtcbiAgICAgICAgICAgIGRyYXdlciA9PT0gbnVsbCB8fCBkcmF3ZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRyYXdlci5sb2FkU2hhcGUodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2lkZUNvdW50RnVuYyA9IGRyYXdlciA9PT0gbnVsbCB8fCBkcmF3ZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRyYXdlci5nZXRTaWRlc0NvdW50O1xuICAgICAgICBpZiAoc2lkZUNvdW50RnVuYykge1xuICAgICAgICAgICAgdGhpcy5zaWRlcyA9IHNpZGVDb3VudEZ1bmModGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5saWZlID0gdGhpcy5sb2FkTGlmZSgpO1xuICAgICAgICB0aGlzLnNwYXduaW5nID0gdGhpcy5saWZlLmRlbGF5ID4gMDtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5tb3ZlLnNwaW4uZW5hYmxlKSB7XG4gICAgICAgICAgICBjb25zdCBzcGluUG9zID0gKF9oID0gdGhpcy5vcHRpb25zLm1vdmUuc3Bpbi5wb3NpdGlvbikgIT09IG51bGwgJiYgX2ggIT09IHZvaWQgMCA/IF9oIDogeyB4OiA1MCwgeTogNTAgfTtcbiAgICAgICAgICAgIGNvbnN0IHNwaW5DZW50ZXIgPSB7XG4gICAgICAgICAgICAgICAgeDogKHNwaW5Qb3MueCAvIDEwMCkgKiBjb250YWluZXIuY2FudmFzLnNpemUud2lkdGgsXG4gICAgICAgICAgICAgICAgeTogKHNwaW5Qb3MueSAvIDEwMCkgKiBjb250YWluZXIuY2FudmFzLnNpemUuaGVpZ2h0LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHBvcyA9IHRoaXMuZ2V0UG9zaXRpb24oKTtcbiAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlID0gKDAsIFV0aWxzXzEuZ2V0RGlzdGFuY2UpKHBvcywgc3BpbkNlbnRlcik7XG4gICAgICAgICAgICB0aGlzLnNwaW4gPSB7XG4gICAgICAgICAgICAgICAgY2VudGVyOiBzcGluQ2VudGVyLFxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogdGhpcy52ZWxvY2l0eS54ID49IDAgPyBFbnVtc18xLlJvdGF0ZURpcmVjdGlvbi5jbG9ja3dpc2UgOiBFbnVtc18xLlJvdGF0ZURpcmVjdGlvbi5jb3VudGVyQ2xvY2t3aXNlLFxuICAgICAgICAgICAgICAgIGFuZ2xlOiB0aGlzLnZlbG9jaXR5LmFuZ2xlLFxuICAgICAgICAgICAgICAgIHJhZGl1czogZGlzdGFuY2UsXG4gICAgICAgICAgICAgICAgYWNjZWxlcmF0aW9uOiAoX2ogPSB0aGlzLnJldGluYS5zcGluQWNjZWxlcmF0aW9uKSAhPT0gbnVsbCAmJiBfaiAhPT0gdm9pZCAwID8gX2ogOiAoMCwgVXRpbHNfMS5nZXRSYW5nZVZhbHVlKSh0aGlzLm9wdGlvbnMubW92ZS5zcGluLmFjY2VsZXJhdGlvbiksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2hhZG93Q29sb3IgPSAoMCwgVXRpbHNfMS5jb2xvclRvUmdiKSh0aGlzLm9wdGlvbnMuc2hhZG93LmNvbG9yKTtcbiAgICAgICAgZm9yIChjb25zdCB1cGRhdGVyIG9mIGNvbnRhaW5lci5wYXJ0aWNsZXMudXBkYXRlcnMpIHtcbiAgICAgICAgICAgIGlmICh1cGRhdGVyLmluaXQpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVyLmluaXQodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRyYXdlciAmJiBkcmF3ZXIucGFydGljbGVJbml0KSB7XG4gICAgICAgICAgICBkcmF3ZXIucGFydGljbGVJbml0KGNvbnRhaW5lciwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBbLCBwbHVnaW5dIG9mIGNvbnRhaW5lci5wbHVnaW5zKSB7XG4gICAgICAgICAgICBpZiAocGx1Z2luLnBhcnRpY2xlQ3JlYXRlZCkge1xuICAgICAgICAgICAgICAgIHBsdWdpbi5wYXJ0aWNsZUNyZWF0ZWQodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaXNWaXNpYmxlKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuZGVzdHJveWVkICYmICF0aGlzLnNwYXduaW5nICYmIHRoaXMuaXNJbnNpZGVDYW52YXMoKTtcbiAgICB9XG4gICAgaXNJbnNpZGVDYW52YXMoKSB7XG4gICAgICAgIGNvbnN0IHJhZGl1cyA9IHRoaXMuZ2V0UmFkaXVzKCk7XG4gICAgICAgIGNvbnN0IGNhbnZhc1NpemUgPSB0aGlzLmNvbnRhaW5lci5jYW52YXMuc2l6ZTtcbiAgICAgICAgcmV0dXJuICh0aGlzLnBvc2l0aW9uLnggPj0gLXJhZGl1cyAmJlxuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbi55ID49IC1yYWRpdXMgJiZcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb24ueSA8PSBjYW52YXNTaXplLmhlaWdodCArIHJhZGl1cyAmJlxuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbi54IDw9IGNhbnZhc1NpemUud2lkdGggKyByYWRpdXMpO1xuICAgIH1cbiAgICBkcmF3KGRlbHRhKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyO1xuICAgICAgICBmb3IgKGNvbnN0IFssIHBsdWdpbl0gb2YgY29udGFpbmVyLnBsdWdpbnMpIHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5jYW52YXMuZHJhd1BhcnRpY2xlUGx1Z2luKHBsdWdpbiwgdGhpcywgZGVsdGEpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRhaW5lci5jYW52YXMuZHJhd1BhcnRpY2xlKHRoaXMsIGRlbHRhKTtcbiAgICB9XG4gICAgZ2V0UG9zaXRpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiB0aGlzLnBvc2l0aW9uLnggKyB0aGlzLm9mZnNldC54LFxuICAgICAgICAgICAgeTogdGhpcy5wb3NpdGlvbi55ICsgdGhpcy5vZmZzZXQueSxcbiAgICAgICAgICAgIHo6IHRoaXMucG9zaXRpb24ueixcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZ2V0UmFkaXVzKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoX2EgPSB0aGlzLmJ1YmJsZS5yYWRpdXMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRoaXMuc2l6ZS52YWx1ZTtcbiAgICB9XG4gICAgZ2V0TWFzcygpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmdldFJhZGl1cygpICoqIDIgKiBNYXRoLlBJKSAvIDI7XG4gICAgfVxuICAgIGdldEZpbGxDb2xvcigpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIGNvbnN0IGNvbG9yID0gKF9hID0gdGhpcy5idWJibGUuY29sb3IpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICgwLCBVdGlsc18xLmdldEhzbEZyb21BbmltYXRpb24pKHRoaXMuY29sb3IpO1xuICAgICAgICBpZiAoY29sb3IgJiYgdGhpcy5yb2xsICYmICh0aGlzLmJhY2tDb2xvciB8fCB0aGlzLnJvbGwuYWx0ZXIpKSB7XG4gICAgICAgICAgICBjb25zdCByb2xsZWQgPSBNYXRoLmZsb29yKCgoX2MgPSAoX2IgPSB0aGlzLnJvbGwpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5hbmdsZSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogMCkgLyAoTWF0aC5QSSAvIDIpKSAlIDI7XG4gICAgICAgICAgICBpZiAocm9sbGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYmFja0NvbG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmJhY2tDb2xvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucm9sbC5hbHRlcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKDAsIFV0aWxzXzEuYWx0ZXJIc2wpKGNvbG9yLCB0aGlzLnJvbGwuYWx0ZXIudHlwZSwgdGhpcy5yb2xsLmFsdGVyLnZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbG9yO1xuICAgIH1cbiAgICBnZXRTdHJva2VDb2xvcigpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgcmV0dXJuIChfYiA9IChfYSA9IHRoaXMuYnViYmxlLmNvbG9yKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAoMCwgVXRpbHNfMS5nZXRIc2xGcm9tQW5pbWF0aW9uKSh0aGlzLnN0cm9rZUNvbG9yKSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogdGhpcy5nZXRGaWxsQ29sb3IoKTtcbiAgICB9XG4gICAgZGVzdHJveShvdmVycmlkZSkge1xuICAgICAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgICAgIHRoaXMuYnViYmxlLmluUmFuZ2UgPSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMudW5icmVha2FibGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgICAgIHRoaXMuYnViYmxlLmluUmFuZ2UgPSBmYWxzZTtcbiAgICAgICAgZm9yIChjb25zdCBbLCBwbHVnaW5dIG9mIHRoaXMuY29udGFpbmVyLnBsdWdpbnMpIHtcbiAgICAgICAgICAgIGlmIChwbHVnaW4ucGFydGljbGVEZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgICBwbHVnaW4ucGFydGljbGVEZXN0cm95ZWQodGhpcywgb3ZlcnJpZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChvdmVycmlkZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRlc3Ryb3lPcHRpb25zID0gdGhpcy5vcHRpb25zLmRlc3Ryb3k7XG4gICAgICAgIGlmIChkZXN0cm95T3B0aW9ucy5tb2RlID09PSBFbnVtc18xLkRlc3Ryb3lNb2RlLnNwbGl0KSB7XG4gICAgICAgICAgICB0aGlzLnNwbGl0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVzZXQoKSB7XG4gICAgICAgIGlmICh0aGlzLm9wYWNpdHkpIHtcbiAgICAgICAgICAgIHRoaXMub3BhY2l0eS5sb29wcyA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zaXplLmxvb3BzID0gMDtcbiAgICB9XG4gICAgc3BsaXQoKSB7XG4gICAgICAgIGNvbnN0IHNwbGl0T3B0aW9ucyA9IHRoaXMub3B0aW9ucy5kZXN0cm95LnNwbGl0O1xuICAgICAgICBpZiAoc3BsaXRPcHRpb25zLmNvdW50ID49IDAgJiYgdGhpcy5zcGxpdENvdW50KysgPiBzcGxpdE9wdGlvbnMuY291bnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByYXRlID0gKDAsIFV0aWxzXzEuZ2V0UmFuZ2VWYWx1ZSkoc3BsaXRPcHRpb25zLnJhdGUudmFsdWUpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJhdGU7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5jb250YWluZXIucGFydGljbGVzLmFkZFNwbGl0UGFydGljbGUodGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2FsY1Bvc2l0aW9uKGNvbnRhaW5lciwgcG9zaXRpb24sIHpJbmRleCwgdHJ5Q291bnQgPSAwKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mO1xuICAgICAgICBmb3IgKGNvbnN0IFssIHBsdWdpbl0gb2YgY29udGFpbmVyLnBsdWdpbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IHBsdWdpblBvcyA9IHBsdWdpbi5wYXJ0aWNsZVBvc2l0aW9uICE9PSB1bmRlZmluZWQgPyBwbHVnaW4ucGFydGljbGVQb3NpdGlvbihwb3NpdGlvbiwgdGhpcykgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAocGx1Z2luUG9zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gVmVjdG9yM2RfMS5WZWN0b3IzZC5jcmVhdGUocGx1Z2luUG9zLngsIHBsdWdpblBvcy55LCB6SW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNhbnZhc1NpemUgPSBjb250YWluZXIuY2FudmFzLnNpemU7XG4gICAgICAgIGNvbnN0IHBvcyA9IFZlY3RvcjNkXzEuVmVjdG9yM2QuY3JlYXRlKChfYSA9IHBvc2l0aW9uID09PSBudWxsIHx8IHBvc2l0aW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwb3NpdGlvbi54KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBNYXRoLnJhbmRvbSgpICogY2FudmFzU2l6ZS53aWR0aCwgKF9iID0gcG9zaXRpb24gPT09IG51bGwgfHwgcG9zaXRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBvc2l0aW9uLnkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IE1hdGgucmFuZG9tKCkgKiBjYW52YXNTaXplLmhlaWdodCwgekluZGV4KTtcbiAgICAgICAgY29uc3QgcmFkaXVzID0gdGhpcy5nZXRSYWRpdXMoKTtcbiAgICAgICAgY29uc3Qgb3V0TW9kZXMgPSB0aGlzLm9wdGlvbnMubW92ZS5vdXRNb2RlcywgZml4SG9yaXpvbnRhbCA9IChvdXRNb2RlKSA9PiB7XG4gICAgICAgICAgICBmaXhPdXRNb2RlKHtcbiAgICAgICAgICAgICAgICBvdXRNb2RlLFxuICAgICAgICAgICAgICAgIGNoZWNrTW9kZXM6IFtFbnVtc18xLk91dE1vZGUuYm91bmNlLCBFbnVtc18xLk91dE1vZGUuYm91bmNlSG9yaXpvbnRhbF0sXG4gICAgICAgICAgICAgICAgY29vcmQ6IHBvcy54LFxuICAgICAgICAgICAgICAgIG1heENvb3JkOiBjb250YWluZXIuY2FudmFzLnNpemUud2lkdGgsXG4gICAgICAgICAgICAgICAgc2V0Q2I6ICh2YWx1ZSkgPT4gKHBvcy54ICs9IHZhbHVlKSxcbiAgICAgICAgICAgICAgICByYWRpdXMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgZml4VmVydGljYWwgPSAob3V0TW9kZSkgPT4ge1xuICAgICAgICAgICAgZml4T3V0TW9kZSh7XG4gICAgICAgICAgICAgICAgb3V0TW9kZSxcbiAgICAgICAgICAgICAgICBjaGVja01vZGVzOiBbRW51bXNfMS5PdXRNb2RlLmJvdW5jZSwgRW51bXNfMS5PdXRNb2RlLmJvdW5jZVZlcnRpY2FsXSxcbiAgICAgICAgICAgICAgICBjb29yZDogcG9zLnksXG4gICAgICAgICAgICAgICAgbWF4Q29vcmQ6IGNvbnRhaW5lci5jYW52YXMuc2l6ZS5oZWlnaHQsXG4gICAgICAgICAgICAgICAgc2V0Q2I6ICh2YWx1ZSkgPT4gKHBvcy55ICs9IHZhbHVlKSxcbiAgICAgICAgICAgICAgICByYWRpdXMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgZml4SG9yaXpvbnRhbCgoX2MgPSBvdXRNb2Rlcy5sZWZ0KSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBvdXRNb2Rlcy5kZWZhdWx0KTtcbiAgICAgICAgZml4SG9yaXpvbnRhbCgoX2QgPSBvdXRNb2Rlcy5yaWdodCkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogb3V0TW9kZXMuZGVmYXVsdCk7XG4gICAgICAgIGZpeFZlcnRpY2FsKChfZSA9IG91dE1vZGVzLnRvcCkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogb3V0TW9kZXMuZGVmYXVsdCk7XG4gICAgICAgIGZpeFZlcnRpY2FsKChfZiA9IG91dE1vZGVzLmJvdHRvbSkgIT09IG51bGwgJiYgX2YgIT09IHZvaWQgMCA/IF9mIDogb3V0TW9kZXMuZGVmYXVsdCk7XG4gICAgICAgIGlmICh0aGlzLmNoZWNrT3ZlcmxhcChwb3MsIHRyeUNvdW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FsY1Bvc2l0aW9uKGNvbnRhaW5lciwgdW5kZWZpbmVkLCB6SW5kZXgsIHRyeUNvdW50ICsgMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBvcztcbiAgICB9XG4gICAgY2hlY2tPdmVybGFwKHBvcywgdHJ5Q291bnQgPSAwKSB7XG4gICAgICAgIGNvbnN0IGNvbGxpc2lvbnNPcHRpb25zID0gdGhpcy5vcHRpb25zLmNvbGxpc2lvbnM7XG4gICAgICAgIGNvbnN0IHJhZGl1cyA9IHRoaXMuZ2V0UmFkaXVzKCk7XG4gICAgICAgIGlmICghY29sbGlzaW9uc09wdGlvbnMuZW5hYmxlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3ZlcmxhcE9wdGlvbnMgPSBjb2xsaXNpb25zT3B0aW9ucy5vdmVybGFwO1xuICAgICAgICBpZiAob3ZlcmxhcE9wdGlvbnMuZW5hYmxlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmV0cmllcyA9IG92ZXJsYXBPcHRpb25zLnJldHJpZXM7XG4gICAgICAgIGlmIChyZXRyaWVzID49IDAgJiYgdHJ5Q291bnQgPiByZXRyaWVzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQYXJ0aWNsZSBpcyBvdmVybGFwcGluZyBhbmQgY2FuJ3QgYmUgcGxhY2VkXCIpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBvdmVybGFwcyA9IGZhbHNlO1xuICAgICAgICBmb3IgKGNvbnN0IHBhcnRpY2xlIG9mIHRoaXMuY29udGFpbmVyLnBhcnRpY2xlcy5hcnJheSkge1xuICAgICAgICAgICAgaWYgKCgwLCBVdGlsc18xLmdldERpc3RhbmNlKShwb3MsIHBhcnRpY2xlLnBvc2l0aW9uKSA8IHJhZGl1cyArIHBhcnRpY2xlLmdldFJhZGl1cygpKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmxhcHMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdmVybGFwcztcbiAgICB9XG4gICAgY2FsY3VsYXRlVmVsb2NpdHkoKSB7XG4gICAgICAgIGNvbnN0IGJhc2VWZWxvY2l0eSA9ICgwLCBVdGlsc18xLmdldFBhcnRpY2xlQmFzZVZlbG9jaXR5KSh0aGlzLmRpcmVjdGlvbik7XG4gICAgICAgIGNvbnN0IHJlcyA9IGJhc2VWZWxvY2l0eS5jb3B5KCk7XG4gICAgICAgIGNvbnN0IG1vdmVPcHRpb25zID0gdGhpcy5vcHRpb25zLm1vdmU7XG4gICAgICAgIGNvbnN0IHJhZCA9IChNYXRoLlBJIC8gMTgwKSAqIG1vdmVPcHRpb25zLmFuZ2xlLnZhbHVlO1xuICAgICAgICBjb25zdCByYWRPZmZzZXQgPSAoTWF0aC5QSSAvIDE4MCkgKiBtb3ZlT3B0aW9ucy5hbmdsZS5vZmZzZXQ7XG4gICAgICAgIGNvbnN0IHJhbmdlID0ge1xuICAgICAgICAgICAgbGVmdDogcmFkT2Zmc2V0IC0gcmFkIC8gMixcbiAgICAgICAgICAgIHJpZ2h0OiByYWRPZmZzZXQgKyByYWQgLyAyLFxuICAgICAgICB9O1xuICAgICAgICBpZiAoIW1vdmVPcHRpb25zLnN0cmFpZ2h0KSB7XG4gICAgICAgICAgICByZXMuYW5nbGUgKz0gKDAsIFV0aWxzXzEucmFuZG9tSW5SYW5nZSkoKDAsIFV0aWxzXzEuc2V0UmFuZ2VWYWx1ZSkocmFuZ2UubGVmdCwgcmFuZ2UucmlnaHQpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobW92ZU9wdGlvbnMucmFuZG9tICYmIHR5cGVvZiBtb3ZlT3B0aW9ucy5zcGVlZCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgcmVzLmxlbmd0aCAqPSBNYXRoLnJhbmRvbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIGxvYWRTaGFwZURhdGEoc2hhcGVPcHRpb25zLCByZWR1Y2VEdXBsaWNhdGVzKSB7XG4gICAgICAgIGNvbnN0IHNoYXBlRGF0YSA9IHNoYXBlT3B0aW9ucy5vcHRpb25zW3RoaXMuc2hhcGVdO1xuICAgICAgICBpZiAoc2hhcGVEYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gKDAsIFV0aWxzXzEuZGVlcEV4dGVuZCkoe30sIHNoYXBlRGF0YSBpbnN0YW5jZW9mIEFycmF5ID8gKDAsIFV0aWxzXzEuaXRlbUZyb21BcnJheSkoc2hhcGVEYXRhLCB0aGlzLmlkLCByZWR1Y2VEdXBsaWNhdGVzKSA6IHNoYXBlRGF0YSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbG9hZExpZmUoKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyO1xuICAgICAgICBjb25zdCBwYXJ0aWNsZXNPcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBsaWZlT3B0aW9ucyA9IHBhcnRpY2xlc09wdGlvbnMubGlmZTtcbiAgICAgICAgY29uc3QgbGlmZSA9IHtcbiAgICAgICAgICAgIGRlbGF5OiBjb250YWluZXIucmV0aW5hLnJlZHVjZUZhY3RvclxuICAgICAgICAgICAgICAgID8gKCgoMCwgVXRpbHNfMS5nZXRSYW5nZVZhbHVlKShsaWZlT3B0aW9ucy5kZWxheS52YWx1ZSkgKiAobGlmZU9wdGlvbnMuZGVsYXkuc3luYyA/IDEgOiBNYXRoLnJhbmRvbSgpKSkgL1xuICAgICAgICAgICAgICAgICAgICBjb250YWluZXIucmV0aW5hLnJlZHVjZUZhY3RvcikgKlxuICAgICAgICAgICAgICAgICAgICAxMDAwXG4gICAgICAgICAgICAgICAgOiAwLFxuICAgICAgICAgICAgZGVsYXlUaW1lOiAwLFxuICAgICAgICAgICAgZHVyYXRpb246IGNvbnRhaW5lci5yZXRpbmEucmVkdWNlRmFjdG9yXG4gICAgICAgICAgICAgICAgPyAoKCgwLCBVdGlsc18xLmdldFJhbmdlVmFsdWUpKGxpZmVPcHRpb25zLmR1cmF0aW9uLnZhbHVlKSAqIChsaWZlT3B0aW9ucy5kdXJhdGlvbi5zeW5jID8gMSA6IE1hdGgucmFuZG9tKCkpKSAvXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5yZXRpbmEucmVkdWNlRmFjdG9yKSAqXG4gICAgICAgICAgICAgICAgICAgIDEwMDBcbiAgICAgICAgICAgICAgICA6IDAsXG4gICAgICAgICAgICB0aW1lOiAwLFxuICAgICAgICAgICAgY291bnQ6IHBhcnRpY2xlc09wdGlvbnMubGlmZS5jb3VudCxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGxpZmUuZHVyYXRpb24gPD0gMCkge1xuICAgICAgICAgICAgbGlmZS5kdXJhdGlvbiA9IC0xO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsaWZlLmNvdW50IDw9IDApIHtcbiAgICAgICAgICAgIGxpZmUuY291bnQgPSAtMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGlmZTtcbiAgICB9XG59XG5leHBvcnRzLlBhcnRpY2xlID0gUGFydGljbGU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTW92ZXIgPSB2b2lkIDA7XG5jb25zdCBVdGlsc18xID0gcmVxdWlyZShcIi4uLy4uL1V0aWxzXCIpO1xuY29uc3QgRW51bXNfMSA9IHJlcXVpcmUoXCIuLi8uLi9FbnVtc1wiKTtcbmZ1bmN0aW9uIGFwcGx5RGlzdGFuY2UocGFydGljbGUpIHtcbiAgICBjb25zdCBpbml0aWFsUG9zaXRpb24gPSBwYXJ0aWNsZS5pbml0aWFsUG9zaXRpb247XG4gICAgY29uc3QgeyBkeCwgZHkgfSA9ICgwLCBVdGlsc18xLmdldERpc3RhbmNlcykoaW5pdGlhbFBvc2l0aW9uLCBwYXJ0aWNsZS5wb3NpdGlvbik7XG4gICAgY29uc3QgZHhGaXhlZCA9IE1hdGguYWJzKGR4KSwgZHlGaXhlZCA9IE1hdGguYWJzKGR5KTtcbiAgICBjb25zdCBoRGlzdGFuY2UgPSBwYXJ0aWNsZS5yZXRpbmEubWF4RGlzdGFuY2UuaG9yaXpvbnRhbDtcbiAgICBjb25zdCB2RGlzdGFuY2UgPSBwYXJ0aWNsZS5yZXRpbmEubWF4RGlzdGFuY2UudmVydGljYWw7XG4gICAgaWYgKCFoRGlzdGFuY2UgJiYgIXZEaXN0YW5jZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICgoKGhEaXN0YW5jZSAmJiBkeEZpeGVkID49IGhEaXN0YW5jZSkgfHwgKHZEaXN0YW5jZSAmJiBkeUZpeGVkID49IHZEaXN0YW5jZSkpICYmICFwYXJ0aWNsZS5taXNwbGFjZWQpIHtcbiAgICAgICAgcGFydGljbGUubWlzcGxhY2VkID0gKCEhaERpc3RhbmNlICYmIGR4Rml4ZWQgPiBoRGlzdGFuY2UpIHx8ICghIXZEaXN0YW5jZSAmJiBkeUZpeGVkID4gdkRpc3RhbmNlKTtcbiAgICAgICAgaWYgKGhEaXN0YW5jZSkge1xuICAgICAgICAgICAgcGFydGljbGUudmVsb2NpdHkueCA9IHBhcnRpY2xlLnZlbG9jaXR5LnkgLyAyIC0gcGFydGljbGUudmVsb2NpdHkueDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodkRpc3RhbmNlKSB7XG4gICAgICAgICAgICBwYXJ0aWNsZS52ZWxvY2l0eS55ID0gcGFydGljbGUudmVsb2NpdHkueCAvIDIgLSBwYXJ0aWNsZS52ZWxvY2l0eS55O1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKCghaERpc3RhbmNlIHx8IGR4Rml4ZWQgPCBoRGlzdGFuY2UpICYmICghdkRpc3RhbmNlIHx8IGR5Rml4ZWQgPCB2RGlzdGFuY2UpICYmIHBhcnRpY2xlLm1pc3BsYWNlZCkge1xuICAgICAgICBwYXJ0aWNsZS5taXNwbGFjZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgZWxzZSBpZiAocGFydGljbGUubWlzcGxhY2VkKSB7XG4gICAgICAgIGNvbnN0IHBvcyA9IHBhcnRpY2xlLnBvc2l0aW9uLCB2ZWwgPSBwYXJ0aWNsZS52ZWxvY2l0eTtcbiAgICAgICAgaWYgKGhEaXN0YW5jZSAmJiAoKHBvcy54IDwgaW5pdGlhbFBvc2l0aW9uLnggJiYgdmVsLnggPCAwKSB8fCAocG9zLnggPiBpbml0aWFsUG9zaXRpb24ueCAmJiB2ZWwueCA+IDApKSkge1xuICAgICAgICAgICAgdmVsLnggKj0gLU1hdGgucmFuZG9tKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZEaXN0YW5jZSAmJiAoKHBvcy55IDwgaW5pdGlhbFBvc2l0aW9uLnkgJiYgdmVsLnkgPCAwKSB8fCAocG9zLnkgPiBpbml0aWFsUG9zaXRpb24ueSAmJiB2ZWwueSA+IDApKSkge1xuICAgICAgICAgICAgdmVsLnkgKj0gLU1hdGgucmFuZG9tKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5jbGFzcyBNb3ZlciB7XG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgIH1cbiAgICBtb3ZlKHBhcnRpY2xlLCBkZWx0YSkge1xuICAgICAgICBpZiAocGFydGljbGUuZGVzdHJveWVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tb3ZlUGFydGljbGUocGFydGljbGUsIGRlbHRhKTtcbiAgICAgICAgdGhpcy5tb3ZlUGFyYWxsYXgocGFydGljbGUpO1xuICAgIH1cbiAgICBtb3ZlUGFydGljbGUocGFydGljbGUsIGRlbHRhKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICB2YXIgX2QsIF9lO1xuICAgICAgICBjb25zdCBwYXJ0aWNsZU9wdGlvbnMgPSBwYXJ0aWNsZS5vcHRpb25zO1xuICAgICAgICBjb25zdCBtb3ZlT3B0aW9ucyA9IHBhcnRpY2xlT3B0aW9ucy5tb3ZlO1xuICAgICAgICBpZiAoIW1vdmVPcHRpb25zLmVuYWJsZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyLCBzbG93RmFjdG9yID0gdGhpcy5nZXRQcm94aW1pdHlTcGVlZEZhY3RvcihwYXJ0aWNsZSksIGJhc2VTcGVlZCA9ICgoX2EgPSAoX2QgPSBwYXJ0aWNsZS5yZXRpbmEpLm1vdmVTcGVlZCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogKF9kLm1vdmVTcGVlZCA9ICgwLCBVdGlsc18xLmdldFJhbmdlVmFsdWUpKG1vdmVPcHRpb25zLnNwZWVkKSAqIGNvbnRhaW5lci5yZXRpbmEucGl4ZWxSYXRpbykpICpcbiAgICAgICAgICAgIGNvbnRhaW5lci5yZXRpbmEucmVkdWNlRmFjdG9yLCBtb3ZlRHJpZnQgPSAoKF9iID0gKF9lID0gcGFydGljbGUucmV0aW5hKS5tb3ZlRHJpZnQpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IChfZS5tb3ZlRHJpZnQgPSAoMCwgVXRpbHNfMS5nZXRSYW5nZVZhbHVlKShwYXJ0aWNsZS5vcHRpb25zLm1vdmUuZHJpZnQpICogY29udGFpbmVyLnJldGluYS5waXhlbFJhdGlvKSksIG1heFNpemUgPSAoMCwgVXRpbHNfMS5nZXRSYW5nZU1heCkocGFydGljbGVPcHRpb25zLnNpemUudmFsdWUpICogY29udGFpbmVyLnJldGluYS5waXhlbFJhdGlvLCBzaXplRmFjdG9yID0gbW92ZU9wdGlvbnMuc2l6ZSA/IHBhcnRpY2xlLmdldFJhZGl1cygpIC8gbWF4U2l6ZSA6IDEsIGRpZmZGYWN0b3IgPSAyLCBzcGVlZEZhY3RvciA9IChzaXplRmFjdG9yICogc2xvd0ZhY3RvciAqIChkZWx0YS5mYWN0b3IgfHwgMSkpIC8gZGlmZkZhY3RvciwgbW92ZVNwZWVkID0gYmFzZVNwZWVkICogc3BlZWRGYWN0b3I7XG4gICAgICAgIHRoaXMuYXBwbHlQYXRoKHBhcnRpY2xlLCBkZWx0YSk7XG4gICAgICAgIGNvbnN0IGdyYXZpdHlPcHRpb25zID0gbW92ZU9wdGlvbnMuZ3Jhdml0eTtcbiAgICAgICAgY29uc3QgZ3Jhdml0eUZhY3RvciA9IGdyYXZpdHlPcHRpb25zLmVuYWJsZSAmJiBncmF2aXR5T3B0aW9ucy5pbnZlcnNlID8gLTEgOiAxO1xuICAgICAgICBpZiAoZ3Jhdml0eU9wdGlvbnMuZW5hYmxlICYmIG1vdmVTcGVlZCkge1xuICAgICAgICAgICAgcGFydGljbGUudmVsb2NpdHkueSArPSAoZ3Jhdml0eUZhY3RvciAqIChncmF2aXR5T3B0aW9ucy5hY2NlbGVyYXRpb24gKiBkZWx0YS5mYWN0b3IpKSAvICg2MCAqIG1vdmVTcGVlZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1vdmVEcmlmdCAmJiBtb3ZlU3BlZWQpIHtcbiAgICAgICAgICAgIHBhcnRpY2xlLnZlbG9jaXR5LnggKz0gKG1vdmVEcmlmdCAqIGRlbHRhLmZhY3RvcikgLyAoNjAgKiBtb3ZlU3BlZWQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRlY2F5ID0gcGFydGljbGUubW92ZURlY2F5O1xuICAgICAgICBpZiAoZGVjYXkgIT0gMSkge1xuICAgICAgICAgICAgcGFydGljbGUudmVsb2NpdHkubXVsdFRvKGRlY2F5KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2ZWxvY2l0eSA9IHBhcnRpY2xlLnZlbG9jaXR5Lm11bHQobW92ZVNwZWVkKTtcbiAgICAgICAgY29uc3QgbWF4U3BlZWQgPSAoX2MgPSBwYXJ0aWNsZS5yZXRpbmEubWF4U3BlZWQpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IGNvbnRhaW5lci5yZXRpbmEubWF4U3BlZWQ7XG4gICAgICAgIGlmIChncmF2aXR5T3B0aW9ucy5lbmFibGUgJiZcbiAgICAgICAgICAgIGdyYXZpdHlPcHRpb25zLm1heFNwZWVkID4gMCAmJlxuICAgICAgICAgICAgKCghZ3Jhdml0eU9wdGlvbnMuaW52ZXJzZSAmJiB2ZWxvY2l0eS55ID49IDAgJiYgdmVsb2NpdHkueSA+PSBtYXhTcGVlZCkgfHxcbiAgICAgICAgICAgICAgICAoZ3Jhdml0eU9wdGlvbnMuaW52ZXJzZSAmJiB2ZWxvY2l0eS55IDw9IDAgJiYgdmVsb2NpdHkueSA8PSAtbWF4U3BlZWQpKSkge1xuICAgICAgICAgICAgdmVsb2NpdHkueSA9IGdyYXZpdHlGYWN0b3IgKiBtYXhTcGVlZDtcbiAgICAgICAgICAgIGlmIChtb3ZlU3BlZWQpIHtcbiAgICAgICAgICAgICAgICBwYXJ0aWNsZS52ZWxvY2l0eS55ID0gdmVsb2NpdHkueSAvIG1vdmVTcGVlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCB6SW5kZXhPcHRpb25zID0gcGFydGljbGUub3B0aW9ucy56SW5kZXgsIHpWZWxvY2l0eUZhY3RvciA9ICgxIC0gcGFydGljbGUuekluZGV4RmFjdG9yKSAqKiB6SW5kZXhPcHRpb25zLnZlbG9jaXR5UmF0ZTtcbiAgICAgICAgaWYgKG1vdmVPcHRpb25zLnNwaW4uZW5hYmxlKSB7XG4gICAgICAgICAgICB0aGlzLnNwaW4ocGFydGljbGUsIG1vdmVTcGVlZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoelZlbG9jaXR5RmFjdG9yICE9IDEpIHtcbiAgICAgICAgICAgICAgICB2ZWxvY2l0eS5tdWx0VG8oelZlbG9jaXR5RmFjdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcnRpY2xlLnBvc2l0aW9uLmFkZFRvKHZlbG9jaXR5KTtcbiAgICAgICAgICAgIGlmIChtb3ZlT3B0aW9ucy52aWJyYXRlKSB7XG4gICAgICAgICAgICAgICAgcGFydGljbGUucG9zaXRpb24ueCArPSBNYXRoLnNpbihwYXJ0aWNsZS5wb3NpdGlvbi54ICogTWF0aC5jb3MocGFydGljbGUucG9zaXRpb24ueSkpO1xuICAgICAgICAgICAgICAgIHBhcnRpY2xlLnBvc2l0aW9uLnkgKz0gTWF0aC5jb3MocGFydGljbGUucG9zaXRpb24ueSAqIE1hdGguc2luKHBhcnRpY2xlLnBvc2l0aW9uLngpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhcHBseURpc3RhbmNlKHBhcnRpY2xlKTtcbiAgICB9XG4gICAgc3BpbihwYXJ0aWNsZSwgbW92ZVNwZWVkKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyO1xuICAgICAgICBpZiAoIXBhcnRpY2xlLnNwaW4pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB1cGRhdGVGdW5jID0ge1xuICAgICAgICAgICAgeDogcGFydGljbGUuc3Bpbi5kaXJlY3Rpb24gPT09IEVudW1zXzEuUm90YXRlRGlyZWN0aW9uLmNsb2Nrd2lzZSA/IE1hdGguY29zIDogTWF0aC5zaW4sXG4gICAgICAgICAgICB5OiBwYXJ0aWNsZS5zcGluLmRpcmVjdGlvbiA9PT0gRW51bXNfMS5Sb3RhdGVEaXJlY3Rpb24uY2xvY2t3aXNlID8gTWF0aC5zaW4gOiBNYXRoLmNvcyxcbiAgICAgICAgfTtcbiAgICAgICAgcGFydGljbGUucG9zaXRpb24ueCA9IHBhcnRpY2xlLnNwaW4uY2VudGVyLnggKyBwYXJ0aWNsZS5zcGluLnJhZGl1cyAqIHVwZGF0ZUZ1bmMueChwYXJ0aWNsZS5zcGluLmFuZ2xlKTtcbiAgICAgICAgcGFydGljbGUucG9zaXRpb24ueSA9IHBhcnRpY2xlLnNwaW4uY2VudGVyLnkgKyBwYXJ0aWNsZS5zcGluLnJhZGl1cyAqIHVwZGF0ZUZ1bmMueShwYXJ0aWNsZS5zcGluLmFuZ2xlKTtcbiAgICAgICAgcGFydGljbGUuc3Bpbi5yYWRpdXMgKz0gcGFydGljbGUuc3Bpbi5hY2NlbGVyYXRpb247XG4gICAgICAgIGNvbnN0IG1heENhbnZhc1NpemUgPSBNYXRoLm1heChjb250YWluZXIuY2FudmFzLnNpemUud2lkdGgsIGNvbnRhaW5lci5jYW52YXMuc2l6ZS5oZWlnaHQpO1xuICAgICAgICBpZiAocGFydGljbGUuc3Bpbi5yYWRpdXMgPiBtYXhDYW52YXNTaXplIC8gMikge1xuICAgICAgICAgICAgcGFydGljbGUuc3Bpbi5yYWRpdXMgPSBtYXhDYW52YXNTaXplIC8gMjtcbiAgICAgICAgICAgIHBhcnRpY2xlLnNwaW4uYWNjZWxlcmF0aW9uICo9IC0xO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBhcnRpY2xlLnNwaW4ucmFkaXVzIDwgMCkge1xuICAgICAgICAgICAgcGFydGljbGUuc3Bpbi5yYWRpdXMgPSAwO1xuICAgICAgICAgICAgcGFydGljbGUuc3Bpbi5hY2NlbGVyYXRpb24gKj0gLTE7XG4gICAgICAgIH1cbiAgICAgICAgcGFydGljbGUuc3Bpbi5hbmdsZSArPSAobW92ZVNwZWVkIC8gMTAwKSAqICgxIC0gcGFydGljbGUuc3Bpbi5yYWRpdXMgLyBtYXhDYW52YXNTaXplKTtcbiAgICB9XG4gICAgYXBwbHlQYXRoKHBhcnRpY2xlLCBkZWx0YSkge1xuICAgICAgICBjb25zdCBwYXJ0aWNsZXNPcHRpb25zID0gcGFydGljbGUub3B0aW9ucztcbiAgICAgICAgY29uc3QgcGF0aE9wdGlvbnMgPSBwYXJ0aWNsZXNPcHRpb25zLm1vdmUucGF0aDtcbiAgICAgICAgY29uc3QgcGF0aEVuYWJsZWQgPSBwYXRoT3B0aW9ucy5lbmFibGU7XG4gICAgICAgIGlmICghcGF0aEVuYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcjtcbiAgICAgICAgaWYgKHBhcnRpY2xlLmxhc3RQYXRoVGltZSA8PSBwYXJ0aWNsZS5wYXRoRGVsYXkpIHtcbiAgICAgICAgICAgIHBhcnRpY2xlLmxhc3RQYXRoVGltZSArPSBkZWx0YS52YWx1ZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXRoID0gY29udGFpbmVyLnBhdGhHZW5lcmF0b3IuZ2VuZXJhdGUocGFydGljbGUpO1xuICAgICAgICBwYXJ0aWNsZS52ZWxvY2l0eS5hZGRUbyhwYXRoKTtcbiAgICAgICAgaWYgKHBhdGhPcHRpb25zLmNsYW1wKSB7XG4gICAgICAgICAgICBwYXJ0aWNsZS52ZWxvY2l0eS54ID0gKDAsIFV0aWxzXzEuY2xhbXApKHBhcnRpY2xlLnZlbG9jaXR5LngsIC0xLCAxKTtcbiAgICAgICAgICAgIHBhcnRpY2xlLnZlbG9jaXR5LnkgPSAoMCwgVXRpbHNfMS5jbGFtcCkocGFydGljbGUudmVsb2NpdHkueSwgLTEsIDEpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRpY2xlLmxhc3RQYXRoVGltZSAtPSBwYXJ0aWNsZS5wYXRoRGVsYXk7XG4gICAgfVxuICAgIG1vdmVQYXJhbGxheChwYXJ0aWNsZSkge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcjtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGNvbnRhaW5lci5hY3R1YWxPcHRpb25zO1xuICAgICAgICBpZiAoKDAsIFV0aWxzXzEuaXNTc3IpKCkgfHwgIW9wdGlvbnMuaW50ZXJhY3Rpdml0eS5ldmVudHMub25Ib3Zlci5wYXJhbGxheC5lbmFibGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJhbGxheEZvcmNlID0gb3B0aW9ucy5pbnRlcmFjdGl2aXR5LmV2ZW50cy5vbkhvdmVyLnBhcmFsbGF4LmZvcmNlO1xuICAgICAgICBjb25zdCBtb3VzZVBvcyA9IGNvbnRhaW5lci5pbnRlcmFjdGl2aXR5Lm1vdXNlLnBvc2l0aW9uO1xuICAgICAgICBpZiAoIW1vdXNlUG9zKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2FudmFzQ2VudGVyID0ge1xuICAgICAgICAgICAgeDogY29udGFpbmVyLmNhbnZhcy5zaXplLndpZHRoIC8gMixcbiAgICAgICAgICAgIHk6IGNvbnRhaW5lci5jYW52YXMuc2l6ZS5oZWlnaHQgLyAyLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBwYXJhbGxheFNtb290aCA9IG9wdGlvbnMuaW50ZXJhY3Rpdml0eS5ldmVudHMub25Ib3Zlci5wYXJhbGxheC5zbW9vdGg7XG4gICAgICAgIGNvbnN0IGZhY3RvciA9IHBhcnRpY2xlLmdldFJhZGl1cygpIC8gcGFyYWxsYXhGb3JjZTtcbiAgICAgICAgY29uc3QgdG1wID0ge1xuICAgICAgICAgICAgeDogKG1vdXNlUG9zLnggLSBjYW52YXNDZW50ZXIueCkgKiBmYWN0b3IsXG4gICAgICAgICAgICB5OiAobW91c2VQb3MueSAtIGNhbnZhc0NlbnRlci55KSAqIGZhY3RvcixcbiAgICAgICAgfTtcbiAgICAgICAgcGFydGljbGUub2Zmc2V0LnggKz0gKHRtcC54IC0gcGFydGljbGUub2Zmc2V0LngpIC8gcGFyYWxsYXhTbW9vdGg7XG4gICAgICAgIHBhcnRpY2xlLm9mZnNldC55ICs9ICh0bXAueSAtIHBhcnRpY2xlLm9mZnNldC55KSAvIHBhcmFsbGF4U21vb3RoO1xuICAgIH1cbiAgICBnZXRQcm94aW1pdHlTcGVlZEZhY3RvcihwYXJ0aWNsZSkge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcjtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGNvbnRhaW5lci5hY3R1YWxPcHRpb25zO1xuICAgICAgICBjb25zdCBhY3RpdmUgPSAoMCwgVXRpbHNfMS5pc0luQXJyYXkpKEVudW1zXzEuSG92ZXJNb2RlLnNsb3csIG9wdGlvbnMuaW50ZXJhY3Rpdml0eS5ldmVudHMub25Ib3Zlci5tb2RlKTtcbiAgICAgICAgaWYgKCFhY3RpdmUpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1vdXNlUG9zID0gdGhpcy5jb250YWluZXIuaW50ZXJhY3Rpdml0eS5tb3VzZS5wb3NpdGlvbjtcbiAgICAgICAgaWYgKCFtb3VzZVBvcykge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFydGljbGVQb3MgPSBwYXJ0aWNsZS5nZXRQb3NpdGlvbigpO1xuICAgICAgICBjb25zdCBkaXN0ID0gKDAsIFV0aWxzXzEuZ2V0RGlzdGFuY2UpKG1vdXNlUG9zLCBwYXJ0aWNsZVBvcyk7XG4gICAgICAgIGNvbnN0IHJhZGl1cyA9IGNvbnRhaW5lci5yZXRpbmEuc2xvd01vZGVSYWRpdXM7XG4gICAgICAgIGlmIChkaXN0ID4gcmFkaXVzKSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcm94aW1pdHlGYWN0b3IgPSBkaXN0IC8gcmFkaXVzIHx8IDA7XG4gICAgICAgIGNvbnN0IHNsb3dGYWN0b3IgPSBvcHRpb25zLmludGVyYWN0aXZpdHkubW9kZXMuc2xvdy5mYWN0b3I7XG4gICAgICAgIHJldHVybiBwcm94aW1pdHlGYWN0b3IgLyBzbG93RmFjdG9yO1xuICAgIH1cbn1cbmV4cG9ydHMuTW92ZXIgPSBNb3ZlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5WZWN0b3IgPSB2b2lkIDA7XG5jbGFzcyBWZWN0b3Ige1xuICAgIGNvbnN0cnVjdG9yKHgsIHkpIHtcbiAgICAgICAgbGV0IGRlZlgsIGRlZlk7XG4gICAgICAgIGlmICh5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgeCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRzUGFydGljbGVzIC0gVmVjdG9yIG5vdCBpbml0aWFsaXplZCBjb3JyZWN0bHlcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjb29yZHMgPSB4O1xuICAgICAgICAgICAgW2RlZlgsIGRlZlldID0gW2Nvb3Jkcy54LCBjb29yZHMueV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBbZGVmWCwgZGVmWV0gPSBbeCwgeV07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy54ID0gZGVmWDtcbiAgICAgICAgdGhpcy55ID0gZGVmWTtcbiAgICB9XG4gICAgc3RhdGljIGNsb25lKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gVmVjdG9yLmNyZWF0ZShzb3VyY2UueCwgc291cmNlLnkpO1xuICAgIH1cbiAgICBzdGF0aWMgY3JlYXRlKHgsIHkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IoeCwgeSk7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgb3JpZ2luKCkge1xuICAgICAgICByZXR1cm4gVmVjdG9yLmNyZWF0ZSgwLCAwKTtcbiAgICB9XG4gICAgZ2V0IGFuZ2xlKCkge1xuICAgICAgICByZXR1cm4gTWF0aC5hdGFuMih0aGlzLnksIHRoaXMueCk7XG4gICAgfVxuICAgIHNldCBhbmdsZShhbmdsZSkge1xuICAgICAgICB0aGlzLnVwZGF0ZUZyb21BbmdsZShhbmdsZSwgdGhpcy5sZW5ndGgpO1xuICAgIH1cbiAgICBnZXQgbGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KHRoaXMueCAqKiAyICsgdGhpcy55ICoqIDIpO1xuICAgIH1cbiAgICBzZXQgbGVuZ3RoKGxlbmd0aCkge1xuICAgICAgICB0aGlzLnVwZGF0ZUZyb21BbmdsZSh0aGlzLmFuZ2xlLCBsZW5ndGgpO1xuICAgIH1cbiAgICBhZGQodikge1xuICAgICAgICByZXR1cm4gVmVjdG9yLmNyZWF0ZSh0aGlzLnggKyB2LngsIHRoaXMueSArIHYueSk7XG4gICAgfVxuICAgIGFkZFRvKHYpIHtcbiAgICAgICAgdGhpcy54ICs9IHYueDtcbiAgICAgICAgdGhpcy55ICs9IHYueTtcbiAgICB9XG4gICAgc3ViKHYpIHtcbiAgICAgICAgcmV0dXJuIFZlY3Rvci5jcmVhdGUodGhpcy54IC0gdi54LCB0aGlzLnkgLSB2LnkpO1xuICAgIH1cbiAgICBzdWJGcm9tKHYpIHtcbiAgICAgICAgdGhpcy54IC09IHYueDtcbiAgICAgICAgdGhpcy55IC09IHYueTtcbiAgICB9XG4gICAgbXVsdChuKSB7XG4gICAgICAgIHJldHVybiBWZWN0b3IuY3JlYXRlKHRoaXMueCAqIG4sIHRoaXMueSAqIG4pO1xuICAgIH1cbiAgICBtdWx0VG8obikge1xuICAgICAgICB0aGlzLnggKj0gbjtcbiAgICAgICAgdGhpcy55ICo9IG47XG4gICAgfVxuICAgIGRpdihuKSB7XG4gICAgICAgIHJldHVybiBWZWN0b3IuY3JlYXRlKHRoaXMueCAvIG4sIHRoaXMueSAvIG4pO1xuICAgIH1cbiAgICBkaXZUbyhuKSB7XG4gICAgICAgIHRoaXMueCAvPSBuO1xuICAgICAgICB0aGlzLnkgLz0gbjtcbiAgICB9XG4gICAgZGlzdGFuY2VUbyh2KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN1Yih2KS5sZW5ndGg7XG4gICAgfVxuICAgIGdldExlbmd0aFNxKCkge1xuICAgICAgICByZXR1cm4gdGhpcy54ICoqIDIgKyB0aGlzLnkgKiogMjtcbiAgICB9XG4gICAgZGlzdGFuY2VUb1NxKHYpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3ViKHYpLmdldExlbmd0aFNxKCk7XG4gICAgfVxuICAgIG1hbmhhdHRhbkRpc3RhbmNlVG8odikge1xuICAgICAgICByZXR1cm4gTWF0aC5hYnModi54IC0gdGhpcy54KSArIE1hdGguYWJzKHYueSAtIHRoaXMueSk7XG4gICAgfVxuICAgIGNvcHkoKSB7XG4gICAgICAgIHJldHVybiBWZWN0b3IuY2xvbmUodGhpcyk7XG4gICAgfVxuICAgIHNldFRvKHZlbG9jaXR5KSB7XG4gICAgICAgIHRoaXMueCA9IHZlbG9jaXR5Lng7XG4gICAgICAgIHRoaXMueSA9IHZlbG9jaXR5Lnk7XG4gICAgfVxuICAgIHJvdGF0ZShhbmdsZSkge1xuICAgICAgICByZXR1cm4gVmVjdG9yLmNyZWF0ZSh0aGlzLnggKiBNYXRoLmNvcyhhbmdsZSkgLSB0aGlzLnkgKiBNYXRoLnNpbihhbmdsZSksIHRoaXMueCAqIE1hdGguc2luKGFuZ2xlKSArIHRoaXMueSAqIE1hdGguY29zKGFuZ2xlKSk7XG4gICAgfVxuICAgIHVwZGF0ZUZyb21BbmdsZShhbmdsZSwgbGVuZ3RoKSB7XG4gICAgICAgIHRoaXMueCA9IE1hdGguY29zKGFuZ2xlKSAqIGxlbmd0aDtcbiAgICAgICAgdGhpcy55ID0gTWF0aC5zaW4oYW5nbGUpICogbGVuZ3RoO1xuICAgIH1cbn1cbmV4cG9ydHMuVmVjdG9yID0gVmVjdG9yO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlZlY3RvcjNkID0gdm9pZCAwO1xuY29uc3QgVmVjdG9yXzEgPSByZXF1aXJlKFwiLi9WZWN0b3JcIik7XG5jbGFzcyBWZWN0b3IzZCBleHRlbmRzIFZlY3Rvcl8xLlZlY3RvciB7XG4gICAgY29uc3RydWN0b3IoeCwgeSwgeikge1xuICAgICAgICBzdXBlcih4LCB5KTtcbiAgICAgICAgdGhpcy56ID0geiA9PT0gdW5kZWZpbmVkID8geC56IDogejtcbiAgICB9XG4gICAgc3RhdGljIGNsb25lKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gVmVjdG9yM2QuY3JlYXRlKHNvdXJjZS54LCBzb3VyY2UueSwgc291cmNlLnopO1xuICAgIH1cbiAgICBzdGF0aWMgY3JlYXRlKHgsIHksIHopIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzZCh4LCB5LCB6KTtcbiAgICB9XG4gICAgYWRkKHYpIHtcbiAgICAgICAgcmV0dXJuIHYgaW5zdGFuY2VvZiBWZWN0b3IzZCA/IFZlY3RvcjNkLmNyZWF0ZSh0aGlzLnggKyB2LngsIHRoaXMueSArIHYueSwgdGhpcy56ICsgdi56KSA6IHN1cGVyLmFkZCh2KTtcbiAgICB9XG4gICAgYWRkVG8odikge1xuICAgICAgICBzdXBlci5hZGRUbyh2KTtcbiAgICAgICAgaWYgKHYgaW5zdGFuY2VvZiBWZWN0b3IzZCkge1xuICAgICAgICAgICAgdGhpcy56ICs9IHYuejtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdWIodikge1xuICAgICAgICByZXR1cm4gdiBpbnN0YW5jZW9mIFZlY3RvcjNkID8gVmVjdG9yM2QuY3JlYXRlKHRoaXMueCAtIHYueCwgdGhpcy55IC0gdi55LCB0aGlzLnogLSB2LnopIDogc3VwZXIuc3ViKHYpO1xuICAgIH1cbiAgICBzdWJGcm9tKHYpIHtcbiAgICAgICAgc3VwZXIuc3ViRnJvbSh2KTtcbiAgICAgICAgaWYgKHYgaW5zdGFuY2VvZiBWZWN0b3IzZCkge1xuICAgICAgICAgICAgdGhpcy56IC09IHYuejtcbiAgICAgICAgfVxuICAgIH1cbiAgICBtdWx0KG4pIHtcbiAgICAgICAgcmV0dXJuIFZlY3RvcjNkLmNyZWF0ZSh0aGlzLnggKiBuLCB0aGlzLnkgKiBuLCB0aGlzLnogKiBuKTtcbiAgICB9XG4gICAgbXVsdFRvKG4pIHtcbiAgICAgICAgc3VwZXIubXVsdFRvKG4pO1xuICAgICAgICB0aGlzLnogKj0gbjtcbiAgICB9XG4gICAgZGl2KG4pIHtcbiAgICAgICAgcmV0dXJuIFZlY3RvcjNkLmNyZWF0ZSh0aGlzLnggLyBuLCB0aGlzLnkgLyBuLCB0aGlzLnogLyBuKTtcbiAgICB9XG4gICAgZGl2VG8obikge1xuICAgICAgICBzdXBlci5kaXZUbyhuKTtcbiAgICAgICAgdGhpcy56IC89IG47XG4gICAgfVxuICAgIGNvcHkoKSB7XG4gICAgICAgIHJldHVybiBWZWN0b3IzZC5jbG9uZSh0aGlzKTtcbiAgICB9XG4gICAgc2V0VG8odikge1xuICAgICAgICBzdXBlci5zZXRUbyh2KTtcbiAgICAgICAgaWYgKHYgaW5zdGFuY2VvZiBWZWN0b3IzZCkge1xuICAgICAgICAgICAgdGhpcy56ID0gdi56O1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5WZWN0b3IzZCA9IFZlY3RvcjNkO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBhcnRpY2xlcyA9IHZvaWQgMDtcbmNvbnN0IFBhcnRpY2xlXzEgPSByZXF1aXJlKFwiLi9QYXJ0aWNsZVwiKTtcbmNvbnN0IFV0aWxzXzEgPSByZXF1aXJlKFwiLi4vVXRpbHNcIik7XG5jb25zdCBJbnRlcmFjdGlvbk1hbmFnZXJfMSA9IHJlcXVpcmUoXCIuL0ludGVyYWN0aW9uTWFuYWdlclwiKTtcbmNvbnN0IFBhcnRpY2xlc09wdGlvbnNfMSA9IHJlcXVpcmUoXCIuLi9PcHRpb25zL0NsYXNzZXMvUGFydGljbGVzL1BhcnRpY2xlc09wdGlvbnNcIik7XG5jb25zdCBNb3Zlcl8xID0gcmVxdWlyZShcIi4vUGFydGljbGUvTW92ZXJcIik7XG5jbGFzcyBQYXJ0aWNsZXMge1xuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lcikge1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgICAgdGhpcy5uZXh0SWQgPSAwO1xuICAgICAgICB0aGlzLmFycmF5ID0gW107XG4gICAgICAgIHRoaXMuekFycmF5ID0gW107XG4gICAgICAgIHRoaXMubW92ZXIgPSBuZXcgTW92ZXJfMS5Nb3Zlcihjb250YWluZXIpO1xuICAgICAgICB0aGlzLmxpbWl0ID0gMDtcbiAgICAgICAgdGhpcy5uZWVkc1NvcnQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5sYXN0WkluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5mcmVxcyA9IHtcbiAgICAgICAgICAgIGxpbmtzOiBuZXcgTWFwKCksXG4gICAgICAgICAgICB0cmlhbmdsZXM6IG5ldyBNYXAoKSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5pbnRlcmFjdGlvbk1hbmFnZXIgPSBuZXcgSW50ZXJhY3Rpb25NYW5hZ2VyXzEuSW50ZXJhY3Rpb25NYW5hZ2VyKGNvbnRhaW5lcik7XG4gICAgICAgIGNvbnN0IGNhbnZhc1NpemUgPSB0aGlzLmNvbnRhaW5lci5jYW52YXMuc2l6ZTtcbiAgICAgICAgdGhpcy5saW5rc0NvbG9ycyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5xdWFkVHJlZSA9IG5ldyBVdGlsc18xLlF1YWRUcmVlKG5ldyBVdGlsc18xLlJlY3RhbmdsZSgtY2FudmFzU2l6ZS53aWR0aCAvIDQsIC1jYW52YXNTaXplLmhlaWdodCAvIDQsIChjYW52YXNTaXplLndpZHRoICogMykgLyAyLCAoY2FudmFzU2l6ZS5oZWlnaHQgKiAzKSAvIDIpLCA0KTtcbiAgICAgICAgdGhpcy51cGRhdGVycyA9IFV0aWxzXzEuUGx1Z2lucy5nZXRVcGRhdGVycyhjb250YWluZXIsIHRydWUpO1xuICAgIH1cbiAgICBnZXQgY291bnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFycmF5Lmxlbmd0aDtcbiAgICB9XG4gICAgaW5pdCgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcjtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGNvbnRhaW5lci5hY3R1YWxPcHRpb25zO1xuICAgICAgICB0aGlzLmxhc3RaSW5kZXggPSAwO1xuICAgICAgICB0aGlzLm5lZWRzU29ydCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmZyZXFzLmxpbmtzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLmZyZXFzLnRyaWFuZ2xlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgbGV0IGhhbmRsZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy51cGRhdGVycyA9IFV0aWxzXzEuUGx1Z2lucy5nZXRVcGRhdGVycyhjb250YWluZXIsIHRydWUpO1xuICAgICAgICB0aGlzLmludGVyYWN0aW9uTWFuYWdlci5pbml0KCk7XG4gICAgICAgIGZvciAoY29uc3QgWywgcGx1Z2luXSBvZiBjb250YWluZXIucGx1Z2lucykge1xuICAgICAgICAgICAgaWYgKHBsdWdpbi5wYXJ0aWNsZXNJbml0aWFsaXphdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlZCA9IHBsdWdpbi5wYXJ0aWNsZXNJbml0aWFsaXphdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhhbmRsZWQpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFkZE1hbnVhbFBhcnRpY2xlcygpO1xuICAgICAgICBpZiAoIWhhbmRsZWQpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZ3JvdXAgaW4gb3B0aW9ucy5wYXJ0aWNsZXMuZ3JvdXBzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZ3JvdXBPcHRpb25zID0gb3B0aW9ucy5wYXJ0aWNsZXMuZ3JvdXBzW2dyb3VwXTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5jb3VudCwgaiA9IDA7IGogPCAoKF9hID0gZ3JvdXBPcHRpb25zLm51bWJlcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnZhbHVlKSAmJiBpIDwgb3B0aW9ucy5wYXJ0aWNsZXMubnVtYmVyLnZhbHVlOyBpKyssIGorKykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFBhcnRpY2xlKHVuZGVmaW5lZCwgZ3JvdXBPcHRpb25zLCBncm91cCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuY291bnQ7IGkgPCBvcHRpb25zLnBhcnRpY2xlcy5udW1iZXIudmFsdWU7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkUGFydGljbGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb250YWluZXIucGF0aEdlbmVyYXRvci5pbml0KGNvbnRhaW5lcik7XG4gICAgfVxuICAgIHJlZHJhdygpIHtcbiAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICAgICAgdGhpcy5kcmF3KHsgdmFsdWU6IDAsIGZhY3RvcjogMCB9KTtcbiAgICB9XG4gICAgcmVtb3ZlQXQoaW5kZXgsIHF1YW50aXR5ID0gMSwgZ3JvdXAsIG92ZXJyaWRlKSB7XG4gICAgICAgIGlmICghKGluZGV4ID49IDAgJiYgaW5kZXggPD0gdGhpcy5jb3VudCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZGVsZXRlZCA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSBpbmRleDsgZGVsZXRlZCA8IHF1YW50aXR5ICYmIGkgPCB0aGlzLmNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcnRpY2xlID0gdGhpcy5hcnJheVtpXTtcbiAgICAgICAgICAgIGlmICghcGFydGljbGUgfHwgcGFydGljbGUuZ3JvdXAgIT09IGdyb3VwKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJ0aWNsZS5kZXN0cm95KG92ZXJyaWRlKTtcbiAgICAgICAgICAgIHRoaXMuYXJyYXkuc3BsaWNlKGktLSwgMSk7XG4gICAgICAgICAgICBjb25zdCB6SWR4ID0gdGhpcy56QXJyYXkuaW5kZXhPZihwYXJ0aWNsZSk7XG4gICAgICAgICAgICB0aGlzLnpBcnJheS5zcGxpY2UoeklkeCwgMSk7XG4gICAgICAgICAgICBkZWxldGVkKys7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVtb3ZlKHBhcnRpY2xlLCBncm91cCwgb3ZlcnJpZGUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVBdCh0aGlzLmFycmF5LmluZGV4T2YocGFydGljbGUpLCB1bmRlZmluZWQsIGdyb3VwLCBvdmVycmlkZSk7XG4gICAgfVxuICAgIHVwZGF0ZShkZWx0YSkge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcjtcbiAgICAgICAgY29uc3QgcGFydGljbGVzVG9EZWxldGUgPSBbXTtcbiAgICAgICAgY29udGFpbmVyLnBhdGhHZW5lcmF0b3IudXBkYXRlKCk7XG4gICAgICAgIGZvciAoY29uc3QgWywgcGx1Z2luXSBvZiBjb250YWluZXIucGx1Z2lucykge1xuICAgICAgICAgICAgaWYgKHBsdWdpbi51cGRhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHBsdWdpbi51cGRhdGUoZGVsdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgcGFydGljbGUgb2YgdGhpcy5hcnJheSkge1xuICAgICAgICAgICAgY29uc3QgcmVzaXplRmFjdG9yID0gY29udGFpbmVyLmNhbnZhcy5yZXNpemVGYWN0b3I7XG4gICAgICAgICAgICBpZiAocmVzaXplRmFjdG9yKSB7XG4gICAgICAgICAgICAgICAgcGFydGljbGUucG9zaXRpb24ueCAqPSByZXNpemVGYWN0b3Iud2lkdGg7XG4gICAgICAgICAgICAgICAgcGFydGljbGUucG9zaXRpb24ueSAqPSByZXNpemVGYWN0b3IuaGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFydGljbGUuYnViYmxlLmluUmFuZ2UgPSBmYWxzZTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgWywgcGx1Z2luXSBvZiB0aGlzLmNvbnRhaW5lci5wbHVnaW5zKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnRpY2xlLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHBsdWdpbi5wYXJ0aWNsZVVwZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICBwbHVnaW4ucGFydGljbGVVcGRhdGUocGFydGljbGUsIGRlbHRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm1vdmVyLm1vdmUocGFydGljbGUsIGRlbHRhKTtcbiAgICAgICAgICAgIGlmIChwYXJ0aWNsZS5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgICBwYXJ0aWNsZXNUb0RlbGV0ZS5wdXNoKHBhcnRpY2xlKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucXVhZFRyZWUuaW5zZXJ0KG5ldyBVdGlsc18xLlBvaW50KHBhcnRpY2xlLmdldFBvc2l0aW9uKCksIHBhcnRpY2xlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBwYXJ0aWNsZSBvZiBwYXJ0aWNsZXNUb0RlbGV0ZSkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmUocGFydGljbGUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW50ZXJhY3Rpb25NYW5hZ2VyLmV4dGVybmFsSW50ZXJhY3QoZGVsdGEpO1xuICAgICAgICBmb3IgKGNvbnN0IHBhcnRpY2xlIG9mIGNvbnRhaW5lci5wYXJ0aWNsZXMuYXJyYXkpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdXBkYXRlciBvZiB0aGlzLnVwZGF0ZXJzKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlci51cGRhdGUocGFydGljbGUsIGRlbHRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghcGFydGljbGUuZGVzdHJveWVkICYmICFwYXJ0aWNsZS5zcGF3bmluZykge1xuICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJhY3Rpb25NYW5hZ2VyLnBhcnRpY2xlc0ludGVyYWN0KHBhcnRpY2xlLCBkZWx0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIGNvbnRhaW5lci5jYW52YXMucmVzaXplRmFjdG9yO1xuICAgIH1cbiAgICBkcmF3KGRlbHRhKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyO1xuICAgICAgICBjb250YWluZXIuY2FudmFzLmNsZWFyKCk7XG4gICAgICAgIGNvbnN0IGNhbnZhc1NpemUgPSB0aGlzLmNvbnRhaW5lci5jYW52YXMuc2l6ZTtcbiAgICAgICAgdGhpcy5xdWFkVHJlZSA9IG5ldyBVdGlsc18xLlF1YWRUcmVlKG5ldyBVdGlsc18xLlJlY3RhbmdsZSgtY2FudmFzU2l6ZS53aWR0aCAvIDQsIC1jYW52YXNTaXplLmhlaWdodCAvIDQsIChjYW52YXNTaXplLndpZHRoICogMykgLyAyLCAoY2FudmFzU2l6ZS5oZWlnaHQgKiAzKSAvIDIpLCA0KTtcbiAgICAgICAgdGhpcy51cGRhdGUoZGVsdGEpO1xuICAgICAgICBpZiAodGhpcy5uZWVkc1NvcnQpIHtcbiAgICAgICAgICAgIHRoaXMuekFycmF5LnNvcnQoKGEsIGIpID0+IGIucG9zaXRpb24ueiAtIGEucG9zaXRpb24ueiB8fCBhLmlkIC0gYi5pZCk7XG4gICAgICAgICAgICB0aGlzLmxhc3RaSW5kZXggPSB0aGlzLnpBcnJheVt0aGlzLnpBcnJheS5sZW5ndGggLSAxXS5wb3NpdGlvbi56O1xuICAgICAgICAgICAgdGhpcy5uZWVkc1NvcnQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IFssIHBsdWdpbl0gb2YgY29udGFpbmVyLnBsdWdpbnMpIHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5jYW52YXMuZHJhd1BsdWdpbihwbHVnaW4sIGRlbHRhKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHAgb2YgdGhpcy56QXJyYXkpIHtcbiAgICAgICAgICAgIHAuZHJhdyhkZWx0YSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuYXJyYXkgPSBbXTtcbiAgICAgICAgdGhpcy56QXJyYXkgPSBbXTtcbiAgICB9XG4gICAgcHVzaChuYiwgbW91c2UsIG92ZXJyaWRlT3B0aW9ucywgZ3JvdXApIHtcbiAgICAgICAgdGhpcy5wdXNoaW5nID0gdHJ1ZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuYjsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmFkZFBhcnRpY2xlKG1vdXNlID09PSBudWxsIHx8IG1vdXNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBtb3VzZS5wb3NpdGlvbiwgb3ZlcnJpZGVPcHRpb25zLCBncm91cCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wdXNoaW5nID0gZmFsc2U7XG4gICAgfVxuICAgIGFkZFBhcnRpY2xlKHBvc2l0aW9uLCBvdmVycmlkZU9wdGlvbnMsIGdyb3VwKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gY29udGFpbmVyLmFjdHVhbE9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGxpbWl0ID0gb3B0aW9ucy5wYXJ0aWNsZXMubnVtYmVyLmxpbWl0ICogY29udGFpbmVyLmRlbnNpdHk7XG4gICAgICAgIGlmIChsaW1pdCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGNvdW50VG9SZW1vdmUgPSB0aGlzLmNvdW50ICsgMSAtIGxpbWl0O1xuICAgICAgICAgICAgaWYgKGNvdW50VG9SZW1vdmUgPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVRdWFudGl0eShjb3VudFRvUmVtb3ZlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5wdXNoUGFydGljbGUocG9zaXRpb24sIG92ZXJyaWRlT3B0aW9ucywgZ3JvdXApO1xuICAgIH1cbiAgICBhZGRTcGxpdFBhcnRpY2xlKHBhcmVudCkge1xuICAgICAgICBjb25zdCBzcGxpdE9wdGlvbnMgPSBwYXJlbnQub3B0aW9ucy5kZXN0cm95LnNwbGl0O1xuICAgICAgICBjb25zdCBvcHRpb25zID0gbmV3IFBhcnRpY2xlc09wdGlvbnNfMS5QYXJ0aWNsZXNPcHRpb25zKCk7XG4gICAgICAgIG9wdGlvbnMubG9hZChwYXJlbnQub3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGZhY3RvciA9ICgwLCBVdGlsc18xLmdldFJhbmdlVmFsdWUpKHNwbGl0T3B0aW9ucy5mYWN0b3IudmFsdWUpO1xuICAgICAgICBvcHRpb25zLmNvbG9yLmxvYWQoe1xuICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICBoc2w6IHBhcmVudC5nZXRGaWxsQ29sb3IoKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuc2l6ZS52YWx1ZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgb3B0aW9ucy5zaXplLnZhbHVlIC89IGZhY3RvcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMuc2l6ZS52YWx1ZS5taW4gLz0gZmFjdG9yO1xuICAgICAgICAgICAgb3B0aW9ucy5zaXplLnZhbHVlLm1heCAvPSBmYWN0b3I7XG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucy5sb2FkKHNwbGl0T3B0aW9ucy5wYXJ0aWNsZXMpO1xuICAgICAgICBjb25zdCBvZmZzZXQgPSBzcGxpdE9wdGlvbnMuc2l6ZU9mZnNldCA/ICgwLCBVdGlsc18xLnNldFJhbmdlVmFsdWUpKC1wYXJlbnQuc2l6ZS52YWx1ZSwgcGFyZW50LnNpemUudmFsdWUpIDogMDtcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSB7XG4gICAgICAgICAgICB4OiBwYXJlbnQucG9zaXRpb24ueCArICgwLCBVdGlsc18xLnJhbmRvbUluUmFuZ2UpKG9mZnNldCksXG4gICAgICAgICAgICB5OiBwYXJlbnQucG9zaXRpb24ueSArICgwLCBVdGlsc18xLnJhbmRvbUluUmFuZ2UpKG9mZnNldCksXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzLnB1c2hQYXJ0aWNsZShwb3NpdGlvbiwgb3B0aW9ucywgcGFyZW50Lmdyb3VwLCAocGFydGljbGUpID0+IHtcbiAgICAgICAgICAgIGlmIChwYXJ0aWNsZS5zaXplLnZhbHVlIDwgMC41KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFydGljbGUudmVsb2NpdHkubGVuZ3RoID0gKDAsIFV0aWxzXzEucmFuZG9tSW5SYW5nZSkoKDAsIFV0aWxzXzEuc2V0UmFuZ2VWYWx1ZSkocGFyZW50LnZlbG9jaXR5Lmxlbmd0aCwgcGFydGljbGUudmVsb2NpdHkubGVuZ3RoKSk7XG4gICAgICAgICAgICBwYXJ0aWNsZS5zcGxpdENvdW50ID0gcGFyZW50LnNwbGl0Q291bnQgKyAxO1xuICAgICAgICAgICAgcGFydGljbGUudW5icmVha2FibGUgPSB0cnVlO1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgcGFydGljbGUudW5icmVha2FibGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJlbW92ZVF1YW50aXR5KHF1YW50aXR5LCBncm91cCkge1xuICAgICAgICB0aGlzLnJlbW92ZUF0KDAsIHF1YW50aXR5LCBncm91cCk7XG4gICAgfVxuICAgIGdldExpbmtGcmVxdWVuY3kocDEsIHAyKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IGAke01hdGgubWluKHAxLmlkLCBwMi5pZCl9XyR7TWF0aC5tYXgocDEuaWQsIHAyLmlkKX1gO1xuICAgICAgICBsZXQgcmVzID0gdGhpcy5mcmVxcy5saW5rcy5nZXQoa2V5KTtcbiAgICAgICAgaWYgKHJlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXMgPSBNYXRoLnJhbmRvbSgpO1xuICAgICAgICAgICAgdGhpcy5mcmVxcy5saW5rcy5zZXQoa2V5LCByZXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIGdldFRyaWFuZ2xlRnJlcXVlbmN5KHAxLCBwMiwgcDMpIHtcbiAgICAgICAgbGV0IFtpZDEsIGlkMiwgaWQzXSA9IFtwMS5pZCwgcDIuaWQsIHAzLmlkXTtcbiAgICAgICAgaWYgKGlkMSA+IGlkMikge1xuICAgICAgICAgICAgW2lkMiwgaWQxXSA9IFtpZDEsIGlkMl07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlkMiA+IGlkMykge1xuICAgICAgICAgICAgW2lkMywgaWQyXSA9IFtpZDIsIGlkM107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlkMSA+IGlkMykge1xuICAgICAgICAgICAgW2lkMywgaWQxXSA9IFtpZDEsIGlkM107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qga2V5ID0gYCR7aWQxfV8ke2lkMn1fJHtpZDN9YDtcbiAgICAgICAgbGV0IHJlcyA9IHRoaXMuZnJlcXMudHJpYW5nbGVzLmdldChrZXkpO1xuICAgICAgICBpZiAocmVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlcyA9IE1hdGgucmFuZG9tKCk7XG4gICAgICAgICAgICB0aGlzLmZyZXFzLnRyaWFuZ2xlcy5zZXQoa2V5LCByZXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIGFkZE1hbnVhbFBhcnRpY2xlcygpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXI7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBjb250YWluZXIuYWN0dWFsT3B0aW9ucztcbiAgICAgICAgZm9yIChjb25zdCBwYXJ0aWNsZSBvZiBvcHRpb25zLm1hbnVhbFBhcnRpY2xlcykge1xuICAgICAgICAgICAgY29uc3QgcG9zID0gcGFydGljbGUucG9zaXRpb25cbiAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgeDogKHBhcnRpY2xlLnBvc2l0aW9uLnggKiBjb250YWluZXIuY2FudmFzLnNpemUud2lkdGgpIC8gMTAwLFxuICAgICAgICAgICAgICAgICAgICB5OiAocGFydGljbGUucG9zaXRpb24ueSAqIGNvbnRhaW5lci5jYW52YXMuc2l6ZS5oZWlnaHQpIC8gMTAwLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuYWRkUGFydGljbGUocG9zLCBwYXJ0aWNsZS5vcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXREZW5zaXR5KCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5jb250YWluZXIuYWN0dWFsT3B0aW9ucztcbiAgICAgICAgZm9yIChjb25zdCBncm91cCBpbiBvcHRpb25zLnBhcnRpY2xlcy5ncm91cHMpIHtcbiAgICAgICAgICAgIHRoaXMuYXBwbHlEZW5zaXR5KG9wdGlvbnMucGFydGljbGVzLmdyb3Vwc1tncm91cF0sIDAsIGdyb3VwKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFwcGx5RGVuc2l0eShvcHRpb25zLnBhcnRpY2xlcywgb3B0aW9ucy5tYW51YWxQYXJ0aWNsZXMubGVuZ3RoKTtcbiAgICB9XG4gICAgYXBwbHlEZW5zaXR5KG9wdGlvbnMsIG1hbnVhbENvdW50LCBncm91cCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICghKChfYSA9IG9wdGlvbnMubnVtYmVyLmRlbnNpdHkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5lbmFibGUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbnVtYmVyT3B0aW9ucyA9IG9wdGlvbnMubnVtYmVyO1xuICAgICAgICBjb25zdCBkZW5zaXR5RmFjdG9yID0gdGhpcy5pbml0RGVuc2l0eUZhY3RvcihudW1iZXJPcHRpb25zLmRlbnNpdHkpO1xuICAgICAgICBjb25zdCBvcHRQYXJ0aWNsZXNOdW1iZXIgPSBudW1iZXJPcHRpb25zLnZhbHVlO1xuICAgICAgICBjb25zdCBvcHRQYXJ0aWNsZXNMaW1pdCA9IG51bWJlck9wdGlvbnMubGltaXQgPiAwID8gbnVtYmVyT3B0aW9ucy5saW1pdCA6IG9wdFBhcnRpY2xlc051bWJlcjtcbiAgICAgICAgY29uc3QgcGFydGljbGVzTnVtYmVyID0gTWF0aC5taW4ob3B0UGFydGljbGVzTnVtYmVyLCBvcHRQYXJ0aWNsZXNMaW1pdCkgKiBkZW5zaXR5RmFjdG9yICsgbWFudWFsQ291bnQ7XG4gICAgICAgIGNvbnN0IHBhcnRpY2xlc0NvdW50ID0gTWF0aC5taW4odGhpcy5jb3VudCwgdGhpcy5hcnJheS5maWx0ZXIoKHQpID0+IHQuZ3JvdXAgPT09IGdyb3VwKS5sZW5ndGgpO1xuICAgICAgICB0aGlzLmxpbWl0ID0gbnVtYmVyT3B0aW9ucy5saW1pdCAqIGRlbnNpdHlGYWN0b3I7XG4gICAgICAgIGlmIChwYXJ0aWNsZXNDb3VudCA8IHBhcnRpY2xlc051bWJlcikge1xuICAgICAgICAgICAgdGhpcy5wdXNoKE1hdGguYWJzKHBhcnRpY2xlc051bWJlciAtIHBhcnRpY2xlc0NvdW50KSwgdW5kZWZpbmVkLCBvcHRpb25zLCBncm91cCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGFydGljbGVzQ291bnQgPiBwYXJ0aWNsZXNOdW1iZXIpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlUXVhbnRpdHkocGFydGljbGVzQ291bnQgLSBwYXJ0aWNsZXNOdW1iZXIsIGdyb3VwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpbml0RGVuc2l0eUZhY3RvcihkZW5zaXR5T3B0aW9ucykge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcjtcbiAgICAgICAgaWYgKCFjb250YWluZXIuY2FudmFzLmVsZW1lbnQgfHwgIWRlbnNpdHlPcHRpb25zLmVuYWJsZSkge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2FudmFzID0gY29udGFpbmVyLmNhbnZhcy5lbGVtZW50O1xuICAgICAgICBjb25zdCBweFJhdGlvID0gY29udGFpbmVyLnJldGluYS5waXhlbFJhdGlvO1xuICAgICAgICByZXR1cm4gKGNhbnZhcy53aWR0aCAqIGNhbnZhcy5oZWlnaHQpIC8gKGRlbnNpdHlPcHRpb25zLmZhY3RvciAqIHB4UmF0aW8gKiogMiAqIGRlbnNpdHlPcHRpb25zLmFyZWEpO1xuICAgIH1cbiAgICBwdXNoUGFydGljbGUocG9zaXRpb24sIG92ZXJyaWRlT3B0aW9ucywgZ3JvdXAsIGluaXRpYWxpemVyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwYXJ0aWNsZSA9IG5ldyBQYXJ0aWNsZV8xLlBhcnRpY2xlKHRoaXMubmV4dElkLCB0aGlzLmNvbnRhaW5lciwgcG9zaXRpb24sIG92ZXJyaWRlT3B0aW9ucywgZ3JvdXApO1xuICAgICAgICAgICAgbGV0IGNhbkFkZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAoaW5pdGlhbGl6ZXIpIHtcbiAgICAgICAgICAgICAgICBjYW5BZGQgPSBpbml0aWFsaXplcihwYXJ0aWNsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWNhbkFkZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYXJyYXkucHVzaChwYXJ0aWNsZSk7XG4gICAgICAgICAgICB0aGlzLnpBcnJheS5wdXNoKHBhcnRpY2xlKTtcbiAgICAgICAgICAgIHRoaXMubmV4dElkKys7XG4gICAgICAgICAgICByZXR1cm4gcGFydGljbGU7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgZXJyb3IgYWRkaW5nIHBhcnRpY2xlOiAke2V9YCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlBhcnRpY2xlcyA9IFBhcnRpY2xlcztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QYXJ0aWNsZXNJbnRlcmFjdG9yQmFzZSA9IHZvaWQgMDtcbmNvbnN0IEVudW1zXzEgPSByZXF1aXJlKFwiLi4vRW51bXNcIik7XG5jbGFzcyBQYXJ0aWNsZXNJbnRlcmFjdG9yQmFzZSB7XG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICB0aGlzLnR5cGUgPSBFbnVtc18xLkludGVyYWN0b3JUeXBlLlBhcnRpY2xlcztcbiAgICB9XG59XG5leHBvcnRzLlBhcnRpY2xlc0ludGVyYWN0b3JCYXNlID0gUGFydGljbGVzSW50ZXJhY3RvckJhc2U7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUmV0aW5hID0gdm9pZCAwO1xuY29uc3QgVXRpbHNfMSA9IHJlcXVpcmUoXCIuLi9VdGlsc1wiKTtcbmNsYXNzIFJldGluYSB7XG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgIH1cbiAgICBpbml0KCkge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcjtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGNvbnRhaW5lci5hY3R1YWxPcHRpb25zO1xuICAgICAgICB0aGlzLnBpeGVsUmF0aW8gPSAhb3B0aW9ucy5kZXRlY3RSZXRpbmEgfHwgKDAsIFV0aWxzXzEuaXNTc3IpKCkgPyAxIDogd2luZG93LmRldmljZVBpeGVsUmF0aW87XG4gICAgICAgIGNvbnN0IG1vdGlvbk9wdGlvbnMgPSB0aGlzLmNvbnRhaW5lci5hY3R1YWxPcHRpb25zLm1vdGlvbjtcbiAgICAgICAgaWYgKG1vdGlvbk9wdGlvbnMgJiYgKG1vdGlvbk9wdGlvbnMuZGlzYWJsZSB8fCBtb3Rpb25PcHRpb25zLnJlZHVjZS52YWx1ZSkpIHtcbiAgICAgICAgICAgIGlmICgoMCwgVXRpbHNfMS5pc1NzcikoKSB8fCB0eXBlb2YgbWF0Y2hNZWRpYSA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhbWF0Y2hNZWRpYSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVkdWNlRmFjdG9yID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1lZGlhUXVlcnkgPSBtYXRjaE1lZGlhKFwiKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246IHJlZHVjZSlcIik7XG4gICAgICAgICAgICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVNb3Rpb25DaGFuZ2UobWVkaWFRdWVyeSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhhbmRsZUNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlTW90aW9uQ2hhbmdlKG1lZGlhUXVlcnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLnJlZnJlc2goKS5jYXRjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lZGlhUXVlcnkuYWRkRXZlbnRMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZWRpYVF1ZXJ5LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgaGFuZGxlQ2hhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChtZWRpYVF1ZXJ5LmFkZExpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhUXVlcnkuYWRkTGlzdGVuZXIoaGFuZGxlQ2hhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVkdWNlRmFjdG9yID0gMTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByYXRpbyA9IHRoaXMucGl4ZWxSYXRpbztcbiAgICAgICAgaWYgKGNvbnRhaW5lci5jYW52YXMuZWxlbWVudCkge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGNvbnRhaW5lci5jYW52YXMuZWxlbWVudDtcbiAgICAgICAgICAgIGNvbnRhaW5lci5jYW52YXMuc2l6ZS53aWR0aCA9IGVsZW1lbnQub2Zmc2V0V2lkdGggKiByYXRpbztcbiAgICAgICAgICAgIGNvbnRhaW5lci5jYW52YXMuc2l6ZS5oZWlnaHQgPSBlbGVtZW50Lm9mZnNldEhlaWdodCAqIHJhdGlvO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcnRpY2xlcyA9IG9wdGlvbnMucGFydGljbGVzO1xuICAgICAgICB0aGlzLmF0dHJhY3REaXN0YW5jZSA9IHBhcnRpY2xlcy5tb3ZlLmF0dHJhY3QuZGlzdGFuY2UgKiByYXRpbztcbiAgICAgICAgdGhpcy5saW5rc0Rpc3RhbmNlID0gcGFydGljbGVzLmxpbmtzLmRpc3RhbmNlICogcmF0aW87XG4gICAgICAgIHRoaXMubGlua3NXaWR0aCA9IHBhcnRpY2xlcy5saW5rcy53aWR0aCAqIHJhdGlvO1xuICAgICAgICB0aGlzLnNpemVBbmltYXRpb25TcGVlZCA9IHBhcnRpY2xlcy5zaXplLmFuaW1hdGlvbi5zcGVlZCAqIHJhdGlvO1xuICAgICAgICB0aGlzLm1heFNwZWVkID0gcGFydGljbGVzLm1vdmUuZ3Jhdml0eS5tYXhTcGVlZCAqIHJhdGlvO1xuICAgICAgICBpZiAocGFydGljbGVzLm9yYml0LnJhZGl1cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLm9yYml0UmFkaXVzID0gcGFydGljbGVzLm9yYml0LnJhZGl1cyAqIHRoaXMuY29udGFpbmVyLnJldGluYS5waXhlbFJhdGlvO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1vZGVzID0gb3B0aW9ucy5pbnRlcmFjdGl2aXR5Lm1vZGVzO1xuICAgICAgICB0aGlzLmNvbm5lY3RNb2RlRGlzdGFuY2UgPSBtb2Rlcy5jb25uZWN0LmRpc3RhbmNlICogcmF0aW87XG4gICAgICAgIHRoaXMuY29ubmVjdE1vZGVSYWRpdXMgPSBtb2Rlcy5jb25uZWN0LnJhZGl1cyAqIHJhdGlvO1xuICAgICAgICB0aGlzLmdyYWJNb2RlRGlzdGFuY2UgPSBtb2Rlcy5ncmFiLmRpc3RhbmNlICogcmF0aW87XG4gICAgICAgIHRoaXMucmVwdWxzZU1vZGVEaXN0YW5jZSA9IG1vZGVzLnJlcHVsc2UuZGlzdGFuY2UgKiByYXRpbztcbiAgICAgICAgdGhpcy5ib3VuY2VNb2RlRGlzdGFuY2UgPSBtb2Rlcy5ib3VuY2UuZGlzdGFuY2UgKiByYXRpbztcbiAgICAgICAgdGhpcy5hdHRyYWN0TW9kZURpc3RhbmNlID0gbW9kZXMuYXR0cmFjdC5kaXN0YW5jZSAqIHJhdGlvO1xuICAgICAgICB0aGlzLnNsb3dNb2RlUmFkaXVzID0gbW9kZXMuc2xvdy5yYWRpdXMgKiByYXRpbztcbiAgICAgICAgdGhpcy5idWJibGVNb2RlRGlzdGFuY2UgPSBtb2Rlcy5idWJibGUuZGlzdGFuY2UgKiByYXRpbztcbiAgICAgICAgaWYgKG1vZGVzLmJ1YmJsZS5zaXplKSB7XG4gICAgICAgICAgICB0aGlzLmJ1YmJsZU1vZGVTaXplID0gbW9kZXMuYnViYmxlLnNpemUgKiByYXRpbztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpbml0UGFydGljbGUocGFydGljbGUpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHBhcnRpY2xlLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHJhdGlvID0gdGhpcy5waXhlbFJhdGlvO1xuICAgICAgICBjb25zdCBtb3ZlRGlzdGFuY2UgPSBvcHRpb25zLm1vdmUuZGlzdGFuY2U7XG4gICAgICAgIGNvbnN0IHByb3BzID0gcGFydGljbGUucmV0aW5hO1xuICAgICAgICBwcm9wcy5hdHRyYWN0RGlzdGFuY2UgPSBvcHRpb25zLm1vdmUuYXR0cmFjdC5kaXN0YW5jZSAqIHJhdGlvO1xuICAgICAgICBwcm9wcy5saW5rc0Rpc3RhbmNlID0gb3B0aW9ucy5saW5rcy5kaXN0YW5jZSAqIHJhdGlvO1xuICAgICAgICBwcm9wcy5saW5rc1dpZHRoID0gb3B0aW9ucy5saW5rcy53aWR0aCAqIHJhdGlvO1xuICAgICAgICBwcm9wcy5tb3ZlRHJpZnQgPSAoMCwgVXRpbHNfMS5nZXRSYW5nZVZhbHVlKShvcHRpb25zLm1vdmUuZHJpZnQpICogcmF0aW87XG4gICAgICAgIHByb3BzLm1vdmVTcGVlZCA9ICgwLCBVdGlsc18xLmdldFJhbmdlVmFsdWUpKG9wdGlvbnMubW92ZS5zcGVlZCkgKiByYXRpbztcbiAgICAgICAgcHJvcHMuc2l6ZUFuaW1hdGlvblNwZWVkID0gb3B0aW9ucy5zaXplLmFuaW1hdGlvbi5zcGVlZCAqIHJhdGlvO1xuICAgICAgICBpZiAocGFydGljbGUuc3Bpbikge1xuICAgICAgICAgICAgcHJvcHMuc3BpbkFjY2VsZXJhdGlvbiA9ICgwLCBVdGlsc18xLmdldFJhbmdlVmFsdWUpKG9wdGlvbnMubW92ZS5zcGluLmFjY2VsZXJhdGlvbikgKiByYXRpbztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtYXhEaXN0YW5jZSA9IHByb3BzLm1heERpc3RhbmNlO1xuICAgICAgICBtYXhEaXN0YW5jZS5ob3Jpem9udGFsID0gbW92ZURpc3RhbmNlLmhvcml6b250YWwgIT09IHVuZGVmaW5lZCA/IG1vdmVEaXN0YW5jZS5ob3Jpem9udGFsICogcmF0aW8gOiB1bmRlZmluZWQ7XG4gICAgICAgIG1heERpc3RhbmNlLnZlcnRpY2FsID0gbW92ZURpc3RhbmNlLnZlcnRpY2FsICE9PSB1bmRlZmluZWQgPyBtb3ZlRGlzdGFuY2UudmVydGljYWwgKiByYXRpbyA6IHVuZGVmaW5lZDtcbiAgICAgICAgcHJvcHMubWF4U3BlZWQgPSBvcHRpb25zLm1vdmUuZ3Jhdml0eS5tYXhTcGVlZCAqIHJhdGlvO1xuICAgIH1cbiAgICBoYW5kbGVNb3Rpb25DaGFuZ2UobWVkaWFRdWVyeSkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5jb250YWluZXIuYWN0dWFsT3B0aW9ucztcbiAgICAgICAgaWYgKG1lZGlhUXVlcnkubWF0Y2hlcykge1xuICAgICAgICAgICAgY29uc3QgbW90aW9uID0gb3B0aW9ucy5tb3Rpb247XG4gICAgICAgICAgICB0aGlzLnJlZHVjZUZhY3RvciA9IG1vdGlvbi5kaXNhYmxlID8gMCA6IG1vdGlvbi5yZWR1Y2UudmFsdWUgPyAxIC8gbW90aW9uLnJlZHVjZS5mYWN0b3IgOiAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yZWR1Y2VGYWN0b3IgPSAxO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5SZXRpbmEgPSBSZXRpbmE7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQW5pbWF0aW9uU3RhdHVzID0gdm9pZCAwO1xudmFyIEFuaW1hdGlvblN0YXR1cztcbihmdW5jdGlvbiAoQW5pbWF0aW9uU3RhdHVzKSB7XG4gICAgQW5pbWF0aW9uU3RhdHVzW0FuaW1hdGlvblN0YXR1c1tcImluY3JlYXNpbmdcIl0gPSAwXSA9IFwiaW5jcmVhc2luZ1wiO1xuICAgIEFuaW1hdGlvblN0YXR1c1tBbmltYXRpb25TdGF0dXNbXCJkZWNyZWFzaW5nXCJdID0gMV0gPSBcImRlY3JlYXNpbmdcIjtcbn0pKEFuaW1hdGlvblN0YXR1cyA9IGV4cG9ydHMuQW5pbWF0aW9uU3RhdHVzIHx8IChleHBvcnRzLkFuaW1hdGlvblN0YXR1cyA9IHt9KSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTW92ZURpcmVjdGlvbiA9IHZvaWQgMDtcbnZhciBNb3ZlRGlyZWN0aW9uO1xuKGZ1bmN0aW9uIChNb3ZlRGlyZWN0aW9uKSB7XG4gICAgTW92ZURpcmVjdGlvbltcImJvdHRvbVwiXSA9IFwiYm90dG9tXCI7XG4gICAgTW92ZURpcmVjdGlvbltcImJvdHRvbUxlZnRcIl0gPSBcImJvdHRvbS1sZWZ0XCI7XG4gICAgTW92ZURpcmVjdGlvbltcImJvdHRvbVJpZ2h0XCJdID0gXCJib3R0b20tcmlnaHRcIjtcbiAgICBNb3ZlRGlyZWN0aW9uW1wibGVmdFwiXSA9IFwibGVmdFwiO1xuICAgIE1vdmVEaXJlY3Rpb25bXCJub25lXCJdID0gXCJub25lXCI7XG4gICAgTW92ZURpcmVjdGlvbltcInJpZ2h0XCJdID0gXCJyaWdodFwiO1xuICAgIE1vdmVEaXJlY3Rpb25bXCJ0b3BcIl0gPSBcInRvcFwiO1xuICAgIE1vdmVEaXJlY3Rpb25bXCJ0b3BMZWZ0XCJdID0gXCJ0b3AtbGVmdFwiO1xuICAgIE1vdmVEaXJlY3Rpb25bXCJ0b3BSaWdodFwiXSA9IFwidG9wLXJpZ2h0XCI7XG59KShNb3ZlRGlyZWN0aW9uID0gZXhwb3J0cy5Nb3ZlRGlyZWN0aW9uIHx8IChleHBvcnRzLk1vdmVEaXJlY3Rpb24gPSB7fSkpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk91dE1vZGVEaXJlY3Rpb24gPSB2b2lkIDA7XG52YXIgT3V0TW9kZURpcmVjdGlvbjtcbihmdW5jdGlvbiAoT3V0TW9kZURpcmVjdGlvbikge1xuICAgIE91dE1vZGVEaXJlY3Rpb25bXCJib3R0b21cIl0gPSBcImJvdHRvbVwiO1xuICAgIE91dE1vZGVEaXJlY3Rpb25bXCJsZWZ0XCJdID0gXCJsZWZ0XCI7XG4gICAgT3V0TW9kZURpcmVjdGlvbltcInJpZ2h0XCJdID0gXCJyaWdodFwiO1xuICAgIE91dE1vZGVEaXJlY3Rpb25bXCJ0b3BcIl0gPSBcInRvcFwiO1xufSkoT3V0TW9kZURpcmVjdGlvbiA9IGV4cG9ydHMuT3V0TW9kZURpcmVjdGlvbiB8fCAoZXhwb3J0cy5PdXRNb2RlRGlyZWN0aW9uID0ge30pKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Sb3RhdGVEaXJlY3Rpb24gPSB2b2lkIDA7XG52YXIgUm90YXRlRGlyZWN0aW9uO1xuKGZ1bmN0aW9uIChSb3RhdGVEaXJlY3Rpb24pIHtcbiAgICBSb3RhdGVEaXJlY3Rpb25bXCJjbG9ja3dpc2VcIl0gPSBcImNsb2Nrd2lzZVwiO1xuICAgIFJvdGF0ZURpcmVjdGlvbltcImNvdW50ZXJDbG9ja3dpc2VcIl0gPSBcImNvdW50ZXItY2xvY2t3aXNlXCI7XG4gICAgUm90YXRlRGlyZWN0aW9uW1wicmFuZG9tXCJdID0gXCJyYW5kb21cIjtcbn0pKFJvdGF0ZURpcmVjdGlvbiA9IGV4cG9ydHMuUm90YXRlRGlyZWN0aW9uIHx8IChleHBvcnRzLlJvdGF0ZURpcmVjdGlvbiA9IHt9KSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVGlsdERpcmVjdGlvbiA9IHZvaWQgMDtcbnZhciBUaWx0RGlyZWN0aW9uO1xuKGZ1bmN0aW9uIChUaWx0RGlyZWN0aW9uKSB7XG4gICAgVGlsdERpcmVjdGlvbltcImNsb2Nrd2lzZVwiXSA9IFwiY2xvY2t3aXNlXCI7XG4gICAgVGlsdERpcmVjdGlvbltcImNvdW50ZXJDbG9ja3dpc2VcIl0gPSBcImNvdW50ZXItY2xvY2t3aXNlXCI7XG4gICAgVGlsdERpcmVjdGlvbltcInJhbmRvbVwiXSA9IFwicmFuZG9tXCI7XG59KShUaWx0RGlyZWN0aW9uID0gZXhwb3J0cy5UaWx0RGlyZWN0aW9uIHx8IChleHBvcnRzLlRpbHREaXJlY3Rpb24gPSB7fSkpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9Nb3ZlRGlyZWN0aW9uXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9Sb3RhdGVEaXJlY3Rpb25cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL091dE1vZGVEaXJlY3Rpb25cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL1RpbHREaXJlY3Rpb25cIiksIGV4cG9ydHMpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkludGVyYWN0aXZpdHlEZXRlY3QgPSB2b2lkIDA7XG52YXIgSW50ZXJhY3Rpdml0eURldGVjdDtcbihmdW5jdGlvbiAoSW50ZXJhY3Rpdml0eURldGVjdCkge1xuICAgIEludGVyYWN0aXZpdHlEZXRlY3RbXCJjYW52YXNcIl0gPSBcImNhbnZhc1wiO1xuICAgIEludGVyYWN0aXZpdHlEZXRlY3RbXCJwYXJlbnRcIl0gPSBcInBhcmVudFwiO1xuICAgIEludGVyYWN0aXZpdHlEZXRlY3RbXCJ3aW5kb3dcIl0gPSBcIndpbmRvd1wiO1xufSkoSW50ZXJhY3Rpdml0eURldGVjdCA9IGV4cG9ydHMuSW50ZXJhY3Rpdml0eURldGVjdCB8fCAoZXhwb3J0cy5JbnRlcmFjdGl2aXR5RGV0ZWN0ID0ge30pKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DbGlja01vZGUgPSB2b2lkIDA7XG52YXIgQ2xpY2tNb2RlO1xuKGZ1bmN0aW9uIChDbGlja01vZGUpIHtcbiAgICBDbGlja01vZGVbXCJhdHRyYWN0XCJdID0gXCJhdHRyYWN0XCI7XG4gICAgQ2xpY2tNb2RlW1wiYnViYmxlXCJdID0gXCJidWJibGVcIjtcbiAgICBDbGlja01vZGVbXCJwdXNoXCJdID0gXCJwdXNoXCI7XG4gICAgQ2xpY2tNb2RlW1wicmVtb3ZlXCJdID0gXCJyZW1vdmVcIjtcbiAgICBDbGlja01vZGVbXCJyZXB1bHNlXCJdID0gXCJyZXB1bHNlXCI7XG4gICAgQ2xpY2tNb2RlW1wicGF1c2VcIl0gPSBcInBhdXNlXCI7XG4gICAgQ2xpY2tNb2RlW1widHJhaWxcIl0gPSBcInRyYWlsXCI7XG59KShDbGlja01vZGUgPSBleHBvcnRzLkNsaWNrTW9kZSB8fCAoZXhwb3J0cy5DbGlja01vZGUgPSB7fSkpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbGxpc2lvbk1vZGUgPSB2b2lkIDA7XG52YXIgQ29sbGlzaW9uTW9kZTtcbihmdW5jdGlvbiAoQ29sbGlzaW9uTW9kZSkge1xuICAgIENvbGxpc2lvbk1vZGVbXCJhYnNvcmJcIl0gPSBcImFic29yYlwiO1xuICAgIENvbGxpc2lvbk1vZGVbXCJib3VuY2VcIl0gPSBcImJvdW5jZVwiO1xuICAgIENvbGxpc2lvbk1vZGVbXCJkZXN0cm95XCJdID0gXCJkZXN0cm95XCI7XG59KShDb2xsaXNpb25Nb2RlID0gZXhwb3J0cy5Db2xsaXNpb25Nb2RlIHx8IChleHBvcnRzLkNvbGxpc2lvbk1vZGUgPSB7fSkpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRlc3Ryb3lNb2RlID0gdm9pZCAwO1xudmFyIERlc3Ryb3lNb2RlO1xuKGZ1bmN0aW9uIChEZXN0cm95TW9kZSkge1xuICAgIERlc3Ryb3lNb2RlW1wibm9uZVwiXSA9IFwibm9uZVwiO1xuICAgIERlc3Ryb3lNb2RlW1wic3BsaXRcIl0gPSBcInNwbGl0XCI7XG59KShEZXN0cm95TW9kZSA9IGV4cG9ydHMuRGVzdHJveU1vZGUgfHwgKGV4cG9ydHMuRGVzdHJveU1vZGUgPSB7fSkpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRpdk1vZGUgPSB2b2lkIDA7XG52YXIgRGl2TW9kZTtcbihmdW5jdGlvbiAoRGl2TW9kZSkge1xuICAgIERpdk1vZGVbXCJib3VuY2VcIl0gPSBcImJvdW5jZVwiO1xuICAgIERpdk1vZGVbXCJidWJibGVcIl0gPSBcImJ1YmJsZVwiO1xuICAgIERpdk1vZGVbXCJyZXB1bHNlXCJdID0gXCJyZXB1bHNlXCI7XG59KShEaXZNb2RlID0gZXhwb3J0cy5EaXZNb2RlIHx8IChleHBvcnRzLkRpdk1vZGUgPSB7fSkpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkhvdmVyTW9kZSA9IHZvaWQgMDtcbnZhciBIb3Zlck1vZGU7XG4oZnVuY3Rpb24gKEhvdmVyTW9kZSkge1xuICAgIEhvdmVyTW9kZVtcImF0dHJhY3RcIl0gPSBcImF0dHJhY3RcIjtcbiAgICBIb3Zlck1vZGVbXCJib3VuY2VcIl0gPSBcImJvdW5jZVwiO1xuICAgIEhvdmVyTW9kZVtcImJ1YmJsZVwiXSA9IFwiYnViYmxlXCI7XG4gICAgSG92ZXJNb2RlW1wiY29ubmVjdFwiXSA9IFwiY29ubmVjdFwiO1xuICAgIEhvdmVyTW9kZVtcImdyYWJcIl0gPSBcImdyYWJcIjtcbiAgICBIb3Zlck1vZGVbXCJsaWdodFwiXSA9IFwibGlnaHRcIjtcbiAgICBIb3Zlck1vZGVbXCJyZXB1bHNlXCJdID0gXCJyZXB1bHNlXCI7XG4gICAgSG92ZXJNb2RlW1wic2xvd1wiXSA9IFwic2xvd1wiO1xuICAgIEhvdmVyTW9kZVtcInRyYWlsXCJdID0gXCJ0cmFpbFwiO1xufSkoSG92ZXJNb2RlID0gZXhwb3J0cy5Ib3Zlck1vZGUgfHwgKGV4cG9ydHMuSG92ZXJNb2RlID0ge30pKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5PdXRNb2RlID0gdm9pZCAwO1xudmFyIE91dE1vZGU7XG4oZnVuY3Rpb24gKE91dE1vZGUpIHtcbiAgICBPdXRNb2RlW1wiYm91bmNlXCJdID0gXCJib3VuY2VcIjtcbiAgICBPdXRNb2RlW1wiYm91bmNlSG9yaXpvbnRhbFwiXSA9IFwiYm91bmNlLWhvcml6b250YWxcIjtcbiAgICBPdXRNb2RlW1wiYm91bmNlVmVydGljYWxcIl0gPSBcImJvdW5jZS12ZXJ0aWNhbFwiO1xuICAgIE91dE1vZGVbXCJub25lXCJdID0gXCJub25lXCI7XG4gICAgT3V0TW9kZVtcIm91dFwiXSA9IFwib3V0XCI7XG4gICAgT3V0TW9kZVtcImRlc3Ryb3lcIl0gPSBcImRlc3Ryb3lcIjtcbiAgICBPdXRNb2RlW1wic3BsaXRcIl0gPSBcInNwbGl0XCI7XG59KShPdXRNb2RlID0gZXhwb3J0cy5PdXRNb2RlIHx8IChleHBvcnRzLk91dE1vZGUgPSB7fSkpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJlc3BvbnNpdmVNb2RlID0gdm9pZCAwO1xudmFyIFJlc3BvbnNpdmVNb2RlO1xuKGZ1bmN0aW9uIChSZXNwb25zaXZlTW9kZSkge1xuICAgIFJlc3BvbnNpdmVNb2RlW1wic2NyZWVuXCJdID0gXCJzY3JlZW5cIjtcbiAgICBSZXNwb25zaXZlTW9kZVtcImNhbnZhc1wiXSA9IFwiY2FudmFzXCI7XG59KShSZXNwb25zaXZlTW9kZSA9IGV4cG9ydHMuUmVzcG9uc2l2ZU1vZGUgfHwgKGV4cG9ydHMuUmVzcG9uc2l2ZU1vZGUgPSB7fSkpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJvbGxNb2RlID0gdm9pZCAwO1xudmFyIFJvbGxNb2RlO1xuKGZ1bmN0aW9uIChSb2xsTW9kZSkge1xuICAgIFJvbGxNb2RlW1wiYm90aFwiXSA9IFwiYm90aFwiO1xuICAgIFJvbGxNb2RlW1wiaG9yaXpvbnRhbFwiXSA9IFwiaG9yaXpvbnRhbFwiO1xuICAgIFJvbGxNb2RlW1widmVydGljYWxcIl0gPSBcInZlcnRpY2FsXCI7XG59KShSb2xsTW9kZSA9IGV4cG9ydHMuUm9sbE1vZGUgfHwgKGV4cG9ydHMuUm9sbE1vZGUgPSB7fSkpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNpemVNb2RlID0gdm9pZCAwO1xudmFyIFNpemVNb2RlO1xuKGZ1bmN0aW9uIChTaXplTW9kZSkge1xuICAgIFNpemVNb2RlW1wicHJlY2lzZVwiXSA9IFwicHJlY2lzZVwiO1xuICAgIFNpemVNb2RlW1wicGVyY2VudFwiXSA9IFwicGVyY2VudFwiO1xufSkoU2l6ZU1vZGUgPSBleHBvcnRzLlNpemVNb2RlIHx8IChleHBvcnRzLlNpemVNb2RlID0ge30pKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UaGVtZU1vZGUgPSB2b2lkIDA7XG52YXIgVGhlbWVNb2RlO1xuKGZ1bmN0aW9uIChUaGVtZU1vZGUpIHtcbiAgICBUaGVtZU1vZGVbXCJhbnlcIl0gPSBcImFueVwiO1xuICAgIFRoZW1lTW9kZVtcImRhcmtcIl0gPSBcImRhcmtcIjtcbiAgICBUaGVtZU1vZGVbXCJsaWdodFwiXSA9IFwibGlnaHRcIjtcbn0pKFRoZW1lTW9kZSA9IGV4cG9ydHMuVGhlbWVNb2RlIHx8IChleHBvcnRzLlRoZW1lTW9kZSA9IHt9KSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0NsaWNrTW9kZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vRGVzdHJveU1vZGVcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0Rpdk1vZGVcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0hvdmVyTW9kZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vQ29sbGlzaW9uTW9kZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vT3V0TW9kZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vUm9sbE1vZGVcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL1NpemVNb2RlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9UaGVtZU1vZGVcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL1Jlc3BvbnNpdmVNb2RlXCIpLCBleHBvcnRzKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BbHRlclR5cGUgPSB2b2lkIDA7XG52YXIgQWx0ZXJUeXBlO1xuKGZ1bmN0aW9uIChBbHRlclR5cGUpIHtcbiAgICBBbHRlclR5cGVbXCJkYXJrZW5cIl0gPSBcImRhcmtlblwiO1xuICAgIEFsdGVyVHlwZVtcImVubGlnaHRlblwiXSA9IFwiZW5saWdodGVuXCI7XG59KShBbHRlclR5cGUgPSBleHBvcnRzLkFsdGVyVHlwZSB8fCAoZXhwb3J0cy5BbHRlclR5cGUgPSB7fSkpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRlc3Ryb3lUeXBlID0gdm9pZCAwO1xudmFyIERlc3Ryb3lUeXBlO1xuKGZ1bmN0aW9uIChEZXN0cm95VHlwZSkge1xuICAgIERlc3Ryb3lUeXBlW1wibm9uZVwiXSA9IFwibm9uZVwiO1xuICAgIERlc3Ryb3lUeXBlW1wibWF4XCJdID0gXCJtYXhcIjtcbiAgICBEZXN0cm95VHlwZVtcIm1pblwiXSA9IFwibWluXCI7XG59KShEZXN0cm95VHlwZSA9IGV4cG9ydHMuRGVzdHJveVR5cGUgfHwgKGV4cG9ydHMuRGVzdHJveVR5cGUgPSB7fSkpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRpdlR5cGUgPSB2b2lkIDA7XG52YXIgRGl2VHlwZTtcbihmdW5jdGlvbiAoRGl2VHlwZSkge1xuICAgIERpdlR5cGVbXCJjaXJjbGVcIl0gPSBcImNpcmNsZVwiO1xuICAgIERpdlR5cGVbXCJyZWN0YW5nbGVcIl0gPSBcInJlY3RhbmdsZVwiO1xufSkoRGl2VHlwZSA9IGV4cG9ydHMuRGl2VHlwZSB8fCAoZXhwb3J0cy5EaXZUeXBlID0ge30pKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FYXNpbmdUeXBlID0gdm9pZCAwO1xudmFyIEVhc2luZ1R5cGU7XG4oZnVuY3Rpb24gKEVhc2luZ1R5cGUpIHtcbiAgICBFYXNpbmdUeXBlW1wiZWFzZU91dEJhY2tcIl0gPSBcImVhc2Utb3V0LWJhY2tcIjtcbiAgICBFYXNpbmdUeXBlW1wiZWFzZU91dENpcmNcIl0gPSBcImVhc2Utb3V0LWNpcmNcIjtcbiAgICBFYXNpbmdUeXBlW1wiZWFzZU91dEN1YmljXCJdID0gXCJlYXNlLW91dC1jdWJpY1wiO1xuICAgIEVhc2luZ1R5cGVbXCJlYXNlT3V0UXVhZFwiXSA9IFwiZWFzZS1vdXQtcXVhZFwiO1xuICAgIEVhc2luZ1R5cGVbXCJlYXNlT3V0UXVhcnRcIl0gPSBcImVhc2Utb3V0LXF1YXJ0XCI7XG4gICAgRWFzaW5nVHlwZVtcImVhc2VPdXRRdWludFwiXSA9IFwiZWFzZS1vdXQtcXVpbnRcIjtcbiAgICBFYXNpbmdUeXBlW1wiZWFzZU91dEV4cG9cIl0gPSBcImVhc2Utb3V0LWV4cG9cIjtcbiAgICBFYXNpbmdUeXBlW1wiZWFzZU91dFNpbmVcIl0gPSBcImVhc2Utb3V0LXNpbmVcIjtcbn0pKEVhc2luZ1R5cGUgPSBleHBvcnRzLkVhc2luZ1R5cGUgfHwgKGV4cG9ydHMuRWFzaW5nVHlwZSA9IHt9KSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuR3JhZGllbnRUeXBlID0gdm9pZCAwO1xudmFyIEdyYWRpZW50VHlwZTtcbihmdW5jdGlvbiAoR3JhZGllbnRUeXBlKSB7XG4gICAgR3JhZGllbnRUeXBlW1wibGluZWFyXCJdID0gXCJsaW5lYXJcIjtcbiAgICBHcmFkaWVudFR5cGVbXCJyYWRpYWxcIl0gPSBcInJhZGlhbFwiO1xuICAgIEdyYWRpZW50VHlwZVtcInJhbmRvbVwiXSA9IFwicmFuZG9tXCI7XG59KShHcmFkaWVudFR5cGUgPSBleHBvcnRzLkdyYWRpZW50VHlwZSB8fCAoZXhwb3J0cy5HcmFkaWVudFR5cGUgPSB7fSkpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkludGVyYWN0b3JUeXBlID0gdm9pZCAwO1xudmFyIEludGVyYWN0b3JUeXBlO1xuKGZ1bmN0aW9uIChJbnRlcmFjdG9yVHlwZSkge1xuICAgIEludGVyYWN0b3JUeXBlW0ludGVyYWN0b3JUeXBlW1wiRXh0ZXJuYWxcIl0gPSAwXSA9IFwiRXh0ZXJuYWxcIjtcbiAgICBJbnRlcmFjdG9yVHlwZVtJbnRlcmFjdG9yVHlwZVtcIlBhcnRpY2xlc1wiXSA9IDFdID0gXCJQYXJ0aWNsZXNcIjtcbn0pKEludGVyYWN0b3JUeXBlID0gZXhwb3J0cy5JbnRlcmFjdG9yVHlwZSB8fCAoZXhwb3J0cy5JbnRlcmFjdG9yVHlwZSA9IHt9KSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuT3JiaXRUeXBlID0gdm9pZCAwO1xudmFyIE9yYml0VHlwZTtcbihmdW5jdGlvbiAoT3JiaXRUeXBlKSB7XG4gICAgT3JiaXRUeXBlW1wiZnJvbnRcIl0gPSBcImZyb250XCI7XG4gICAgT3JiaXRUeXBlW1wiYmFja1wiXSA9IFwiYmFja1wiO1xufSkoT3JiaXRUeXBlID0gZXhwb3J0cy5PcmJpdFR5cGUgfHwgKGV4cG9ydHMuT3JiaXRUeXBlID0ge30pKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TaGFwZVR5cGUgPSB2b2lkIDA7XG52YXIgU2hhcGVUeXBlO1xuKGZ1bmN0aW9uIChTaGFwZVR5cGUpIHtcbiAgICBTaGFwZVR5cGVbXCJjaGFyXCJdID0gXCJjaGFyXCI7XG4gICAgU2hhcGVUeXBlW1wiY2hhcmFjdGVyXCJdID0gXCJjaGFyYWN0ZXJcIjtcbiAgICBTaGFwZVR5cGVbXCJjaXJjbGVcIl0gPSBcImNpcmNsZVwiO1xuICAgIFNoYXBlVHlwZVtcImVkZ2VcIl0gPSBcImVkZ2VcIjtcbiAgICBTaGFwZVR5cGVbXCJpbWFnZVwiXSA9IFwiaW1hZ2VcIjtcbiAgICBTaGFwZVR5cGVbXCJpbWFnZXNcIl0gPSBcImltYWdlc1wiO1xuICAgIFNoYXBlVHlwZVtcImxpbmVcIl0gPSBcImxpbmVcIjtcbiAgICBTaGFwZVR5cGVbXCJwb2x5Z29uXCJdID0gXCJwb2x5Z29uXCI7XG4gICAgU2hhcGVUeXBlW1wic3F1YXJlXCJdID0gXCJzcXVhcmVcIjtcbiAgICBTaGFwZVR5cGVbXCJzdGFyXCJdID0gXCJzdGFyXCI7XG4gICAgU2hhcGVUeXBlW1widHJpYW5nbGVcIl0gPSBcInRyaWFuZ2xlXCI7XG59KShTaGFwZVR5cGUgPSBleHBvcnRzLlNoYXBlVHlwZSB8fCAoZXhwb3J0cy5TaGFwZVR5cGUgPSB7fSkpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlN0YXJ0VmFsdWVUeXBlID0gdm9pZCAwO1xudmFyIFN0YXJ0VmFsdWVUeXBlO1xuKGZ1bmN0aW9uIChTdGFydFZhbHVlVHlwZSkge1xuICAgIFN0YXJ0VmFsdWVUeXBlW1wibWF4XCJdID0gXCJtYXhcIjtcbiAgICBTdGFydFZhbHVlVHlwZVtcIm1pblwiXSA9IFwibWluXCI7XG4gICAgU3RhcnRWYWx1ZVR5cGVbXCJyYW5kb21cIl0gPSBcInJhbmRvbVwiO1xufSkoU3RhcnRWYWx1ZVR5cGUgPSBleHBvcnRzLlN0YXJ0VmFsdWVUeXBlIHx8IChleHBvcnRzLlN0YXJ0VmFsdWVUeXBlID0ge30pKTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vQWx0ZXJUeXBlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9EZXN0cm95VHlwZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vR3JhZGllbnRUeXBlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9JbnRlcmFjdG9yVHlwZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vU2hhcGVUeXBlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9TdGFydFZhbHVlVHlwZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vRGl2VHlwZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vRWFzaW5nVHlwZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vT3JiaXRUeXBlXCIpLCBleHBvcnRzKTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vRGlyZWN0aW9uc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vTW9kZXNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0FuaW1hdGlvblN0YXR1c1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vVHlwZXNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0ludGVyYWN0aXZpdHlEZXRlY3RcIiksIGV4cG9ydHMpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkF0dHJhY3RvciA9IHZvaWQgMDtcbmNvbnN0IEVudW1zXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vRW51bXNcIik7XG5jb25zdCBVdGlsc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL1V0aWxzXCIpO1xuY29uc3QgRXh0ZXJuYWxJbnRlcmFjdG9yQmFzZV8xID0gcmVxdWlyZShcIi4uLy4uLy4uL0NvcmUvRXh0ZXJuYWxJbnRlcmFjdG9yQmFzZVwiKTtcbmNvbnN0IFZlY3Rvcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uL0NvcmUvUGFydGljbGUvVmVjdG9yXCIpO1xuY2xhc3MgQXR0cmFjdG9yIGV4dGVuZHMgRXh0ZXJuYWxJbnRlcmFjdG9yQmFzZV8xLkV4dGVybmFsSW50ZXJhY3RvckJhc2Uge1xuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lcikge1xuICAgICAgICBzdXBlcihjb250YWluZXIpO1xuICAgIH1cbiAgICBpc0VuYWJsZWQoKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyLCBvcHRpb25zID0gY29udGFpbmVyLmFjdHVhbE9wdGlvbnMsIG1vdXNlID0gY29udGFpbmVyLmludGVyYWN0aXZpdHkubW91c2UsIGV2ZW50cyA9IG9wdGlvbnMuaW50ZXJhY3Rpdml0eS5ldmVudHM7XG4gICAgICAgIGlmICgoIW1vdXNlLnBvc2l0aW9uIHx8ICFldmVudHMub25Ib3Zlci5lbmFibGUpICYmICghbW91c2UuY2xpY2tQb3NpdGlvbiB8fCAhZXZlbnRzLm9uQ2xpY2suZW5hYmxlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhvdmVyTW9kZSA9IGV2ZW50cy5vbkhvdmVyLm1vZGUsIGNsaWNrTW9kZSA9IGV2ZW50cy5vbkNsaWNrLm1vZGU7XG4gICAgICAgIHJldHVybiAoMCwgVXRpbHNfMS5pc0luQXJyYXkpKEVudW1zXzEuSG92ZXJNb2RlLmF0dHJhY3QsIGhvdmVyTW9kZSkgfHwgKDAsIFV0aWxzXzEuaXNJbkFycmF5KShFbnVtc18xLkNsaWNrTW9kZS5hdHRyYWN0LCBjbGlja01vZGUpO1xuICAgIH1cbiAgICByZXNldCgpIHtcbiAgICB9XG4gICAgaW50ZXJhY3QoKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyLCBvcHRpb25zID0gY29udGFpbmVyLmFjdHVhbE9wdGlvbnMsIG1vdXNlTW92ZVN0YXR1cyA9IGNvbnRhaW5lci5pbnRlcmFjdGl2aXR5LnN0YXR1cyA9PT0gVXRpbHNfMS5Db25zdGFudHMubW91c2VNb3ZlRXZlbnQsIGV2ZW50cyA9IG9wdGlvbnMuaW50ZXJhY3Rpdml0eS5ldmVudHMsIGhvdmVyRW5hYmxlZCA9IGV2ZW50cy5vbkhvdmVyLmVuYWJsZSwgaG92ZXJNb2RlID0gZXZlbnRzLm9uSG92ZXIubW9kZSwgY2xpY2tFbmFibGVkID0gZXZlbnRzLm9uQ2xpY2suZW5hYmxlLCBjbGlja01vZGUgPSBldmVudHMub25DbGljay5tb2RlO1xuICAgICAgICBpZiAobW91c2VNb3ZlU3RhdHVzICYmIGhvdmVyRW5hYmxlZCAmJiAoMCwgVXRpbHNfMS5pc0luQXJyYXkpKEVudW1zXzEuSG92ZXJNb2RlLmF0dHJhY3QsIGhvdmVyTW9kZSkpIHtcbiAgICAgICAgICAgIHRoaXMuaG92ZXJBdHRyYWN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY2xpY2tFbmFibGVkICYmICgwLCBVdGlsc18xLmlzSW5BcnJheSkoRW51bXNfMS5DbGlja01vZGUuYXR0cmFjdCwgY2xpY2tNb2RlKSkge1xuICAgICAgICAgICAgdGhpcy5jbGlja0F0dHJhY3QoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBob3ZlckF0dHJhY3QoKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyO1xuICAgICAgICBjb25zdCBtb3VzZVBvcyA9IGNvbnRhaW5lci5pbnRlcmFjdGl2aXR5Lm1vdXNlLnBvc2l0aW9uO1xuICAgICAgICBpZiAoIW1vdXNlUG9zKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYXR0cmFjdFJhZGl1cyA9IGNvbnRhaW5lci5yZXRpbmEuYXR0cmFjdE1vZGVEaXN0YW5jZTtcbiAgICAgICAgdGhpcy5wcm9jZXNzQXR0cmFjdChtb3VzZVBvcywgYXR0cmFjdFJhZGl1cywgbmV3IFV0aWxzXzEuQ2lyY2xlKG1vdXNlUG9zLngsIG1vdXNlUG9zLnksIGF0dHJhY3RSYWRpdXMpKTtcbiAgICB9XG4gICAgcHJvY2Vzc0F0dHJhY3QocG9zaXRpb24sIGF0dHJhY3RSYWRpdXMsIGFyZWEpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXI7XG4gICAgICAgIGNvbnN0IGF0dHJhY3RPcHRpb25zID0gY29udGFpbmVyLmFjdHVhbE9wdGlvbnMuaW50ZXJhY3Rpdml0eS5tb2Rlcy5hdHRyYWN0O1xuICAgICAgICBjb25zdCBxdWVyeSA9IGNvbnRhaW5lci5wYXJ0aWNsZXMucXVhZFRyZWUucXVlcnkoYXJlYSk7XG4gICAgICAgIGZvciAoY29uc3QgcGFydGljbGUgb2YgcXVlcnkpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgZHgsIGR5LCBkaXN0YW5jZSB9ID0gKDAsIFV0aWxzXzEuZ2V0RGlzdGFuY2VzKShwYXJ0aWNsZS5wb3NpdGlvbiwgcG9zaXRpb24pO1xuICAgICAgICAgICAgY29uc3QgdmVsb2NpdHkgPSBhdHRyYWN0T3B0aW9ucy5zcGVlZCAqIGF0dHJhY3RPcHRpb25zLmZhY3RvcjtcbiAgICAgICAgICAgIGNvbnN0IGF0dHJhY3RGYWN0b3IgPSAoMCwgVXRpbHNfMS5jbGFtcCkoKDAsIFV0aWxzXzEuY2FsY0Vhc2luZykoMSAtIGRpc3RhbmNlIC8gYXR0cmFjdFJhZGl1cywgYXR0cmFjdE9wdGlvbnMuZWFzaW5nKSAqIHZlbG9jaXR5LCAwLCBhdHRyYWN0T3B0aW9ucy5tYXhTcGVlZCk7XG4gICAgICAgICAgICBjb25zdCBub3JtVmVjID0gVmVjdG9yXzEuVmVjdG9yLmNyZWF0ZShkaXN0YW5jZSA9PT0gMCA/IHZlbG9jaXR5IDogKGR4IC8gZGlzdGFuY2UpICogYXR0cmFjdEZhY3RvciwgZGlzdGFuY2UgPT09IDAgPyB2ZWxvY2l0eSA6IChkeSAvIGRpc3RhbmNlKSAqIGF0dHJhY3RGYWN0b3IpO1xuICAgICAgICAgICAgcGFydGljbGUucG9zaXRpb24uc3ViRnJvbShub3JtVmVjKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjbGlja0F0dHJhY3QoKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyO1xuICAgICAgICBpZiAoIWNvbnRhaW5lci5hdHRyYWN0LmZpbmlzaCkge1xuICAgICAgICAgICAgaWYgKCFjb250YWluZXIuYXR0cmFjdC5jb3VudCkge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hdHRyYWN0LmNvdW50ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRhaW5lci5hdHRyYWN0LmNvdW50Kys7XG4gICAgICAgICAgICBpZiAoY29udGFpbmVyLmF0dHJhY3QuY291bnQgPT09IGNvbnRhaW5lci5wYXJ0aWNsZXMuY291bnQpIHtcbiAgICAgICAgICAgICAgICBjb250YWluZXIuYXR0cmFjdC5maW5pc2ggPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjb250YWluZXIuYXR0cmFjdC5jbGlja2luZykge1xuICAgICAgICAgICAgY29uc3QgbW91c2VQb3MgPSBjb250YWluZXIuaW50ZXJhY3Rpdml0eS5tb3VzZS5jbGlja1Bvc2l0aW9uO1xuICAgICAgICAgICAgaWYgKCFtb3VzZVBvcykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGF0dHJhY3RSYWRpdXMgPSBjb250YWluZXIucmV0aW5hLmF0dHJhY3RNb2RlRGlzdGFuY2U7XG4gICAgICAgICAgICB0aGlzLnByb2Nlc3NBdHRyYWN0KG1vdXNlUG9zLCBhdHRyYWN0UmFkaXVzLCBuZXcgVXRpbHNfMS5DaXJjbGUobW91c2VQb3MueCwgbW91c2VQb3MueSwgYXR0cmFjdFJhZGl1cykpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNvbnRhaW5lci5hdHRyYWN0LmNsaWNraW5nID09PSBmYWxzZSkge1xuICAgICAgICAgICAgY29udGFpbmVyLmF0dHJhY3QucGFydGljbGVzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbn1cbmV4cG9ydHMuQXR0cmFjdG9yID0gQXR0cmFjdG9yO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvYWRFeHRlcm5hbEF0dHJhY3RJbnRlcmFjdGlvbiA9IHZvaWQgMDtcbmNvbnN0IEF0dHJhY3Rvcl8xID0gcmVxdWlyZShcIi4vQXR0cmFjdG9yXCIpO1xuYXN5bmMgZnVuY3Rpb24gbG9hZEV4dGVybmFsQXR0cmFjdEludGVyYWN0aW9uKHRzUGFydGljbGVzKSB7XG4gICAgYXdhaXQgdHNQYXJ0aWNsZXMuYWRkSW50ZXJhY3RvcihcImV4dGVybmFsQXR0cmFjdFwiLCAoY29udGFpbmVyKSA9PiBuZXcgQXR0cmFjdG9yXzEuQXR0cmFjdG9yKGNvbnRhaW5lcikpO1xufVxuZXhwb3J0cy5sb2FkRXh0ZXJuYWxBdHRyYWN0SW50ZXJhY3Rpb24gPSBsb2FkRXh0ZXJuYWxBdHRyYWN0SW50ZXJhY3Rpb247XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQm91bmNlciA9IHZvaWQgMDtcbmNvbnN0IFV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vVXRpbHNcIik7XG5jb25zdCBFbnVtc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL0VudW1zXCIpO1xuY29uc3QgVmVjdG9yXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vQ29yZS9QYXJ0aWNsZS9WZWN0b3JcIik7XG5jb25zdCBFeHRlcm5hbEludGVyYWN0b3JCYXNlXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vQ29yZS9FeHRlcm5hbEludGVyYWN0b3JCYXNlXCIpO1xuY2xhc3MgQm91bmNlciBleHRlbmRzIEV4dGVybmFsSW50ZXJhY3RvckJhc2VfMS5FeHRlcm5hbEludGVyYWN0b3JCYXNlIHtcbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXIpIHtcbiAgICAgICAgc3VwZXIoY29udGFpbmVyKTtcbiAgICB9XG4gICAgaXNFbmFibGVkKCkge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lciwgb3B0aW9ucyA9IGNvbnRhaW5lci5hY3R1YWxPcHRpb25zLCBtb3VzZSA9IGNvbnRhaW5lci5pbnRlcmFjdGl2aXR5Lm1vdXNlLCBldmVudHMgPSBvcHRpb25zLmludGVyYWN0aXZpdHkuZXZlbnRzLCBkaXZzID0gZXZlbnRzLm9uRGl2O1xuICAgICAgICByZXR1cm4gKChtb3VzZS5wb3NpdGlvbiAmJiBldmVudHMub25Ib3Zlci5lbmFibGUgJiYgKDAsIFV0aWxzXzEuaXNJbkFycmF5KShFbnVtc18xLkhvdmVyTW9kZS5ib3VuY2UsIGV2ZW50cy5vbkhvdmVyLm1vZGUpKSB8fFxuICAgICAgICAgICAgKDAsIFV0aWxzXzEuaXNEaXZNb2RlRW5hYmxlZCkoRW51bXNfMS5EaXZNb2RlLmJvdW5jZSwgZGl2cykpO1xuICAgIH1cbiAgICBpbnRlcmFjdCgpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXIsIG9wdGlvbnMgPSBjb250YWluZXIuYWN0dWFsT3B0aW9ucywgZXZlbnRzID0gb3B0aW9ucy5pbnRlcmFjdGl2aXR5LmV2ZW50cywgbW91c2VNb3ZlU3RhdHVzID0gY29udGFpbmVyLmludGVyYWN0aXZpdHkuc3RhdHVzID09PSBVdGlsc18xLkNvbnN0YW50cy5tb3VzZU1vdmVFdmVudCwgaG92ZXJFbmFibGVkID0gZXZlbnRzLm9uSG92ZXIuZW5hYmxlLCBob3Zlck1vZGUgPSBldmVudHMub25Ib3Zlci5tb2RlLCBkaXZzID0gZXZlbnRzLm9uRGl2O1xuICAgICAgICBpZiAobW91c2VNb3ZlU3RhdHVzICYmIGhvdmVyRW5hYmxlZCAmJiAoMCwgVXRpbHNfMS5pc0luQXJyYXkpKEVudW1zXzEuSG92ZXJNb2RlLmJvdW5jZSwgaG92ZXJNb2RlKSkge1xuICAgICAgICAgICAgdGhpcy5wcm9jZXNzTW91c2VCb3VuY2UoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICgwLCBVdGlsc18xLmRpdk1vZGVFeGVjdXRlKShFbnVtc18xLkRpdk1vZGUuYm91bmNlLCBkaXZzLCAoc2VsZWN0b3IsIGRpdikgPT4gdGhpcy5zaW5nbGVTZWxlY3RvckJvdW5jZShzZWxlY3RvciwgZGl2KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVzZXQoKSB7XG4gICAgfVxuICAgIHByb2Nlc3NNb3VzZUJvdW5jZSgpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXIsIHB4UmF0aW8gPSBjb250YWluZXIucmV0aW5hLnBpeGVsUmF0aW8sIHRvbGVyYW5jZSA9IDEwICogcHhSYXRpbywgbW91c2VQb3MgPSBjb250YWluZXIuaW50ZXJhY3Rpdml0eS5tb3VzZS5wb3NpdGlvbiwgcmFkaXVzID0gY29udGFpbmVyLnJldGluYS5ib3VuY2VNb2RlRGlzdGFuY2U7XG4gICAgICAgIGlmIChtb3VzZVBvcykge1xuICAgICAgICAgICAgdGhpcy5wcm9jZXNzQm91bmNlKG1vdXNlUG9zLCByYWRpdXMsIG5ldyBVdGlsc18xLkNpcmNsZShtb3VzZVBvcy54LCBtb3VzZVBvcy55LCByYWRpdXMgKyB0b2xlcmFuY2UpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzaW5nbGVTZWxlY3RvckJvdW5jZShzZWxlY3RvciwgZGl2KSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyO1xuICAgICAgICBjb25zdCBxdWVyeSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgICAgICBpZiAoIXF1ZXJ5Lmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHF1ZXJ5LmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW0gPSBpdGVtLCBweFJhdGlvID0gY29udGFpbmVyLnJldGluYS5waXhlbFJhdGlvLCBwb3MgPSB7XG4gICAgICAgICAgICAgICAgeDogKGVsZW0ub2Zmc2V0TGVmdCArIGVsZW0ub2Zmc2V0V2lkdGggLyAyKSAqIHB4UmF0aW8sXG4gICAgICAgICAgICAgICAgeTogKGVsZW0ub2Zmc2V0VG9wICsgZWxlbS5vZmZzZXRIZWlnaHQgLyAyKSAqIHB4UmF0aW8sXG4gICAgICAgICAgICB9LCByYWRpdXMgPSAoZWxlbS5vZmZzZXRXaWR0aCAvIDIpICogcHhSYXRpbywgdG9sZXJhbmNlID0gMTAgKiBweFJhdGlvO1xuICAgICAgICAgICAgY29uc3QgYXJlYSA9IGRpdi50eXBlID09PSBFbnVtc18xLkRpdlR5cGUuY2lyY2xlXG4gICAgICAgICAgICAgICAgPyBuZXcgVXRpbHNfMS5DaXJjbGUocG9zLngsIHBvcy55LCByYWRpdXMgKyB0b2xlcmFuY2UpXG4gICAgICAgICAgICAgICAgOiBuZXcgVXRpbHNfMS5SZWN0YW5nbGUoZWxlbS5vZmZzZXRMZWZ0ICogcHhSYXRpbyAtIHRvbGVyYW5jZSwgZWxlbS5vZmZzZXRUb3AgKiBweFJhdGlvIC0gdG9sZXJhbmNlLCBlbGVtLm9mZnNldFdpZHRoICogcHhSYXRpbyArIHRvbGVyYW5jZSAqIDIsIGVsZW0ub2Zmc2V0SGVpZ2h0ICogcHhSYXRpbyArIHRvbGVyYW5jZSAqIDIpO1xuICAgICAgICAgICAgdGhpcy5wcm9jZXNzQm91bmNlKHBvcywgcmFkaXVzLCBhcmVhKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHByb2Nlc3NCb3VuY2UocG9zaXRpb24sIHJhZGl1cywgYXJlYSkge1xuICAgICAgICBjb25zdCBxdWVyeSA9IHRoaXMuY29udGFpbmVyLnBhcnRpY2xlcy5xdWFkVHJlZS5xdWVyeShhcmVhKTtcbiAgICAgICAgZm9yIChjb25zdCBwYXJ0aWNsZSBvZiBxdWVyeSkge1xuICAgICAgICAgICAgaWYgKGFyZWEgaW5zdGFuY2VvZiBVdGlsc18xLkNpcmNsZSkge1xuICAgICAgICAgICAgICAgICgwLCBVdGlsc18xLmNpcmNsZUJvdW5jZSkoKDAsIFV0aWxzXzEuY2lyY2xlQm91bmNlRGF0YUZyb21QYXJ0aWNsZSkocGFydGljbGUpLCB7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uLFxuICAgICAgICAgICAgICAgICAgICByYWRpdXMsXG4gICAgICAgICAgICAgICAgICAgIG1hc3M6IChyYWRpdXMgKiogMiAqIE1hdGguUEkpIC8gMixcbiAgICAgICAgICAgICAgICAgICAgdmVsb2NpdHk6IFZlY3Rvcl8xLlZlY3Rvci5vcmlnaW4sXG4gICAgICAgICAgICAgICAgICAgIGZhY3RvcjogVmVjdG9yXzEuVmVjdG9yLm9yaWdpbixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGFyZWEgaW5zdGFuY2VvZiBVdGlsc18xLlJlY3RhbmdsZSkge1xuICAgICAgICAgICAgICAgICgwLCBVdGlsc18xLnJlY3RCb3VuY2UpKHBhcnRpY2xlLCAoMCwgVXRpbHNfMS5jYWxjdWxhdGVCb3VuZHMpKHBvc2l0aW9uLCByYWRpdXMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQm91bmNlciA9IEJvdW5jZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubG9hZEV4dGVybmFsQm91bmNlSW50ZXJhY3Rpb24gPSB2b2lkIDA7XG5jb25zdCBCb3VuY2VyXzEgPSByZXF1aXJlKFwiLi9Cb3VuY2VyXCIpO1xuYXN5bmMgZnVuY3Rpb24gbG9hZEV4dGVybmFsQm91bmNlSW50ZXJhY3Rpb24odHNQYXJ0aWNsZXMpIHtcbiAgICBhd2FpdCB0c1BhcnRpY2xlcy5hZGRJbnRlcmFjdG9yKFwiZXh0ZXJuYWxCb3VuY2VcIiwgKGNvbnRhaW5lcikgPT4gbmV3IEJvdW5jZXJfMS5Cb3VuY2VyKGNvbnRhaW5lcikpO1xufVxuZXhwb3J0cy5sb2FkRXh0ZXJuYWxCb3VuY2VJbnRlcmFjdGlvbiA9IGxvYWRFeHRlcm5hbEJvdW5jZUludGVyYWN0aW9uO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJ1YmJsZXIgPSB2b2lkIDA7XG5jb25zdCBVdGlsc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL1V0aWxzXCIpO1xuY29uc3QgRW51bXNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9FbnVtc1wiKTtcbmNvbnN0IEV4dGVybmFsSW50ZXJhY3RvckJhc2VfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9Db3JlL0V4dGVybmFsSW50ZXJhY3RvckJhc2VcIik7XG5jb25zdCBQcm9jZXNzQnViYmxlVHlwZV8xID0gcmVxdWlyZShcIi4vUHJvY2Vzc0J1YmJsZVR5cGVcIik7XG5mdW5jdGlvbiBjYWxjdWxhdGVCdWJibGVWYWx1ZShwYXJ0aWNsZVZhbHVlLCBtb2RlVmFsdWUsIG9wdGlvbnNWYWx1ZSwgcmF0aW8pIHtcbiAgICBpZiAobW9kZVZhbHVlID49IG9wdGlvbnNWYWx1ZSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHBhcnRpY2xlVmFsdWUgKyAobW9kZVZhbHVlIC0gb3B0aW9uc1ZhbHVlKSAqIHJhdGlvO1xuICAgICAgICByZXR1cm4gKDAsIFV0aWxzXzEuY2xhbXApKHZhbHVlLCBwYXJ0aWNsZVZhbHVlLCBtb2RlVmFsdWUpO1xuICAgIH1cbiAgICBlbHNlIGlmIChtb2RlVmFsdWUgPCBvcHRpb25zVmFsdWUpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBwYXJ0aWNsZVZhbHVlIC0gKG9wdGlvbnNWYWx1ZSAtIG1vZGVWYWx1ZSkgKiByYXRpbztcbiAgICAgICAgcmV0dXJuICgwLCBVdGlsc18xLmNsYW1wKSh2YWx1ZSwgbW9kZVZhbHVlLCBwYXJ0aWNsZVZhbHVlKTtcbiAgICB9XG59XG5jbGFzcyBCdWJibGVyIGV4dGVuZHMgRXh0ZXJuYWxJbnRlcmFjdG9yQmFzZV8xLkV4dGVybmFsSW50ZXJhY3RvckJhc2Uge1xuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lcikge1xuICAgICAgICBzdXBlcihjb250YWluZXIpO1xuICAgIH1cbiAgICBpc0VuYWJsZWQoKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyLCBvcHRpb25zID0gY29udGFpbmVyLmFjdHVhbE9wdGlvbnMsIG1vdXNlID0gY29udGFpbmVyLmludGVyYWN0aXZpdHkubW91c2UsIGV2ZW50cyA9IG9wdGlvbnMuaW50ZXJhY3Rpdml0eS5ldmVudHMsIGRpdnMgPSBldmVudHMub25EaXYsIGRpdkJ1YmJsZSA9ICgwLCBVdGlsc18xLmlzRGl2TW9kZUVuYWJsZWQpKEVudW1zXzEuRGl2TW9kZS5idWJibGUsIGRpdnMpO1xuICAgICAgICBpZiAoIShkaXZCdWJibGUgfHwgKGV2ZW50cy5vbkhvdmVyLmVuYWJsZSAmJiBtb3VzZS5wb3NpdGlvbikgfHwgKGV2ZW50cy5vbkNsaWNrLmVuYWJsZSAmJiBtb3VzZS5jbGlja1Bvc2l0aW9uKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBob3Zlck1vZGUgPSBldmVudHMub25Ib3Zlci5tb2RlO1xuICAgICAgICBjb25zdCBjbGlja01vZGUgPSBldmVudHMub25DbGljay5tb2RlO1xuICAgICAgICByZXR1cm4gKDAsIFV0aWxzXzEuaXNJbkFycmF5KShFbnVtc18xLkhvdmVyTW9kZS5idWJibGUsIGhvdmVyTW9kZSkgfHwgKDAsIFV0aWxzXzEuaXNJbkFycmF5KShFbnVtc18xLkNsaWNrTW9kZS5idWJibGUsIGNsaWNrTW9kZSkgfHwgZGl2QnViYmxlO1xuICAgIH1cbiAgICByZXNldChwYXJ0aWNsZSwgZm9yY2UpIHtcbiAgICAgICAgaWYgKCEoIXBhcnRpY2xlLmJ1YmJsZS5pblJhbmdlIHx8IGZvcmNlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSBwYXJ0aWNsZS5idWJibGUuZGl2O1xuICAgICAgICBkZWxldGUgcGFydGljbGUuYnViYmxlLm9wYWNpdHk7XG4gICAgICAgIGRlbGV0ZSBwYXJ0aWNsZS5idWJibGUucmFkaXVzO1xuICAgICAgICBkZWxldGUgcGFydGljbGUuYnViYmxlLmNvbG9yO1xuICAgIH1cbiAgICBpbnRlcmFjdCgpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuY29udGFpbmVyLmFjdHVhbE9wdGlvbnMsIGV2ZW50cyA9IG9wdGlvbnMuaW50ZXJhY3Rpdml0eS5ldmVudHMsIG9uSG92ZXIgPSBldmVudHMub25Ib3Zlciwgb25DbGljayA9IGV2ZW50cy5vbkNsaWNrLCBob3ZlckVuYWJsZWQgPSBvbkhvdmVyLmVuYWJsZSwgaG92ZXJNb2RlID0gb25Ib3Zlci5tb2RlLCBjbGlja0VuYWJsZWQgPSBvbkNsaWNrLmVuYWJsZSwgY2xpY2tNb2RlID0gb25DbGljay5tb2RlLCBkaXZzID0gZXZlbnRzLm9uRGl2O1xuICAgICAgICBpZiAoaG92ZXJFbmFibGVkICYmICgwLCBVdGlsc18xLmlzSW5BcnJheSkoRW51bXNfMS5Ib3Zlck1vZGUuYnViYmxlLCBob3Zlck1vZGUpKSB7XG4gICAgICAgICAgICB0aGlzLmhvdmVyQnViYmxlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY2xpY2tFbmFibGVkICYmICgwLCBVdGlsc18xLmlzSW5BcnJheSkoRW51bXNfMS5DbGlja01vZGUuYnViYmxlLCBjbGlja01vZGUpKSB7XG4gICAgICAgICAgICB0aGlzLmNsaWNrQnViYmxlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAoMCwgVXRpbHNfMS5kaXZNb2RlRXhlY3V0ZSkoRW51bXNfMS5EaXZNb2RlLmJ1YmJsZSwgZGl2cywgKHNlbGVjdG9yLCBkaXYpID0+IHRoaXMuc2luZ2xlU2VsZWN0b3JIb3ZlcihzZWxlY3RvciwgZGl2KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2luZ2xlU2VsZWN0b3JIb3ZlcihzZWxlY3RvciwgZGl2KSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyLCBzZWxlY3RvcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICAgICAgaWYgKCFzZWxlY3RvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc2VsZWN0b3JzLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW0gPSBpdGVtLCBweFJhdGlvID0gY29udGFpbmVyLnJldGluYS5waXhlbFJhdGlvLCBwb3MgPSB7XG4gICAgICAgICAgICAgICAgeDogKGVsZW0ub2Zmc2V0TGVmdCArIGVsZW0ub2Zmc2V0V2lkdGggLyAyKSAqIHB4UmF0aW8sXG4gICAgICAgICAgICAgICAgeTogKGVsZW0ub2Zmc2V0VG9wICsgZWxlbS5vZmZzZXRIZWlnaHQgLyAyKSAqIHB4UmF0aW8sXG4gICAgICAgICAgICB9LCByZXB1bHNlUmFkaXVzID0gKGVsZW0ub2Zmc2V0V2lkdGggLyAyKSAqIHB4UmF0aW8sIGFyZWEgPSBkaXYudHlwZSA9PT0gRW51bXNfMS5EaXZUeXBlLmNpcmNsZVxuICAgICAgICAgICAgICAgID8gbmV3IFV0aWxzXzEuQ2lyY2xlKHBvcy54LCBwb3MueSwgcmVwdWxzZVJhZGl1cylcbiAgICAgICAgICAgICAgICA6IG5ldyBVdGlsc18xLlJlY3RhbmdsZShlbGVtLm9mZnNldExlZnQgKiBweFJhdGlvLCBlbGVtLm9mZnNldFRvcCAqIHB4UmF0aW8sIGVsZW0ub2Zmc2V0V2lkdGggKiBweFJhdGlvLCBlbGVtLm9mZnNldEhlaWdodCAqIHB4UmF0aW8pLCBxdWVyeSA9IGNvbnRhaW5lci5wYXJ0aWNsZXMucXVhZFRyZWUucXVlcnkoYXJlYSk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHBhcnRpY2xlIG9mIHF1ZXJ5KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFhcmVhLmNvbnRhaW5zKHBhcnRpY2xlLmdldFBvc2l0aW9uKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwYXJ0aWNsZS5idWJibGUuaW5SYW5nZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc3QgZGl2cyA9IGNvbnRhaW5lci5hY3R1YWxPcHRpb25zLmludGVyYWN0aXZpdHkubW9kZXMuYnViYmxlLmRpdnM7XG4gICAgICAgICAgICAgICAgY29uc3QgZGl2QnViYmxlID0gKDAsIFV0aWxzXzEuZGl2TW9kZSkoZGl2cywgZWxlbSk7XG4gICAgICAgICAgICAgICAgaWYgKCFwYXJ0aWNsZS5idWJibGUuZGl2IHx8IHBhcnRpY2xlLmJ1YmJsZS5kaXYgIT09IGVsZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNldChwYXJ0aWNsZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHBhcnRpY2xlLmJ1YmJsZS5kaXYgPSBlbGVtO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmhvdmVyQnViYmxlU2l6ZShwYXJ0aWNsZSwgMSwgZGl2QnViYmxlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmhvdmVyQnViYmxlT3BhY2l0eShwYXJ0aWNsZSwgMSwgZGl2QnViYmxlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmhvdmVyQnViYmxlQ29sb3IocGFydGljbGUsIDEsIGRpdkJ1YmJsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBwcm9jZXNzKHBhcnRpY2xlLCBkaXN0TW91c2UsIHRpbWVTcGVudCwgZGF0YSkge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lciwgYnViYmxlUGFyYW0gPSBkYXRhLmJ1YmJsZU9iai5vcHRWYWx1ZTtcbiAgICAgICAgaWYgKGJ1YmJsZVBhcmFtID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvcHRpb25zID0gY29udGFpbmVyLmFjdHVhbE9wdGlvbnMsIGJ1YmJsZUR1cmF0aW9uID0gb3B0aW9ucy5pbnRlcmFjdGl2aXR5Lm1vZGVzLmJ1YmJsZS5kdXJhdGlvbiwgYnViYmxlRGlzdGFuY2UgPSBjb250YWluZXIucmV0aW5hLmJ1YmJsZU1vZGVEaXN0YW5jZSwgcGFydGljbGVzUGFyYW0gPSBkYXRhLnBhcnRpY2xlc09iai5vcHRWYWx1ZSwgcE9iakJ1YmJsZSA9IGRhdGEuYnViYmxlT2JqLnZhbHVlLCBwT2JqID0gZGF0YS5wYXJ0aWNsZXNPYmoudmFsdWUgfHwgMCwgdHlwZSA9IGRhdGEudHlwZTtcbiAgICAgICAgaWYgKGJ1YmJsZVBhcmFtID09PSBwYXJ0aWNsZXNQYXJhbSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY29udGFpbmVyLmJ1YmJsZS5kdXJhdGlvbkVuZCkge1xuICAgICAgICAgICAgaWYgKGRpc3RNb3VzZSA8PSBidWJibGVEaXN0YW5jZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9iaiA9IHBPYmpCdWJibGUgIT09IG51bGwgJiYgcE9iakJ1YmJsZSAhPT0gdm9pZCAwID8gcE9iakJ1YmJsZSA6IHBPYmo7XG4gICAgICAgICAgICAgICAgaWYgKG9iaiAhPT0gYnViYmxlUGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBwT2JqIC0gKHRpbWVTcGVudCAqIChwT2JqIC0gYnViYmxlUGFyYW0pKSAvIGJ1YmJsZUR1cmF0aW9uO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gUHJvY2Vzc0J1YmJsZVR5cGVfMS5Qcm9jZXNzQnViYmxlVHlwZS5zaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJ0aWNsZS5idWJibGUucmFkaXVzID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09IFByb2Nlc3NCdWJibGVUeXBlXzEuUHJvY2Vzc0J1YmJsZVR5cGUub3BhY2l0eSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFydGljbGUuYnViYmxlLm9wYWNpdHkgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSBQcm9jZXNzQnViYmxlVHlwZV8xLlByb2Nlc3NCdWJibGVUeXBlLnNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHBhcnRpY2xlLmJ1YmJsZS5yYWRpdXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSBQcm9jZXNzQnViYmxlVHlwZV8xLlByb2Nlc3NCdWJibGVUeXBlLm9wYWNpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHBhcnRpY2xlLmJ1YmJsZS5vcGFjaXR5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwT2JqQnViYmxlKSB7XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gUHJvY2Vzc0J1YmJsZVR5cGVfMS5Qcm9jZXNzQnViYmxlVHlwZS5zaXplKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHBhcnRpY2xlLmJ1YmJsZS5yYWRpdXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gUHJvY2Vzc0J1YmJsZVR5cGVfMS5Qcm9jZXNzQnViYmxlVHlwZS5vcGFjaXR5KSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHBhcnRpY2xlLmJ1YmJsZS5vcGFjaXR5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNsaWNrQnViYmxlKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lciwgb3B0aW9ucyA9IGNvbnRhaW5lci5hY3R1YWxPcHRpb25zLCBtb3VzZUNsaWNrUG9zID0gY29udGFpbmVyLmludGVyYWN0aXZpdHkubW91c2UuY2xpY2tQb3NpdGlvbjtcbiAgICAgICAgaWYgKCFtb3VzZUNsaWNrUG9zKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBjb250YWluZXIucmV0aW5hLmJ1YmJsZU1vZGVEaXN0YW5jZSwgcXVlcnkgPSBjb250YWluZXIucGFydGljbGVzLnF1YWRUcmVlLnF1ZXJ5Q2lyY2xlKG1vdXNlQ2xpY2tQb3MsIGRpc3RhbmNlKTtcbiAgICAgICAgZm9yIChjb25zdCBwYXJ0aWNsZSBvZiBxdWVyeSkge1xuICAgICAgICAgICAgaWYgKCFjb250YWluZXIuYnViYmxlLmNsaWNraW5nKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJ0aWNsZS5idWJibGUuaW5SYW5nZSA9ICFjb250YWluZXIuYnViYmxlLmR1cmF0aW9uRW5kO1xuICAgICAgICAgICAgY29uc3QgcG9zID0gcGFydGljbGUuZ2V0UG9zaXRpb24oKSwgZGlzdE1vdXNlID0gKDAsIFV0aWxzXzEuZ2V0RGlzdGFuY2UpKHBvcywgbW91c2VDbGlja1BvcyksIHRpbWVTcGVudCA9IChuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIChjb250YWluZXIuaW50ZXJhY3Rpdml0eS5tb3VzZS5jbGlja1RpbWUgfHwgMCkpIC8gMTAwMDtcbiAgICAgICAgICAgIGlmICh0aW1lU3BlbnQgPiBvcHRpb25zLmludGVyYWN0aXZpdHkubW9kZXMuYnViYmxlLmR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmJ1YmJsZS5kdXJhdGlvbkVuZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGltZVNwZW50ID4gb3B0aW9ucy5pbnRlcmFjdGl2aXR5Lm1vZGVzLmJ1YmJsZS5kdXJhdGlvbiAqIDIpIHtcbiAgICAgICAgICAgICAgICBjb250YWluZXIuYnViYmxlLmNsaWNraW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmJ1YmJsZS5kdXJhdGlvbkVuZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc2l6ZURhdGEgPSB7XG4gICAgICAgICAgICAgICAgYnViYmxlT2JqOiB7XG4gICAgICAgICAgICAgICAgICAgIG9wdFZhbHVlOiBjb250YWluZXIucmV0aW5hLmJ1YmJsZU1vZGVTaXplLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcGFydGljbGUuYnViYmxlLnJhZGl1cyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHBhcnRpY2xlc09iajoge1xuICAgICAgICAgICAgICAgICAgICBvcHRWYWx1ZTogKDAsIFV0aWxzXzEuZ2V0UmFuZ2VNYXgpKHBhcnRpY2xlLm9wdGlvbnMuc2l6ZS52YWx1ZSkgKiBjb250YWluZXIucmV0aW5hLnBpeGVsUmF0aW8sXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBwYXJ0aWNsZS5zaXplLnZhbHVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdHlwZTogUHJvY2Vzc0J1YmJsZVR5cGVfMS5Qcm9jZXNzQnViYmxlVHlwZS5zaXplLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMucHJvY2VzcyhwYXJ0aWNsZSwgZGlzdE1vdXNlLCB0aW1lU3BlbnQsIHNpemVEYXRhKTtcbiAgICAgICAgICAgIGNvbnN0IG9wYWNpdHlEYXRhID0ge1xuICAgICAgICAgICAgICAgIGJ1YmJsZU9iajoge1xuICAgICAgICAgICAgICAgICAgICBvcHRWYWx1ZTogb3B0aW9ucy5pbnRlcmFjdGl2aXR5Lm1vZGVzLmJ1YmJsZS5vcGFjaXR5LFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcGFydGljbGUuYnViYmxlLm9wYWNpdHksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwYXJ0aWNsZXNPYmo6IHtcbiAgICAgICAgICAgICAgICAgICAgb3B0VmFsdWU6ICgwLCBVdGlsc18xLmdldFJhbmdlTWF4KShwYXJ0aWNsZS5vcHRpb25zLm9wYWNpdHkudmFsdWUpLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogKF9iID0gKF9hID0gcGFydGljbGUub3BhY2l0eSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnZhbHVlKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAxLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdHlwZTogUHJvY2Vzc0J1YmJsZVR5cGVfMS5Qcm9jZXNzQnViYmxlVHlwZS5vcGFjaXR5LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMucHJvY2VzcyhwYXJ0aWNsZSwgZGlzdE1vdXNlLCB0aW1lU3BlbnQsIG9wYWNpdHlEYXRhKTtcbiAgICAgICAgICAgIGlmICghY29udGFpbmVyLmJ1YmJsZS5kdXJhdGlvbkVuZCkge1xuICAgICAgICAgICAgICAgIGlmIChkaXN0TW91c2UgPD0gY29udGFpbmVyLnJldGluYS5idWJibGVNb2RlRGlzdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ob3ZlckJ1YmJsZUNvbG9yKHBhcnRpY2xlLCBkaXN0TW91c2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHBhcnRpY2xlLmJ1YmJsZS5jb2xvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgcGFydGljbGUuYnViYmxlLmNvbG9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGhvdmVyQnViYmxlKCkge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lciwgbW91c2VQb3MgPSBjb250YWluZXIuaW50ZXJhY3Rpdml0eS5tb3VzZS5wb3NpdGlvbjtcbiAgICAgICAgaWYgKG1vdXNlUG9zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkaXN0YW5jZSA9IGNvbnRhaW5lci5yZXRpbmEuYnViYmxlTW9kZURpc3RhbmNlLCBxdWVyeSA9IGNvbnRhaW5lci5wYXJ0aWNsZXMucXVhZFRyZWUucXVlcnlDaXJjbGUobW91c2VQb3MsIGRpc3RhbmNlKTtcbiAgICAgICAgZm9yIChjb25zdCBwYXJ0aWNsZSBvZiBxdWVyeSkge1xuICAgICAgICAgICAgcGFydGljbGUuYnViYmxlLmluUmFuZ2UgPSB0cnVlO1xuICAgICAgICAgICAgY29uc3QgcG9zID0gcGFydGljbGUuZ2V0UG9zaXRpb24oKSwgcG9pbnREaXN0YW5jZSA9ICgwLCBVdGlsc18xLmdldERpc3RhbmNlKShwb3MsIG1vdXNlUG9zKSwgcmF0aW8gPSAxIC0gcG9pbnREaXN0YW5jZSAvIGRpc3RhbmNlO1xuICAgICAgICAgICAgaWYgKHBvaW50RGlzdGFuY2UgPD0gZGlzdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBpZiAocmF0aW8gPj0gMCAmJiBjb250YWluZXIuaW50ZXJhY3Rpdml0eS5zdGF0dXMgPT09IFV0aWxzXzEuQ29uc3RhbnRzLm1vdXNlTW92ZUV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaG92ZXJCdWJibGVTaXplKHBhcnRpY2xlLCByYXRpbyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaG92ZXJCdWJibGVPcGFjaXR5KHBhcnRpY2xlLCByYXRpbyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaG92ZXJCdWJibGVDb2xvcihwYXJ0aWNsZSwgcmF0aW8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucmVzZXQocGFydGljbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvbnRhaW5lci5pbnRlcmFjdGl2aXR5LnN0YXR1cyA9PT0gVXRpbHNfMS5Db25zdGFudHMubW91c2VMZWF2ZUV2ZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXNldChwYXJ0aWNsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaG92ZXJCdWJibGVTaXplKHBhcnRpY2xlLCByYXRpbywgZGl2QnViYmxlKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyLCBtb2RlU2l6ZSA9IChkaXZCdWJibGUgPT09IG51bGwgfHwgZGl2QnViYmxlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkaXZCdWJibGUuc2l6ZSkgPyBkaXZCdWJibGUuc2l6ZSAqIGNvbnRhaW5lci5yZXRpbmEucGl4ZWxSYXRpbyA6IGNvbnRhaW5lci5yZXRpbmEuYnViYmxlTW9kZVNpemU7XG4gICAgICAgIGlmIChtb2RlU2l6ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3B0U2l6ZSA9ICgwLCBVdGlsc18xLmdldFJhbmdlTWF4KShwYXJ0aWNsZS5vcHRpb25zLnNpemUudmFsdWUpICogY29udGFpbmVyLnJldGluYS5waXhlbFJhdGlvO1xuICAgICAgICBjb25zdCBwU2l6ZSA9IHBhcnRpY2xlLnNpemUudmFsdWU7XG4gICAgICAgIGNvbnN0IHNpemUgPSBjYWxjdWxhdGVCdWJibGVWYWx1ZShwU2l6ZSwgbW9kZVNpemUsIG9wdFNpemUsIHJhdGlvKTtcbiAgICAgICAgaWYgKHNpemUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcGFydGljbGUuYnViYmxlLnJhZGl1cyA9IHNpemU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaG92ZXJCdWJibGVPcGFjaXR5KHBhcnRpY2xlLCByYXRpbywgZGl2QnViYmxlKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lciwgb3B0aW9ucyA9IGNvbnRhaW5lci5hY3R1YWxPcHRpb25zLCBtb2RlT3BhY2l0eSA9IChfYSA9IGRpdkJ1YmJsZSA9PT0gbnVsbCB8fCBkaXZCdWJibGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRpdkJ1YmJsZS5vcGFjaXR5KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBvcHRpb25zLmludGVyYWN0aXZpdHkubW9kZXMuYnViYmxlLm9wYWNpdHk7XG4gICAgICAgIGlmICghbW9kZU9wYWNpdHkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvcHRPcGFjaXR5ID0gcGFydGljbGUub3B0aW9ucy5vcGFjaXR5LnZhbHVlO1xuICAgICAgICBjb25zdCBwT3BhY2l0eSA9IChfYyA9IChfYiA9IHBhcnRpY2xlLm9wYWNpdHkpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi52YWx1ZSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogMTtcbiAgICAgICAgY29uc3Qgb3BhY2l0eSA9IGNhbGN1bGF0ZUJ1YmJsZVZhbHVlKHBPcGFjaXR5LCBtb2RlT3BhY2l0eSwgKDAsIFV0aWxzXzEuZ2V0UmFuZ2VNYXgpKG9wdE9wYWNpdHkpLCByYXRpbyk7XG4gICAgICAgIGlmIChvcGFjaXR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHBhcnRpY2xlLmJ1YmJsZS5vcGFjaXR5ID0gb3BhY2l0eTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBob3ZlckJ1YmJsZUNvbG9yKHBhcnRpY2xlLCByYXRpbywgZGl2QnViYmxlKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLmNvbnRhaW5lci5hY3R1YWxPcHRpb25zO1xuICAgICAgICBjb25zdCBidWJibGVPcHRpb25zID0gZGl2QnViYmxlICE9PSBudWxsICYmIGRpdkJ1YmJsZSAhPT0gdm9pZCAwID8gZGl2QnViYmxlIDogb3B0aW9ucy5pbnRlcmFjdGl2aXR5Lm1vZGVzLmJ1YmJsZTtcbiAgICAgICAgaWYgKCFwYXJ0aWNsZS5idWJibGUuZmluYWxDb2xvcikge1xuICAgICAgICAgICAgY29uc3QgbW9kZUNvbG9yID0gYnViYmxlT3B0aW9ucy5jb2xvcjtcbiAgICAgICAgICAgIGlmICghbW9kZUNvbG9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYnViYmxlQ29sb3IgPSBtb2RlQ29sb3IgaW5zdGFuY2VvZiBBcnJheSA/ICgwLCBVdGlsc18xLml0ZW1Gcm9tQXJyYXkpKG1vZGVDb2xvcikgOiBtb2RlQ29sb3I7XG4gICAgICAgICAgICBwYXJ0aWNsZS5idWJibGUuZmluYWxDb2xvciA9ICgwLCBVdGlsc18xLmNvbG9yVG9Ic2wpKGJ1YmJsZUNvbG9yKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXBhcnRpY2xlLmJ1YmJsZS5maW5hbENvbG9yKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJ1YmJsZU9wdGlvbnMubWl4KSB7XG4gICAgICAgICAgICBwYXJ0aWNsZS5idWJibGUuY29sb3IgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjb25zdCBwQ29sb3IgPSBwYXJ0aWNsZS5nZXRGaWxsQ29sb3IoKTtcbiAgICAgICAgICAgIHBhcnRpY2xlLmJ1YmJsZS5jb2xvciA9IHBDb2xvclxuICAgICAgICAgICAgICAgID8gKDAsIFV0aWxzXzEucmdiVG9Ic2wpKCgwLCBVdGlsc18xLmNvbG9yTWl4KShwQ29sb3IsIHBhcnRpY2xlLmJ1YmJsZS5maW5hbENvbG9yLCAxIC0gcmF0aW8sIHJhdGlvKSlcbiAgICAgICAgICAgICAgICA6IHBhcnRpY2xlLmJ1YmJsZS5maW5hbENvbG9yO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGFydGljbGUuYnViYmxlLmNvbG9yID0gcGFydGljbGUuYnViYmxlLmZpbmFsQ29sb3I7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkJ1YmJsZXIgPSBCdWJibGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlByb2Nlc3NCdWJibGVUeXBlID0gdm9pZCAwO1xudmFyIFByb2Nlc3NCdWJibGVUeXBlO1xuKGZ1bmN0aW9uIChQcm9jZXNzQnViYmxlVHlwZSkge1xuICAgIFByb2Nlc3NCdWJibGVUeXBlW1wiY29sb3JcIl0gPSBcImNvbG9yXCI7XG4gICAgUHJvY2Vzc0J1YmJsZVR5cGVbXCJvcGFjaXR5XCJdID0gXCJvcGFjaXR5XCI7XG4gICAgUHJvY2Vzc0J1YmJsZVR5cGVbXCJzaXplXCJdID0gXCJzaXplXCI7XG59KShQcm9jZXNzQnViYmxlVHlwZSA9IGV4cG9ydHMuUHJvY2Vzc0J1YmJsZVR5cGUgfHwgKGV4cG9ydHMuUHJvY2Vzc0J1YmJsZVR5cGUgPSB7fSkpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvYWRFeHRlcm5hbEJ1YmJsZUludGVyYWN0aW9uID0gdm9pZCAwO1xuY29uc3QgQnViYmxlcl8xID0gcmVxdWlyZShcIi4vQnViYmxlclwiKTtcbmFzeW5jIGZ1bmN0aW9uIGxvYWRFeHRlcm5hbEJ1YmJsZUludGVyYWN0aW9uKHRzUGFydGljbGVzKSB7XG4gICAgYXdhaXQgdHNQYXJ0aWNsZXMuYWRkSW50ZXJhY3RvcihcImV4dGVybmFsQnViYmxlXCIsIChjb250YWluZXIpID0+IG5ldyBCdWJibGVyXzEuQnViYmxlcihjb250YWluZXIpKTtcbn1cbmV4cG9ydHMubG9hZEV4dGVybmFsQnViYmxlSW50ZXJhY3Rpb24gPSBsb2FkRXh0ZXJuYWxCdWJibGVJbnRlcmFjdGlvbjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db25uZWN0b3IgPSB2b2lkIDA7XG5jb25zdCBVdGlsc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL1V0aWxzXCIpO1xuY29uc3QgRW51bXNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9FbnVtc1wiKTtcbmNvbnN0IEV4dGVybmFsSW50ZXJhY3RvckJhc2VfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9Db3JlL0V4dGVybmFsSW50ZXJhY3RvckJhc2VcIik7XG5jbGFzcyBDb25uZWN0b3IgZXh0ZW5kcyBFeHRlcm5hbEludGVyYWN0b3JCYXNlXzEuRXh0ZXJuYWxJbnRlcmFjdG9yQmFzZSB7XG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyKSB7XG4gICAgICAgIHN1cGVyKGNvbnRhaW5lcik7XG4gICAgfVxuICAgIGlzRW5hYmxlZCgpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXIsIG1vdXNlID0gY29udGFpbmVyLmludGVyYWN0aXZpdHkubW91c2UsIGV2ZW50cyA9IGNvbnRhaW5lci5hY3R1YWxPcHRpb25zLmludGVyYWN0aXZpdHkuZXZlbnRzO1xuICAgICAgICBpZiAoIShldmVudHMub25Ib3Zlci5lbmFibGUgJiYgbW91c2UucG9zaXRpb24pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgwLCBVdGlsc18xLmlzSW5BcnJheSkoRW51bXNfMS5Ib3Zlck1vZGUuY29ubmVjdCwgZXZlbnRzLm9uSG92ZXIubW9kZSk7XG4gICAgfVxuICAgIHJlc2V0KCkge1xuICAgIH1cbiAgICBpbnRlcmFjdCgpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXIsIG9wdGlvbnMgPSBjb250YWluZXIuYWN0dWFsT3B0aW9ucztcbiAgICAgICAgaWYgKG9wdGlvbnMuaW50ZXJhY3Rpdml0eS5ldmVudHMub25Ib3Zlci5lbmFibGUgJiYgY29udGFpbmVyLmludGVyYWN0aXZpdHkuc3RhdHVzID09PSBcIm1vdXNlbW92ZVwiKSB7XG4gICAgICAgICAgICBjb25zdCBtb3VzZVBvcyA9IGNvbnRhaW5lci5pbnRlcmFjdGl2aXR5Lm1vdXNlLnBvc2l0aW9uO1xuICAgICAgICAgICAgaWYgKCFtb3VzZVBvcykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5hYnMoY29udGFpbmVyLnJldGluYS5jb25uZWN0TW9kZVJhZGl1cyksIHF1ZXJ5ID0gY29udGFpbmVyLnBhcnRpY2xlcy5xdWFkVHJlZS5xdWVyeUNpcmNsZShtb3VzZVBvcywgZGlzdGFuY2UpO1xuICAgICAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICAgICAgZm9yIChjb25zdCBwMSBvZiBxdWVyeSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvczEgPSBwMS5nZXRQb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcDIgb2YgcXVlcnkuc2xpY2UoaSArIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvczIgPSBwMi5nZXRQb3NpdGlvbigpLCBkaXN0TWF4ID0gTWF0aC5hYnMoY29udGFpbmVyLnJldGluYS5jb25uZWN0TW9kZURpc3RhbmNlKSwgeERpZmYgPSBNYXRoLmFicyhwb3MxLnggLSBwb3MyLngpLCB5RGlmZiA9IE1hdGguYWJzKHBvczEueSAtIHBvczIueSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh4RGlmZiA8IGRpc3RNYXggJiYgeURpZmYgPCBkaXN0TWF4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuY2FudmFzLmRyYXdDb25uZWN0TGluZShwMSwgcDIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICsraTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQ29ubmVjdG9yID0gQ29ubmVjdG9yO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvYWRFeHRlcm5hbENvbm5lY3RJbnRlcmFjdGlvbiA9IHZvaWQgMDtcbmNvbnN0IENvbm5lY3Rvcl8xID0gcmVxdWlyZShcIi4vQ29ubmVjdG9yXCIpO1xuYXN5bmMgZnVuY3Rpb24gbG9hZEV4dGVybmFsQ29ubmVjdEludGVyYWN0aW9uKHRzUGFydGljbGVzKSB7XG4gICAgYXdhaXQgdHNQYXJ0aWNsZXMuYWRkSW50ZXJhY3RvcihcImV4dGVybmFsQ29ubmVjdFwiLCAoY29udGFpbmVyKSA9PiBuZXcgQ29ubmVjdG9yXzEuQ29ubmVjdG9yKGNvbnRhaW5lcikpO1xufVxuZXhwb3J0cy5sb2FkRXh0ZXJuYWxDb25uZWN0SW50ZXJhY3Rpb24gPSBsb2FkRXh0ZXJuYWxDb25uZWN0SW50ZXJhY3Rpb247XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuR3JhYmJlciA9IHZvaWQgMDtcbmNvbnN0IFV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vVXRpbHNcIik7XG5jb25zdCBFbnVtc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL0VudW1zXCIpO1xuY29uc3QgRXh0ZXJuYWxJbnRlcmFjdG9yQmFzZV8xID0gcmVxdWlyZShcIi4uLy4uLy4uL0NvcmUvRXh0ZXJuYWxJbnRlcmFjdG9yQmFzZVwiKTtcbmNsYXNzIEdyYWJiZXIgZXh0ZW5kcyBFeHRlcm5hbEludGVyYWN0b3JCYXNlXzEuRXh0ZXJuYWxJbnRlcmFjdG9yQmFzZSB7XG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyKSB7XG4gICAgICAgIHN1cGVyKGNvbnRhaW5lcik7XG4gICAgfVxuICAgIGlzRW5hYmxlZCgpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXIsIG1vdXNlID0gY29udGFpbmVyLmludGVyYWN0aXZpdHkubW91c2UsIGV2ZW50cyA9IGNvbnRhaW5lci5hY3R1YWxPcHRpb25zLmludGVyYWN0aXZpdHkuZXZlbnRzO1xuICAgICAgICByZXR1cm4gZXZlbnRzLm9uSG92ZXIuZW5hYmxlICYmICEhbW91c2UucG9zaXRpb24gJiYgKDAsIFV0aWxzXzEuaXNJbkFycmF5KShFbnVtc18xLkhvdmVyTW9kZS5ncmFiLCBldmVudHMub25Ib3Zlci5tb2RlKTtcbiAgICB9XG4gICAgcmVzZXQoKSB7XG4gICAgfVxuICAgIGludGVyYWN0KCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyLCBvcHRpb25zID0gY29udGFpbmVyLmFjdHVhbE9wdGlvbnMsIGludGVyYWN0aXZpdHkgPSBvcHRpb25zLmludGVyYWN0aXZpdHk7XG4gICAgICAgIGlmIChpbnRlcmFjdGl2aXR5LmV2ZW50cy5vbkhvdmVyLmVuYWJsZSAmJiBjb250YWluZXIuaW50ZXJhY3Rpdml0eS5zdGF0dXMgPT09IFV0aWxzXzEuQ29uc3RhbnRzLm1vdXNlTW92ZUV2ZW50KSB7XG4gICAgICAgICAgICBjb25zdCBtb3VzZVBvcyA9IGNvbnRhaW5lci5pbnRlcmFjdGl2aXR5Lm1vdXNlLnBvc2l0aW9uO1xuICAgICAgICAgICAgaWYgKCFtb3VzZVBvcykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlID0gY29udGFpbmVyLnJldGluYS5ncmFiTW9kZURpc3RhbmNlLCBxdWVyeSA9IGNvbnRhaW5lci5wYXJ0aWNsZXMucXVhZFRyZWUucXVlcnlDaXJjbGUobW91c2VQb3MsIGRpc3RhbmNlKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcGFydGljbGUgb2YgcXVlcnkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwb3MgPSBwYXJ0aWNsZS5nZXRQb3NpdGlvbigpLCBwb2ludERpc3RhbmNlID0gKDAsIFV0aWxzXzEuZ2V0RGlzdGFuY2UpKHBvcywgbW91c2VQb3MpO1xuICAgICAgICAgICAgICAgIGlmIChwb2ludERpc3RhbmNlIDw9IGRpc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGdyYWJMaW5lT3B0aW9ucyA9IGludGVyYWN0aXZpdHkubW9kZXMuZ3JhYi5saW5rcywgbGluZU9wYWNpdHkgPSBncmFiTGluZU9wdGlvbnMub3BhY2l0eSwgb3BhY2l0eUxpbmUgPSBsaW5lT3BhY2l0eSAtIChwb2ludERpc3RhbmNlICogbGluZU9wYWNpdHkpIC8gZGlzdGFuY2U7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcGFjaXR5TGluZSA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHRDb2xvciA9IChfYSA9IGdyYWJMaW5lT3B0aW9ucy5jb2xvcikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogcGFydGljbGUub3B0aW9ucy5saW5rcy5jb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb250YWluZXIucGFydGljbGVzLmdyYWJMaW5lQ29sb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmtzT3B0aW9ucyA9IG9wdGlvbnMuaW50ZXJhY3Rpdml0eS5tb2Rlcy5ncmFiLmxpbmtzO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLnBhcnRpY2xlcy5ncmFiTGluZUNvbG9yID0gKDAsIFV0aWxzXzEuZ2V0TGlua1JhbmRvbUNvbG9yKShvcHRDb2xvciwgbGlua3NPcHRpb25zLmJsaW5rLCBsaW5rc09wdGlvbnMuY29uc2VudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sb3JMaW5lID0gKDAsIFV0aWxzXzEuZ2V0TGlua0NvbG9yKShwYXJ0aWNsZSwgdW5kZWZpbmVkLCBjb250YWluZXIucGFydGljbGVzLmdyYWJMaW5lQ29sb3IpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbG9yTGluZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5jYW52YXMuZHJhd0dyYWJMaW5lKHBhcnRpY2xlLCBjb2xvckxpbmUsIG9wYWNpdHlMaW5lLCBtb3VzZVBvcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5HcmFiYmVyID0gR3JhYmJlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5sb2FkRXh0ZXJuYWxHcmFiSW50ZXJhY3Rpb24gPSB2b2lkIDA7XG5jb25zdCBHcmFiYmVyXzEgPSByZXF1aXJlKFwiLi9HcmFiYmVyXCIpO1xuYXN5bmMgZnVuY3Rpb24gbG9hZEV4dGVybmFsR3JhYkludGVyYWN0aW9uKHRzUGFydGljbGVzKSB7XG4gICAgYXdhaXQgdHNQYXJ0aWNsZXMuYWRkSW50ZXJhY3RvcihcImV4dGVybmFsR3JhYlwiLCAoY29udGFpbmVyKSA9PiBuZXcgR3JhYmJlcl8xLkdyYWJiZXIoY29udGFpbmVyKSk7XG59XG5leHBvcnRzLmxvYWRFeHRlcm5hbEdyYWJJbnRlcmFjdGlvbiA9IGxvYWRFeHRlcm5hbEdyYWJJbnRlcmFjdGlvbjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SZXB1bHNlciA9IHZvaWQgMDtcbmNvbnN0IEVudW1zXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vRW51bXNcIik7XG5jb25zdCBVdGlsc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL1V0aWxzXCIpO1xuY29uc3QgVmVjdG9yXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vQ29yZS9QYXJ0aWNsZS9WZWN0b3JcIik7XG5jb25zdCBFeHRlcm5hbEludGVyYWN0b3JCYXNlXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vQ29yZS9FeHRlcm5hbEludGVyYWN0b3JCYXNlXCIpO1xuY2xhc3MgUmVwdWxzZXIgZXh0ZW5kcyBFeHRlcm5hbEludGVyYWN0b3JCYXNlXzEuRXh0ZXJuYWxJbnRlcmFjdG9yQmFzZSB7XG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyKSB7XG4gICAgICAgIHN1cGVyKGNvbnRhaW5lcik7XG4gICAgfVxuICAgIGlzRW5hYmxlZCgpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXIsIG9wdGlvbnMgPSBjb250YWluZXIuYWN0dWFsT3B0aW9ucywgbW91c2UgPSBjb250YWluZXIuaW50ZXJhY3Rpdml0eS5tb3VzZSwgZXZlbnRzID0gb3B0aW9ucy5pbnRlcmFjdGl2aXR5LmV2ZW50cywgZGl2cyA9IGV2ZW50cy5vbkRpdiwgZGl2UmVwdWxzZSA9ICgwLCBVdGlsc18xLmlzRGl2TW9kZUVuYWJsZWQpKEVudW1zXzEuRGl2TW9kZS5yZXB1bHNlLCBkaXZzKTtcbiAgICAgICAgaWYgKCEoZGl2UmVwdWxzZSB8fCAoZXZlbnRzLm9uSG92ZXIuZW5hYmxlICYmIG1vdXNlLnBvc2l0aW9uKSB8fCAoZXZlbnRzLm9uQ2xpY2suZW5hYmxlICYmIG1vdXNlLmNsaWNrUG9zaXRpb24pKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhvdmVyTW9kZSA9IGV2ZW50cy5vbkhvdmVyLm1vZGUsIGNsaWNrTW9kZSA9IGV2ZW50cy5vbkNsaWNrLm1vZGU7XG4gICAgICAgIHJldHVybiAoMCwgVXRpbHNfMS5pc0luQXJyYXkpKEVudW1zXzEuSG92ZXJNb2RlLnJlcHVsc2UsIGhvdmVyTW9kZSkgfHwgKDAsIFV0aWxzXzEuaXNJbkFycmF5KShFbnVtc18xLkNsaWNrTW9kZS5yZXB1bHNlLCBjbGlja01vZGUpIHx8IGRpdlJlcHVsc2U7XG4gICAgfVxuICAgIHJlc2V0KCkge1xuICAgIH1cbiAgICBpbnRlcmFjdCgpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXIsIG9wdGlvbnMgPSBjb250YWluZXIuYWN0dWFsT3B0aW9ucywgbW91c2VNb3ZlU3RhdHVzID0gY29udGFpbmVyLmludGVyYWN0aXZpdHkuc3RhdHVzID09PSBVdGlsc18xLkNvbnN0YW50cy5tb3VzZU1vdmVFdmVudCwgZXZlbnRzID0gb3B0aW9ucy5pbnRlcmFjdGl2aXR5LmV2ZW50cywgaG92ZXJFbmFibGVkID0gZXZlbnRzLm9uSG92ZXIuZW5hYmxlLCBob3Zlck1vZGUgPSBldmVudHMub25Ib3Zlci5tb2RlLCBjbGlja0VuYWJsZWQgPSBldmVudHMub25DbGljay5lbmFibGUsIGNsaWNrTW9kZSA9IGV2ZW50cy5vbkNsaWNrLm1vZGUsIGRpdnMgPSBldmVudHMub25EaXY7XG4gICAgICAgIGlmIChtb3VzZU1vdmVTdGF0dXMgJiYgaG92ZXJFbmFibGVkICYmICgwLCBVdGlsc18xLmlzSW5BcnJheSkoRW51bXNfMS5Ib3Zlck1vZGUucmVwdWxzZSwgaG92ZXJNb2RlKSkge1xuICAgICAgICAgICAgdGhpcy5ob3ZlclJlcHVsc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjbGlja0VuYWJsZWQgJiYgKDAsIFV0aWxzXzEuaXNJbkFycmF5KShFbnVtc18xLkNsaWNrTW9kZS5yZXB1bHNlLCBjbGlja01vZGUpKSB7XG4gICAgICAgICAgICB0aGlzLmNsaWNrUmVwdWxzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgKDAsIFV0aWxzXzEuZGl2TW9kZUV4ZWN1dGUpKEVudW1zXzEuRGl2TW9kZS5yZXB1bHNlLCBkaXZzLCAoc2VsZWN0b3IsIGRpdikgPT4gdGhpcy5zaW5nbGVTZWxlY3RvclJlcHVsc2Uoc2VsZWN0b3IsIGRpdikpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNpbmdsZVNlbGVjdG9yUmVwdWxzZShzZWxlY3RvciwgZGl2KSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyLCBxdWVyeSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgICAgICBpZiAoIXF1ZXJ5Lmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHF1ZXJ5LmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW0gPSBpdGVtLCBweFJhdGlvID0gY29udGFpbmVyLnJldGluYS5waXhlbFJhdGlvLCBwb3MgPSB7XG4gICAgICAgICAgICAgICAgeDogKGVsZW0ub2Zmc2V0TGVmdCArIGVsZW0ub2Zmc2V0V2lkdGggLyAyKSAqIHB4UmF0aW8sXG4gICAgICAgICAgICAgICAgeTogKGVsZW0ub2Zmc2V0VG9wICsgZWxlbS5vZmZzZXRIZWlnaHQgLyAyKSAqIHB4UmF0aW8sXG4gICAgICAgICAgICB9LCByZXB1bHNlUmFkaXVzID0gKGVsZW0ub2Zmc2V0V2lkdGggLyAyKSAqIHB4UmF0aW8sIGFyZWEgPSBkaXYudHlwZSA9PT0gRW51bXNfMS5EaXZUeXBlLmNpcmNsZVxuICAgICAgICAgICAgICAgID8gbmV3IFV0aWxzXzEuQ2lyY2xlKHBvcy54LCBwb3MueSwgcmVwdWxzZVJhZGl1cylcbiAgICAgICAgICAgICAgICA6IG5ldyBVdGlsc18xLlJlY3RhbmdsZShlbGVtLm9mZnNldExlZnQgKiBweFJhdGlvLCBlbGVtLm9mZnNldFRvcCAqIHB4UmF0aW8sIGVsZW0ub2Zmc2V0V2lkdGggKiBweFJhdGlvLCBlbGVtLm9mZnNldEhlaWdodCAqIHB4UmF0aW8pLCBkaXZzID0gY29udGFpbmVyLmFjdHVhbE9wdGlvbnMuaW50ZXJhY3Rpdml0eS5tb2Rlcy5yZXB1bHNlLmRpdnMsIGRpdlJlcHVsc2UgPSAoMCwgVXRpbHNfMS5kaXZNb2RlKShkaXZzLCBlbGVtKTtcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzc1JlcHVsc2UocG9zLCByZXB1bHNlUmFkaXVzLCBhcmVhLCBkaXZSZXB1bHNlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGhvdmVyUmVwdWxzZSgpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXIsIG1vdXNlUG9zID0gY29udGFpbmVyLmludGVyYWN0aXZpdHkubW91c2UucG9zaXRpb247XG4gICAgICAgIGlmICghbW91c2VQb3MpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXB1bHNlUmFkaXVzID0gY29udGFpbmVyLnJldGluYS5yZXB1bHNlTW9kZURpc3RhbmNlO1xuICAgICAgICB0aGlzLnByb2Nlc3NSZXB1bHNlKG1vdXNlUG9zLCByZXB1bHNlUmFkaXVzLCBuZXcgVXRpbHNfMS5DaXJjbGUobW91c2VQb3MueCwgbW91c2VQb3MueSwgcmVwdWxzZVJhZGl1cykpO1xuICAgIH1cbiAgICBwcm9jZXNzUmVwdWxzZShwb3NpdGlvbiwgcmVwdWxzZVJhZGl1cywgYXJlYSwgZGl2UmVwdWxzZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyLCBxdWVyeSA9IGNvbnRhaW5lci5wYXJ0aWNsZXMucXVhZFRyZWUucXVlcnkoYXJlYSksIHJlcHVsc2VPcHRpb25zID0gY29udGFpbmVyLmFjdHVhbE9wdGlvbnMuaW50ZXJhY3Rpdml0eS5tb2Rlcy5yZXB1bHNlO1xuICAgICAgICBmb3IgKGNvbnN0IHBhcnRpY2xlIG9mIHF1ZXJ5KSB7XG4gICAgICAgICAgICBjb25zdCB7IGR4LCBkeSwgZGlzdGFuY2UgfSA9ICgwLCBVdGlsc18xLmdldERpc3RhbmNlcykocGFydGljbGUucG9zaXRpb24sIHBvc2l0aW9uKSwgdmVsb2NpdHkgPSAoKF9hID0gZGl2UmVwdWxzZSA9PT0gbnVsbCB8fCBkaXZSZXB1bHNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkaXZSZXB1bHNlLnNwZWVkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiByZXB1bHNlT3B0aW9ucy5zcGVlZCkgKiByZXB1bHNlT3B0aW9ucy5mYWN0b3IsIHJlcHVsc2VGYWN0b3IgPSAoMCwgVXRpbHNfMS5jbGFtcCkoKDAsIFV0aWxzXzEuY2FsY0Vhc2luZykoMSAtIGRpc3RhbmNlIC8gcmVwdWxzZVJhZGl1cywgcmVwdWxzZU9wdGlvbnMuZWFzaW5nKSAqIHZlbG9jaXR5LCAwLCByZXB1bHNlT3B0aW9ucy5tYXhTcGVlZCksIG5vcm1WZWMgPSBWZWN0b3JfMS5WZWN0b3IuY3JlYXRlKGRpc3RhbmNlID09PSAwID8gdmVsb2NpdHkgOiAoZHggLyBkaXN0YW5jZSkgKiByZXB1bHNlRmFjdG9yLCBkaXN0YW5jZSA9PT0gMCA/IHZlbG9jaXR5IDogKGR5IC8gZGlzdGFuY2UpICogcmVwdWxzZUZhY3Rvcik7XG4gICAgICAgICAgICBwYXJ0aWNsZS5wb3NpdGlvbi5hZGRUbyhub3JtVmVjKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjbGlja1JlcHVsc2UoKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyO1xuICAgICAgICBpZiAoIWNvbnRhaW5lci5yZXB1bHNlLmZpbmlzaCkge1xuICAgICAgICAgICAgaWYgKCFjb250YWluZXIucmVwdWxzZS5jb3VudCkge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5yZXB1bHNlLmNvdW50ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRhaW5lci5yZXB1bHNlLmNvdW50Kys7XG4gICAgICAgICAgICBpZiAoY29udGFpbmVyLnJlcHVsc2UuY291bnQgPT09IGNvbnRhaW5lci5wYXJ0aWNsZXMuY291bnQpIHtcbiAgICAgICAgICAgICAgICBjb250YWluZXIucmVwdWxzZS5maW5pc2ggPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjb250YWluZXIucmVwdWxzZS5jbGlja2luZykge1xuICAgICAgICAgICAgY29uc3QgcmVwdWxzZURpc3RhbmNlID0gY29udGFpbmVyLnJldGluYS5yZXB1bHNlTW9kZURpc3RhbmNlLCByZXB1bHNlUmFkaXVzID0gTWF0aC5wb3cocmVwdWxzZURpc3RhbmNlIC8gNiwgMyksIG1vdXNlQ2xpY2tQb3MgPSBjb250YWluZXIuaW50ZXJhY3Rpdml0eS5tb3VzZS5jbGlja1Bvc2l0aW9uO1xuICAgICAgICAgICAgaWYgKG1vdXNlQ2xpY2tQb3MgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gbmV3IFV0aWxzXzEuQ2lyY2xlKG1vdXNlQ2xpY2tQb3MueCwgbW91c2VDbGlja1Bvcy55LCByZXB1bHNlUmFkaXVzKSwgcXVlcnkgPSBjb250YWluZXIucGFydGljbGVzLnF1YWRUcmVlLnF1ZXJ5KHJhbmdlKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcGFydGljbGUgb2YgcXVlcnkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGR4LCBkeSwgZGlzdGFuY2UgfSA9ICgwLCBVdGlsc18xLmdldERpc3RhbmNlcykobW91c2VDbGlja1BvcywgcGFydGljbGUucG9zaXRpb24pLCBkID0gZGlzdGFuY2UgKiogMiwgdmVsb2NpdHkgPSBjb250YWluZXIuYWN0dWFsT3B0aW9ucy5pbnRlcmFjdGl2aXR5Lm1vZGVzLnJlcHVsc2Uuc3BlZWQsIGZvcmNlID0gKC1yZXB1bHNlUmFkaXVzICogdmVsb2NpdHkpIC8gZDtcbiAgICAgICAgICAgICAgICBpZiAoZCA8PSByZXB1bHNlUmFkaXVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5yZXB1bHNlLnBhcnRpY2xlcy5wdXNoKHBhcnRpY2xlKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmVjdCA9IFZlY3Rvcl8xLlZlY3Rvci5jcmVhdGUoZHgsIGR5KTtcbiAgICAgICAgICAgICAgICAgICAgdmVjdC5sZW5ndGggPSBmb3JjZTtcbiAgICAgICAgICAgICAgICAgICAgcGFydGljbGUudmVsb2NpdHkuc2V0VG8odmVjdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNvbnRhaW5lci5yZXB1bHNlLmNsaWNraW5nID09PSBmYWxzZSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBwYXJ0aWNsZSBvZiBjb250YWluZXIucmVwdWxzZS5wYXJ0aWNsZXMpIHtcbiAgICAgICAgICAgICAgICBwYXJ0aWNsZS52ZWxvY2l0eS5zZXRUbyhwYXJ0aWNsZS5pbml0aWFsVmVsb2NpdHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGFpbmVyLnJlcHVsc2UucGFydGljbGVzID0gW107XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlJlcHVsc2VyID0gUmVwdWxzZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubG9hZEV4dGVybmFsUmVwdWxzZUludGVyYWN0aW9uID0gdm9pZCAwO1xuY29uc3QgUmVwdWxzZXJfMSA9IHJlcXVpcmUoXCIuL1JlcHVsc2VyXCIpO1xuYXN5bmMgZnVuY3Rpb24gbG9hZEV4dGVybmFsUmVwdWxzZUludGVyYWN0aW9uKHRzUGFydGljbGVzKSB7XG4gICAgYXdhaXQgdHNQYXJ0aWNsZXMuYWRkSW50ZXJhY3RvcihcImV4dGVybmFsUmVwdWxzZVwiLCAoY29udGFpbmVyKSA9PiBuZXcgUmVwdWxzZXJfMS5SZXB1bHNlcihjb250YWluZXIpKTtcbn1cbmV4cG9ydHMubG9hZEV4dGVybmFsUmVwdWxzZUludGVyYWN0aW9uID0gbG9hZEV4dGVybmFsUmVwdWxzZUludGVyYWN0aW9uO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRyYWlsTWFrZXIgPSB2b2lkIDA7XG5jb25zdCBVdGlsc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL1V0aWxzXCIpO1xuY29uc3QgRW51bXNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9FbnVtc1wiKTtcbmNvbnN0IEV4dGVybmFsSW50ZXJhY3RvckJhc2VfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9Db3JlL0V4dGVybmFsSW50ZXJhY3RvckJhc2VcIik7XG5jbGFzcyBUcmFpbE1ha2VyIGV4dGVuZHMgRXh0ZXJuYWxJbnRlcmFjdG9yQmFzZV8xLkV4dGVybmFsSW50ZXJhY3RvckJhc2Uge1xuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lcikge1xuICAgICAgICBzdXBlcihjb250YWluZXIpO1xuICAgICAgICB0aGlzLmRlbGF5ID0gMDtcbiAgICB9XG4gICAgaW50ZXJhY3QoZGVsdGEpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgICAgICBpZiAoIXRoaXMuY29udGFpbmVyLnJldGluYS5yZWR1Y2VGYWN0b3IpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lciwgb3B0aW9ucyA9IGNvbnRhaW5lci5hY3R1YWxPcHRpb25zLCB0cmFpbE9wdGlvbnMgPSBvcHRpb25zLmludGVyYWN0aXZpdHkubW9kZXMudHJhaWwsIG9wdERlbGF5ID0gKHRyYWlsT3B0aW9ucy5kZWxheSAqIDEwMDApIC8gdGhpcy5jb250YWluZXIucmV0aW5hLnJlZHVjZUZhY3RvcjtcbiAgICAgICAgaWYgKHRoaXMuZGVsYXkgPCBvcHREZWxheSkge1xuICAgICAgICAgICAgdGhpcy5kZWxheSArPSBkZWx0YS52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5kZWxheSA8IG9wdERlbGF5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNhbkVtaXQgPSB0cnVlO1xuICAgICAgICBpZiAodHJhaWxPcHRpb25zLnBhdXNlT25TdG9wKSB7XG4gICAgICAgICAgICBpZiAoY29udGFpbmVyLmludGVyYWN0aXZpdHkubW91c2UucG9zaXRpb24gPT09IHRoaXMubGFzdFBvc2l0aW9uIHx8XG4gICAgICAgICAgICAgICAgKCgoX2EgPSBjb250YWluZXIuaW50ZXJhY3Rpdml0eS5tb3VzZS5wb3NpdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLngpID09PSAoKF9iID0gdGhpcy5sYXN0UG9zaXRpb24pID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi54KSAmJlxuICAgICAgICAgICAgICAgICAgICAoKF9jID0gY29udGFpbmVyLmludGVyYWN0aXZpdHkubW91c2UucG9zaXRpb24pID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy55KSA9PT0gKChfZCA9IHRoaXMubGFzdFBvc2l0aW9uKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QueSkpKSB7XG4gICAgICAgICAgICAgICAgY2FuRW1pdCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjb250YWluZXIuaW50ZXJhY3Rpdml0eS5tb3VzZS5wb3NpdGlvbikge1xuICAgICAgICAgICAgdGhpcy5sYXN0UG9zaXRpb24gPSB7XG4gICAgICAgICAgICAgICAgeDogY29udGFpbmVyLmludGVyYWN0aXZpdHkubW91c2UucG9zaXRpb24ueCxcbiAgICAgICAgICAgICAgICB5OiBjb250YWluZXIuaW50ZXJhY3Rpdml0eS5tb3VzZS5wb3NpdGlvbi55LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmxhc3RQb3NpdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2FuRW1pdCkge1xuICAgICAgICAgICAgY29udGFpbmVyLnBhcnRpY2xlcy5wdXNoKHRyYWlsT3B0aW9ucy5xdWFudGl0eSwgY29udGFpbmVyLmludGVyYWN0aXZpdHkubW91c2UsIHRyYWlsT3B0aW9ucy5wYXJ0aWNsZXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVsYXkgLT0gb3B0RGVsYXk7XG4gICAgfVxuICAgIGlzRW5hYmxlZCgpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXIsIG9wdGlvbnMgPSBjb250YWluZXIuYWN0dWFsT3B0aW9ucywgbW91c2UgPSBjb250YWluZXIuaW50ZXJhY3Rpdml0eS5tb3VzZSwgZXZlbnRzID0gb3B0aW9ucy5pbnRlcmFjdGl2aXR5LmV2ZW50cztcbiAgICAgICAgcmV0dXJuICgobW91c2UuY2xpY2tpbmcgJiYgbW91c2UuaW5zaWRlICYmICEhbW91c2UucG9zaXRpb24gJiYgKDAsIFV0aWxzXzEuaXNJbkFycmF5KShFbnVtc18xLkNsaWNrTW9kZS50cmFpbCwgZXZlbnRzLm9uQ2xpY2subW9kZSkpIHx8XG4gICAgICAgICAgICAobW91c2UuaW5zaWRlICYmICEhbW91c2UucG9zaXRpb24gJiYgKDAsIFV0aWxzXzEuaXNJbkFycmF5KShFbnVtc18xLkhvdmVyTW9kZS50cmFpbCwgZXZlbnRzLm9uSG92ZXIubW9kZSkpKTtcbiAgICB9XG4gICAgcmVzZXQoKSB7XG4gICAgfVxufVxuZXhwb3J0cy5UcmFpbE1ha2VyID0gVHJhaWxNYWtlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5sb2FkRXh0ZXJuYWxUcmFpbEludGVyYWN0aW9uID0gdm9pZCAwO1xuY29uc3QgVHJhaWxNYWtlcl8xID0gcmVxdWlyZShcIi4vVHJhaWxNYWtlclwiKTtcbmFzeW5jIGZ1bmN0aW9uIGxvYWRFeHRlcm5hbFRyYWlsSW50ZXJhY3Rpb24odHNQYXJ0aWNsZXMpIHtcbiAgICBhd2FpdCB0c1BhcnRpY2xlcy5hZGRJbnRlcmFjdG9yKFwiZXh0ZXJuYWxUcmFpbFwiLCAoY29udGFpbmVyKSA9PiBuZXcgVHJhaWxNYWtlcl8xLlRyYWlsTWFrZXIoY29udGFpbmVyKSk7XG59XG5leHBvcnRzLmxvYWRFeHRlcm5hbFRyYWlsSW50ZXJhY3Rpb24gPSBsb2FkRXh0ZXJuYWxUcmFpbEludGVyYWN0aW9uO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkF0dHJhY3RvciA9IHZvaWQgMDtcbmNvbnN0IFV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vVXRpbHNcIik7XG5jb25zdCBQYXJ0aWNsZXNJbnRlcmFjdG9yQmFzZV8xID0gcmVxdWlyZShcIi4uLy4uLy4uL0NvcmUvUGFydGljbGVzSW50ZXJhY3RvckJhc2VcIik7XG5jbGFzcyBBdHRyYWN0b3IgZXh0ZW5kcyBQYXJ0aWNsZXNJbnRlcmFjdG9yQmFzZV8xLlBhcnRpY2xlc0ludGVyYWN0b3JCYXNlIHtcbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXIpIHtcbiAgICAgICAgc3VwZXIoY29udGFpbmVyKTtcbiAgICB9XG4gICAgaW50ZXJhY3QocDEpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lciwgZGlzdGFuY2UgPSAoX2EgPSBwMS5yZXRpbmEuYXR0cmFjdERpc3RhbmNlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBjb250YWluZXIucmV0aW5hLmF0dHJhY3REaXN0YW5jZSwgcG9zMSA9IHAxLmdldFBvc2l0aW9uKCksIHF1ZXJ5ID0gY29udGFpbmVyLnBhcnRpY2xlcy5xdWFkVHJlZS5xdWVyeUNpcmNsZShwb3MxLCBkaXN0YW5jZSk7XG4gICAgICAgIGZvciAoY29uc3QgcDIgb2YgcXVlcnkpIHtcbiAgICAgICAgICAgIGlmIChwMSA9PT0gcDIgfHwgIXAyLm9wdGlvbnMubW92ZS5hdHRyYWN0LmVuYWJsZSB8fCBwMi5kZXN0cm95ZWQgfHwgcDIuc3Bhd25pbmcpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHBvczIgPSBwMi5nZXRQb3NpdGlvbigpLCB7IGR4LCBkeSB9ID0gKDAsIFV0aWxzXzEuZ2V0RGlzdGFuY2VzKShwb3MxLCBwb3MyKSwgcm90YXRlID0gcDEub3B0aW9ucy5tb3ZlLmF0dHJhY3Qucm90YXRlLCBheCA9IGR4IC8gKHJvdGF0ZS54ICogMTAwMCksIGF5ID0gZHkgLyAocm90YXRlLnkgKiAxMDAwKSwgcDFGYWN0b3IgPSBwMi5zaXplLnZhbHVlIC8gcDEuc2l6ZS52YWx1ZSwgcDJGYWN0b3IgPSAxIC8gcDFGYWN0b3I7XG4gICAgICAgICAgICBwMS52ZWxvY2l0eS54IC09IGF4ICogcDFGYWN0b3I7XG4gICAgICAgICAgICBwMS52ZWxvY2l0eS55IC09IGF5ICogcDFGYWN0b3I7XG4gICAgICAgICAgICBwMi52ZWxvY2l0eS54ICs9IGF4ICogcDJGYWN0b3I7XG4gICAgICAgICAgICBwMi52ZWxvY2l0eS55ICs9IGF5ICogcDJGYWN0b3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaXNFbmFibGVkKHBhcnRpY2xlKSB7XG4gICAgICAgIHJldHVybiBwYXJ0aWNsZS5vcHRpb25zLm1vdmUuYXR0cmFjdC5lbmFibGU7XG4gICAgfVxuICAgIHJlc2V0KCkge1xuICAgIH1cbn1cbmV4cG9ydHMuQXR0cmFjdG9yID0gQXR0cmFjdG9yO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvYWRQYXJ0aWNsZXNBdHRyYWN0SW50ZXJhY3Rpb24gPSB2b2lkIDA7XG5jb25zdCBBdHRyYWN0b3JfMSA9IHJlcXVpcmUoXCIuL0F0dHJhY3RvclwiKTtcbmFzeW5jIGZ1bmN0aW9uIGxvYWRQYXJ0aWNsZXNBdHRyYWN0SW50ZXJhY3Rpb24odHNQYXJ0aWNsZXMpIHtcbiAgICBhd2FpdCB0c1BhcnRpY2xlcy5hZGRJbnRlcmFjdG9yKFwicGFydGljbGVzQXR0cmFjdFwiLCAoY29udGFpbmVyKSA9PiBuZXcgQXR0cmFjdG9yXzEuQXR0cmFjdG9yKGNvbnRhaW5lcikpO1xufVxuZXhwb3J0cy5sb2FkUGFydGljbGVzQXR0cmFjdEludGVyYWN0aW9uID0gbG9hZFBhcnRpY2xlc0F0dHJhY3RJbnRlcmFjdGlvbjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db2xsaWRlciA9IHZvaWQgMDtcbmNvbnN0IEVudW1zXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vRW51bXNcIik7XG5jb25zdCBVdGlsc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL1V0aWxzXCIpO1xuY29uc3QgUGFydGljbGVzSW50ZXJhY3RvckJhc2VfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9Db3JlL1BhcnRpY2xlc0ludGVyYWN0b3JCYXNlXCIpO1xuZnVuY3Rpb24gYm91bmNlKHAxLCBwMikge1xuICAgICgwLCBVdGlsc18xLmNpcmNsZUJvdW5jZSkoKDAsIFV0aWxzXzEuY2lyY2xlQm91bmNlRGF0YUZyb21QYXJ0aWNsZSkocDEpLCAoMCwgVXRpbHNfMS5jaXJjbGVCb3VuY2VEYXRhRnJvbVBhcnRpY2xlKShwMikpO1xufVxuZnVuY3Rpb24gZGVzdHJveShwMSwgcDIpIHtcbiAgICBpZiAoIXAxLnVuYnJlYWthYmxlICYmICFwMi51bmJyZWFrYWJsZSkge1xuICAgICAgICBib3VuY2UocDEsIHAyKTtcbiAgICB9XG4gICAgaWYgKHAxLmdldFJhZGl1cygpID09PSB1bmRlZmluZWQgJiYgcDIuZ2V0UmFkaXVzKCkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwMS5kZXN0cm95KCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHAxLmdldFJhZGl1cygpICE9PSB1bmRlZmluZWQgJiYgcDIuZ2V0UmFkaXVzKCkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwMi5kZXN0cm95KCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHAxLmdldFJhZGl1cygpICE9PSB1bmRlZmluZWQgJiYgcDIuZ2V0UmFkaXVzKCkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAocDEuZ2V0UmFkaXVzKCkgPj0gcDIuZ2V0UmFkaXVzKCkpIHtcbiAgICAgICAgICAgIHAyLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHAxLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmNsYXNzIENvbGxpZGVyIGV4dGVuZHMgUGFydGljbGVzSW50ZXJhY3RvckJhc2VfMS5QYXJ0aWNsZXNJbnRlcmFjdG9yQmFzZSB7XG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyKSB7XG4gICAgICAgIHN1cGVyKGNvbnRhaW5lcik7XG4gICAgfVxuICAgIGlzRW5hYmxlZChwYXJ0aWNsZSkge1xuICAgICAgICByZXR1cm4gcGFydGljbGUub3B0aW9ucy5jb2xsaXNpb25zLmVuYWJsZTtcbiAgICB9XG4gICAgcmVzZXQoKSB7XG4gICAgfVxuICAgIGludGVyYWN0KHAxKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyO1xuICAgICAgICBjb25zdCBwb3MxID0gcDEuZ2V0UG9zaXRpb24oKTtcbiAgICAgICAgY29uc3QgcmFkaXVzMSA9IHAxLmdldFJhZGl1cygpO1xuICAgICAgICBjb25zdCBxdWVyeSA9IGNvbnRhaW5lci5wYXJ0aWNsZXMucXVhZFRyZWUucXVlcnlDaXJjbGUocG9zMSwgcmFkaXVzMSAqIDIpO1xuICAgICAgICBmb3IgKGNvbnN0IHAyIG9mIHF1ZXJ5KSB7XG4gICAgICAgICAgICBpZiAocDEgPT09IHAyIHx8XG4gICAgICAgICAgICAgICAgIXAyLm9wdGlvbnMuY29sbGlzaW9ucy5lbmFibGUgfHxcbiAgICAgICAgICAgICAgICBwMS5vcHRpb25zLmNvbGxpc2lvbnMubW9kZSAhPT0gcDIub3B0aW9ucy5jb2xsaXNpb25zLm1vZGUgfHxcbiAgICAgICAgICAgICAgICBwMi5kZXN0cm95ZWQgfHxcbiAgICAgICAgICAgICAgICBwMi5zcGF3bmluZykge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcG9zMiA9IHAyLmdldFBvc2l0aW9uKCk7XG4gICAgICAgICAgICBpZiAoTWF0aC5yb3VuZChwb3MxLnopICE9PSBNYXRoLnJvdW5kKHBvczIueikpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGRpc3QgPSAoMCwgVXRpbHNfMS5nZXREaXN0YW5jZSkocG9zMSwgcG9zMik7XG4gICAgICAgICAgICBjb25zdCByYWRpdXMyID0gcDIuZ2V0UmFkaXVzKCk7XG4gICAgICAgICAgICBjb25zdCBkaXN0UCA9IHJhZGl1czEgKyByYWRpdXMyO1xuICAgICAgICAgICAgaWYgKGRpc3QgPD0gZGlzdFApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc29sdmVDb2xsaXNpb24ocDEsIHAyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXNvbHZlQ29sbGlzaW9uKHAxLCBwMikge1xuICAgICAgICBzd2l0Y2ggKHAxLm9wdGlvbnMuY29sbGlzaW9ucy5tb2RlKSB7XG4gICAgICAgICAgICBjYXNlIEVudW1zXzEuQ29sbGlzaW9uTW9kZS5hYnNvcmI6IHtcbiAgICAgICAgICAgICAgICB0aGlzLmFic29yYihwMSwgcDIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBFbnVtc18xLkNvbGxpc2lvbk1vZGUuYm91bmNlOiB7XG4gICAgICAgICAgICAgICAgYm91bmNlKHAxLCBwMik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEVudW1zXzEuQ29sbGlzaW9uTW9kZS5kZXN0cm95OiB7XG4gICAgICAgICAgICAgICAgZGVzdHJveShwMSwgcDIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGFic29yYihwMSwgcDIpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXI7XG4gICAgICAgIGNvbnN0IGZwcyA9IGNvbnRhaW5lci5mcHNMaW1pdCAvIDEwMDA7XG4gICAgICAgIGlmIChwMS5nZXRSYWRpdXMoKSA9PT0gdW5kZWZpbmVkICYmIHAyLmdldFJhZGl1cygpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHAxLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwMS5nZXRSYWRpdXMoKSAhPT0gdW5kZWZpbmVkICYmIHAyLmdldFJhZGl1cygpID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHAyLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwMS5nZXRSYWRpdXMoKSAhPT0gdW5kZWZpbmVkICYmIHAyLmdldFJhZGl1cygpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChwMS5nZXRSYWRpdXMoKSA+PSBwMi5nZXRSYWRpdXMoKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZhY3RvciA9ICgwLCBVdGlsc18xLmNsYW1wKShwMS5nZXRSYWRpdXMoKSAvIHAyLmdldFJhZGl1cygpLCAwLCBwMi5nZXRSYWRpdXMoKSkgKiBmcHM7XG4gICAgICAgICAgICAgICAgcDEuc2l6ZS52YWx1ZSArPSBmYWN0b3I7XG4gICAgICAgICAgICAgICAgcDIuc2l6ZS52YWx1ZSAtPSBmYWN0b3I7XG4gICAgICAgICAgICAgICAgaWYgKHAyLmdldFJhZGl1cygpIDw9IGNvbnRhaW5lci5yZXRpbmEucGl4ZWxSYXRpbykge1xuICAgICAgICAgICAgICAgICAgICBwMi5zaXplLnZhbHVlID0gMDtcbiAgICAgICAgICAgICAgICAgICAgcDIuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZhY3RvciA9ICgwLCBVdGlsc18xLmNsYW1wKShwMi5nZXRSYWRpdXMoKSAvIHAxLmdldFJhZGl1cygpLCAwLCBwMS5nZXRSYWRpdXMoKSkgKiBmcHM7XG4gICAgICAgICAgICAgICAgcDEuc2l6ZS52YWx1ZSAtPSBmYWN0b3I7XG4gICAgICAgICAgICAgICAgcDIuc2l6ZS52YWx1ZSArPSBmYWN0b3I7XG4gICAgICAgICAgICAgICAgaWYgKHAxLmdldFJhZGl1cygpIDw9IGNvbnRhaW5lci5yZXRpbmEucGl4ZWxSYXRpbykge1xuICAgICAgICAgICAgICAgICAgICBwMS5zaXplLnZhbHVlID0gMDtcbiAgICAgICAgICAgICAgICAgICAgcDEuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQ29sbGlkZXIgPSBDb2xsaWRlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5sb2FkUGFydGljbGVzQ29sbGlzaW9uc0ludGVyYWN0aW9uID0gdm9pZCAwO1xuY29uc3QgQ29sbGlkZXJfMSA9IHJlcXVpcmUoXCIuL0NvbGxpZGVyXCIpO1xuYXN5bmMgZnVuY3Rpb24gbG9hZFBhcnRpY2xlc0NvbGxpc2lvbnNJbnRlcmFjdGlvbih0c1BhcnRpY2xlcykge1xuICAgIGF3YWl0IHRzUGFydGljbGVzLmFkZEludGVyYWN0b3IoXCJwYXJ0aWNsZXNDb2xsaXNpb25zXCIsIChjb250YWluZXIpID0+IG5ldyBDb2xsaWRlcl8xLkNvbGxpZGVyKGNvbnRhaW5lcikpO1xufVxuZXhwb3J0cy5sb2FkUGFydGljbGVzQ29sbGlzaW9uc0ludGVyYWN0aW9uID0gbG9hZFBhcnRpY2xlc0NvbGxpc2lvbnNJbnRlcmFjdGlvbjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5MaW5rSW5zdGFuY2UgPSB2b2lkIDA7XG5jb25zdCBVdGlsc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL1V0aWxzXCIpO1xuY2xhc3MgTGlua0luc3RhbmNlIHtcbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXIpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgfVxuICAgIHBhcnRpY2xlQ3JlYXRlZChwYXJ0aWNsZSkge1xuICAgICAgICBjb25zdCBsaW5rUGFydGljbGUgPSBwYXJ0aWNsZTtcbiAgICAgICAgbGlua1BhcnRpY2xlLmxpbmtzID0gW107XG4gICAgfVxuICAgIHBhcnRpY2xlRGVzdHJveWVkKHBhcnRpY2xlKSB7XG4gICAgICAgIGNvbnN0IGxpbmtQYXJ0aWNsZSA9IHBhcnRpY2xlO1xuICAgICAgICBsaW5rUGFydGljbGUubGlua3MgPSBbXTtcbiAgICB9XG4gICAgZHJhd1BhcnRpY2xlKGNvbnRleHQsIHBhcnRpY2xlKSB7XG4gICAgICAgIGNvbnN0IGxpbmtQYXJ0aWNsZSA9IHBhcnRpY2xlO1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcjtcbiAgICAgICAgY29uc3QgcGFydGljbGVzID0gY29udGFpbmVyLnBhcnRpY2xlcztcbiAgICAgICAgY29uc3QgcE9wdGlvbnMgPSBwYXJ0aWNsZS5vcHRpb25zO1xuICAgICAgICBpZiAobGlua1BhcnRpY2xlLmxpbmtzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnRleHQuc2F2ZSgpO1xuICAgICAgICAgICAgY29uc3QgcDFMaW5rcyA9IGxpbmtQYXJ0aWNsZS5saW5rcy5maWx0ZXIoKGwpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5rRnJlcSA9IGNvbnRhaW5lci5wYXJ0aWNsZXMuZ2V0TGlua0ZyZXF1ZW5jeShsaW5rUGFydGljbGUsIGwuZGVzdGluYXRpb24pO1xuICAgICAgICAgICAgICAgIHJldHVybiBsaW5rRnJlcSA8PSBwT3B0aW9ucy5saW5rcy5mcmVxdWVuY3k7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbGluayBvZiBwMUxpbmtzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcDIgPSBsaW5rLmRlc3RpbmF0aW9uO1xuICAgICAgICAgICAgICAgIGlmIChwT3B0aW9ucy5saW5rcy50cmlhbmdsZXMuZW5hYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmtzID0gcDFMaW5rcy5tYXAoKGwpID0+IGwuZGVzdGluYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2ZXJ0aWNlcyA9IHAyLmxpbmtzLmZpbHRlcigodCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGlua0ZyZXEgPSBjb250YWluZXIucGFydGljbGVzLmdldExpbmtGcmVxdWVuY3kocDIsIHQuZGVzdGluYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxpbmtGcmVxIDw9IHAyLm9wdGlvbnMubGlua3MuZnJlcXVlbmN5ICYmIGxpbmtzLmluZGV4T2YodC5kZXN0aW5hdGlvbikgPj0gMDtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2ZXJ0aWNlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdmVydGV4IG9mIHZlcnRpY2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcDMgPSB2ZXJ0ZXguZGVzdGluYXRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJpYW5nbGVGcmVxID0gcGFydGljbGVzLmdldFRyaWFuZ2xlRnJlcXVlbmN5KGxpbmtQYXJ0aWNsZSwgcDIsIHAzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJpYW5nbGVGcmVxID4gcE9wdGlvbnMubGlua3MudHJpYW5nbGVzLmZyZXF1ZW5jeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3TGlua1RyaWFuZ2xlKGxpbmtQYXJ0aWNsZSwgbGluaywgdmVydGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobGluay5vcGFjaXR5ID4gMCAmJiBjb250YWluZXIucmV0aW5hLmxpbmtzV2lkdGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhd0xpbmtMaW5lKGxpbmtQYXJ0aWNsZSwgbGluayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGV4dC5yZXN0b3JlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZHJhd0xpbmtUcmlhbmdsZShwMSwgbGluazEsIGxpbmsyKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXI7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBjb250YWluZXIuYWN0dWFsT3B0aW9ucztcbiAgICAgICAgY29uc3QgcDIgPSBsaW5rMS5kZXN0aW5hdGlvbjtcbiAgICAgICAgY29uc3QgcDMgPSBsaW5rMi5kZXN0aW5hdGlvbjtcbiAgICAgICAgY29uc3QgdHJpYW5nbGVPcHRpb25zID0gcDEub3B0aW9ucy5saW5rcy50cmlhbmdsZXM7XG4gICAgICAgIGNvbnN0IG9wYWNpdHlUcmlhbmdsZSA9IChfYSA9IHRyaWFuZ2xlT3B0aW9ucy5vcGFjaXR5KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAobGluazEub3BhY2l0eSArIGxpbmsyLm9wYWNpdHkpIC8gMjtcbiAgICAgICAgaWYgKG9wYWNpdHlUcmlhbmdsZSA8PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcG9zMSA9IHAxLmdldFBvc2l0aW9uKCk7XG4gICAgICAgIGNvbnN0IHBvczIgPSBwMi5nZXRQb3NpdGlvbigpO1xuICAgICAgICBjb25zdCBwb3MzID0gcDMuZ2V0UG9zaXRpb24oKTtcbiAgICAgICAgY29udGFpbmVyLmNhbnZhcy5kcmF3KChjdHgpID0+IHtcbiAgICAgICAgICAgIGlmICgoMCwgVXRpbHNfMS5nZXREaXN0YW5jZSkocG9zMSwgcG9zMikgPiBjb250YWluZXIucmV0aW5hLmxpbmtzRGlzdGFuY2UgfHxcbiAgICAgICAgICAgICAgICAoMCwgVXRpbHNfMS5nZXREaXN0YW5jZSkocG9zMywgcG9zMikgPiBjb250YWluZXIucmV0aW5hLmxpbmtzRGlzdGFuY2UgfHxcbiAgICAgICAgICAgICAgICAoMCwgVXRpbHNfMS5nZXREaXN0YW5jZSkocG9zMywgcG9zMSkgPiBjb250YWluZXIucmV0aW5hLmxpbmtzRGlzdGFuY2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgY29sb3JUcmlhbmdsZSA9ICgwLCBVdGlsc18xLmNvbG9yVG9SZ2IpKHRyaWFuZ2xlT3B0aW9ucy5jb2xvcik7XG4gICAgICAgICAgICBpZiAoIWNvbG9yVHJpYW5nbGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5rc09wdGlvbnMgPSBwMS5vcHRpb25zLmxpbmtzO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmtDb2xvciA9IGxpbmtzT3B0aW9ucy5pZCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgID8gY29udGFpbmVyLnBhcnRpY2xlcy5saW5rc0NvbG9ycy5nZXQobGlua3NPcHRpb25zLmlkKVxuICAgICAgICAgICAgICAgICAgICA6IGNvbnRhaW5lci5wYXJ0aWNsZXMubGlua3NDb2xvcjtcbiAgICAgICAgICAgICAgICBjb2xvclRyaWFuZ2xlID0gKDAsIFV0aWxzXzEuZ2V0TGlua0NvbG9yKShwMSwgcDIsIGxpbmtDb2xvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWNvbG9yVHJpYW5nbGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAoMCwgVXRpbHNfMS5kcmF3TGlua1RyaWFuZ2xlKShjdHgsIHBvczEsIHBvczIsIHBvczMsIG9wdGlvbnMuYmFja2dyb3VuZE1hc2suZW5hYmxlLCBvcHRpb25zLmJhY2tncm91bmRNYXNrLmNvbXBvc2l0ZSwgY29sb3JUcmlhbmdsZSwgb3BhY2l0eVRyaWFuZ2xlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGRyYXdMaW5rTGluZShwMSwgbGluaykge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcjtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGNvbnRhaW5lci5hY3R1YWxPcHRpb25zO1xuICAgICAgICBjb25zdCBwMiA9IGxpbmsuZGVzdGluYXRpb247XG4gICAgICAgIGxldCBvcGFjaXR5ID0gbGluay5vcGFjaXR5O1xuICAgICAgICBjb25zdCBwb3MxID0gcDEuZ2V0UG9zaXRpb24oKTtcbiAgICAgICAgY29uc3QgcG9zMiA9IHAyLmdldFBvc2l0aW9uKCk7XG4gICAgICAgIGNvbnRhaW5lci5jYW52YXMuZHJhdygoY3R4KSA9PiB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgbGV0IGNvbG9yTGluZTtcbiAgICAgICAgICAgIGNvbnN0IHR3aW5rbGUgPSBwMS5vcHRpb25zLnR3aW5rbGUubGluZXM7XG4gICAgICAgICAgICBpZiAodHdpbmtsZS5lbmFibGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0d2lua2xlRnJlcSA9IHR3aW5rbGUuZnJlcXVlbmN5O1xuICAgICAgICAgICAgICAgIGNvbnN0IHR3aW5rbGVSZ2IgPSAoMCwgVXRpbHNfMS5jb2xvclRvUmdiKSh0d2lua2xlLmNvbG9yKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0d2lua2xpbmcgPSBNYXRoLnJhbmRvbSgpIDwgdHdpbmtsZUZyZXE7XG4gICAgICAgICAgICAgICAgaWYgKHR3aW5rbGluZyAmJiB0d2lua2xlUmdiICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3JMaW5lID0gdHdpbmtsZVJnYjtcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eSA9IHR3aW5rbGUub3BhY2l0eTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWNvbG9yTGluZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmtzT3B0aW9ucyA9IHAxLm9wdGlvbnMubGlua3M7XG4gICAgICAgICAgICAgICAgY29uc3QgbGlua0NvbG9yID0gbGlua3NPcHRpb25zLmlkICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgPyBjb250YWluZXIucGFydGljbGVzLmxpbmtzQ29sb3JzLmdldChsaW5rc09wdGlvbnMuaWQpXG4gICAgICAgICAgICAgICAgICAgIDogY29udGFpbmVyLnBhcnRpY2xlcy5saW5rc0NvbG9yO1xuICAgICAgICAgICAgICAgIGNvbG9yTGluZSA9ICgwLCBVdGlsc18xLmdldExpbmtDb2xvcikocDEsIHAyLCBsaW5rQ29sb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFjb2xvckxpbmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB3aWR0aCA9IChfYSA9IHAxLnJldGluYS5saW5rc1dpZHRoKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBjb250YWluZXIucmV0aW5hLmxpbmtzV2lkdGg7XG4gICAgICAgICAgICBjb25zdCBtYXhEaXN0YW5jZSA9IChfYiA9IHAxLnJldGluYS5saW5rc0Rpc3RhbmNlKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBjb250YWluZXIucmV0aW5hLmxpbmtzRGlzdGFuY2U7XG4gICAgICAgICAgICAoMCwgVXRpbHNfMS5kcmF3TGlua0xpbmUpKGN0eCwgd2lkdGgsIHBvczEsIHBvczIsIG1heERpc3RhbmNlLCBjb250YWluZXIuY2FudmFzLnNpemUsIHAxLm9wdGlvbnMubGlua3Mud2FycCwgb3B0aW9ucy5iYWNrZ3JvdW5kTWFzay5lbmFibGUsIG9wdGlvbnMuYmFja2dyb3VuZE1hc2suY29tcG9zaXRlLCBjb2xvckxpbmUsIG9wYWNpdHksIHAxLm9wdGlvbnMubGlua3Muc2hhZG93KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5MaW5rSW5zdGFuY2UgPSBMaW5rSW5zdGFuY2U7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTGlua2VyID0gdm9pZCAwO1xuY29uc3QgVXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9VdGlsc1wiKTtcbmNvbnN0IFBhcnRpY2xlc0ludGVyYWN0b3JCYXNlXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vQ29yZS9QYXJ0aWNsZXNJbnRlcmFjdG9yQmFzZVwiKTtcbmZ1bmN0aW9uIGdldExpbmtEaXN0YW5jZShwb3MxLCBwb3MyLCBvcHREaXN0YW5jZSwgY2FudmFzU2l6ZSwgd2FycCkge1xuICAgIGxldCBkaXN0YW5jZSA9ICgwLCBVdGlsc18xLmdldERpc3RhbmNlKShwb3MxLCBwb3MyKTtcbiAgICBpZiAoIXdhcnAgfHwgZGlzdGFuY2UgPD0gb3B0RGlzdGFuY2UpIHtcbiAgICAgICAgcmV0dXJuIGRpc3RhbmNlO1xuICAgIH1cbiAgICBjb25zdCBwb3MyTkUgPSB7XG4gICAgICAgIHg6IHBvczIueCAtIGNhbnZhc1NpemUud2lkdGgsXG4gICAgICAgIHk6IHBvczIueSxcbiAgICB9O1xuICAgIGRpc3RhbmNlID0gKDAsIFV0aWxzXzEuZ2V0RGlzdGFuY2UpKHBvczEsIHBvczJORSk7XG4gICAgaWYgKGRpc3RhbmNlIDw9IG9wdERpc3RhbmNlKSB7XG4gICAgICAgIHJldHVybiBkaXN0YW5jZTtcbiAgICB9XG4gICAgY29uc3QgcG9zMlNFID0ge1xuICAgICAgICB4OiBwb3MyLnggLSBjYW52YXNTaXplLndpZHRoLFxuICAgICAgICB5OiBwb3MyLnkgLSBjYW52YXNTaXplLmhlaWdodCxcbiAgICB9O1xuICAgIGRpc3RhbmNlID0gKDAsIFV0aWxzXzEuZ2V0RGlzdGFuY2UpKHBvczEsIHBvczJTRSk7XG4gICAgaWYgKGRpc3RhbmNlIDw9IG9wdERpc3RhbmNlKSB7XG4gICAgICAgIHJldHVybiBkaXN0YW5jZTtcbiAgICB9XG4gICAgY29uc3QgcG9zMlNXID0ge1xuICAgICAgICB4OiBwb3MyLngsXG4gICAgICAgIHk6IHBvczIueSAtIGNhbnZhc1NpemUuaGVpZ2h0LFxuICAgIH07XG4gICAgZGlzdGFuY2UgPSAoMCwgVXRpbHNfMS5nZXREaXN0YW5jZSkocG9zMSwgcG9zMlNXKTtcbiAgICByZXR1cm4gZGlzdGFuY2U7XG59XG5jbGFzcyBMaW5rZXIgZXh0ZW5kcyBQYXJ0aWNsZXNJbnRlcmFjdG9yQmFzZV8xLlBhcnRpY2xlc0ludGVyYWN0b3JCYXNlIHtcbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXIpIHtcbiAgICAgICAgc3VwZXIoY29udGFpbmVyKTtcbiAgICB9XG4gICAgaXNFbmFibGVkKHBhcnRpY2xlKSB7XG4gICAgICAgIHJldHVybiBwYXJ0aWNsZS5vcHRpb25zLmxpbmtzLmVuYWJsZTtcbiAgICB9XG4gICAgcmVzZXQoKSB7XG4gICAgfVxuICAgIGludGVyYWN0KHAxKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcDEubGlua3MgPSBbXTtcbiAgICAgICAgY29uc3QgcG9zMSA9IHAxLmdldFBvc2l0aW9uKCk7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyO1xuICAgICAgICBjb25zdCBjYW52YXNTaXplID0gY29udGFpbmVyLmNhbnZhcy5zaXplO1xuICAgICAgICBpZiAocG9zMS54IDwgMCB8fCBwb3MxLnkgPCAwIHx8IHBvczEueCA+IGNhbnZhc1NpemUud2lkdGggfHwgcG9zMS55ID4gY2FudmFzU2l6ZS5oZWlnaHQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsaW5rT3B0MSA9IHAxLm9wdGlvbnMubGlua3M7XG4gICAgICAgIGNvbnN0IG9wdE9wYWNpdHkgPSBsaW5rT3B0MS5vcGFjaXR5O1xuICAgICAgICBjb25zdCBvcHREaXN0YW5jZSA9IChfYSA9IHAxLnJldGluYS5saW5rc0Rpc3RhbmNlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBjb250YWluZXIucmV0aW5hLmxpbmtzRGlzdGFuY2U7XG4gICAgICAgIGNvbnN0IHdhcnAgPSBsaW5rT3B0MS53YXJwO1xuICAgICAgICBjb25zdCByYW5nZSA9IHdhcnBcbiAgICAgICAgICAgID8gbmV3IFV0aWxzXzEuQ2lyY2xlV2FycChwb3MxLngsIHBvczEueSwgb3B0RGlzdGFuY2UsIGNhbnZhc1NpemUpXG4gICAgICAgICAgICA6IG5ldyBVdGlsc18xLkNpcmNsZShwb3MxLngsIHBvczEueSwgb3B0RGlzdGFuY2UpO1xuICAgICAgICBjb25zdCBxdWVyeSA9IGNvbnRhaW5lci5wYXJ0aWNsZXMucXVhZFRyZWUucXVlcnkocmFuZ2UpO1xuICAgICAgICBmb3IgKGNvbnN0IHAyIG9mIHF1ZXJ5KSB7XG4gICAgICAgICAgICBjb25zdCBsaW5rT3B0MiA9IHAyLm9wdGlvbnMubGlua3M7XG4gICAgICAgICAgICBpZiAocDEgPT09IHAyIHx8XG4gICAgICAgICAgICAgICAgIWxpbmtPcHQyLmVuYWJsZSB8fFxuICAgICAgICAgICAgICAgIGxpbmtPcHQxLmlkICE9PSBsaW5rT3B0Mi5pZCB8fFxuICAgICAgICAgICAgICAgIHAyLnNwYXduaW5nIHx8XG4gICAgICAgICAgICAgICAgcDIuZGVzdHJveWVkIHx8XG4gICAgICAgICAgICAgICAgcDEubGlua3MubWFwKCh0KSA9PiB0LmRlc3RpbmF0aW9uKS5pbmRleE9mKHAyKSAhPT0gLTEgfHxcbiAgICAgICAgICAgICAgICBwMi5saW5rcy5tYXAoKHQpID0+IHQuZGVzdGluYXRpb24pLmluZGV4T2YocDEpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcG9zMiA9IHAyLmdldFBvc2l0aW9uKCk7XG4gICAgICAgICAgICBpZiAocG9zMi54IDwgMCB8fCBwb3MyLnkgPCAwIHx8IHBvczIueCA+IGNhbnZhc1NpemUud2lkdGggfHwgcG9zMi55ID4gY2FudmFzU2l6ZS5oZWlnaHQpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlID0gZ2V0TGlua0Rpc3RhbmNlKHBvczEsIHBvczIsIG9wdERpc3RhbmNlLCBjYW52YXNTaXplLCB3YXJwICYmIGxpbmtPcHQyLndhcnApO1xuICAgICAgICAgICAgaWYgKGRpc3RhbmNlID4gb3B0RGlzdGFuY2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBvcGFjaXR5TGluZSA9ICgxIC0gZGlzdGFuY2UgLyBvcHREaXN0YW5jZSkgKiBvcHRPcGFjaXR5O1xuICAgICAgICAgICAgdGhpcy5zZXRDb2xvcihwMSk7XG4gICAgICAgICAgICBwMS5saW5rcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbjogcDIsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogb3BhY2l0eUxpbmUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXRDb2xvcihwMSkge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcjtcbiAgICAgICAgY29uc3QgbGlua3NPcHRpb25zID0gcDEub3B0aW9ucy5saW5rcztcbiAgICAgICAgbGV0IGxpbmtDb2xvciA9IGxpbmtzT3B0aW9ucy5pZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IGNvbnRhaW5lci5wYXJ0aWNsZXMubGlua3NDb2xvclxuICAgICAgICAgICAgOiBjb250YWluZXIucGFydGljbGVzLmxpbmtzQ29sb3JzLmdldChsaW5rc09wdGlvbnMuaWQpO1xuICAgICAgICBpZiAoIWxpbmtDb2xvcikge1xuICAgICAgICAgICAgY29uc3Qgb3B0Q29sb3IgPSBsaW5rc09wdGlvbnMuY29sb3I7XG4gICAgICAgICAgICBsaW5rQ29sb3IgPSAoMCwgVXRpbHNfMS5nZXRMaW5rUmFuZG9tQ29sb3IpKG9wdENvbG9yLCBsaW5rc09wdGlvbnMuYmxpbmssIGxpbmtzT3B0aW9ucy5jb25zZW50KTtcbiAgICAgICAgICAgIGlmIChsaW5rc09wdGlvbnMuaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5wYXJ0aWNsZXMubGlua3NDb2xvciA9IGxpbmtDb2xvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5wYXJ0aWNsZXMubGlua3NDb2xvcnMuc2V0KGxpbmtzT3B0aW9ucy5pZCwgbGlua0NvbG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuTGlua2VyID0gTGlua2VyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvYWRQYXJ0aWNsZXNMaW5rc0ludGVyYWN0aW9uID0gZXhwb3J0cy5sb2FkSW50ZXJhY3Rpb24gPSB2b2lkIDA7XG5jb25zdCBMaW5rZXJfMSA9IHJlcXVpcmUoXCIuL0xpbmtlclwiKTtcbmNvbnN0IHBsdWdpbl8xID0gcmVxdWlyZShcIi4vcGx1Z2luXCIpO1xuYXN5bmMgZnVuY3Rpb24gbG9hZEludGVyYWN0aW9uKHRzUGFydGljbGVzKSB7XG4gICAgYXdhaXQgdHNQYXJ0aWNsZXMuYWRkSW50ZXJhY3RvcihcInBhcnRpY2xlc0xpbmtzXCIsIChjb250YWluZXIpID0+IG5ldyBMaW5rZXJfMS5MaW5rZXIoY29udGFpbmVyKSk7XG59XG5leHBvcnRzLmxvYWRJbnRlcmFjdGlvbiA9IGxvYWRJbnRlcmFjdGlvbjtcbmFzeW5jIGZ1bmN0aW9uIGxvYWRQYXJ0aWNsZXNMaW5rc0ludGVyYWN0aW9uKHRzUGFydGljbGVzKSB7XG4gICAgYXdhaXQgbG9hZEludGVyYWN0aW9uKHRzUGFydGljbGVzKTtcbiAgICBhd2FpdCAoMCwgcGx1Z2luXzEubG9hZFBsdWdpbikodHNQYXJ0aWNsZXMpO1xufVxuZXhwb3J0cy5sb2FkUGFydGljbGVzTGlua3NJbnRlcmFjdGlvbiA9IGxvYWRQYXJ0aWNsZXNMaW5rc0ludGVyYWN0aW9uO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvYWRQbHVnaW4gPSB2b2lkIDA7XG5jb25zdCBMaW5rSW5zdGFuY2VfMSA9IHJlcXVpcmUoXCIuL0xpbmtJbnN0YW5jZVwiKTtcbmNsYXNzIFBsdWdpbiB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuaWQgPSBcImxpbmtzXCI7XG4gICAgfVxuICAgIGdldFBsdWdpbihjb250YWluZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMaW5rSW5zdGFuY2VfMS5MaW5rSW5zdGFuY2UoY29udGFpbmVyKTtcbiAgICB9XG4gICAgbmVlZHNQbHVnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBsb2FkT3B0aW9ucygpIHtcbiAgICB9XG59XG5hc3luYyBmdW5jdGlvbiBsb2FkUGx1Z2luKHRzUGFydGljbGVzKSB7XG4gICAgY29uc3QgcGx1Z2luID0gbmV3IFBsdWdpbigpO1xuICAgIGF3YWl0IHRzUGFydGljbGVzLmFkZFBsdWdpbihwbHVnaW4pO1xufVxuZXhwb3J0cy5sb2FkUGx1Z2luID0gbG9hZFBsdWdpbjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BbmltYXRhYmxlQ29sb3IgPSB2b2lkIDA7XG5jb25zdCBPcHRpb25zQ29sb3JfMSA9IHJlcXVpcmUoXCIuL09wdGlvbnNDb2xvclwiKTtcbmNvbnN0IEhzbEFuaW1hdGlvbl8xID0gcmVxdWlyZShcIi4vSHNsQW5pbWF0aW9uXCIpO1xuY2xhc3MgQW5pbWF0YWJsZUNvbG9yIGV4dGVuZHMgT3B0aW9uc0NvbG9yXzEuT3B0aW9uc0NvbG9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5hbmltYXRpb24gPSBuZXcgSHNsQW5pbWF0aW9uXzEuSHNsQW5pbWF0aW9uKCk7XG4gICAgfVxuICAgIHN0YXRpYyBjcmVhdGUoc291cmNlLCBkYXRhKSB7XG4gICAgICAgIGNvbnN0IGNvbG9yID0gbmV3IEFuaW1hdGFibGVDb2xvcigpO1xuICAgICAgICBjb2xvci5sb2FkKHNvdXJjZSk7XG4gICAgICAgIGlmIChkYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiB8fCBkYXRhIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgICBjb2xvci5sb2FkKHsgdmFsdWU6IGRhdGEgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb2xvci5sb2FkKGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xvcjtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIHN1cGVyLmxvYWQoZGF0YSk7XG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbG9yQW5pbWF0aW9uID0gZGF0YS5hbmltYXRpb247XG4gICAgICAgIGlmIChjb2xvckFuaW1hdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoY29sb3JBbmltYXRpb24uZW5hYmxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvbi5oLmxvYWQoY29sb3JBbmltYXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb24ubG9hZChkYXRhLmFuaW1hdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkFuaW1hdGFibGVDb2xvciA9IEFuaW1hdGFibGVDb2xvcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5HcmFkaWVudENvbG9yT3BhY2l0eUFuaW1hdGlvbiA9IGV4cG9ydHMuR3JhZGllbnRBbmdsZUFuaW1hdGlvbiA9IGV4cG9ydHMuQW5pbWF0YWJsZUdyYWRpZW50Q29sb3IgPSBleHBvcnRzLkdyYWRpZW50Q29sb3JPcGFjaXR5ID0gZXhwb3J0cy5HcmFkaWVudEFuZ2xlID0gZXhwb3J0cy5BbmltYXRhYmxlR3JhZGllbnQgPSB2b2lkIDA7XG5jb25zdCBFbnVtc18xID0gcmVxdWlyZShcIi4uLy4uL0VudW1zXCIpO1xuY29uc3QgQW5pbWF0YWJsZUNvbG9yXzEgPSByZXF1aXJlKFwiLi9BbmltYXRhYmxlQ29sb3JcIik7XG5jb25zdCBVdGlsc18xID0gcmVxdWlyZShcIi4uLy4uL1V0aWxzXCIpO1xuY2xhc3MgQW5pbWF0YWJsZUdyYWRpZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5hbmdsZSA9IG5ldyBHcmFkaWVudEFuZ2xlKCk7XG4gICAgICAgIHRoaXMuY29sb3JzID0gW107XG4gICAgICAgIHRoaXMudHlwZSA9IEVudW1zXzEuR3JhZGllbnRUeXBlLnJhbmRvbTtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYW5nbGUubG9hZChkYXRhLmFuZ2xlKTtcbiAgICAgICAgaWYgKGRhdGEuY29sb3JzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY29sb3JzID0gZGF0YS5jb2xvcnMubWFwKChzKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdG1wID0gbmV3IEFuaW1hdGFibGVHcmFkaWVudENvbG9yKCk7XG4gICAgICAgICAgICAgICAgdG1wLmxvYWQocyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRtcDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLnR5cGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy50eXBlID0gZGF0YS50eXBlO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5BbmltYXRhYmxlR3JhZGllbnQgPSBBbmltYXRhYmxlR3JhZGllbnQ7XG5jbGFzcyBHcmFkaWVudEFuZ2xlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IDA7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uID0gbmV3IEdyYWRpZW50QW5nbGVBbmltYXRpb24oKTtcbiAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSBFbnVtc18xLlJvdGF0ZURpcmVjdGlvbi5jbG9ja3dpc2U7XG4gICAgfVxuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFuaW1hdGlvbi5sb2FkKGRhdGEuYW5pbWF0aW9uKTtcbiAgICAgICAgaWYgKGRhdGEudmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IGRhdGEudmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuZGlyZWN0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZGlyZWN0aW9uID0gZGF0YS5kaXJlY3Rpb247XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkdyYWRpZW50QW5nbGUgPSBHcmFkaWVudEFuZ2xlO1xuY2xhc3MgR3JhZGllbnRDb2xvck9wYWNpdHkge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnZhbHVlID0gMDtcbiAgICAgICAgdGhpcy5hbmltYXRpb24gPSBuZXcgR3JhZGllbnRDb2xvck9wYWNpdHlBbmltYXRpb24oKTtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uLmxvYWQoZGF0YS5hbmltYXRpb24pO1xuICAgICAgICBpZiAoZGF0YS52YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gKDAsIFV0aWxzXzEuc2V0UmFuZ2VWYWx1ZSkoZGF0YS52YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkdyYWRpZW50Q29sb3JPcGFjaXR5ID0gR3JhZGllbnRDb2xvck9wYWNpdHk7XG5jbGFzcyBBbmltYXRhYmxlR3JhZGllbnRDb2xvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuc3RvcCA9IDA7XG4gICAgICAgIHRoaXMudmFsdWUgPSBuZXcgQW5pbWF0YWJsZUNvbG9yXzEuQW5pbWF0YWJsZUNvbG9yKCk7XG4gICAgfVxuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5zdG9wICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcCA9IGRhdGEuc3RvcDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZhbHVlID0gQW5pbWF0YWJsZUNvbG9yXzEuQW5pbWF0YWJsZUNvbG9yLmNyZWF0ZSh0aGlzLnZhbHVlLCBkYXRhLnZhbHVlKTtcbiAgICAgICAgaWYgKGRhdGEub3BhY2l0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLm9wYWNpdHkgPSBuZXcgR3JhZGllbnRDb2xvck9wYWNpdHkoKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YS5vcGFjaXR5ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vcGFjaXR5LnZhbHVlID0gZGF0YS5vcGFjaXR5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vcGFjaXR5LmxvYWQoZGF0YS5vcGFjaXR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQW5pbWF0YWJsZUdyYWRpZW50Q29sb3IgPSBBbmltYXRhYmxlR3JhZGllbnRDb2xvcjtcbmNsYXNzIEdyYWRpZW50QW5nbGVBbmltYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmNvdW50ID0gMDtcbiAgICAgICAgdGhpcy5lbmFibGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zcGVlZCA9IDA7XG4gICAgICAgIHRoaXMuc3luYyA9IGZhbHNlO1xuICAgIH1cbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuY291bnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5jb3VudCA9IGRhdGEuY291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuZW5hYmxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZW5hYmxlID0gZGF0YS5lbmFibGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuc3BlZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5zcGVlZCA9IGRhdGEuc3BlZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuc3luYyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnN5bmMgPSBkYXRhLnN5bmM7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkdyYWRpZW50QW5nbGVBbmltYXRpb24gPSBHcmFkaWVudEFuZ2xlQW5pbWF0aW9uO1xuY2xhc3MgR3JhZGllbnRDb2xvck9wYWNpdHlBbmltYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmNvdW50ID0gMDtcbiAgICAgICAgdGhpcy5lbmFibGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zcGVlZCA9IDA7XG4gICAgICAgIHRoaXMuc3luYyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnN0YXJ0VmFsdWUgPSBFbnVtc18xLlN0YXJ0VmFsdWVUeXBlLnJhbmRvbTtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmNvdW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY291bnQgPSBkYXRhLmNvdW50O1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmVuYWJsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmVuYWJsZSA9IGRhdGEuZW5hYmxlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLnNwZWVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc3BlZWQgPSBkYXRhLnNwZWVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLnN5bmMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5zeW5jID0gZGF0YS5zeW5jO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLnN0YXJ0VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5zdGFydFZhbHVlID0gZGF0YS5zdGFydFZhbHVlO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5HcmFkaWVudENvbG9yT3BhY2l0eUFuaW1hdGlvbiA9IEdyYWRpZW50Q29sb3JPcGFjaXR5QW5pbWF0aW9uO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFuaW1hdGlvbk9wdGlvbnMgPSB2b2lkIDA7XG5jbGFzcyBBbmltYXRpb25PcHRpb25zIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5jb3VudCA9IDA7XG4gICAgICAgIHRoaXMuZW5hYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc3BlZWQgPSAxO1xuICAgICAgICB0aGlzLnN5bmMgPSBmYWxzZTtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmNvdW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY291bnQgPSBkYXRhLmNvdW50O1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmVuYWJsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmVuYWJsZSA9IGRhdGEuZW5hYmxlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLnNwZWVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc3BlZWQgPSBkYXRhLnNwZWVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLnN5bmMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5zeW5jID0gZGF0YS5zeW5jO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5BbmltYXRpb25PcHRpb25zID0gQW5pbWF0aW9uT3B0aW9ucztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5CYWNrZ3JvdW5kID0gdm9pZCAwO1xuY29uc3QgT3B0aW9uc0NvbG9yXzEgPSByZXF1aXJlKFwiLi4vT3B0aW9uc0NvbG9yXCIpO1xuY2xhc3MgQmFja2dyb3VuZCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuY29sb3IgPSBuZXcgT3B0aW9uc0NvbG9yXzEuT3B0aW9uc0NvbG9yKCk7XG4gICAgICAgIHRoaXMuY29sb3IudmFsdWUgPSBcIlwiO1xuICAgICAgICB0aGlzLmltYWdlID0gXCJcIjtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IFwiXCI7XG4gICAgICAgIHRoaXMucmVwZWF0ID0gXCJcIjtcbiAgICAgICAgdGhpcy5zaXplID0gXCJcIjtcbiAgICAgICAgdGhpcy5vcGFjaXR5ID0gMTtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5jb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmNvbG9yID0gT3B0aW9uc0NvbG9yXzEuT3B0aW9uc0NvbG9yLmNyZWF0ZSh0aGlzLmNvbG9yLCBkYXRhLmNvbG9yKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5pbWFnZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmltYWdlID0gZGF0YS5pbWFnZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5wb3NpdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnBvc2l0aW9uID0gZGF0YS5wb3NpdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5yZXBlYXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5yZXBlYXQgPSBkYXRhLnJlcGVhdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5zaXplICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5vcGFjaXR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMub3BhY2l0eSA9IGRhdGEub3BhY2l0eTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQmFja2dyb3VuZCA9IEJhY2tncm91bmQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQmFja2dyb3VuZE1hc2sgPSB2b2lkIDA7XG5jb25zdCBCYWNrZ3JvdW5kTWFza0NvdmVyXzEgPSByZXF1aXJlKFwiLi9CYWNrZ3JvdW5kTWFza0NvdmVyXCIpO1xuY2xhc3MgQmFja2dyb3VuZE1hc2sge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmNvbXBvc2l0ZSA9IFwiZGVzdGluYXRpb24tb3V0XCI7XG4gICAgICAgIHRoaXMuY292ZXIgPSBuZXcgQmFja2dyb3VuZE1hc2tDb3Zlcl8xLkJhY2tncm91bmRNYXNrQ292ZXIoKTtcbiAgICAgICAgdGhpcy5lbmFibGUgPSBmYWxzZTtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5jb21wb3NpdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5jb21wb3NpdGUgPSBkYXRhLmNvbXBvc2l0ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5jb3ZlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCBjb3ZlciA9IGRhdGEuY292ZXI7XG4gICAgICAgICAgICBjb25zdCBjb2xvciA9ICh0eXBlb2YgZGF0YS5jb3ZlciA9PT0gXCJzdHJpbmdcIiA/IHsgY29sb3I6IGRhdGEuY292ZXIgfSA6IGRhdGEuY292ZXIpO1xuICAgICAgICAgICAgdGhpcy5jb3Zlci5sb2FkKGNvdmVyLmNvbG9yICE9PSB1bmRlZmluZWQgPyBjb3ZlciA6IHsgY29sb3I6IGNvbG9yIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmVuYWJsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmVuYWJsZSA9IGRhdGEuZW5hYmxlO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5CYWNrZ3JvdW5kTWFzayA9IEJhY2tncm91bmRNYXNrO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJhY2tncm91bmRNYXNrQ292ZXIgPSB2b2lkIDA7XG5jb25zdCBPcHRpb25zQ29sb3JfMSA9IHJlcXVpcmUoXCIuLi9PcHRpb25zQ29sb3JcIik7XG5jbGFzcyBCYWNrZ3JvdW5kTWFza0NvdmVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5jb2xvciA9IG5ldyBPcHRpb25zQ29sb3JfMS5PcHRpb25zQ29sb3IoKTtcbiAgICAgICAgdGhpcy5vcGFjaXR5ID0gMTtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5jb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmNvbG9yID0gT3B0aW9uc0NvbG9yXzEuT3B0aW9uc0NvbG9yLmNyZWF0ZSh0aGlzLmNvbG9yLCBkYXRhLmNvbG9yKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5vcGFjaXR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMub3BhY2l0eSA9IGRhdGEub3BhY2l0eTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQmFja2dyb3VuZE1hc2tDb3ZlciA9IEJhY2tncm91bmRNYXNrQ292ZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ29sb3JBbmltYXRpb24gPSB2b2lkIDA7XG5jb25zdCBVdGlsc18xID0gcmVxdWlyZShcIi4uLy4uL1V0aWxzXCIpO1xuY2xhc3MgQ29sb3JBbmltYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmNvdW50ID0gMDtcbiAgICAgICAgdGhpcy5lbmFibGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSAwO1xuICAgICAgICB0aGlzLnNwZWVkID0gMTtcbiAgICAgICAgdGhpcy5zeW5jID0gdHJ1ZTtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5jb3VudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmNvdW50ID0gZGF0YS5jb3VudDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5lbmFibGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5lbmFibGUgPSBkYXRhLmVuYWJsZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5vZmZzZXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSAoMCwgVXRpbHNfMS5zZXRSYW5nZVZhbHVlKShkYXRhLm9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuc3BlZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5zcGVlZCA9IGRhdGEuc3BlZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuc3luYyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnN5bmMgPSBkYXRhLnN5bmM7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkNvbG9yQW5pbWF0aW9uID0gQ29sb3JBbmltYXRpb247XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRnVsbFNjcmVlbiA9IHZvaWQgMDtcbmNsYXNzIEZ1bGxTY3JlZW4ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmVuYWJsZSA9IHRydWU7XG4gICAgICAgIHRoaXMuekluZGV4ID0gMDtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmVuYWJsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmVuYWJsZSA9IGRhdGEuZW5hYmxlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLnpJbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnpJbmRleCA9IGRhdGEuekluZGV4O1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5GdWxsU2NyZWVuID0gRnVsbFNjcmVlbjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Ic2xBbmltYXRpb24gPSB2b2lkIDA7XG5jb25zdCBDb2xvckFuaW1hdGlvbl8xID0gcmVxdWlyZShcIi4vQ29sb3JBbmltYXRpb25cIik7XG5jbGFzcyBIc2xBbmltYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmggPSBuZXcgQ29sb3JBbmltYXRpb25fMS5Db2xvckFuaW1hdGlvbigpO1xuICAgICAgICB0aGlzLnMgPSBuZXcgQ29sb3JBbmltYXRpb25fMS5Db2xvckFuaW1hdGlvbigpO1xuICAgICAgICB0aGlzLmwgPSBuZXcgQ29sb3JBbmltYXRpb25fMS5Db2xvckFuaW1hdGlvbigpO1xuICAgIH1cbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oLmxvYWQoZGF0YS5oKTtcbiAgICAgICAgdGhpcy5zLmxvYWQoZGF0YS5zKTtcbiAgICAgICAgdGhpcy5sLmxvYWQoZGF0YS5sKTtcbiAgICB9XG59XG5leHBvcnRzLkhzbEFuaW1hdGlvbiA9IEhzbEFuaW1hdGlvbjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DbGlja0V2ZW50ID0gdm9pZCAwO1xuY2xhc3MgQ2xpY2tFdmVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMubW9kZSA9IFtdO1xuICAgIH1cbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmVuYWJsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmVuYWJsZSA9IGRhdGEuZW5hYmxlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLm1vZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5tb2RlID0gZGF0YS5tb2RlO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5DbGlja0V2ZW50ID0gQ2xpY2tFdmVudDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5EaXZFdmVudCA9IHZvaWQgMDtcbmNvbnN0IEVudW1zXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vRW51bXNcIik7XG5jbGFzcyBEaXZFdmVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0b3JzID0gW107XG4gICAgICAgIHRoaXMuZW5hYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMubW9kZSA9IFtdO1xuICAgICAgICB0aGlzLnR5cGUgPSBFbnVtc18xLkRpdlR5cGUuY2lyY2xlO1xuICAgIH1cbiAgICBnZXQgZWxlbWVudElkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pZHM7XG4gICAgfVxuICAgIHNldCBlbGVtZW50SWQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5pZHMgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IGVsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50SWQ7XG4gICAgfVxuICAgIHNldCBlbCh2YWx1ZSkge1xuICAgICAgICB0aGlzLmVsZW1lbnRJZCA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgaWRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RvcnMgaW5zdGFuY2VvZiBBcnJheVxuICAgICAgICAgICAgPyB0aGlzLnNlbGVjdG9ycy5tYXAoKHQpID0+IHQucmVwbGFjZShcIiNcIiwgXCJcIikpXG4gICAgICAgICAgICA6IHRoaXMuc2VsZWN0b3JzLnJlcGxhY2UoXCIjXCIsIFwiXCIpO1xuICAgIH1cbiAgICBzZXQgaWRzKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0b3JzID0gdmFsdWUgaW5zdGFuY2VvZiBBcnJheSA/IHZhbHVlLm1hcCgodCkgPT4gYCMke3R9YCkgOiBgIyR7dmFsdWV9YDtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpZHMgPSAoX2IgPSAoX2EgPSBkYXRhLmlkcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZGF0YS5lbGVtZW50SWQpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IGRhdGEuZWw7XG4gICAgICAgIGlmIChpZHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5pZHMgPSBpZHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuc2VsZWN0b3JzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0b3JzID0gZGF0YS5zZWxlY3RvcnM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuZW5hYmxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZW5hYmxlID0gZGF0YS5lbmFibGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEubW9kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLm1vZGUgPSBkYXRhLm1vZGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEudHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnR5cGUgPSBkYXRhLnR5cGU7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkRpdkV2ZW50ID0gRGl2RXZlbnQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRXZlbnRzID0gdm9pZCAwO1xuY29uc3QgQ2xpY2tFdmVudF8xID0gcmVxdWlyZShcIi4vQ2xpY2tFdmVudFwiKTtcbmNvbnN0IERpdkV2ZW50XzEgPSByZXF1aXJlKFwiLi9EaXZFdmVudFwiKTtcbmNvbnN0IEhvdmVyRXZlbnRfMSA9IHJlcXVpcmUoXCIuL0hvdmVyRXZlbnRcIik7XG5jbGFzcyBFdmVudHMge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLm9uQ2xpY2sgPSBuZXcgQ2xpY2tFdmVudF8xLkNsaWNrRXZlbnQoKTtcbiAgICAgICAgdGhpcy5vbkRpdiA9IG5ldyBEaXZFdmVudF8xLkRpdkV2ZW50KCk7XG4gICAgICAgIHRoaXMub25Ib3ZlciA9IG5ldyBIb3ZlckV2ZW50XzEuSG92ZXJFdmVudCgpO1xuICAgICAgICB0aGlzLnJlc2l6ZSA9IHRydWU7XG4gICAgfVxuICAgIGdldCBvbmNsaWNrKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vbkNsaWNrO1xuICAgIH1cbiAgICBzZXQgb25jbGljayh2YWx1ZSkge1xuICAgICAgICB0aGlzLm9uQ2xpY2sgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IG9uZGl2KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vbkRpdjtcbiAgICB9XG4gICAgc2V0IG9uZGl2KHZhbHVlKSB7XG4gICAgICAgIHRoaXMub25EaXYgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IG9uaG92ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9uSG92ZXI7XG4gICAgfVxuICAgIHNldCBvbmhvdmVyKHZhbHVlKSB7XG4gICAgICAgIHRoaXMub25Ib3ZlciA9IHZhbHVlO1xuICAgIH1cbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9uQ2xpY2subG9hZCgoX2EgPSBkYXRhLm9uQ2xpY2spICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGRhdGEub25jbGljayk7XG4gICAgICAgIGNvbnN0IG9uRGl2ID0gKF9iID0gZGF0YS5vbkRpdikgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogZGF0YS5vbmRpdjtcbiAgICAgICAgaWYgKG9uRGl2ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChvbkRpdiBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkRpdiA9IG9uRGl2Lm1hcCgoZGl2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRtcCA9IG5ldyBEaXZFdmVudF8xLkRpdkV2ZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHRtcC5sb2FkKGRpdik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0bXA7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uRGl2ID0gbmV3IERpdkV2ZW50XzEuRGl2RXZlbnQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9uRGl2LmxvYWQob25EaXYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMub25Ib3Zlci5sb2FkKChfYyA9IGRhdGEub25Ib3ZlcikgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogZGF0YS5vbmhvdmVyKTtcbiAgICAgICAgaWYgKGRhdGEucmVzaXplICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMucmVzaXplID0gZGF0YS5yZXNpemU7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkV2ZW50cyA9IEV2ZW50cztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Ib3ZlckV2ZW50ID0gdm9pZCAwO1xuY29uc3QgUGFyYWxsYXhfMSA9IHJlcXVpcmUoXCIuL1BhcmFsbGF4XCIpO1xuY2xhc3MgSG92ZXJFdmVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMubW9kZSA9IFtdO1xuICAgICAgICB0aGlzLnBhcmFsbGF4ID0gbmV3IFBhcmFsbGF4XzEuUGFyYWxsYXgoKTtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5lbmFibGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5lbmFibGUgPSBkYXRhLmVuYWJsZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5tb2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMubW9kZSA9IGRhdGEubW9kZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBhcmFsbGF4LmxvYWQoZGF0YS5wYXJhbGxheCk7XG4gICAgfVxufVxuZXhwb3J0cy5Ib3ZlckV2ZW50ID0gSG92ZXJFdmVudDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QYXJhbGxheCA9IHZvaWQgMDtcbmNsYXNzIFBhcmFsbGF4IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5lbmFibGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5mb3JjZSA9IDI7XG4gICAgICAgIHRoaXMuc21vb3RoID0gMTA7XG4gICAgfVxuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuZW5hYmxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZW5hYmxlID0gZGF0YS5lbmFibGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuZm9yY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5mb3JjZSA9IGRhdGEuZm9yY2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuc21vb3RoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc21vb3RoID0gZGF0YS5zbW9vdGg7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlBhcmFsbGF4ID0gUGFyYWxsYXg7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSW50ZXJhY3Rpdml0eSA9IHZvaWQgMDtcbmNvbnN0IEVudW1zXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vRW51bXNcIik7XG5jb25zdCBFdmVudHNfMSA9IHJlcXVpcmUoXCIuL0V2ZW50cy9FdmVudHNcIik7XG5jb25zdCBNb2Rlc18xID0gcmVxdWlyZShcIi4vTW9kZXMvTW9kZXNcIik7XG5jbGFzcyBJbnRlcmFjdGl2aXR5IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5kZXRlY3RzT24gPSBFbnVtc18xLkludGVyYWN0aXZpdHlEZXRlY3Qud2luZG93O1xuICAgICAgICB0aGlzLmV2ZW50cyA9IG5ldyBFdmVudHNfMS5FdmVudHMoKTtcbiAgICAgICAgdGhpcy5tb2RlcyA9IG5ldyBNb2Rlc18xLk1vZGVzKCk7XG4gICAgfVxuICAgIGdldCBkZXRlY3Rfb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRldGVjdHNPbjtcbiAgICB9XG4gICAgc2V0IGRldGVjdF9vbih2YWx1ZSkge1xuICAgICAgICB0aGlzLmRldGVjdHNPbiA9IHZhbHVlO1xuICAgIH1cbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkZXRlY3RzT24gPSAoX2EgPSBkYXRhLmRldGVjdHNPbikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZGF0YS5kZXRlY3Rfb247XG4gICAgICAgIGlmIChkZXRlY3RzT24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5kZXRlY3RzT24gPSBkZXRlY3RzT247XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ldmVudHMubG9hZChkYXRhLmV2ZW50cyk7XG4gICAgICAgIHRoaXMubW9kZXMubG9hZChkYXRhLm1vZGVzKTtcbiAgICAgICAgaWYgKCgoX2MgPSAoX2IgPSBkYXRhLm1vZGVzKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iuc2xvdykgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmFjdGl2ZSkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmV2ZW50cy5vbkhvdmVyLm1vZGUgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmV2ZW50cy5vbkhvdmVyLm1vZGUuaW5kZXhPZihFbnVtc18xLkhvdmVyTW9kZS5zbG93KSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ldmVudHMub25Ib3Zlci5tb2RlLnB1c2goRW51bXNfMS5Ib3Zlck1vZGUuc2xvdyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5ldmVudHMub25Ib3Zlci5tb2RlICE9PSBFbnVtc18xLkhvdmVyTW9kZS5zbG93KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudHMub25Ib3Zlci5tb2RlID0gW3RoaXMuZXZlbnRzLm9uSG92ZXIubW9kZSwgRW51bXNfMS5Ib3Zlck1vZGUuc2xvd107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkludGVyYWN0aXZpdHkgPSBJbnRlcmFjdGl2aXR5O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkF0dHJhY3QgPSB2b2lkIDA7XG5jb25zdCBFbnVtc18xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL0VudW1zXCIpO1xuY2xhc3MgQXR0cmFjdCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZGlzdGFuY2UgPSAyMDA7XG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSAwLjQ7XG4gICAgICAgIHRoaXMuZWFzaW5nID0gRW51bXNfMS5FYXNpbmdUeXBlLmVhc2VPdXRRdWFkO1xuICAgICAgICB0aGlzLmZhY3RvciA9IDE7XG4gICAgICAgIHRoaXMubWF4U3BlZWQgPSA1MDtcbiAgICAgICAgdGhpcy5zcGVlZCA9IDE7XG4gICAgfVxuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5kaXN0YW5jZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmRpc3RhbmNlID0gZGF0YS5kaXN0YW5jZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5kdXJhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmR1cmF0aW9uID0gZGF0YS5kdXJhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5lYXNpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5lYXNpbmcgPSBkYXRhLmVhc2luZztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5mYWN0b3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5mYWN0b3IgPSBkYXRhLmZhY3RvcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5tYXhTcGVlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLm1heFNwZWVkID0gZGF0YS5tYXhTcGVlZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5zcGVlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnNwZWVkID0gZGF0YS5zcGVlZDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQXR0cmFjdCA9IEF0dHJhY3Q7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQm91bmNlID0gdm9pZCAwO1xuY2xhc3MgQm91bmNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5kaXN0YW5jZSA9IDIwMDtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmRpc3RhbmNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzdGFuY2UgPSBkYXRhLmRpc3RhbmNlO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5Cb3VuY2UgPSBCb3VuY2U7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQnViYmxlID0gdm9pZCAwO1xuY29uc3QgQnViYmxlRGl2XzEgPSByZXF1aXJlKFwiLi9CdWJibGVEaXZcIik7XG5jb25zdCBCdWJibGVCYXNlXzEgPSByZXF1aXJlKFwiLi9CdWJibGVCYXNlXCIpO1xuY2xhc3MgQnViYmxlIGV4dGVuZHMgQnViYmxlQmFzZV8xLkJ1YmJsZUJhc2Uge1xuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICBzdXBlci5sb2FkKGRhdGEpO1xuICAgICAgICBpZiAoIShkYXRhICE9PSB1bmRlZmluZWQgJiYgZGF0YS5kaXZzICE9PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuZGl2cyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICB0aGlzLmRpdnMgPSBkYXRhLmRpdnMubWFwKChzKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdG1wID0gbmV3IEJ1YmJsZURpdl8xLkJ1YmJsZURpdigpO1xuICAgICAgICAgICAgICAgIHRtcC5sb2FkKHMpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0bXA7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRpdnMgaW5zdGFuY2VvZiBBcnJheSB8fCAhdGhpcy5kaXZzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXZzID0gbmV3IEJ1YmJsZURpdl8xLkJ1YmJsZURpdigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kaXZzLmxvYWQoZGF0YS5kaXZzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQnViYmxlID0gQnViYmxlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJ1YmJsZUJhc2UgPSB2b2lkIDA7XG5jb25zdCBPcHRpb25zQ29sb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi9PcHRpb25zQ29sb3JcIik7XG5jbGFzcyBCdWJibGVCYXNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5kaXN0YW5jZSA9IDIwMDtcbiAgICAgICAgdGhpcy5kdXJhdGlvbiA9IDAuNDtcbiAgICAgICAgdGhpcy5taXggPSBmYWxzZTtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5kaXN0YW5jZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmRpc3RhbmNlID0gZGF0YS5kaXN0YW5jZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5kdXJhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmR1cmF0aW9uID0gZGF0YS5kdXJhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5taXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5taXggPSBkYXRhLm1peDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5vcGFjaXR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMub3BhY2l0eSA9IGRhdGEub3BhY2l0eTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5jb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoZGF0YS5jb2xvciBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb2xvciA9IGRhdGEuY29sb3IubWFwKChzKSA9PiBPcHRpb25zQ29sb3JfMS5PcHRpb25zQ29sb3IuY3JlYXRlKHVuZGVmaW5lZCwgcykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY29sb3IgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbG9yID0gbmV3IE9wdGlvbnNDb2xvcl8xLk9wdGlvbnNDb2xvcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmNvbG9yID0gT3B0aW9uc0NvbG9yXzEuT3B0aW9uc0NvbG9yLmNyZWF0ZSh0aGlzLmNvbG9yLCBkYXRhLmNvbG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5zaXplICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQnViYmxlQmFzZSA9IEJ1YmJsZUJhc2U7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQnViYmxlRGl2ID0gdm9pZCAwO1xuY29uc3QgQnViYmxlQmFzZV8xID0gcmVxdWlyZShcIi4vQnViYmxlQmFzZVwiKTtcbmNsYXNzIEJ1YmJsZURpdiBleHRlbmRzIEJ1YmJsZUJhc2VfMS5CdWJibGVCYXNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5zZWxlY3RvcnMgPSBbXTtcbiAgICB9XG4gICAgZ2V0IGlkcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0b3JzIGluc3RhbmNlb2YgQXJyYXlcbiAgICAgICAgICAgID8gdGhpcy5zZWxlY3RvcnMubWFwKCh0KSA9PiB0LnJlcGxhY2UoXCIjXCIsIFwiXCIpKVxuICAgICAgICAgICAgOiB0aGlzLnNlbGVjdG9ycy5yZXBsYWNlKFwiI1wiLCBcIlwiKTtcbiAgICB9XG4gICAgc2V0IGlkcyh2YWx1ZSkge1xuICAgICAgICB0aGlzLnNlbGVjdG9ycyA9IHZhbHVlIGluc3RhbmNlb2YgQXJyYXkgPyB2YWx1ZS5tYXAoKHQpID0+IGAjJHt0fWApIDogYCMke3ZhbHVlfWA7XG4gICAgfVxuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICBzdXBlci5sb2FkKGRhdGEpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuaWRzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaWRzID0gZGF0YS5pZHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuc2VsZWN0b3JzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0b3JzID0gZGF0YS5zZWxlY3RvcnM7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkJ1YmJsZURpdiA9IEJ1YmJsZURpdjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db25uZWN0ID0gdm9pZCAwO1xuY29uc3QgQ29ubmVjdExpbmtzXzEgPSByZXF1aXJlKFwiLi9Db25uZWN0TGlua3NcIik7XG5jbGFzcyBDb25uZWN0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5kaXN0YW5jZSA9IDgwO1xuICAgICAgICB0aGlzLmxpbmtzID0gbmV3IENvbm5lY3RMaW5rc18xLkNvbm5lY3RMaW5rcygpO1xuICAgICAgICB0aGlzLnJhZGl1cyA9IDYwO1xuICAgIH1cbiAgICBnZXQgbGluZV9saW5rZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxpbmtzO1xuICAgIH1cbiAgICBzZXQgbGluZV9saW5rZWQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5saW5rcyA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgbGluZUxpbmtlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGlua3M7XG4gICAgfVxuICAgIHNldCBsaW5lTGlua2VkKHZhbHVlKSB7XG4gICAgICAgIHRoaXMubGlua3MgPSB2YWx1ZTtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5kaXN0YW5jZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmRpc3RhbmNlID0gZGF0YS5kaXN0YW5jZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxpbmtzLmxvYWQoKF9iID0gKF9hID0gZGF0YS5saW5rcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZGF0YS5saW5lTGlua2VkKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBkYXRhLmxpbmVfbGlua2VkKTtcbiAgICAgICAgaWYgKGRhdGEucmFkaXVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMucmFkaXVzID0gZGF0YS5yYWRpdXM7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkNvbm5lY3QgPSBDb25uZWN0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbm5lY3RMaW5rcyA9IHZvaWQgMDtcbmNsYXNzIENvbm5lY3RMaW5rcyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMub3BhY2l0eSA9IDAuNTtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIGlmICghKGRhdGEgIT09IHVuZGVmaW5lZCAmJiBkYXRhLm9wYWNpdHkgIT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wYWNpdHkgPSBkYXRhLm9wYWNpdHk7XG4gICAgfVxufVxuZXhwb3J0cy5Db25uZWN0TGlua3MgPSBDb25uZWN0TGlua3M7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuR3JhYiA9IHZvaWQgMDtcbmNvbnN0IEdyYWJMaW5rc18xID0gcmVxdWlyZShcIi4vR3JhYkxpbmtzXCIpO1xuY2xhc3MgR3JhYiB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZGlzdGFuY2UgPSAxMDA7XG4gICAgICAgIHRoaXMubGlua3MgPSBuZXcgR3JhYkxpbmtzXzEuR3JhYkxpbmtzKCk7XG4gICAgfVxuICAgIGdldCBsaW5lX2xpbmtlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGlua3M7XG4gICAgfVxuICAgIHNldCBsaW5lX2xpbmtlZCh2YWx1ZSkge1xuICAgICAgICB0aGlzLmxpbmtzID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBsaW5lTGlua2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5saW5rcztcbiAgICB9XG4gICAgc2V0IGxpbmVMaW5rZWQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5saW5rcyA9IHZhbHVlO1xuICAgIH1cbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmRpc3RhbmNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzdGFuY2UgPSBkYXRhLmRpc3RhbmNlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGlua3MubG9hZCgoX2IgPSAoX2EgPSBkYXRhLmxpbmtzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBkYXRhLmxpbmVMaW5rZWQpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IGRhdGEubGluZV9saW5rZWQpO1xuICAgIH1cbn1cbmV4cG9ydHMuR3JhYiA9IEdyYWI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuR3JhYkxpbmtzID0gdm9pZCAwO1xuY29uc3QgT3B0aW9uc0NvbG9yXzEgPSByZXF1aXJlKFwiLi4vLi4vT3B0aW9uc0NvbG9yXCIpO1xuY2xhc3MgR3JhYkxpbmtzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5ibGluayA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNvbnNlbnQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5vcGFjaXR5ID0gMTtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5ibGluayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmJsaW5rID0gZGF0YS5ibGluaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5jb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmNvbG9yID0gT3B0aW9uc0NvbG9yXzEuT3B0aW9uc0NvbG9yLmNyZWF0ZSh0aGlzLmNvbG9yLCBkYXRhLmNvbG9yKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5jb25zZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY29uc2VudCA9IGRhdGEuY29uc2VudDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5vcGFjaXR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMub3BhY2l0eSA9IGRhdGEub3BhY2l0eTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuR3JhYkxpbmtzID0gR3JhYkxpbmtzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxpZ2h0ID0gdm9pZCAwO1xuY29uc3QgTGlnaHRBcmVhXzEgPSByZXF1aXJlKFwiLi9MaWdodEFyZWFcIik7XG5jb25zdCBMaWdodFNoYWRvd18xID0gcmVxdWlyZShcIi4vTGlnaHRTaGFkb3dcIik7XG5jbGFzcyBMaWdodCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuYXJlYSA9IG5ldyBMaWdodEFyZWFfMS5MaWdodEFyZWEoKTtcbiAgICAgICAgdGhpcy5zaGFkb3cgPSBuZXcgTGlnaHRTaGFkb3dfMS5MaWdodFNoYWRvdygpO1xuICAgIH1cbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYXJlYS5sb2FkKGRhdGEuYXJlYSk7XG4gICAgICAgIHRoaXMuc2hhZG93LmxvYWQoZGF0YS5zaGFkb3cpO1xuICAgIH1cbn1cbmV4cG9ydHMuTGlnaHQgPSBMaWdodDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5MaWdodEFyZWEgPSB2b2lkIDA7XG5jb25zdCBMaWdodEdyYWRpZW50XzEgPSByZXF1aXJlKFwiLi9MaWdodEdyYWRpZW50XCIpO1xuY2xhc3MgTGlnaHRBcmVhIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5ncmFkaWVudCA9IG5ldyBMaWdodEdyYWRpZW50XzEuTGlnaHRHcmFkaWVudCgpO1xuICAgICAgICB0aGlzLnJhZGl1cyA9IDEwMDA7XG4gICAgfVxuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ncmFkaWVudC5sb2FkKGRhdGEuZ3JhZGllbnQpO1xuICAgICAgICBpZiAoZGF0YS5yYWRpdXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5yYWRpdXMgPSBkYXRhLnJhZGl1cztcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuTGlnaHRBcmVhID0gTGlnaHRBcmVhO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxpZ2h0R3JhZGllbnQgPSB2b2lkIDA7XG5jb25zdCBPcHRpb25zQ29sb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi9PcHRpb25zQ29sb3JcIik7XG5jbGFzcyBMaWdodEdyYWRpZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5zdGFydCA9IG5ldyBPcHRpb25zQ29sb3JfMS5PcHRpb25zQ29sb3IoKTtcbiAgICAgICAgdGhpcy5zdG9wID0gbmV3IE9wdGlvbnNDb2xvcl8xLk9wdGlvbnNDb2xvcigpO1xuICAgICAgICB0aGlzLnN0YXJ0LnZhbHVlID0gXCIjZmZmZmZmXCI7XG4gICAgICAgIHRoaXMuc3RvcC52YWx1ZSA9IFwiIzAwMDAwMFwiO1xuICAgIH1cbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhcnQgPSBPcHRpb25zQ29sb3JfMS5PcHRpb25zQ29sb3IuY3JlYXRlKHRoaXMuc3RhcnQsIGRhdGEuc3RhcnQpO1xuICAgICAgICB0aGlzLnN0b3AgPSBPcHRpb25zQ29sb3JfMS5PcHRpb25zQ29sb3IuY3JlYXRlKHRoaXMuc3RvcCwgZGF0YS5zdG9wKTtcbiAgICB9XG59XG5leHBvcnRzLkxpZ2h0R3JhZGllbnQgPSBMaWdodEdyYWRpZW50O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxpZ2h0U2hhZG93ID0gdm9pZCAwO1xuY29uc3QgT3B0aW9uc0NvbG9yXzEgPSByZXF1aXJlKFwiLi4vLi4vT3B0aW9uc0NvbG9yXCIpO1xuY2xhc3MgTGlnaHRTaGFkb3cge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmNvbG9yID0gbmV3IE9wdGlvbnNDb2xvcl8xLk9wdGlvbnNDb2xvcigpO1xuICAgICAgICB0aGlzLmNvbG9yLnZhbHVlID0gXCIjMDAwMDAwXCI7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gMjAwMDtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbG9yID0gT3B0aW9uc0NvbG9yXzEuT3B0aW9uc0NvbG9yLmNyZWF0ZSh0aGlzLmNvbG9yLCBkYXRhLmNvbG9yKTtcbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMubGVuZ3RoID0gZGF0YS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkxpZ2h0U2hhZG93ID0gTGlnaHRTaGFkb3c7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTW9kZXMgPSB2b2lkIDA7XG5jb25zdCBCdWJibGVfMSA9IHJlcXVpcmUoXCIuL0J1YmJsZVwiKTtcbmNvbnN0IENvbm5lY3RfMSA9IHJlcXVpcmUoXCIuL0Nvbm5lY3RcIik7XG5jb25zdCBHcmFiXzEgPSByZXF1aXJlKFwiLi9HcmFiXCIpO1xuY29uc3QgUmVtb3ZlXzEgPSByZXF1aXJlKFwiLi9SZW1vdmVcIik7XG5jb25zdCBQdXNoXzEgPSByZXF1aXJlKFwiLi9QdXNoXCIpO1xuY29uc3QgUmVwdWxzZV8xID0gcmVxdWlyZShcIi4vUmVwdWxzZVwiKTtcbmNvbnN0IFNsb3dfMSA9IHJlcXVpcmUoXCIuL1Nsb3dcIik7XG5jb25zdCBUcmFpbF8xID0gcmVxdWlyZShcIi4vVHJhaWxcIik7XG5jb25zdCBBdHRyYWN0XzEgPSByZXF1aXJlKFwiLi9BdHRyYWN0XCIpO1xuY29uc3QgTGlnaHRfMSA9IHJlcXVpcmUoXCIuL0xpZ2h0XCIpO1xuY29uc3QgQm91bmNlXzEgPSByZXF1aXJlKFwiLi9Cb3VuY2VcIik7XG5jbGFzcyBNb2RlcyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuYXR0cmFjdCA9IG5ldyBBdHRyYWN0XzEuQXR0cmFjdCgpO1xuICAgICAgICB0aGlzLmJvdW5jZSA9IG5ldyBCb3VuY2VfMS5Cb3VuY2UoKTtcbiAgICAgICAgdGhpcy5idWJibGUgPSBuZXcgQnViYmxlXzEuQnViYmxlKCk7XG4gICAgICAgIHRoaXMuY29ubmVjdCA9IG5ldyBDb25uZWN0XzEuQ29ubmVjdCgpO1xuICAgICAgICB0aGlzLmdyYWIgPSBuZXcgR3JhYl8xLkdyYWIoKTtcbiAgICAgICAgdGhpcy5saWdodCA9IG5ldyBMaWdodF8xLkxpZ2h0KCk7XG4gICAgICAgIHRoaXMucHVzaCA9IG5ldyBQdXNoXzEuUHVzaCgpO1xuICAgICAgICB0aGlzLnJlbW92ZSA9IG5ldyBSZW1vdmVfMS5SZW1vdmUoKTtcbiAgICAgICAgdGhpcy5yZXB1bHNlID0gbmV3IFJlcHVsc2VfMS5SZXB1bHNlKCk7XG4gICAgICAgIHRoaXMuc2xvdyA9IG5ldyBTbG93XzEuU2xvdygpO1xuICAgICAgICB0aGlzLnRyYWlsID0gbmV3IFRyYWlsXzEuVHJhaWwoKTtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmF0dHJhY3QubG9hZChkYXRhLmF0dHJhY3QpO1xuICAgICAgICB0aGlzLmJ1YmJsZS5sb2FkKGRhdGEuYnViYmxlKTtcbiAgICAgICAgdGhpcy5jb25uZWN0LmxvYWQoZGF0YS5jb25uZWN0KTtcbiAgICAgICAgdGhpcy5ncmFiLmxvYWQoZGF0YS5ncmFiKTtcbiAgICAgICAgdGhpcy5saWdodC5sb2FkKGRhdGEubGlnaHQpO1xuICAgICAgICB0aGlzLnB1c2gubG9hZChkYXRhLnB1c2gpO1xuICAgICAgICB0aGlzLnJlbW92ZS5sb2FkKGRhdGEucmVtb3ZlKTtcbiAgICAgICAgdGhpcy5yZXB1bHNlLmxvYWQoZGF0YS5yZXB1bHNlKTtcbiAgICAgICAgdGhpcy5zbG93LmxvYWQoZGF0YS5zbG93KTtcbiAgICAgICAgdGhpcy50cmFpbC5sb2FkKGRhdGEudHJhaWwpO1xuICAgIH1cbn1cbmV4cG9ydHMuTW9kZXMgPSBNb2RlcztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QdXNoID0gdm9pZCAwO1xuY2xhc3MgUHVzaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZGVmYXVsdCA9IHRydWU7XG4gICAgICAgIHRoaXMuZ3JvdXBzID0gW107XG4gICAgICAgIHRoaXMucXVhbnRpdHkgPSA0O1xuICAgIH1cbiAgICBnZXQgcGFydGljbGVzX25iKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5xdWFudGl0eTtcbiAgICB9XG4gICAgc2V0IHBhcnRpY2xlc19uYih2YWx1ZSkge1xuICAgICAgICB0aGlzLnF1YW50aXR5ID0gdmFsdWU7XG4gICAgfVxuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5kZWZhdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZGVmYXVsdCA9IGRhdGEuZGVmYXVsdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5ncm91cHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5ncm91cHMgPSBkYXRhLmdyb3Vwcy5tYXAoKHQpID0+IHQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5ncm91cHMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmRlZmF1bHQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHF1YW50aXR5ID0gKF9hID0gZGF0YS5xdWFudGl0eSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZGF0YS5wYXJ0aWNsZXNfbmI7XG4gICAgICAgIGlmIChxdWFudGl0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnF1YW50aXR5ID0gcXVhbnRpdHk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlB1c2ggPSBQdXNoO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJlbW92ZSA9IHZvaWQgMDtcbmNsYXNzIFJlbW92ZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMucXVhbnRpdHkgPSAyO1xuICAgIH1cbiAgICBnZXQgcGFydGljbGVzX25iKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5xdWFudGl0eTtcbiAgICB9XG4gICAgc2V0IHBhcnRpY2xlc19uYih2YWx1ZSkge1xuICAgICAgICB0aGlzLnF1YW50aXR5ID0gdmFsdWU7XG4gICAgfVxuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBxdWFudGl0eSA9IChfYSA9IGRhdGEucXVhbnRpdHkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGRhdGEucGFydGljbGVzX25iO1xuICAgICAgICBpZiAocXVhbnRpdHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5xdWFudGl0eSA9IHF1YW50aXR5O1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5SZW1vdmUgPSBSZW1vdmU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUmVwdWxzZSA9IHZvaWQgMDtcbmNvbnN0IFJlcHVsc2VEaXZfMSA9IHJlcXVpcmUoXCIuL1JlcHVsc2VEaXZcIik7XG5jb25zdCBSZXB1bHNlQmFzZV8xID0gcmVxdWlyZShcIi4vUmVwdWxzZUJhc2VcIik7XG5jbGFzcyBSZXB1bHNlIGV4dGVuZHMgUmVwdWxzZUJhc2VfMS5SZXB1bHNlQmFzZSB7XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIHN1cGVyLmxvYWQoZGF0YSk7XG4gICAgICAgIGlmICgoZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYXRhLmRpdnMpID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5kaXZzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgIHRoaXMuZGl2cyA9IGRhdGEuZGl2cy5tYXAoKHMpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0bXAgPSBuZXcgUmVwdWxzZURpdl8xLlJlcHVsc2VEaXYoKTtcbiAgICAgICAgICAgICAgICB0bXAubG9hZChzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdG1wO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5kaXZzIGluc3RhbmNlb2YgQXJyYXkgfHwgIXRoaXMuZGl2cykge1xuICAgICAgICAgICAgICAgIHRoaXMuZGl2cyA9IG5ldyBSZXB1bHNlRGl2XzEuUmVwdWxzZURpdigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kaXZzLmxvYWQoZGF0YS5kaXZzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuUmVwdWxzZSA9IFJlcHVsc2U7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUmVwdWxzZUJhc2UgPSB2b2lkIDA7XG5jb25zdCBFbnVtc18xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL0VudW1zXCIpO1xuY2xhc3MgUmVwdWxzZUJhc2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmRpc3RhbmNlID0gMjAwO1xuICAgICAgICB0aGlzLmR1cmF0aW9uID0gMC40O1xuICAgICAgICB0aGlzLmZhY3RvciA9IDEwMDtcbiAgICAgICAgdGhpcy5zcGVlZCA9IDE7XG4gICAgICAgIHRoaXMubWF4U3BlZWQgPSA1MDtcbiAgICAgICAgdGhpcy5lYXNpbmcgPSBFbnVtc18xLkVhc2luZ1R5cGUuZWFzZU91dFF1YWQ7XG4gICAgfVxuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5kaXN0YW5jZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmRpc3RhbmNlID0gZGF0YS5kaXN0YW5jZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5kdXJhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmR1cmF0aW9uID0gZGF0YS5kdXJhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5lYXNpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5lYXNpbmcgPSBkYXRhLmVhc2luZztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5mYWN0b3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5mYWN0b3IgPSBkYXRhLmZhY3RvcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5zcGVlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnNwZWVkID0gZGF0YS5zcGVlZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5tYXhTcGVlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLm1heFNwZWVkID0gZGF0YS5tYXhTcGVlZDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuUmVwdWxzZUJhc2UgPSBSZXB1bHNlQmFzZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SZXB1bHNlRGl2ID0gdm9pZCAwO1xuY29uc3QgUmVwdWxzZUJhc2VfMSA9IHJlcXVpcmUoXCIuL1JlcHVsc2VCYXNlXCIpO1xuY2xhc3MgUmVwdWxzZURpdiBleHRlbmRzIFJlcHVsc2VCYXNlXzEuUmVwdWxzZUJhc2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnNlbGVjdG9ycyA9IFtdO1xuICAgIH1cbiAgICBnZXQgaWRzKCkge1xuICAgICAgICBpZiAodGhpcy5zZWxlY3RvcnMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0b3JzLm1hcCgodCkgPT4gdC5yZXBsYWNlKFwiI1wiLCBcIlwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RvcnMucmVwbGFjZShcIiNcIiwgXCJcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0IGlkcyh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RvcnMgPSB2YWx1ZS5tYXAoKCkgPT4gYCMke3ZhbHVlfWApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RvcnMgPSBgIyR7dmFsdWV9YDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgc3VwZXIubG9hZChkYXRhKTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmlkcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmlkcyA9IGRhdGEuaWRzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLnNlbGVjdG9ycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdG9ycyA9IGRhdGEuc2VsZWN0b3JzO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5SZXB1bHNlRGl2ID0gUmVwdWxzZURpdjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TbG93ID0gdm9pZCAwO1xuY2xhc3MgU2xvdyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZmFjdG9yID0gMztcbiAgICAgICAgdGhpcy5yYWRpdXMgPSAyMDA7XG4gICAgfVxuICAgIGdldCBhY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgc2V0IGFjdGl2ZShfdmFsdWUpIHtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5mYWN0b3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5mYWN0b3IgPSBkYXRhLmZhY3RvcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5yYWRpdXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5yYWRpdXMgPSBkYXRhLnJhZGl1cztcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuU2xvdyA9IFNsb3c7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVHJhaWwgPSB2b2lkIDA7XG5jb25zdCBVdGlsc18xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL1V0aWxzXCIpO1xuY2xhc3MgVHJhaWwge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmRlbGF5ID0gMTtcbiAgICAgICAgdGhpcy5wYXVzZU9uU3RvcCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnF1YW50aXR5ID0gMTtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5kZWxheSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmRlbGF5ID0gZGF0YS5kZWxheTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5xdWFudGl0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnF1YW50aXR5ID0gZGF0YS5xdWFudGl0eTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5wYXJ0aWNsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5wYXJ0aWNsZXMgPSAoMCwgVXRpbHNfMS5kZWVwRXh0ZW5kKSh7fSwgZGF0YS5wYXJ0aWNsZXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLnBhdXNlT25TdG9wICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMucGF1c2VPblN0b3AgPSBkYXRhLnBhdXNlT25TdG9wO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5UcmFpbCA9IFRyYWlsO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1hbnVhbFBhcnRpY2xlID0gdm9pZCAwO1xuY29uc3QgVXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi9VdGlsc1wiKTtcbmNsYXNzIE1hbnVhbFBhcnRpY2xlIHtcbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEucG9zaXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHtcbiAgICAgICAgICAgICAgICB4OiAoX2EgPSBkYXRhLnBvc2l0aW9uLngpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDUwLFxuICAgICAgICAgICAgICAgIHk6IChfYiA9IGRhdGEucG9zaXRpb24ueSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogNTAsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLm9wdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gKDAsIFV0aWxzXzEuZGVlcEV4dGVuZCkoe30sIGRhdGEub3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLk1hbnVhbFBhcnRpY2xlID0gTWFudWFsUGFydGljbGU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTW90aW9uID0gdm9pZCAwO1xuY29uc3QgTW90aW9uUmVkdWNlXzEgPSByZXF1aXJlKFwiLi9Nb3Rpb25SZWR1Y2VcIik7XG5jbGFzcyBNb3Rpb24ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmRpc2FibGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5yZWR1Y2UgPSBuZXcgTW90aW9uUmVkdWNlXzEuTW90aW9uUmVkdWNlKCk7XG4gICAgfVxuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5kaXNhYmxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZSA9IGRhdGEuZGlzYWJsZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlZHVjZS5sb2FkKGRhdGEucmVkdWNlKTtcbiAgICB9XG59XG5leHBvcnRzLk1vdGlvbiA9IE1vdGlvbjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Nb3Rpb25SZWR1Y2UgPSB2b2lkIDA7XG5jbGFzcyBNb3Rpb25SZWR1Y2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmZhY3RvciA9IDQ7XG4gICAgICAgIHRoaXMudmFsdWUgPSB0cnVlO1xuICAgIH1cbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuZmFjdG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZmFjdG9yID0gZGF0YS5mYWN0b3I7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEudmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IGRhdGEudmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLk1vdGlvblJlZHVjZSA9IE1vdGlvblJlZHVjZTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX09wdGlvbnNfaW5zdGFuY2VzLCBfT3B0aW9uc19maW5kRGVmYXVsdFRoZW1lO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5PcHRpb25zID0gdm9pZCAwO1xuY29uc3QgSW50ZXJhY3Rpdml0eV8xID0gcmVxdWlyZShcIi4vSW50ZXJhY3Rpdml0eS9JbnRlcmFjdGl2aXR5XCIpO1xuY29uc3QgUGFydGljbGVzT3B0aW9uc18xID0gcmVxdWlyZShcIi4vUGFydGljbGVzL1BhcnRpY2xlc09wdGlvbnNcIik7XG5jb25zdCBCYWNrZ3JvdW5kTWFza18xID0gcmVxdWlyZShcIi4vQmFja2dyb3VuZE1hc2svQmFja2dyb3VuZE1hc2tcIik7XG5jb25zdCBCYWNrZ3JvdW5kXzEgPSByZXF1aXJlKFwiLi9CYWNrZ3JvdW5kL0JhY2tncm91bmRcIik7XG5jb25zdCBVdGlsc18xID0gcmVxdWlyZShcIi4uLy4uL1V0aWxzXCIpO1xuY29uc3QgVGhlbWVfMSA9IHJlcXVpcmUoXCIuL1RoZW1lL1RoZW1lXCIpO1xuY29uc3QgRW51bXNfMSA9IHJlcXVpcmUoXCIuLi8uLi9FbnVtc1wiKTtcbmNvbnN0IEZ1bGxTY3JlZW5fMSA9IHJlcXVpcmUoXCIuL0Z1bGxTY3JlZW4vRnVsbFNjcmVlblwiKTtcbmNvbnN0IE1vdGlvbl8xID0gcmVxdWlyZShcIi4vTW90aW9uL01vdGlvblwiKTtcbmNvbnN0IE1hbnVhbFBhcnRpY2xlXzEgPSByZXF1aXJlKFwiLi9NYW51YWxQYXJ0aWNsZVwiKTtcbmNvbnN0IFJlc3BvbnNpdmVfMSA9IHJlcXVpcmUoXCIuL1Jlc3BvbnNpdmVcIik7XG5jbGFzcyBPcHRpb25zIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgX09wdGlvbnNfaW5zdGFuY2VzLmFkZCh0aGlzKTtcbiAgICAgICAgdGhpcy5hdXRvUGxheSA9IHRydWU7XG4gICAgICAgIHRoaXMuYmFja2dyb3VuZCA9IG5ldyBCYWNrZ3JvdW5kXzEuQmFja2dyb3VuZCgpO1xuICAgICAgICB0aGlzLmJhY2tncm91bmRNYXNrID0gbmV3IEJhY2tncm91bmRNYXNrXzEuQmFja2dyb3VuZE1hc2soKTtcbiAgICAgICAgdGhpcy5mdWxsU2NyZWVuID0gbmV3IEZ1bGxTY3JlZW5fMS5GdWxsU2NyZWVuKCk7XG4gICAgICAgIHRoaXMuZGV0ZWN0UmV0aW5hID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kdXJhdGlvbiA9IDA7XG4gICAgICAgIHRoaXMuZnBzTGltaXQgPSA2MDtcbiAgICAgICAgdGhpcy5pbnRlcmFjdGl2aXR5ID0gbmV3IEludGVyYWN0aXZpdHlfMS5JbnRlcmFjdGl2aXR5KCk7XG4gICAgICAgIHRoaXMubWFudWFsUGFydGljbGVzID0gW107XG4gICAgICAgIHRoaXMubW90aW9uID0gbmV3IE1vdGlvbl8xLk1vdGlvbigpO1xuICAgICAgICB0aGlzLnBhcnRpY2xlcyA9IG5ldyBQYXJ0aWNsZXNPcHRpb25zXzEuUGFydGljbGVzT3B0aW9ucygpO1xuICAgICAgICB0aGlzLnBhdXNlT25CbHVyID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5wYXVzZU9uT3V0c2lkZVZpZXdwb3J0ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5yZXNwb25zaXZlID0gW107XG4gICAgICAgIHRoaXMudGhlbWVzID0gW107XG4gICAgICAgIHRoaXMuekxheWVycyA9IDEwMDtcbiAgICB9XG4gICAgZ2V0IGZwc19saW1pdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnBzTGltaXQ7XG4gICAgfVxuICAgIHNldCBmcHNfbGltaXQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5mcHNMaW1pdCA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgcmV0aW5hX2RldGVjdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGV0ZWN0UmV0aW5hO1xuICAgIH1cbiAgICBzZXQgcmV0aW5hX2RldGVjdCh2YWx1ZSkge1xuICAgICAgICB0aGlzLmRldGVjdFJldGluYSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgYmFja2dyb3VuZE1vZGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZ1bGxTY3JlZW47XG4gICAgfVxuICAgIHNldCBiYWNrZ3JvdW5kTW9kZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLmZ1bGxTY3JlZW4ubG9hZCh2YWx1ZSk7XG4gICAgfVxuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEucHJlc2V0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChkYXRhLnByZXNldCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwcmVzZXQgb2YgZGF0YS5wcmVzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbXBvcnRQcmVzZXQocHJlc2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmltcG9ydFByZXNldChkYXRhLnByZXNldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuYXV0b1BsYXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5hdXRvUGxheSA9IGRhdGEuYXV0b1BsYXk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGV0ZWN0UmV0aW5hID0gKF9hID0gZGF0YS5kZXRlY3RSZXRpbmEpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGRhdGEucmV0aW5hX2RldGVjdDtcbiAgICAgICAgaWYgKGRldGVjdFJldGluYSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmRldGVjdFJldGluYSA9IGRldGVjdFJldGluYTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5kdXJhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmR1cmF0aW9uID0gZGF0YS5kdXJhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmcHNMaW1pdCA9IChfYiA9IGRhdGEuZnBzTGltaXQpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IGRhdGEuZnBzX2xpbWl0O1xuICAgICAgICBpZiAoZnBzTGltaXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5mcHNMaW1pdCA9IGZwc0xpbWl0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLnBhdXNlT25CbHVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMucGF1c2VPbkJsdXIgPSBkYXRhLnBhdXNlT25CbHVyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLnBhdXNlT25PdXRzaWRlVmlld3BvcnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5wYXVzZU9uT3V0c2lkZVZpZXdwb3J0ID0gZGF0YS5wYXVzZU9uT3V0c2lkZVZpZXdwb3J0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLnpMYXllcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy56TGF5ZXJzID0gZGF0YS56TGF5ZXJzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYmFja2dyb3VuZC5sb2FkKGRhdGEuYmFja2dyb3VuZCk7XG4gICAgICAgIGNvbnN0IGZ1bGxTY3JlZW4gPSAoX2MgPSBkYXRhLmZ1bGxTY3JlZW4pICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IGRhdGEuYmFja2dyb3VuZE1vZGU7XG4gICAgICAgIGlmICh0eXBlb2YgZnVsbFNjcmVlbiA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgIHRoaXMuZnVsbFNjcmVlbi5lbmFibGUgPSBmdWxsU2NyZWVuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5mdWxsU2NyZWVuLmxvYWQoZnVsbFNjcmVlbik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kTWFzay5sb2FkKGRhdGEuYmFja2dyb3VuZE1hc2spO1xuICAgICAgICB0aGlzLmludGVyYWN0aXZpdHkubG9hZChkYXRhLmludGVyYWN0aXZpdHkpO1xuICAgICAgICBpZiAoZGF0YS5tYW51YWxQYXJ0aWNsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5tYW51YWxQYXJ0aWNsZXMgPSBkYXRhLm1hbnVhbFBhcnRpY2xlcy5tYXAoKHQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0bXAgPSBuZXcgTWFudWFsUGFydGljbGVfMS5NYW51YWxQYXJ0aWNsZSgpO1xuICAgICAgICAgICAgICAgIHRtcC5sb2FkKHQpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0bXA7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1vdGlvbi5sb2FkKGRhdGEubW90aW9uKTtcbiAgICAgICAgdGhpcy5wYXJ0aWNsZXMubG9hZChkYXRhLnBhcnRpY2xlcyk7XG4gICAgICAgIFV0aWxzXzEuUGx1Z2lucy5sb2FkT3B0aW9ucyh0aGlzLCBkYXRhKTtcbiAgICAgICAgaWYgKGRhdGEucmVzcG9uc2l2ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHJlc3BvbnNpdmUgb2YgZGF0YS5yZXNwb25zaXZlKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3B0UmVzcG9uc2l2ZSA9IG5ldyBSZXNwb25zaXZlXzEuUmVzcG9uc2l2ZSgpO1xuICAgICAgICAgICAgICAgIG9wdFJlc3BvbnNpdmUubG9hZChyZXNwb25zaXZlKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3BvbnNpdmUucHVzaChvcHRSZXNwb25zaXZlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlc3BvbnNpdmUuc29ydCgoYSwgYikgPT4gYS5tYXhXaWR0aCAtIGIubWF4V2lkdGgpO1xuICAgICAgICBpZiAoZGF0YS50aGVtZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCB0aGVtZSBvZiBkYXRhLnRoZW1lcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9wdFRoZW1lID0gbmV3IFRoZW1lXzEuVGhlbWUoKTtcbiAgICAgICAgICAgICAgICBvcHRUaGVtZS5sb2FkKHRoZW1lKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRoZW1lcy5wdXNoKG9wdFRoZW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlZmF1bHREYXJrVGhlbWUgPSAoX2QgPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9PcHRpb25zX2luc3RhbmNlcywgXCJtXCIsIF9PcHRpb25zX2ZpbmREZWZhdWx0VGhlbWUpLmNhbGwodGhpcywgRW51bXNfMS5UaGVtZU1vZGUuZGFyaykpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5uYW1lO1xuICAgICAgICB0aGlzLmRlZmF1bHRMaWdodFRoZW1lID0gKF9lID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfT3B0aW9uc19pbnN0YW5jZXMsIFwibVwiLCBfT3B0aW9uc19maW5kRGVmYXVsdFRoZW1lKS5jYWxsKHRoaXMsIEVudW1zXzEuVGhlbWVNb2RlLmxpZ2h0KSkgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lLm5hbWU7XG4gICAgfVxuICAgIHNldFRoZW1lKG5hbWUpIHtcbiAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGNob3NlblRoZW1lID0gdGhpcy50aGVtZXMuZmluZCgodGhlbWUpID0+IHRoZW1lLm5hbWUgPT09IG5hbWUpO1xuICAgICAgICAgICAgaWYgKGNob3NlblRoZW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkKGNob3NlblRoZW1lLm9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbWVkaWFNYXRjaCA9IHR5cGVvZiBtYXRjaE1lZGlhICE9PSBcInVuZGVmaW5lZFwiICYmIG1hdGNoTWVkaWEoXCIocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspXCIpLCBjbGllbnREYXJrTW9kZSA9IG1lZGlhTWF0Y2ggJiYgbWVkaWFNYXRjaC5tYXRjaGVzLCBkZWZhdWx0VGhlbWUgPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9PcHRpb25zX2luc3RhbmNlcywgXCJtXCIsIF9PcHRpb25zX2ZpbmREZWZhdWx0VGhlbWUpLmNhbGwodGhpcywgY2xpZW50RGFya01vZGUgPyBFbnVtc18xLlRoZW1lTW9kZS5kYXJrIDogRW51bXNfMS5UaGVtZU1vZGUubGlnaHQpO1xuICAgICAgICAgICAgaWYgKGRlZmF1bHRUaGVtZSkge1xuICAgICAgICAgICAgICAgIHRoaXMubG9hZChkZWZhdWx0VGhlbWUub3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0UmVzcG9uc2l2ZSh3aWR0aCwgcHhSYXRpbywgZGVmYXVsdE9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5sb2FkKGRlZmF1bHRPcHRpb25zKTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2l2ZU9wdGlvbnMgPSB0aGlzLnJlc3BvbnNpdmUuZmluZCgodCkgPT4gdC5tb2RlID09PSBFbnVtc18xLlJlc3BvbnNpdmVNb2RlLnNjcmVlbiAmJiBzY3JlZW5cbiAgICAgICAgICAgID8gdC5tYXhXaWR0aCAqIHB4UmF0aW8gPiBzY3JlZW4uYXZhaWxXaWR0aFxuICAgICAgICAgICAgOiB0Lm1heFdpZHRoICogcHhSYXRpbyA+IHdpZHRoKTtcbiAgICAgICAgdGhpcy5sb2FkKHJlc3BvbnNpdmVPcHRpb25zID09PSBudWxsIHx8IHJlc3BvbnNpdmVPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXNwb25zaXZlT3B0aW9ucy5vcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNpdmVPcHRpb25zID09PSBudWxsIHx8IHJlc3BvbnNpdmVPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXNwb25zaXZlT3B0aW9ucy5tYXhXaWR0aDtcbiAgICB9XG4gICAgaW1wb3J0UHJlc2V0KHByZXNldCkge1xuICAgICAgICB0aGlzLmxvYWQoVXRpbHNfMS5QbHVnaW5zLmdldFByZXNldChwcmVzZXQpKTtcbiAgICB9XG59XG5leHBvcnRzLk9wdGlvbnMgPSBPcHRpb25zO1xuX09wdGlvbnNfaW5zdGFuY2VzID0gbmV3IFdlYWtTZXQoKSwgX09wdGlvbnNfZmluZERlZmF1bHRUaGVtZSA9IGZ1bmN0aW9uIF9PcHRpb25zX2ZpbmREZWZhdWx0VGhlbWUobW9kZSkge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gKChfYSA9IHRoaXMudGhlbWVzLmZpbmQoKHRoZW1lKSA9PiB0aGVtZS5kZWZhdWx0LnZhbHVlICYmIHRoZW1lLmRlZmF1bHQubW9kZSA9PT0gbW9kZSkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRoaXMudGhlbWVzLmZpbmQoKHRoZW1lKSA9PiB0aGVtZS5kZWZhdWx0LnZhbHVlICYmIHRoZW1lLmRlZmF1bHQubW9kZSA9PT0gRW51bXNfMS5UaGVtZU1vZGUuYW55KSk7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk9wdGlvbnNDb2xvciA9IHZvaWQgMDtcbmNsYXNzIE9wdGlvbnNDb2xvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSBcIiNmZmZcIjtcbiAgICB9XG4gICAgc3RhdGljIGNyZWF0ZShzb3VyY2UsIGRhdGEpIHtcbiAgICAgICAgY29uc3QgY29sb3IgPSBuZXcgT3B0aW9uc0NvbG9yKCk7XG4gICAgICAgIGNvbG9yLmxvYWQoc291cmNlKTtcbiAgICAgICAgaWYgKGRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiIHx8IGRhdGEgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgIGNvbG9yLmxvYWQoeyB2YWx1ZTogZGF0YSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbG9yLmxvYWQoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbG9yO1xuICAgIH1cbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgaWYgKChkYXRhID09PSBudWxsIHx8IGRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRhdGEudmFsdWUpID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZhbHVlID0gZGF0YS52YWx1ZTtcbiAgICB9XG59XG5leHBvcnRzLk9wdGlvbnNDb2xvciA9IE9wdGlvbnNDb2xvcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Cb3VuY2UgPSB2b2lkIDA7XG5jb25zdCBCb3VuY2VGYWN0b3JfMSA9IHJlcXVpcmUoXCIuL0JvdW5jZUZhY3RvclwiKTtcbmNsYXNzIEJvdW5jZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuaG9yaXpvbnRhbCA9IG5ldyBCb3VuY2VGYWN0b3JfMS5Cb3VuY2VGYWN0b3IoKTtcbiAgICAgICAgdGhpcy52ZXJ0aWNhbCA9IG5ldyBCb3VuY2VGYWN0b3JfMS5Cb3VuY2VGYWN0b3IoKTtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaG9yaXpvbnRhbC5sb2FkKGRhdGEuaG9yaXpvbnRhbCk7XG4gICAgICAgIHRoaXMudmVydGljYWwubG9hZChkYXRhLnZlcnRpY2FsKTtcbiAgICB9XG59XG5leHBvcnRzLkJvdW5jZSA9IEJvdW5jZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Cb3VuY2VGYWN0b3IgPSB2b2lkIDA7XG5jb25zdCBWYWx1ZVdpdGhSYW5kb21fMSA9IHJlcXVpcmUoXCIuLi8uLi9WYWx1ZVdpdGhSYW5kb21cIik7XG5jbGFzcyBCb3VuY2VGYWN0b3IgZXh0ZW5kcyBWYWx1ZVdpdGhSYW5kb21fMS5WYWx1ZVdpdGhSYW5kb20ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnJhbmRvbS5taW5pbXVtVmFsdWUgPSAwLjE7XG4gICAgICAgIHRoaXMudmFsdWUgPSAxO1xuICAgIH1cbn1cbmV4cG9ydHMuQm91bmNlRmFjdG9yID0gQm91bmNlRmFjdG9yO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbGxpc2lvbnMgPSB2b2lkIDA7XG5jb25zdCBFbnVtc18xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL0VudW1zXCIpO1xuY29uc3QgQm91bmNlXzEgPSByZXF1aXJlKFwiLi4vQm91bmNlL0JvdW5jZVwiKTtcbmNvbnN0IENvbGxpc2lvbnNPdmVybGFwXzEgPSByZXF1aXJlKFwiLi9Db2xsaXNpb25zT3ZlcmxhcFwiKTtcbmNsYXNzIENvbGxpc2lvbnMge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmJvdW5jZSA9IG5ldyBCb3VuY2VfMS5Cb3VuY2UoKTtcbiAgICAgICAgdGhpcy5lbmFibGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5tb2RlID0gRW51bXNfMS5Db2xsaXNpb25Nb2RlLmJvdW5jZTtcbiAgICAgICAgdGhpcy5vdmVybGFwID0gbmV3IENvbGxpc2lvbnNPdmVybGFwXzEuQ29sbGlzaW9uc092ZXJsYXAoKTtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJvdW5jZS5sb2FkKGRhdGEuYm91bmNlKTtcbiAgICAgICAgaWYgKGRhdGEuZW5hYmxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZW5hYmxlID0gZGF0YS5lbmFibGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEubW9kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLm1vZGUgPSBkYXRhLm1vZGU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vdmVybGFwLmxvYWQoZGF0YS5vdmVybGFwKTtcbiAgICB9XG59XG5leHBvcnRzLkNvbGxpc2lvbnMgPSBDb2xsaXNpb25zO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbGxpc2lvbnNPdmVybGFwID0gdm9pZCAwO1xuY2xhc3MgQ29sbGlzaW9uc092ZXJsYXAge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmVuYWJsZSA9IHRydWU7XG4gICAgICAgIHRoaXMucmV0cmllcyA9IDA7XG4gICAgfVxuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5lbmFibGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5lbmFibGUgPSBkYXRhLmVuYWJsZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5yZXRyaWVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMucmV0cmllcyA9IGRhdGEucmV0cmllcztcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQ29sbGlzaW9uc092ZXJsYXAgPSBDb2xsaXNpb25zT3ZlcmxhcDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5EZXN0cm95ID0gdm9pZCAwO1xuY29uc3QgRW51bXNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9FbnVtc1wiKTtcbmNvbnN0IFNwbGl0XzEgPSByZXF1aXJlKFwiLi9TcGxpdFwiKTtcbmNsYXNzIERlc3Ryb3kge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLm1vZGUgPSBFbnVtc18xLkRlc3Ryb3lNb2RlLm5vbmU7XG4gICAgICAgIHRoaXMuc3BsaXQgPSBuZXcgU3BsaXRfMS5TcGxpdCgpO1xuICAgIH1cbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEubW9kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLm1vZGUgPSBkYXRhLm1vZGU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zcGxpdC5sb2FkKGRhdGEuc3BsaXQpO1xuICAgIH1cbn1cbmV4cG9ydHMuRGVzdHJveSA9IERlc3Ryb3k7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3BsaXQgPSB2b2lkIDA7XG5jb25zdCBTcGxpdEZhY3Rvcl8xID0gcmVxdWlyZShcIi4vU3BsaXRGYWN0b3JcIik7XG5jb25zdCBTcGxpdFJhdGVfMSA9IHJlcXVpcmUoXCIuL1NwbGl0UmF0ZVwiKTtcbmNvbnN0IFV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vVXRpbHNcIik7XG5jbGFzcyBTcGxpdCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuY291bnQgPSAxO1xuICAgICAgICB0aGlzLmZhY3RvciA9IG5ldyBTcGxpdEZhY3Rvcl8xLlNwbGl0RmFjdG9yKCk7XG4gICAgICAgIHRoaXMucmF0ZSA9IG5ldyBTcGxpdFJhdGVfMS5TcGxpdFJhdGUoKTtcbiAgICAgICAgdGhpcy5zaXplT2Zmc2V0ID0gdHJ1ZTtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmNvdW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY291bnQgPSBkYXRhLmNvdW50O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZmFjdG9yLmxvYWQoZGF0YS5mYWN0b3IpO1xuICAgICAgICB0aGlzLnJhdGUubG9hZChkYXRhLnJhdGUpO1xuICAgICAgICBpZiAoZGF0YS5wYXJ0aWNsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5wYXJ0aWNsZXMgPSAoMCwgVXRpbHNfMS5kZWVwRXh0ZW5kKSh7fSwgZGF0YS5wYXJ0aWNsZXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLnNpemVPZmZzZXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5zaXplT2Zmc2V0ID0gZGF0YS5zaXplT2Zmc2V0O1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5TcGxpdCA9IFNwbGl0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNwbGl0RmFjdG9yID0gdm9pZCAwO1xuY29uc3QgVmFsdWVXaXRoUmFuZG9tXzEgPSByZXF1aXJlKFwiLi4vLi4vVmFsdWVXaXRoUmFuZG9tXCIpO1xuY2xhc3MgU3BsaXRGYWN0b3IgZXh0ZW5kcyBWYWx1ZVdpdGhSYW5kb21fMS5WYWx1ZVdpdGhSYW5kb20ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnZhbHVlID0gMztcbiAgICB9XG59XG5leHBvcnRzLlNwbGl0RmFjdG9yID0gU3BsaXRGYWN0b3I7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3BsaXRSYXRlID0gdm9pZCAwO1xuY29uc3QgVmFsdWVXaXRoUmFuZG9tXzEgPSByZXF1aXJlKFwiLi4vLi4vVmFsdWVXaXRoUmFuZG9tXCIpO1xuY2xhc3MgU3BsaXRSYXRlIGV4dGVuZHMgVmFsdWVXaXRoUmFuZG9tXzEuVmFsdWVXaXRoUmFuZG9tIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHsgbWluOiA0LCBtYXg6IDkgfTtcbiAgICB9XG59XG5leHBvcnRzLlNwbGl0UmF0ZSA9IFNwbGl0UmF0ZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5MaWZlID0gdm9pZCAwO1xuY29uc3QgTGlmZURlbGF5XzEgPSByZXF1aXJlKFwiLi9MaWZlRGVsYXlcIik7XG5jb25zdCBMaWZlRHVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL0xpZmVEdXJhdGlvblwiKTtcbmNsYXNzIExpZmUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmNvdW50ID0gMDtcbiAgICAgICAgdGhpcy5kZWxheSA9IG5ldyBMaWZlRGVsYXlfMS5MaWZlRGVsYXkoKTtcbiAgICAgICAgdGhpcy5kdXJhdGlvbiA9IG5ldyBMaWZlRHVyYXRpb25fMS5MaWZlRHVyYXRpb24oKTtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5jb3VudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmNvdW50ID0gZGF0YS5jb3VudDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlbGF5LmxvYWQoZGF0YS5kZWxheSk7XG4gICAgICAgIHRoaXMuZHVyYXRpb24ubG9hZChkYXRhLmR1cmF0aW9uKTtcbiAgICB9XG59XG5leHBvcnRzLkxpZmUgPSBMaWZlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxpZmVEZWxheSA9IHZvaWQgMDtcbmNvbnN0IFZhbHVlV2l0aFJhbmRvbV8xID0gcmVxdWlyZShcIi4uLy4uL1ZhbHVlV2l0aFJhbmRvbVwiKTtcbmNsYXNzIExpZmVEZWxheSBleHRlbmRzIFZhbHVlV2l0aFJhbmRvbV8xLlZhbHVlV2l0aFJhbmRvbSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuc3luYyA9IGZhbHNlO1xuICAgIH1cbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIubG9hZChkYXRhKTtcbiAgICAgICAgaWYgKGRhdGEuc3luYyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnN5bmMgPSBkYXRhLnN5bmM7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkxpZmVEZWxheSA9IExpZmVEZWxheTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5MaWZlRHVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBWYWx1ZVdpdGhSYW5kb21fMSA9IHJlcXVpcmUoXCIuLi8uLi9WYWx1ZVdpdGhSYW5kb21cIik7XG5jbGFzcyBMaWZlRHVyYXRpb24gZXh0ZW5kcyBWYWx1ZVdpdGhSYW5kb21fMS5WYWx1ZVdpdGhSYW5kb20ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnJhbmRvbS5taW5pbXVtVmFsdWUgPSAwLjAwMDE7XG4gICAgICAgIHRoaXMuc3luYyA9IGZhbHNlO1xuICAgIH1cbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyLmxvYWQoZGF0YSk7XG4gICAgICAgIGlmIChkYXRhLnN5bmMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5zeW5jID0gZGF0YS5zeW5jO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5MaWZlRHVyYXRpb24gPSBMaWZlRHVyYXRpb247XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTGlua3MgPSB2b2lkIDA7XG5jb25zdCBMaW5rc1NoYWRvd18xID0gcmVxdWlyZShcIi4vTGlua3NTaGFkb3dcIik7XG5jb25zdCBMaW5rc1RyaWFuZ2xlXzEgPSByZXF1aXJlKFwiLi9MaW5rc1RyaWFuZ2xlXCIpO1xuY29uc3QgT3B0aW9uc0NvbG9yXzEgPSByZXF1aXJlKFwiLi4vLi4vT3B0aW9uc0NvbG9yXCIpO1xuY2xhc3MgTGlua3Mge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmJsaW5rID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY29sb3IgPSBuZXcgT3B0aW9uc0NvbG9yXzEuT3B0aW9uc0NvbG9yKCk7XG4gICAgICAgIHRoaXMuY29uc2VudCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRpc3RhbmNlID0gMTAwO1xuICAgICAgICB0aGlzLmVuYWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmZyZXF1ZW5jeSA9IDE7XG4gICAgICAgIHRoaXMub3BhY2l0eSA9IDE7XG4gICAgICAgIHRoaXMuc2hhZG93ID0gbmV3IExpbmtzU2hhZG93XzEuTGlua3NTaGFkb3coKTtcbiAgICAgICAgdGhpcy50cmlhbmdsZXMgPSBuZXcgTGlua3NUcmlhbmdsZV8xLkxpbmtzVHJpYW5nbGUoKTtcbiAgICAgICAgdGhpcy53aWR0aCA9IDE7XG4gICAgICAgIHRoaXMud2FycCA9IGZhbHNlO1xuICAgIH1cbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmlkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaWQgPSBkYXRhLmlkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmJsaW5rICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYmxpbmsgPSBkYXRhLmJsaW5rO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29sb3IgPSBPcHRpb25zQ29sb3JfMS5PcHRpb25zQ29sb3IuY3JlYXRlKHRoaXMuY29sb3IsIGRhdGEuY29sb3IpO1xuICAgICAgICBpZiAoZGF0YS5jb25zZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY29uc2VudCA9IGRhdGEuY29uc2VudDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5kaXN0YW5jZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmRpc3RhbmNlID0gZGF0YS5kaXN0YW5jZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5lbmFibGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5lbmFibGUgPSBkYXRhLmVuYWJsZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5mcmVxdWVuY3kgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5mcmVxdWVuY3kgPSBkYXRhLmZyZXF1ZW5jeTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5vcGFjaXR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMub3BhY2l0eSA9IGRhdGEub3BhY2l0eTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNoYWRvdy5sb2FkKGRhdGEuc2hhZG93KTtcbiAgICAgICAgdGhpcy50cmlhbmdsZXMubG9hZChkYXRhLnRyaWFuZ2xlcyk7XG4gICAgICAgIGlmIChkYXRhLndpZHRoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSBkYXRhLndpZHRoO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLndhcnAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy53YXJwID0gZGF0YS53YXJwO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5MaW5rcyA9IExpbmtzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxpbmtzU2hhZG93ID0gdm9pZCAwO1xuY29uc3QgT3B0aW9uc0NvbG9yXzEgPSByZXF1aXJlKFwiLi4vLi4vT3B0aW9uc0NvbG9yXCIpO1xuY2xhc3MgTGlua3NTaGFkb3cge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmJsdXIgPSA1O1xuICAgICAgICB0aGlzLmNvbG9yID0gbmV3IE9wdGlvbnNDb2xvcl8xLk9wdGlvbnNDb2xvcigpO1xuICAgICAgICB0aGlzLmVuYWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNvbG9yLnZhbHVlID0gXCIjMDBmZjAwXCI7XG4gICAgfVxuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuYmx1ciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmJsdXIgPSBkYXRhLmJsdXI7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb2xvciA9IE9wdGlvbnNDb2xvcl8xLk9wdGlvbnNDb2xvci5jcmVhdGUodGhpcy5jb2xvciwgZGF0YS5jb2xvcik7XG4gICAgICAgIGlmIChkYXRhLmVuYWJsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmVuYWJsZSA9IGRhdGEuZW5hYmxlO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5MaW5rc1NoYWRvdyA9IExpbmtzU2hhZG93O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxpbmtzVHJpYW5nbGUgPSB2b2lkIDA7XG5jb25zdCBPcHRpb25zQ29sb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi9PcHRpb25zQ29sb3JcIik7XG5jbGFzcyBMaW5rc1RyaWFuZ2xlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5lbmFibGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5mcmVxdWVuY3kgPSAxO1xuICAgIH1cbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmNvbG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY29sb3IgPSBPcHRpb25zQ29sb3JfMS5PcHRpb25zQ29sb3IuY3JlYXRlKHRoaXMuY29sb3IsIGRhdGEuY29sb3IpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmVuYWJsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmVuYWJsZSA9IGRhdGEuZW5hYmxlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmZyZXF1ZW5jeSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmZyZXF1ZW5jeSA9IGRhdGEuZnJlcXVlbmN5O1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLm9wYWNpdHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5vcGFjaXR5ID0gZGF0YS5vcGFjaXR5O1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5MaW5rc1RyaWFuZ2xlID0gTGlua3NUcmlhbmdsZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BdHRyYWN0ID0gdm9pZCAwO1xuY2xhc3MgQXR0cmFjdCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZGlzdGFuY2UgPSAyMDA7XG4gICAgICAgIHRoaXMuZW5hYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMucm90YXRlID0ge1xuICAgICAgICAgICAgeDogMzAwMCxcbiAgICAgICAgICAgIHk6IDMwMDAsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGdldCByb3RhdGVYKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yb3RhdGUueDtcbiAgICB9XG4gICAgc2V0IHJvdGF0ZVgodmFsdWUpIHtcbiAgICAgICAgdGhpcy5yb3RhdGUueCA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgcm90YXRlWSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm90YXRlLnk7XG4gICAgfVxuICAgIHNldCByb3RhdGVZKHZhbHVlKSB7XG4gICAgICAgIHRoaXMucm90YXRlLnkgPSB2YWx1ZTtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuZGlzdGFuY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5kaXN0YW5jZSA9IGRhdGEuZGlzdGFuY2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuZW5hYmxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZW5hYmxlID0gZGF0YS5lbmFibGU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgcm90YXRlWCA9IChfYiA9IChfYSA9IGRhdGEucm90YXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EueCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogZGF0YS5yb3RhdGVYO1xuICAgICAgICBpZiAocm90YXRlWCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnJvdGF0ZS54ID0gcm90YXRlWDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByb3RhdGVZID0gKF9kID0gKF9jID0gZGF0YS5yb3RhdGUpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy55KSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiBkYXRhLnJvdGF0ZVk7XG4gICAgICAgIGlmIChyb3RhdGVZICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMucm90YXRlLnkgPSByb3RhdGVZO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5BdHRyYWN0ID0gQXR0cmFjdDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Nb3ZlID0gdm9pZCAwO1xuY29uc3QgQXR0cmFjdF8xID0gcmVxdWlyZShcIi4vQXR0cmFjdFwiKTtcbmNvbnN0IEVudW1zXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vRW51bXNcIik7XG5jb25zdCBUcmFpbF8xID0gcmVxdWlyZShcIi4vVHJhaWxcIik7XG5jb25zdCBQYXRoXzEgPSByZXF1aXJlKFwiLi9QYXRoL1BhdGhcIik7XG5jb25zdCBNb3ZlQW5nbGVfMSA9IHJlcXVpcmUoXCIuL01vdmVBbmdsZVwiKTtcbmNvbnN0IE1vdmVHcmF2aXR5XzEgPSByZXF1aXJlKFwiLi9Nb3ZlR3Jhdml0eVwiKTtcbmNvbnN0IE91dE1vZGVzXzEgPSByZXF1aXJlKFwiLi9PdXRNb2Rlc1wiKTtcbmNvbnN0IFV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vVXRpbHNcIik7XG5jb25zdCBTcGluXzEgPSByZXF1aXJlKFwiLi9TcGluXCIpO1xuY2xhc3MgTW92ZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuYW5nbGUgPSBuZXcgTW92ZUFuZ2xlXzEuTW92ZUFuZ2xlKCk7XG4gICAgICAgIHRoaXMuYXR0cmFjdCA9IG5ldyBBdHRyYWN0XzEuQXR0cmFjdCgpO1xuICAgICAgICB0aGlzLmRlY2F5ID0gMDtcbiAgICAgICAgdGhpcy5kaXN0YW5jZSA9IHt9O1xuICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IEVudW1zXzEuTW92ZURpcmVjdGlvbi5ub25lO1xuICAgICAgICB0aGlzLmRyaWZ0ID0gMDtcbiAgICAgICAgdGhpcy5lbmFibGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5ncmF2aXR5ID0gbmV3IE1vdmVHcmF2aXR5XzEuTW92ZUdyYXZpdHkoKTtcbiAgICAgICAgdGhpcy5wYXRoID0gbmV3IFBhdGhfMS5QYXRoKCk7XG4gICAgICAgIHRoaXMub3V0TW9kZXMgPSBuZXcgT3V0TW9kZXNfMS5PdXRNb2RlcygpO1xuICAgICAgICB0aGlzLnJhbmRvbSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNpemUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zcGVlZCA9IDI7XG4gICAgICAgIHRoaXMuc3BpbiA9IG5ldyBTcGluXzEuU3BpbigpO1xuICAgICAgICB0aGlzLnN0cmFpZ2h0ID0gZmFsc2U7XG4gICAgICAgIHRoaXMudHJhaWwgPSBuZXcgVHJhaWxfMS5UcmFpbCgpO1xuICAgICAgICB0aGlzLnZpYnJhdGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy53YXJwID0gZmFsc2U7XG4gICAgfVxuICAgIGdldCBjb2xsaXNpb25zKCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHNldCBjb2xsaXNpb25zKHZhbHVlKSB7XG4gICAgfVxuICAgIGdldCBib3VuY2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbGxpc2lvbnM7XG4gICAgfVxuICAgIHNldCBib3VuY2UodmFsdWUpIHtcbiAgICAgICAgdGhpcy5jb2xsaXNpb25zID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBvdXRfbW9kZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3V0TW9kZTtcbiAgICB9XG4gICAgc2V0IG91dF9tb2RlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMub3V0TW9kZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgb3V0TW9kZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3V0TW9kZXMuZGVmYXVsdDtcbiAgICB9XG4gICAgc2V0IG91dE1vZGUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5vdXRNb2Rlcy5kZWZhdWx0ID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBub2lzZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGF0aDtcbiAgICB9XG4gICAgc2V0IG5vaXNlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMucGF0aCA9IHZhbHVlO1xuICAgIH1cbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5hbmdsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRhdGEuYW5nbGUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFuZ2xlLnZhbHVlID0gZGF0YS5hbmdsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuYW5nbGUubG9hZChkYXRhLmFuZ2xlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmF0dHJhY3QubG9hZChkYXRhLmF0dHJhY3QpO1xuICAgICAgICBpZiAoZGF0YS5kZWNheSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmRlY2F5ID0gZGF0YS5kZWNheTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5kaXJlY3Rpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSBkYXRhLmRpcmVjdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5kaXN0YW5jZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmRpc3RhbmNlID1cbiAgICAgICAgICAgICAgICB0eXBlb2YgZGF0YS5kaXN0YW5jZSA9PT0gXCJudW1iZXJcIlxuICAgICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvcml6b250YWw6IGRhdGEuZGlzdGFuY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbDogZGF0YS5kaXN0YW5jZSxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA6ICgwLCBVdGlsc18xLmRlZXBFeHRlbmQpKHt9LCBkYXRhLmRpc3RhbmNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5kcmlmdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmRyaWZ0ID0gKDAsIFV0aWxzXzEuc2V0UmFuZ2VWYWx1ZSkoZGF0YS5kcmlmdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuZW5hYmxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZW5hYmxlID0gZGF0YS5lbmFibGU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ncmF2aXR5LmxvYWQoZGF0YS5ncmF2aXR5KTtcbiAgICAgICAgY29uc3Qgb3V0TW9kZSA9IChfYSA9IGRhdGEub3V0TW9kZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZGF0YS5vdXRfbW9kZTtcbiAgICAgICAgaWYgKGRhdGEub3V0TW9kZXMgIT09IHVuZGVmaW5lZCB8fCBvdXRNb2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YS5vdXRNb2RlcyA9PT0gXCJzdHJpbmdcIiB8fCAoZGF0YS5vdXRNb2RlcyA9PT0gdW5kZWZpbmVkICYmIG91dE1vZGUgIT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm91dE1vZGVzLmxvYWQoe1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiAoX2IgPSBkYXRhLm91dE1vZGVzKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBvdXRNb2RlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vdXRNb2Rlcy5sb2FkKGRhdGEub3V0TW9kZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMucGF0aC5sb2FkKChfYyA9IGRhdGEucGF0aCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogZGF0YS5ub2lzZSk7XG4gICAgICAgIGlmIChkYXRhLnJhbmRvbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnJhbmRvbSA9IGRhdGEucmFuZG9tO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLnNpemUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLnNwZWVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc3BlZWQgPSAoMCwgVXRpbHNfMS5zZXRSYW5nZVZhbHVlKShkYXRhLnNwZWVkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNwaW4ubG9hZChkYXRhLnNwaW4pO1xuICAgICAgICBpZiAoZGF0YS5zdHJhaWdodCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnN0cmFpZ2h0ID0gZGF0YS5zdHJhaWdodDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRyYWlsLmxvYWQoZGF0YS50cmFpbCk7XG4gICAgICAgIGlmIChkYXRhLnZpYnJhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy52aWJyYXRlID0gZGF0YS52aWJyYXRlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLndhcnAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy53YXJwID0gZGF0YS53YXJwO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5Nb3ZlID0gTW92ZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Nb3ZlQW5nbGUgPSB2b2lkIDA7XG5jbGFzcyBNb3ZlQW5nbGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLm9mZnNldCA9IDA7XG4gICAgICAgIHRoaXMudmFsdWUgPSA5MDtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5vZmZzZXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSBkYXRhLm9mZnNldDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS52YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gZGF0YS52YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuTW92ZUFuZ2xlID0gTW92ZUFuZ2xlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1vdmVHcmF2aXR5ID0gdm9pZCAwO1xuY2xhc3MgTW92ZUdyYXZpdHkge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmFjY2VsZXJhdGlvbiA9IDkuODE7XG4gICAgICAgIHRoaXMuZW5hYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaW52ZXJzZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLm1heFNwZWVkID0gNTA7XG4gICAgfVxuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5hY2NlbGVyYXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5hY2NlbGVyYXRpb24gPSBkYXRhLmFjY2VsZXJhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5lbmFibGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5lbmFibGUgPSBkYXRhLmVuYWJsZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5pbnZlcnNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaW52ZXJzZSA9IGRhdGEuaW52ZXJzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5tYXhTcGVlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLm1heFNwZWVkID0gZGF0YS5tYXhTcGVlZDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuTW92ZUdyYXZpdHkgPSBNb3ZlR3Jhdml0eTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5PdXRNb2RlcyA9IHZvaWQgMDtcbmNvbnN0IE1vZGVzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vRW51bXMvTW9kZXNcIik7XG5jbGFzcyBPdXRNb2RlcyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZGVmYXVsdCA9IE1vZGVzXzEuT3V0TW9kZS5vdXQ7XG4gICAgfVxuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmRlZmF1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5kZWZhdWx0ID0gZGF0YS5kZWZhdWx0O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYm90dG9tID0gKF9hID0gZGF0YS5ib3R0b20pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGRhdGEuZGVmYXVsdDtcbiAgICAgICAgdGhpcy5sZWZ0ID0gKF9iID0gZGF0YS5sZWZ0KSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBkYXRhLmRlZmF1bHQ7XG4gICAgICAgIHRoaXMucmlnaHQgPSAoX2MgPSBkYXRhLnJpZ2h0KSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBkYXRhLmRlZmF1bHQ7XG4gICAgICAgIHRoaXMudG9wID0gKF9kID0gZGF0YS50b3ApICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IGRhdGEuZGVmYXVsdDtcbiAgICB9XG59XG5leHBvcnRzLk91dE1vZGVzID0gT3V0TW9kZXM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUGF0aCA9IHZvaWQgMDtcbmNvbnN0IFBhdGhEZWxheV8xID0gcmVxdWlyZShcIi4vUGF0aERlbGF5XCIpO1xuY29uc3QgVXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9VdGlsc1wiKTtcbmNsYXNzIFBhdGgge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmNsYW1wID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kZWxheSA9IG5ldyBQYXRoRGVsYXlfMS5QYXRoRGVsYXkoKTtcbiAgICAgICAgdGhpcy5lbmFibGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0ge307XG4gICAgfVxuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuY2xhbXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5jbGFtcCA9IGRhdGEuY2xhbXA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZWxheS5sb2FkKGRhdGEuZGVsYXkpO1xuICAgICAgICBpZiAoZGF0YS5lbmFibGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5lbmFibGUgPSBkYXRhLmVuYWJsZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdlbmVyYXRvciA9IGRhdGEuZ2VuZXJhdG9yO1xuICAgICAgICBpZiAoZGF0YS5vcHRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSAoMCwgVXRpbHNfMS5kZWVwRXh0ZW5kKSh0aGlzLm9wdGlvbnMsIGRhdGEub3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlBhdGggPSBQYXRoO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBhdGhEZWxheSA9IHZvaWQgMDtcbmNvbnN0IFZhbHVlV2l0aFJhbmRvbV8xID0gcmVxdWlyZShcIi4uLy4uLy4uL1ZhbHVlV2l0aFJhbmRvbVwiKTtcbmNsYXNzIFBhdGhEZWxheSBleHRlbmRzIFZhbHVlV2l0aFJhbmRvbV8xLlZhbHVlV2l0aFJhbmRvbSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxufVxuZXhwb3J0cy5QYXRoRGVsYXkgPSBQYXRoRGVsYXk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3BpbiA9IHZvaWQgMDtcbmNvbnN0IFV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vVXRpbHNcIik7XG5jbGFzcyBTcGluIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5hY2NlbGVyYXRpb24gPSAwO1xuICAgICAgICB0aGlzLmVuYWJsZSA9IGZhbHNlO1xuICAgIH1cbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuYWNjZWxlcmF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYWNjZWxlcmF0aW9uID0gKDAsIFV0aWxzXzEuc2V0UmFuZ2VWYWx1ZSkoZGF0YS5hY2NlbGVyYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmVuYWJsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmVuYWJsZSA9IGRhdGEuZW5hYmxlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBkYXRhLnBvc2l0aW9uID8gKDAsIFV0aWxzXzEuZGVlcEV4dGVuZCkoe30sIGRhdGEucG9zaXRpb24pIDogdW5kZWZpbmVkO1xuICAgIH1cbn1cbmV4cG9ydHMuU3BpbiA9IFNwaW47XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVHJhaWwgPSB2b2lkIDA7XG5jb25zdCBPcHRpb25zQ29sb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi9PcHRpb25zQ29sb3JcIik7XG5jbGFzcyBUcmFpbCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gMTA7XG4gICAgICAgIHRoaXMuZmlsbENvbG9yID0gbmV3IE9wdGlvbnNDb2xvcl8xLk9wdGlvbnNDb2xvcigpO1xuICAgICAgICB0aGlzLmZpbGxDb2xvci52YWx1ZSA9IFwiIzAwMDAwMFwiO1xuICAgIH1cbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmVuYWJsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmVuYWJsZSA9IGRhdGEuZW5hYmxlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZmlsbENvbG9yID0gT3B0aW9uc0NvbG9yXzEuT3B0aW9uc0NvbG9yLmNyZWF0ZSh0aGlzLmZpbGxDb2xvciwgZGF0YS5maWxsQ29sb3IpO1xuICAgICAgICBpZiAoZGF0YS5sZW5ndGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5sZW5ndGggPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuVHJhaWwgPSBUcmFpbDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5EZW5zaXR5ID0gdm9pZCAwO1xuY2xhc3MgRGVuc2l0eSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYXJlYSA9IDgwMDtcbiAgICAgICAgdGhpcy5mYWN0b3IgPSAxMDAwO1xuICAgIH1cbiAgICBnZXQgdmFsdWVfYXJlYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXJlYTtcbiAgICB9XG4gICAgc2V0IHZhbHVlX2FyZWEodmFsdWUpIHtcbiAgICAgICAgdGhpcy5hcmVhID0gdmFsdWU7XG4gICAgfVxuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5lbmFibGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5lbmFibGUgPSBkYXRhLmVuYWJsZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhcmVhID0gKF9hID0gZGF0YS5hcmVhKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBkYXRhLnZhbHVlX2FyZWE7XG4gICAgICAgIGlmIChhcmVhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYXJlYSA9IGFyZWE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuZmFjdG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZmFjdG9yID0gZGF0YS5mYWN0b3I7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkRlbnNpdHkgPSBEZW5zaXR5O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBhcnRpY2xlc051bWJlciA9IHZvaWQgMDtcbmNvbnN0IERlbnNpdHlfMSA9IHJlcXVpcmUoXCIuL0RlbnNpdHlcIik7XG5jbGFzcyBQYXJ0aWNsZXNOdW1iZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmRlbnNpdHkgPSBuZXcgRGVuc2l0eV8xLkRlbnNpdHkoKTtcbiAgICAgICAgdGhpcy5saW1pdCA9IDA7XG4gICAgICAgIHRoaXMudmFsdWUgPSAxMDA7XG4gICAgfVxuICAgIGdldCBtYXgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxpbWl0O1xuICAgIH1cbiAgICBzZXQgbWF4KHZhbHVlKSB7XG4gICAgICAgIHRoaXMubGltaXQgPSB2YWx1ZTtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVuc2l0eS5sb2FkKGRhdGEuZGVuc2l0eSk7XG4gICAgICAgIGNvbnN0IGxpbWl0ID0gKF9hID0gZGF0YS5saW1pdCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZGF0YS5tYXg7XG4gICAgICAgIGlmIChsaW1pdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmxpbWl0ID0gbGltaXQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEudmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IGRhdGEudmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlBhcnRpY2xlc051bWJlciA9IFBhcnRpY2xlc051bWJlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5PcGFjaXR5ID0gdm9pZCAwO1xuY29uc3QgT3BhY2l0eUFuaW1hdGlvbl8xID0gcmVxdWlyZShcIi4vT3BhY2l0eUFuaW1hdGlvblwiKTtcbmNvbnN0IFZhbHVlV2l0aFJhbmRvbV8xID0gcmVxdWlyZShcIi4uLy4uL1ZhbHVlV2l0aFJhbmRvbVwiKTtcbmNvbnN0IFV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vVXRpbHNcIik7XG5jbGFzcyBPcGFjaXR5IGV4dGVuZHMgVmFsdWVXaXRoUmFuZG9tXzEuVmFsdWVXaXRoUmFuZG9tIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5hbmltYXRpb24gPSBuZXcgT3BhY2l0eUFuaW1hdGlvbl8xLk9wYWNpdHlBbmltYXRpb24oKTtcbiAgICAgICAgdGhpcy5yYW5kb20ubWluaW11bVZhbHVlID0gMC4xO1xuICAgICAgICB0aGlzLnZhbHVlID0gMTtcbiAgICB9XG4gICAgZ2V0IGFuaW0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFuaW1hdGlvbjtcbiAgICB9XG4gICAgc2V0IGFuaW0odmFsdWUpIHtcbiAgICAgICAgdGhpcy5hbmltYXRpb24gPSB2YWx1ZTtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIubG9hZChkYXRhKTtcbiAgICAgICAgY29uc3QgYW5pbWF0aW9uID0gKF9hID0gZGF0YS5hbmltYXRpb24pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGRhdGEuYW5pbTtcbiAgICAgICAgaWYgKGFuaW1hdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbi5sb2FkKGFuaW1hdGlvbik7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gKDAsIFV0aWxzXzEuc2V0UmFuZ2VWYWx1ZSkodGhpcy52YWx1ZSwgdGhpcy5hbmltYXRpb24uZW5hYmxlID8gdGhpcy5hbmltYXRpb24ubWluaW11bVZhbHVlIDogdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuT3BhY2l0eSA9IE9wYWNpdHk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuT3BhY2l0eUFuaW1hdGlvbiA9IHZvaWQgMDtcbmNvbnN0IEVudW1zXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vRW51bXNcIik7XG5jb25zdCBBbmltYXRpb25PcHRpb25zXzEgPSByZXF1aXJlKFwiLi4vLi4vQW5pbWF0aW9uT3B0aW9uc1wiKTtcbmNsYXNzIE9wYWNpdHlBbmltYXRpb24gZXh0ZW5kcyBBbmltYXRpb25PcHRpb25zXzEuQW5pbWF0aW9uT3B0aW9ucyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZGVzdHJveSA9IEVudW1zXzEuRGVzdHJveVR5cGUubm9uZTtcbiAgICAgICAgdGhpcy5lbmFibGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zcGVlZCA9IDI7XG4gICAgICAgIHRoaXMuc3RhcnRWYWx1ZSA9IEVudW1zXzEuU3RhcnRWYWx1ZVR5cGUucmFuZG9tO1xuICAgICAgICB0aGlzLnN5bmMgPSBmYWxzZTtcbiAgICB9XG4gICAgZ2V0IG9wYWNpdHlfbWluKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taW5pbXVtVmFsdWU7XG4gICAgfVxuICAgIHNldCBvcGFjaXR5X21pbih2YWx1ZSkge1xuICAgICAgICB0aGlzLm1pbmltdW1WYWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIubG9hZChkYXRhKTtcbiAgICAgICAgaWYgKGRhdGEuZGVzdHJveSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3Ryb3kgPSBkYXRhLmRlc3Ryb3k7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuZW5hYmxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZW5hYmxlID0gZGF0YS5lbmFibGU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5taW5pbXVtVmFsdWUgPSAoX2EgPSBkYXRhLm1pbmltdW1WYWx1ZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZGF0YS5vcGFjaXR5X21pbjtcbiAgICAgICAgaWYgKGRhdGEuc3BlZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5zcGVlZCA9IGRhdGEuc3BlZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuc3RhcnRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0VmFsdWUgPSBkYXRhLnN0YXJ0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuc3luYyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnN5bmMgPSBkYXRhLnN5bmM7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLk9wYWNpdHlBbmltYXRpb24gPSBPcGFjaXR5QW5pbWF0aW9uO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk9yYml0ID0gdm9pZCAwO1xuY29uc3QgT3JiaXRSb3RhdGlvbl8xID0gcmVxdWlyZShcIi4vT3JiaXRSb3RhdGlvblwiKTtcbmNvbnN0IE9wdGlvbnNDb2xvcl8xID0gcmVxdWlyZShcIi4uLy4uL09wdGlvbnNDb2xvclwiKTtcbmNvbnN0IEFuaW1hdGlvbk9wdGlvbnNfMSA9IHJlcXVpcmUoXCIuLi8uLi9BbmltYXRpb25PcHRpb25zXCIpO1xuY2xhc3MgT3JiaXQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmFuaW1hdGlvbiA9IG5ldyBBbmltYXRpb25PcHRpb25zXzEuQW5pbWF0aW9uT3B0aW9ucygpO1xuICAgICAgICB0aGlzLmVuYWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLm9wYWNpdHkgPSAxO1xuICAgICAgICB0aGlzLnJvdGF0aW9uID0gbmV3IE9yYml0Um90YXRpb25fMS5PcmJpdFJvdGF0aW9uKCk7XG4gICAgICAgIHRoaXMud2lkdGggPSAxO1xuICAgIH1cbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uLmxvYWQoZGF0YS5hbmltYXRpb24pO1xuICAgICAgICB0aGlzLnJvdGF0aW9uLmxvYWQoZGF0YS5yb3RhdGlvbik7XG4gICAgICAgIGlmIChkYXRhLmVuYWJsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmVuYWJsZSA9IGRhdGEuZW5hYmxlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLm9wYWNpdHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5vcGFjaXR5ID0gZGF0YS5vcGFjaXR5O1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLndpZHRoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSBkYXRhLndpZHRoO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLnJhZGl1cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnJhZGl1cyA9IGRhdGEucmFkaXVzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmNvbG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY29sb3IgPSBPcHRpb25zQ29sb3JfMS5PcHRpb25zQ29sb3IuY3JlYXRlKHRoaXMuY29sb3IsIGRhdGEuY29sb3IpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5PcmJpdCA9IE9yYml0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk9yYml0Um90YXRpb24gPSB2b2lkIDA7XG5jb25zdCBWYWx1ZVdpdGhSYW5kb21fMSA9IHJlcXVpcmUoXCIuLi8uLi9WYWx1ZVdpdGhSYW5kb21cIik7XG5jbGFzcyBPcmJpdFJvdGF0aW9uIGV4dGVuZHMgVmFsdWVXaXRoUmFuZG9tXzEuVmFsdWVXaXRoUmFuZG9tIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IDQ1O1xuICAgICAgICB0aGlzLnJhbmRvbS5lbmFibGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5yYW5kb20ubWluaW11bVZhbHVlID0gMDtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzdXBlci5sb2FkKGRhdGEpO1xuICAgIH1cbn1cbmV4cG9ydHMuT3JiaXRSb3RhdGlvbiA9IE9yYml0Um90YXRpb247XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUGFydGljbGVzT3B0aW9ucyA9IHZvaWQgMDtcbmNvbnN0IExpbmtzXzEgPSByZXF1aXJlKFwiLi9MaW5rcy9MaW5rc1wiKTtcbmNvbnN0IE1vdmVfMSA9IHJlcXVpcmUoXCIuL01vdmUvTW92ZVwiKTtcbmNvbnN0IFBhcnRpY2xlc051bWJlcl8xID0gcmVxdWlyZShcIi4vTnVtYmVyL1BhcnRpY2xlc051bWJlclwiKTtcbmNvbnN0IE9wYWNpdHlfMSA9IHJlcXVpcmUoXCIuL09wYWNpdHkvT3BhY2l0eVwiKTtcbmNvbnN0IFNoYXBlXzEgPSByZXF1aXJlKFwiLi9TaGFwZS9TaGFwZVwiKTtcbmNvbnN0IFNpemVfMSA9IHJlcXVpcmUoXCIuL1NpemUvU2l6ZVwiKTtcbmNvbnN0IFJvdGF0ZV8xID0gcmVxdWlyZShcIi4vUm90YXRlL1JvdGF0ZVwiKTtcbmNvbnN0IFNoYWRvd18xID0gcmVxdWlyZShcIi4vU2hhZG93XCIpO1xuY29uc3QgU3Ryb2tlXzEgPSByZXF1aXJlKFwiLi9TdHJva2VcIik7XG5jb25zdCBDb2xsaXNpb25zXzEgPSByZXF1aXJlKFwiLi9Db2xsaXNpb25zL0NvbGxpc2lvbnNcIik7XG5jb25zdCBUd2lua2xlXzEgPSByZXF1aXJlKFwiLi9Ud2lua2xlL1R3aW5rbGVcIik7XG5jb25zdCBBbmltYXRhYmxlQ29sb3JfMSA9IHJlcXVpcmUoXCIuLi9BbmltYXRhYmxlQ29sb3JcIik7XG5jb25zdCBMaWZlXzEgPSByZXF1aXJlKFwiLi9MaWZlL0xpZmVcIik7XG5jb25zdCBCb3VuY2VfMSA9IHJlcXVpcmUoXCIuL0JvdW5jZS9Cb3VuY2VcIik7XG5jb25zdCBEZXN0cm95XzEgPSByZXF1aXJlKFwiLi9EZXN0cm95L0Rlc3Ryb3lcIik7XG5jb25zdCBXb2JibGVfMSA9IHJlcXVpcmUoXCIuL1dvYmJsZS9Xb2JibGVcIik7XG5jb25zdCBUaWx0XzEgPSByZXF1aXJlKFwiLi9UaWx0L1RpbHRcIik7XG5jb25zdCBSb2xsXzEgPSByZXF1aXJlKFwiLi9Sb2xsL1JvbGxcIik7XG5jb25zdCBaSW5kZXhfMSA9IHJlcXVpcmUoXCIuL1pJbmRleC9aSW5kZXhcIik7XG5jb25zdCBVdGlsc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL1V0aWxzXCIpO1xuY29uc3QgT3JiaXRfMSA9IHJlcXVpcmUoXCIuL09yYml0L09yYml0XCIpO1xuY29uc3QgUmVwdWxzZV8xID0gcmVxdWlyZShcIi4vUmVwdWxzZS9SZXB1bHNlXCIpO1xuY29uc3QgQW5pbWF0YWJsZUdyYWRpZW50XzEgPSByZXF1aXJlKFwiLi4vQW5pbWF0YWJsZUdyYWRpZW50XCIpO1xuY2xhc3MgUGFydGljbGVzT3B0aW9ucyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuYm91bmNlID0gbmV3IEJvdW5jZV8xLkJvdW5jZSgpO1xuICAgICAgICB0aGlzLmNvbGxpc2lvbnMgPSBuZXcgQ29sbGlzaW9uc18xLkNvbGxpc2lvbnMoKTtcbiAgICAgICAgdGhpcy5jb2xvciA9IG5ldyBBbmltYXRhYmxlQ29sb3JfMS5BbmltYXRhYmxlQ29sb3IoKTtcbiAgICAgICAgdGhpcy5kZXN0cm95ID0gbmV3IERlc3Ryb3lfMS5EZXN0cm95KCk7XG4gICAgICAgIHRoaXMuZ3JhZGllbnQgPSBbXTtcbiAgICAgICAgdGhpcy5ncm91cHMgPSB7fTtcbiAgICAgICAgdGhpcy5saWZlID0gbmV3IExpZmVfMS5MaWZlKCk7XG4gICAgICAgIHRoaXMubGlua3MgPSBuZXcgTGlua3NfMS5MaW5rcygpO1xuICAgICAgICB0aGlzLm1vdmUgPSBuZXcgTW92ZV8xLk1vdmUoKTtcbiAgICAgICAgdGhpcy5udW1iZXIgPSBuZXcgUGFydGljbGVzTnVtYmVyXzEuUGFydGljbGVzTnVtYmVyKCk7XG4gICAgICAgIHRoaXMub3BhY2l0eSA9IG5ldyBPcGFjaXR5XzEuT3BhY2l0eSgpO1xuICAgICAgICB0aGlzLm9yYml0ID0gbmV3IE9yYml0XzEuT3JiaXQoKTtcbiAgICAgICAgdGhpcy5yZWR1Y2VEdXBsaWNhdGVzID0gZmFsc2U7XG4gICAgICAgIHRoaXMucmVwdWxzZSA9IG5ldyBSZXB1bHNlXzEuUmVwdWxzZSgpO1xuICAgICAgICB0aGlzLnJvbGwgPSBuZXcgUm9sbF8xLlJvbGwoKTtcbiAgICAgICAgdGhpcy5yb3RhdGUgPSBuZXcgUm90YXRlXzEuUm90YXRlKCk7XG4gICAgICAgIHRoaXMuc2hhZG93ID0gbmV3IFNoYWRvd18xLlNoYWRvdygpO1xuICAgICAgICB0aGlzLnNoYXBlID0gbmV3IFNoYXBlXzEuU2hhcGUoKTtcbiAgICAgICAgdGhpcy5zaXplID0gbmV3IFNpemVfMS5TaXplKCk7XG4gICAgICAgIHRoaXMuc3Ryb2tlID0gbmV3IFN0cm9rZV8xLlN0cm9rZSgpO1xuICAgICAgICB0aGlzLnRpbHQgPSBuZXcgVGlsdF8xLlRpbHQoKTtcbiAgICAgICAgdGhpcy50d2lua2xlID0gbmV3IFR3aW5rbGVfMS5Ud2lua2xlKCk7XG4gICAgICAgIHRoaXMud29iYmxlID0gbmV3IFdvYmJsZV8xLldvYmJsZSgpO1xuICAgICAgICB0aGlzLnpJbmRleCA9IG5ldyBaSW5kZXhfMS5aSW5kZXgoKTtcbiAgICB9XG4gICAgZ2V0IGxpbmVfbGlua2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5saW5rcztcbiAgICB9XG4gICAgc2V0IGxpbmVfbGlua2VkKHZhbHVlKSB7XG4gICAgICAgIHRoaXMubGlua3MgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IGxpbmVMaW5rZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxpbmtzO1xuICAgIH1cbiAgICBzZXQgbGluZUxpbmtlZCh2YWx1ZSkge1xuICAgICAgICB0aGlzLmxpbmtzID0gdmFsdWU7XG4gICAgfVxuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ib3VuY2UubG9hZChkYXRhLmJvdW5jZSk7XG4gICAgICAgIHRoaXMuY29sb3IubG9hZChBbmltYXRhYmxlQ29sb3JfMS5BbmltYXRhYmxlQ29sb3IuY3JlYXRlKHRoaXMuY29sb3IsIGRhdGEuY29sb3IpKTtcbiAgICAgICAgdGhpcy5kZXN0cm95LmxvYWQoZGF0YS5kZXN0cm95KTtcbiAgICAgICAgdGhpcy5saWZlLmxvYWQoZGF0YS5saWZlKTtcbiAgICAgICAgY29uc3QgbGlua3MgPSAoX2IgPSAoX2EgPSBkYXRhLmxpbmtzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBkYXRhLmxpbmVMaW5rZWQpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IGRhdGEubGluZV9saW5rZWQ7XG4gICAgICAgIGlmIChsaW5rcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmxpbmtzLmxvYWQobGlua3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmdyb3VwcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGdyb3VwIGluIGRhdGEuZ3JvdXBzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IGRhdGEuZ3JvdXBzW2dyb3VwXTtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ3JvdXBzW2dyb3VwXSA9ICgwLCBVdGlsc18xLmRlZXBFeHRlbmQpKChfYyA9IHRoaXMuZ3JvdXBzW2dyb3VwXSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDoge30sIGl0ZW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1vdmUubG9hZChkYXRhLm1vdmUpO1xuICAgICAgICB0aGlzLm51bWJlci5sb2FkKGRhdGEubnVtYmVyKTtcbiAgICAgICAgdGhpcy5vcGFjaXR5LmxvYWQoZGF0YS5vcGFjaXR5KTtcbiAgICAgICAgdGhpcy5vcmJpdC5sb2FkKGRhdGEub3JiaXQpO1xuICAgICAgICBpZiAoZGF0YS5yZWR1Y2VEdXBsaWNhdGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMucmVkdWNlRHVwbGljYXRlcyA9IGRhdGEucmVkdWNlRHVwbGljYXRlcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlcHVsc2UubG9hZChkYXRhLnJlcHVsc2UpO1xuICAgICAgICB0aGlzLnJvbGwubG9hZChkYXRhLnJvbGwpO1xuICAgICAgICB0aGlzLnJvdGF0ZS5sb2FkKGRhdGEucm90YXRlKTtcbiAgICAgICAgdGhpcy5zaGFwZS5sb2FkKGRhdGEuc2hhcGUpO1xuICAgICAgICB0aGlzLnNpemUubG9hZChkYXRhLnNpemUpO1xuICAgICAgICB0aGlzLnNoYWRvdy5sb2FkKGRhdGEuc2hhZG93KTtcbiAgICAgICAgdGhpcy50aWx0LmxvYWQoZGF0YS50aWx0KTtcbiAgICAgICAgdGhpcy50d2lua2xlLmxvYWQoZGF0YS50d2lua2xlKTtcbiAgICAgICAgdGhpcy53b2JibGUubG9hZChkYXRhLndvYmJsZSk7XG4gICAgICAgIHRoaXMuekluZGV4LmxvYWQoZGF0YS56SW5kZXgpO1xuICAgICAgICBjb25zdCBjb2xsaXNpb25zID0gKF9lID0gKF9kID0gZGF0YS5tb3ZlKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuY29sbGlzaW9ucykgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogKF9mID0gZGF0YS5tb3ZlKSA9PT0gbnVsbCB8fCBfZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2YuYm91bmNlO1xuICAgICAgICBpZiAoY29sbGlzaW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmNvbGxpc2lvbnMuZW5hYmxlID0gY29sbGlzaW9ucztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbGxpc2lvbnMubG9hZChkYXRhLmNvbGxpc2lvbnMpO1xuICAgICAgICBjb25zdCBzdHJva2VUb0xvYWQgPSAoX2cgPSBkYXRhLnN0cm9rZSkgIT09IG51bGwgJiYgX2cgIT09IHZvaWQgMCA/IF9nIDogKF9oID0gZGF0YS5zaGFwZSkgPT09IG51bGwgfHwgX2ggPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9oLnN0cm9rZTtcbiAgICAgICAgaWYgKHN0cm9rZVRvTG9hZCkge1xuICAgICAgICAgICAgaWYgKHN0cm9rZVRvTG9hZCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdHJva2UgPSBzdHJva2VUb0xvYWQubWFwKChzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRtcCA9IG5ldyBTdHJva2VfMS5TdHJva2UoKTtcbiAgICAgICAgICAgICAgICAgICAgdG1wLmxvYWQocyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0bXA7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdHJva2UgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0cm9rZSA9IG5ldyBTdHJva2VfMS5TdHJva2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5zdHJva2UubG9hZChzdHJva2VUb0xvYWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGdyYWRpZW50VG9Mb2FkID0gZGF0YS5ncmFkaWVudDtcbiAgICAgICAgaWYgKGdyYWRpZW50VG9Mb2FkKSB7XG4gICAgICAgICAgICBpZiAoZ3JhZGllbnRUb0xvYWQgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ3JhZGllbnQgPSBncmFkaWVudFRvTG9hZC5tYXAoKHMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdG1wID0gbmV3IEFuaW1hdGFibGVHcmFkaWVudF8xLkFuaW1hdGFibGVHcmFkaWVudCgpO1xuICAgICAgICAgICAgICAgICAgICB0bXAubG9hZChzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRtcDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmdyYWRpZW50IGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ncmFkaWVudCA9IG5ldyBBbmltYXRhYmxlR3JhZGllbnRfMS5BbmltYXRhYmxlR3JhZGllbnQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5ncmFkaWVudC5sb2FkKGdyYWRpZW50VG9Mb2FkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuUGFydGljbGVzT3B0aW9ucyA9IFBhcnRpY2xlc09wdGlvbnM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUmVwdWxzZSA9IHZvaWQgMDtcbmNvbnN0IFZhbHVlV2l0aFJhbmRvbV8xID0gcmVxdWlyZShcIi4uLy4uL1ZhbHVlV2l0aFJhbmRvbVwiKTtcbmNsYXNzIFJlcHVsc2UgZXh0ZW5kcyBWYWx1ZVdpdGhSYW5kb21fMS5WYWx1ZVdpdGhSYW5kb20ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kaXN0YW5jZSA9IDE7XG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSAxO1xuICAgICAgICB0aGlzLmZhY3RvciA9IDE7XG4gICAgICAgIHRoaXMuc3BlZWQgPSAxO1xuICAgIH1cbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgc3VwZXIubG9hZChkYXRhKTtcbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuZW5hYmxlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmVuYWJsZWQgPSBkYXRhLmVuYWJsZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuZGlzdGFuY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5kaXN0YW5jZSA9IGRhdGEuZGlzdGFuY2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuZHVyYXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5kdXJhdGlvbiA9IGRhdGEuZHVyYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuZmFjdG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZmFjdG9yID0gZGF0YS5mYWN0b3I7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuc3BlZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5zcGVlZCA9IGRhdGEuc3BlZWQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlJlcHVsc2UgPSBSZXB1bHNlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJvbGwgPSB2b2lkIDA7XG5jb25zdCBPcHRpb25zQ29sb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi9PcHRpb25zQ29sb3JcIik7XG5jb25zdCBSb2xsTGlnaHRfMSA9IHJlcXVpcmUoXCIuL1JvbGxMaWdodFwiKTtcbmNvbnN0IFV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vVXRpbHNcIik7XG5jb25zdCBFbnVtc18xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL0VudW1zXCIpO1xuY2xhc3MgUm9sbCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZGFya2VuID0gbmV3IFJvbGxMaWdodF8xLlJvbGxMaWdodCgpO1xuICAgICAgICB0aGlzLmVuYWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmVubGlnaHRlbiA9IG5ldyBSb2xsTGlnaHRfMS5Sb2xsTGlnaHQoKTtcbiAgICAgICAgdGhpcy5tb2RlID0gRW51bXNfMS5Sb2xsTW9kZS52ZXJ0aWNhbDtcbiAgICAgICAgdGhpcy5zcGVlZCA9IDI1O1xuICAgIH1cbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuYmFja0NvbG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYmFja0NvbG9yID0gT3B0aW9uc0NvbG9yXzEuT3B0aW9uc0NvbG9yLmNyZWF0ZSh0aGlzLmJhY2tDb2xvciwgZGF0YS5iYWNrQ29sb3IpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGFya2VuLmxvYWQoZGF0YS5kYXJrZW4pO1xuICAgICAgICBpZiAoZGF0YS5lbmFibGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5lbmFibGUgPSBkYXRhLmVuYWJsZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVubGlnaHRlbi5sb2FkKGRhdGEuZW5saWdodGVuKTtcbiAgICAgICAgaWYgKGRhdGEubW9kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLm1vZGUgPSBkYXRhLm1vZGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuc3BlZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5zcGVlZCA9ICgwLCBVdGlsc18xLnNldFJhbmdlVmFsdWUpKGRhdGEuc3BlZWQpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5Sb2xsID0gUm9sbDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Sb2xsTGlnaHQgPSB2b2lkIDA7XG5jbGFzcyBSb2xsTGlnaHQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmVuYWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnZhbHVlID0gMDtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmVuYWJsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmVuYWJsZSA9IGRhdGEuZW5hYmxlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLnZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBkYXRhLnZhbHVlO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5Sb2xsTGlnaHQgPSBSb2xsTGlnaHQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUm90YXRlID0gdm9pZCAwO1xuY29uc3QgUm90YXRlQW5pbWF0aW9uXzEgPSByZXF1aXJlKFwiLi9Sb3RhdGVBbmltYXRpb25cIik7XG5jb25zdCBFbnVtc18xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL0VudW1zXCIpO1xuY29uc3QgVmFsdWVXaXRoUmFuZG9tXzEgPSByZXF1aXJlKFwiLi4vLi4vVmFsdWVXaXRoUmFuZG9tXCIpO1xuY2xhc3MgUm90YXRlIGV4dGVuZHMgVmFsdWVXaXRoUmFuZG9tXzEuVmFsdWVXaXRoUmFuZG9tIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5hbmltYXRpb24gPSBuZXcgUm90YXRlQW5pbWF0aW9uXzEuUm90YXRlQW5pbWF0aW9uKCk7XG4gICAgICAgIHRoaXMuZGlyZWN0aW9uID0gRW51bXNfMS5Sb3RhdGVEaXJlY3Rpb24uY2xvY2t3aXNlO1xuICAgICAgICB0aGlzLnBhdGggPSBmYWxzZTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IDA7XG4gICAgfVxuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzdXBlci5sb2FkKGRhdGEpO1xuICAgICAgICBpZiAoZGF0YS5kaXJlY3Rpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSBkYXRhLmRpcmVjdGlvbjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFuaW1hdGlvbi5sb2FkKGRhdGEuYW5pbWF0aW9uKTtcbiAgICAgICAgaWYgKGRhdGEucGF0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnBhdGggPSBkYXRhLnBhdGg7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlJvdGF0ZSA9IFJvdGF0ZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Sb3RhdGVBbmltYXRpb24gPSB2b2lkIDA7XG5jbGFzcyBSb3RhdGVBbmltYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmVuYWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNwZWVkID0gMDtcbiAgICAgICAgdGhpcy5zeW5jID0gZmFsc2U7XG4gICAgfVxuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuZW5hYmxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZW5hYmxlID0gZGF0YS5lbmFibGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuc3BlZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5zcGVlZCA9IGRhdGEuc3BlZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuc3luYyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnN5bmMgPSBkYXRhLnN5bmM7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlJvdGF0ZUFuaW1hdGlvbiA9IFJvdGF0ZUFuaW1hdGlvbjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TaGFkb3cgPSB2b2lkIDA7XG5jb25zdCBPcHRpb25zQ29sb3JfMSA9IHJlcXVpcmUoXCIuLi9PcHRpb25zQ29sb3JcIik7XG5jbGFzcyBTaGFkb3cge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmJsdXIgPSAwO1xuICAgICAgICB0aGlzLmNvbG9yID0gbmV3IE9wdGlvbnNDb2xvcl8xLk9wdGlvbnNDb2xvcigpO1xuICAgICAgICB0aGlzLmVuYWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLm9mZnNldCA9IHtcbiAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICB5OiAwLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNvbG9yLnZhbHVlID0gXCIjMDAwMDAwXCI7XG4gICAgfVxuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuYmx1ciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmJsdXIgPSBkYXRhLmJsdXI7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb2xvciA9IE9wdGlvbnNDb2xvcl8xLk9wdGlvbnNDb2xvci5jcmVhdGUodGhpcy5jb2xvciwgZGF0YS5jb2xvcik7XG4gICAgICAgIGlmIChkYXRhLmVuYWJsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmVuYWJsZSA9IGRhdGEuZW5hYmxlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLm9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEub2Zmc2V0LnggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5vZmZzZXQueCA9IGRhdGEub2Zmc2V0Lng7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEub2Zmc2V0LnkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5vZmZzZXQueSA9IGRhdGEub2Zmc2V0Lnk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlNoYWRvdyA9IFNoYWRvdztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TaGFwZSA9IHZvaWQgMDtcbmNvbnN0IEVudW1zXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vRW51bXNcIik7XG5jb25zdCBVdGlsc18xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL1V0aWxzXCIpO1xuY2xhc3MgU2hhcGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7fTtcbiAgICAgICAgdGhpcy50eXBlID0gRW51bXNfMS5TaGFwZVR5cGUuY2lyY2xlO1xuICAgIH1cbiAgICBnZXQgaW1hZ2UoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuICgoX2EgPSB0aGlzLm9wdGlvbnNbRW51bXNfMS5TaGFwZVR5cGUuaW1hZ2VdKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0aGlzLm9wdGlvbnNbRW51bXNfMS5TaGFwZVR5cGUuaW1hZ2VzXSk7XG4gICAgfVxuICAgIHNldCBpbWFnZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLm9wdGlvbnNbRW51bXNfMS5TaGFwZVR5cGUuaW1hZ2VdID0gdmFsdWU7XG4gICAgICAgIHRoaXMub3B0aW9uc1tFbnVtc18xLlNoYXBlVHlwZS5pbWFnZXNdID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBjdXN0b20oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnM7XG4gICAgfVxuICAgIHNldCBjdXN0b20odmFsdWUpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBpbWFnZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmltYWdlO1xuICAgIH1cbiAgICBzZXQgaW1hZ2VzKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuaW1hZ2UgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IHN0cm9rZSgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBzZXQgc3Ryb2tlKF92YWx1ZSkge1xuICAgIH1cbiAgICBnZXQgY2hhcmFjdGVyKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoKF9hID0gdGhpcy5vcHRpb25zW0VudW1zXzEuU2hhcGVUeXBlLmNoYXJhY3Rlcl0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRoaXMub3B0aW9uc1tFbnVtc18xLlNoYXBlVHlwZS5jaGFyXSk7XG4gICAgfVxuICAgIHNldCBjaGFyYWN0ZXIodmFsdWUpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zW0VudW1zXzEuU2hhcGVUeXBlLmNoYXJhY3Rlcl0gPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5vcHRpb25zW0VudW1zXzEuU2hhcGVUeXBlLmNoYXJdID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBwb2x5Z29uKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoKF9hID0gdGhpcy5vcHRpb25zW0VudW1zXzEuU2hhcGVUeXBlLnBvbHlnb25dKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0aGlzLm9wdGlvbnNbRW51bXNfMS5TaGFwZVR5cGUuc3Rhcl0pO1xuICAgIH1cbiAgICBzZXQgcG9seWdvbih2YWx1ZSkge1xuICAgICAgICB0aGlzLm9wdGlvbnNbRW51bXNfMS5TaGFwZVR5cGUucG9seWdvbl0gPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5vcHRpb25zW0VudW1zXzEuU2hhcGVUeXBlLnN0YXJdID0gdmFsdWU7XG4gICAgfVxuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSAoX2EgPSBkYXRhLm9wdGlvbnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGRhdGEuY3VzdG9tO1xuICAgICAgICBpZiAob3B0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHNoYXBlIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gb3B0aW9uc1tzaGFwZV07XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnNbc2hhcGVdID0gKDAsIFV0aWxzXzEuZGVlcEV4dGVuZCkoKF9iID0gdGhpcy5vcHRpb25zW3NoYXBlXSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDoge30sIGl0ZW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxvYWRTaGFwZShkYXRhLmNoYXJhY3RlciwgRW51bXNfMS5TaGFwZVR5cGUuY2hhcmFjdGVyLCBFbnVtc18xLlNoYXBlVHlwZS5jaGFyLCB0cnVlKTtcbiAgICAgICAgdGhpcy5sb2FkU2hhcGUoZGF0YS5wb2x5Z29uLCBFbnVtc18xLlNoYXBlVHlwZS5wb2x5Z29uLCBFbnVtc18xLlNoYXBlVHlwZS5zdGFyLCBmYWxzZSk7XG4gICAgICAgIHRoaXMubG9hZFNoYXBlKChfYyA9IGRhdGEuaW1hZ2UpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IGRhdGEuaW1hZ2VzLCBFbnVtc18xLlNoYXBlVHlwZS5pbWFnZSwgRW51bXNfMS5TaGFwZVR5cGUuaW1hZ2VzLCB0cnVlKTtcbiAgICAgICAgaWYgKGRhdGEudHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnR5cGUgPSBkYXRhLnR5cGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbG9hZFNoYXBlKGl0ZW0sIG1haW5LZXksIGFsdEtleSwgYWx0T3ZlcnJpZGUpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgICAgICBpZiAoaXRlbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgaWYgKCEodGhpcy5vcHRpb25zW21haW5LZXldIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zW21haW5LZXldID0gW107XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnNbYWx0S2V5XSB8fCBhbHRPdmVycmlkZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnNbYWx0S2V5XSA9IFtdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMub3B0aW9uc1ttYWluS2V5XSA9ICgwLCBVdGlsc18xLmRlZXBFeHRlbmQpKChfYSA9IHRoaXMub3B0aW9uc1ttYWluS2V5XSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW10sIGl0ZW0pO1xuICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnNbYWx0S2V5XSB8fCBhbHRPdmVycmlkZSkge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9uc1thbHRLZXldID0gKDAsIFV0aWxzXzEuZGVlcEV4dGVuZCkoKF9iID0gdGhpcy5vcHRpb25zW2FsdEtleV0pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFtdLCBpdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnNbbWFpbktleV0gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9uc1ttYWluS2V5XSA9IHt9O1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zW2FsdEtleV0gfHwgYWx0T3ZlcnJpZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zW2FsdEtleV0gPSB7fTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnNbbWFpbktleV0gPSAoMCwgVXRpbHNfMS5kZWVwRXh0ZW5kKSgoX2MgPSB0aGlzLm9wdGlvbnNbbWFpbktleV0pICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IHt9LCBpdGVtKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zW2FsdEtleV0gfHwgYWx0T3ZlcnJpZGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnNbYWx0S2V5XSA9ICgwLCBVdGlsc18xLmRlZXBFeHRlbmQpKChfZCA9IHRoaXMub3B0aW9uc1thbHRLZXldKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiB7fSwgaXRlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlNoYXBlID0gU2hhcGU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU2l6ZSA9IHZvaWQgMDtcbmNvbnN0IFNpemVBbmltYXRpb25fMSA9IHJlcXVpcmUoXCIuL1NpemVBbmltYXRpb25cIik7XG5jb25zdCBWYWx1ZVdpdGhSYW5kb21fMSA9IHJlcXVpcmUoXCIuLi8uLi9WYWx1ZVdpdGhSYW5kb21cIik7XG5jb25zdCBVdGlsc18xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL1V0aWxzXCIpO1xuY2xhc3MgU2l6ZSBleHRlbmRzIFZhbHVlV2l0aFJhbmRvbV8xLlZhbHVlV2l0aFJhbmRvbSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uID0gbmV3IFNpemVBbmltYXRpb25fMS5TaXplQW5pbWF0aW9uKCk7XG4gICAgICAgIHRoaXMucmFuZG9tLm1pbmltdW1WYWx1ZSA9IDE7XG4gICAgICAgIHRoaXMudmFsdWUgPSAzO1xuICAgIH1cbiAgICBnZXQgYW5pbSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYW5pbWF0aW9uO1xuICAgIH1cbiAgICBzZXQgYW5pbSh2YWx1ZSkge1xuICAgICAgICB0aGlzLmFuaW1hdGlvbiA9IHZhbHVlO1xuICAgIH1cbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzdXBlci5sb2FkKGRhdGEpO1xuICAgICAgICBjb25zdCBhbmltYXRpb24gPSAoX2EgPSBkYXRhLmFuaW1hdGlvbikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZGF0YS5hbmltO1xuICAgICAgICBpZiAoYW5pbWF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uLmxvYWQoYW5pbWF0aW9uKTtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSAoMCwgVXRpbHNfMS5zZXRSYW5nZVZhbHVlKSh0aGlzLnZhbHVlLCB0aGlzLmFuaW1hdGlvbi5lbmFibGUgPyB0aGlzLmFuaW1hdGlvbi5taW5pbXVtVmFsdWUgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5TaXplID0gU2l6ZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TaXplQW5pbWF0aW9uID0gdm9pZCAwO1xuY29uc3QgRW51bXNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9FbnVtc1wiKTtcbmNvbnN0IEFuaW1hdGlvbk9wdGlvbnNfMSA9IHJlcXVpcmUoXCIuLi8uLi9BbmltYXRpb25PcHRpb25zXCIpO1xuY2xhc3MgU2l6ZUFuaW1hdGlvbiBleHRlbmRzIEFuaW1hdGlvbk9wdGlvbnNfMS5BbmltYXRpb25PcHRpb25zIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5kZXN0cm95ID0gRW51bXNfMS5EZXN0cm95VHlwZS5ub25lO1xuICAgICAgICB0aGlzLmVuYWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNwZWVkID0gNTtcbiAgICAgICAgdGhpcy5zdGFydFZhbHVlID0gRW51bXNfMS5TdGFydFZhbHVlVHlwZS5yYW5kb207XG4gICAgICAgIHRoaXMuc3luYyA9IGZhbHNlO1xuICAgIH1cbiAgICBnZXQgc2l6ZV9taW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbmltdW1WYWx1ZTtcbiAgICB9XG4gICAgc2V0IHNpemVfbWluKHZhbHVlKSB7XG4gICAgICAgIHRoaXMubWluaW11bVZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzdXBlci5sb2FkKGRhdGEpO1xuICAgICAgICBpZiAoZGF0YS5kZXN0cm95ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdHJveSA9IGRhdGEuZGVzdHJveTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5lbmFibGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5lbmFibGUgPSBkYXRhLmVuYWJsZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1pbmltdW1WYWx1ZSA9IChfYSA9IGRhdGEubWluaW11bVZhbHVlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBkYXRhLnNpemVfbWluO1xuICAgICAgICBpZiAoZGF0YS5zcGVlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnNwZWVkID0gZGF0YS5zcGVlZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5zdGFydFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRWYWx1ZSA9IGRhdGEuc3RhcnRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5zeW5jICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc3luYyA9IGRhdGEuc3luYztcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuU2l6ZUFuaW1hdGlvbiA9IFNpemVBbmltYXRpb247XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3Ryb2tlID0gdm9pZCAwO1xuY29uc3QgQW5pbWF0YWJsZUNvbG9yXzEgPSByZXF1aXJlKFwiLi4vQW5pbWF0YWJsZUNvbG9yXCIpO1xuY2xhc3MgU3Ryb2tlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy53aWR0aCA9IDA7XG4gICAgfVxuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuY29sb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5jb2xvciA9IEFuaW1hdGFibGVDb2xvcl8xLkFuaW1hdGFibGVDb2xvci5jcmVhdGUodGhpcy5jb2xvciwgZGF0YS5jb2xvcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEud2lkdGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy53aWR0aCA9IGRhdGEud2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEub3BhY2l0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLm9wYWNpdHkgPSBkYXRhLm9wYWNpdHk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlN0cm9rZSA9IFN0cm9rZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UaWx0ID0gdm9pZCAwO1xuY29uc3QgVGlsdEFuaW1hdGlvbl8xID0gcmVxdWlyZShcIi4vVGlsdEFuaW1hdGlvblwiKTtcbmNvbnN0IEVudW1zXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vRW51bXNcIik7XG5jb25zdCBWYWx1ZVdpdGhSYW5kb21fMSA9IHJlcXVpcmUoXCIuLi8uLi9WYWx1ZVdpdGhSYW5kb21cIik7XG5jbGFzcyBUaWx0IGV4dGVuZHMgVmFsdWVXaXRoUmFuZG9tXzEuVmFsdWVXaXRoUmFuZG9tIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5hbmltYXRpb24gPSBuZXcgVGlsdEFuaW1hdGlvbl8xLlRpbHRBbmltYXRpb24oKTtcbiAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSBFbnVtc18xLlRpbHREaXJlY3Rpb24uY2xvY2t3aXNlO1xuICAgICAgICB0aGlzLmVuYWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnZhbHVlID0gMDtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyLmxvYWQoZGF0YSk7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uLmxvYWQoZGF0YS5hbmltYXRpb24pO1xuICAgICAgICBpZiAoZGF0YS5kaXJlY3Rpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSBkYXRhLmRpcmVjdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5lbmFibGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5lbmFibGUgPSBkYXRhLmVuYWJsZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuVGlsdCA9IFRpbHQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVGlsdEFuaW1hdGlvbiA9IHZvaWQgMDtcbmNsYXNzIFRpbHRBbmltYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmVuYWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNwZWVkID0gMDtcbiAgICAgICAgdGhpcy5zeW5jID0gZmFsc2U7XG4gICAgfVxuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuZW5hYmxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZW5hYmxlID0gZGF0YS5lbmFibGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuc3BlZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5zcGVlZCA9IGRhdGEuc3BlZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuc3luYyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnN5bmMgPSBkYXRhLnN5bmM7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlRpbHRBbmltYXRpb24gPSBUaWx0QW5pbWF0aW9uO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlR3aW5rbGUgPSB2b2lkIDA7XG5jb25zdCBUd2lua2xlVmFsdWVzXzEgPSByZXF1aXJlKFwiLi9Ud2lua2xlVmFsdWVzXCIpO1xuY2xhc3MgVHdpbmtsZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMubGluZXMgPSBuZXcgVHdpbmtsZVZhbHVlc18xLlR3aW5rbGVWYWx1ZXMoKTtcbiAgICAgICAgdGhpcy5wYXJ0aWNsZXMgPSBuZXcgVHdpbmtsZVZhbHVlc18xLlR3aW5rbGVWYWx1ZXMoKTtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxpbmVzLmxvYWQoZGF0YS5saW5lcyk7XG4gICAgICAgIHRoaXMucGFydGljbGVzLmxvYWQoZGF0YS5wYXJ0aWNsZXMpO1xuICAgIH1cbn1cbmV4cG9ydHMuVHdpbmtsZSA9IFR3aW5rbGU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVHdpbmtsZVZhbHVlcyA9IHZvaWQgMDtcbmNvbnN0IE9wdGlvbnNDb2xvcl8xID0gcmVxdWlyZShcIi4uLy4uL09wdGlvbnNDb2xvclwiKTtcbmNsYXNzIFR3aW5rbGVWYWx1ZXMge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmVuYWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmZyZXF1ZW5jeSA9IDAuMDU7XG4gICAgICAgIHRoaXMub3BhY2l0eSA9IDE7XG4gICAgfVxuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuY29sb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5jb2xvciA9IE9wdGlvbnNDb2xvcl8xLk9wdGlvbnNDb2xvci5jcmVhdGUodGhpcy5jb2xvciwgZGF0YS5jb2xvcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuZW5hYmxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZW5hYmxlID0gZGF0YS5lbmFibGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuZnJlcXVlbmN5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZnJlcXVlbmN5ID0gZGF0YS5mcmVxdWVuY3k7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEub3BhY2l0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLm9wYWNpdHkgPSBkYXRhLm9wYWNpdHk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlR3aW5rbGVWYWx1ZXMgPSBUd2lua2xlVmFsdWVzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLldvYmJsZSA9IHZvaWQgMDtcbmNvbnN0IFV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vVXRpbHNcIik7XG5jbGFzcyBXb2JibGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmRpc3RhbmNlID0gNTtcbiAgICAgICAgdGhpcy5lbmFibGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zcGVlZCA9IDUwO1xuICAgIH1cbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuZGlzdGFuY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5kaXN0YW5jZSA9ICgwLCBVdGlsc18xLnNldFJhbmdlVmFsdWUpKGRhdGEuZGlzdGFuY2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmVuYWJsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmVuYWJsZSA9IGRhdGEuZW5hYmxlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLnNwZWVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc3BlZWQgPSAoMCwgVXRpbHNfMS5zZXRSYW5nZVZhbHVlKShkYXRhLnNwZWVkKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuV29iYmxlID0gV29iYmxlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlpJbmRleCA9IHZvaWQgMDtcbmNvbnN0IFZhbHVlV2l0aFJhbmRvbV8xID0gcmVxdWlyZShcIi4uLy4uL1ZhbHVlV2l0aFJhbmRvbVwiKTtcbmNsYXNzIFpJbmRleCBleHRlbmRzIFZhbHVlV2l0aFJhbmRvbV8xLlZhbHVlV2l0aFJhbmRvbSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMub3BhY2l0eVJhdGUgPSAxO1xuICAgICAgICB0aGlzLnNpemVSYXRlID0gMTtcbiAgICAgICAgdGhpcy52ZWxvY2l0eVJhdGUgPSAxO1xuICAgIH1cbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgc3VwZXIubG9hZChkYXRhKTtcbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEub3BhY2l0eVJhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5vcGFjaXR5UmF0ZSA9IGRhdGEub3BhY2l0eVJhdGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuc2l6ZVJhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5zaXplUmF0ZSA9IGRhdGEuc2l6ZVJhdGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEudmVsb2NpdHlSYXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMudmVsb2NpdHlSYXRlID0gZGF0YS52ZWxvY2l0eVJhdGU7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlpJbmRleCA9IFpJbmRleDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SYW5kb20gPSB2b2lkIDA7XG5jbGFzcyBSYW5kb20ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmVuYWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLm1pbmltdW1WYWx1ZSA9IDA7XG4gICAgfVxuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5lbmFibGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5lbmFibGUgPSBkYXRhLmVuYWJsZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5taW5pbXVtVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5taW5pbXVtVmFsdWUgPSBkYXRhLm1pbmltdW1WYWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuUmFuZG9tID0gUmFuZG9tO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJlc3BvbnNpdmUgPSB2b2lkIDA7XG5jb25zdCBVdGlsc18xID0gcmVxdWlyZShcIi4uLy4uL1V0aWxzXCIpO1xuY29uc3QgRW51bXNfMSA9IHJlcXVpcmUoXCIuLi8uLi9FbnVtc1wiKTtcbmNsYXNzIFJlc3BvbnNpdmUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLm1heFdpZHRoID0gSW5maW5pdHk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHt9O1xuICAgICAgICB0aGlzLm1vZGUgPSBFbnVtc18xLlJlc3BvbnNpdmVNb2RlLmNhbnZhcztcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLm1heFdpZHRoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMubWF4V2lkdGggPSBkYXRhLm1heFdpZHRoO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLm1vZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKGRhdGEubW9kZSA9PT0gRW51bXNfMS5SZXNwb25zaXZlTW9kZS5zY3JlZW4pIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGUgPSBFbnVtc18xLlJlc3BvbnNpdmVNb2RlLnNjcmVlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMubW9kZSA9IEVudW1zXzEuUmVzcG9uc2l2ZU1vZGUuY2FudmFzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLm9wdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gKDAsIFV0aWxzXzEuZGVlcEV4dGVuZCkoe30sIGRhdGEub3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlJlc3BvbnNpdmUgPSBSZXNwb25zaXZlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRoZW1lID0gdm9pZCAwO1xuY29uc3QgVXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9VdGlsc1wiKTtcbmNvbnN0IFRoZW1lRGVmYXVsdF8xID0gcmVxdWlyZShcIi4vVGhlbWVEZWZhdWx0XCIpO1xuY2xhc3MgVGhlbWUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLm5hbWUgPSBcIlwiO1xuICAgICAgICB0aGlzLmRlZmF1bHQgPSBuZXcgVGhlbWVEZWZhdWx0XzEuVGhlbWVEZWZhdWx0KCk7XG4gICAgfVxuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEubmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBkYXRhLm5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZWZhdWx0LmxvYWQoZGF0YS5kZWZhdWx0KTtcbiAgICAgICAgaWYgKGRhdGEub3B0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSAoMCwgVXRpbHNfMS5kZWVwRXh0ZW5kKSh7fSwgZGF0YS5vcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuVGhlbWUgPSBUaGVtZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UaGVtZURlZmF1bHQgPSB2b2lkIDA7XG5jb25zdCBFbnVtc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL0VudW1zXCIpO1xuY2xhc3MgVGhlbWVEZWZhdWx0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5hdXRvID0gZmFsc2U7XG4gICAgICAgIHRoaXMubW9kZSA9IEVudW1zXzEuVGhlbWVNb2RlLmFueTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IGZhbHNlO1xuICAgIH1cbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuYXV0byAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmF1dG8gPSBkYXRhLmF1dG87XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEubW9kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLm1vZGUgPSBkYXRhLm1vZGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEudmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IGRhdGEudmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlRoZW1lRGVmYXVsdCA9IFRoZW1lRGVmYXVsdDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5WYWx1ZVdpdGhSYW5kb20gPSB2b2lkIDA7XG5jb25zdCBSYW5kb21fMSA9IHJlcXVpcmUoXCIuL1JhbmRvbVwiKTtcbmNvbnN0IFV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vVXRpbHNcIik7XG5jbGFzcyBWYWx1ZVdpdGhSYW5kb20ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnJhbmRvbSA9IG5ldyBSYW5kb21fMS5SYW5kb20oKTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IDA7XG4gICAgfVxuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGRhdGEucmFuZG9tID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgdGhpcy5yYW5kb20uZW5hYmxlID0gZGF0YS5yYW5kb207XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJhbmRvbS5sb2FkKGRhdGEucmFuZG9tKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS52YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gKDAsIFV0aWxzXzEuc2V0UmFuZ2VWYWx1ZSkoZGF0YS52YWx1ZSwgdGhpcy5yYW5kb20uZW5hYmxlID8gdGhpcy5yYW5kb20ubWluaW11bVZhbHVlIDogdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuVmFsdWVXaXRoUmFuZG9tID0gVmFsdWVXaXRoUmFuZG9tO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFic29yYmVySW5zdGFuY2UgPSB2b2lkIDA7XG5jb25zdCBVdGlsc18xID0gcmVxdWlyZShcIi4uLy4uL1V0aWxzXCIpO1xuY29uc3QgVmVjdG9yXzEgPSByZXF1aXJlKFwiLi4vLi4vQ29yZS9QYXJ0aWNsZS9WZWN0b3JcIik7XG5jb25zdCBFbnVtc18xID0gcmVxdWlyZShcIi4uLy4uL0VudW1zXCIpO1xuY2xhc3MgQWJzb3JiZXJJbnN0YW5jZSB7XG4gICAgY29uc3RydWN0b3IoYWJzb3JiZXJzLCBjb250YWluZXIsIG9wdGlvbnMsIHBvc2l0aW9uKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2U7XG4gICAgICAgIHRoaXMuYWJzb3JiZXJzID0gYWJzb3JiZXJzO1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgICAgdGhpcy5pbml0aWFsUG9zaXRpb24gPSBwb3NpdGlvbiA/IFZlY3Rvcl8xLlZlY3Rvci5jcmVhdGUocG9zaXRpb24ueCwgcG9zaXRpb24ueSkgOiB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuZHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5vcHRpb25zLm5hbWU7XG4gICAgICAgIHRoaXMub3BhY2l0eSA9IHRoaXMub3B0aW9ucy5vcGFjaXR5O1xuICAgICAgICB0aGlzLnNpemUgPSAoMCwgVXRpbHNfMS5nZXRSYW5nZVZhbHVlKShvcHRpb25zLnNpemUudmFsdWUpICogY29udGFpbmVyLnJldGluYS5waXhlbFJhdGlvO1xuICAgICAgICB0aGlzLm1hc3MgPSB0aGlzLnNpemUgKiBvcHRpb25zLnNpemUuZGVuc2l0eSAqIGNvbnRhaW5lci5yZXRpbmEucmVkdWNlRmFjdG9yO1xuICAgICAgICBjb25zdCBsaW1pdCA9IG9wdGlvbnMuc2l6ZS5saW1pdDtcbiAgICAgICAgdGhpcy5saW1pdCA9XG4gICAgICAgICAgICB0eXBlb2YgbGltaXQgPT09IFwibnVtYmVyXCJcbiAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiBsaW1pdCAqIGNvbnRhaW5lci5yZXRpbmEucGl4ZWxSYXRpbyAqIGNvbnRhaW5lci5yZXRpbmEucmVkdWNlRmFjdG9yLFxuICAgICAgICAgICAgICAgICAgICBtYXNzOiAwLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAoKF9hID0gbGltaXQgPT09IG51bGwgfHwgbGltaXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGxpbWl0LnJhZGl1cykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMCkgKiBjb250YWluZXIucmV0aW5hLnBpeGVsUmF0aW8gKiBjb250YWluZXIucmV0aW5hLnJlZHVjZUZhY3RvcixcbiAgICAgICAgICAgICAgICAgICAgbWFzczogKF9iID0gbGltaXQgPT09IG51bGwgfHwgbGltaXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGxpbWl0Lm1hc3MpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IDAsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgY29uc3QgY29sb3IgPSB0eXBlb2Ygb3B0aW9ucy5jb2xvciA9PT0gXCJzdHJpbmdcIiA/IHsgdmFsdWU6IG9wdGlvbnMuY29sb3IgfSA6IG9wdGlvbnMuY29sb3I7XG4gICAgICAgIHRoaXMuY29sb3IgPSAoX2MgPSAoMCwgVXRpbHNfMS5jb2xvclRvUmdiKShjb2xvcikpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IHtcbiAgICAgICAgICAgIGI6IDAsXG4gICAgICAgICAgICBnOiAwLFxuICAgICAgICAgICAgcjogMCxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IChfZSA9IChfZCA9IHRoaXMuaW5pdGlhbFBvc2l0aW9uKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuY29weSgpKSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiB0aGlzLmNhbGNQb3NpdGlvbigpO1xuICAgIH1cbiAgICBhdHRyYWN0KHBhcnRpY2xlKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBpZiAob3B0aW9ucy5kcmFnZ2FibGUpIHtcbiAgICAgICAgICAgIGNvbnN0IG1vdXNlID0gY29udGFpbmVyLmludGVyYWN0aXZpdHkubW91c2U7XG4gICAgICAgICAgICBpZiAobW91c2UuY2xpY2tpbmcgJiYgbW91c2UuZG93blBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbW91c2VEaXN0ID0gKDAsIFV0aWxzXzEuZ2V0RGlzdGFuY2UpKHRoaXMucG9zaXRpb24sIG1vdXNlLmRvd25Qb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgaWYgKG1vdXNlRGlzdCA8PSB0aGlzLnNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmFnZ2luZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuZHJhZ2dpbmcgJiYgbW91c2UucG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uLnggPSBtb3VzZS5wb3NpdGlvbi54O1xuICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb24ueSA9IG1vdXNlLnBvc2l0aW9uLnk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcG9zID0gcGFydGljbGUuZ2V0UG9zaXRpb24oKTtcbiAgICAgICAgY29uc3QgeyBkeCwgZHksIGRpc3RhbmNlIH0gPSAoMCwgVXRpbHNfMS5nZXREaXN0YW5jZXMpKHRoaXMucG9zaXRpb24sIHBvcyk7XG4gICAgICAgIGNvbnN0IHYgPSBWZWN0b3JfMS5WZWN0b3IuY3JlYXRlKGR4LCBkeSk7XG4gICAgICAgIHYubGVuZ3RoID0gKHRoaXMubWFzcyAvIE1hdGgucG93KGRpc3RhbmNlLCAyKSkgKiBjb250YWluZXIucmV0aW5hLnJlZHVjZUZhY3RvcjtcbiAgICAgICAgaWYgKGRpc3RhbmNlIDwgdGhpcy5zaXplICsgcGFydGljbGUuZ2V0UmFkaXVzKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHNpemVGYWN0b3IgPSBwYXJ0aWNsZS5nZXRSYWRpdXMoKSAqIDAuMDMzICogY29udGFpbmVyLnJldGluYS5waXhlbFJhdGlvO1xuICAgICAgICAgICAgaWYgKCh0aGlzLnNpemUgPiBwYXJ0aWNsZS5nZXRSYWRpdXMoKSAmJiBkaXN0YW5jZSA8IHRoaXMuc2l6ZSAtIHBhcnRpY2xlLmdldFJhZGl1cygpKSB8fFxuICAgICAgICAgICAgICAgIChwYXJ0aWNsZS5hYnNvcmJlck9yYml0ICE9PSB1bmRlZmluZWQgJiYgcGFydGljbGUuYWJzb3JiZXJPcmJpdC5sZW5ndGggPCAwKSkge1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmRlc3Ryb3kpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFydGljbGUuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGFydGljbGUubmVlZHNOZXdQb3NpdGlvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUGFydGljbGVQb3NpdGlvbihwYXJ0aWNsZSwgdik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZGVzdHJveSkge1xuICAgICAgICAgICAgICAgICAgICBwYXJ0aWNsZS5zaXplLnZhbHVlIC09IHNpemVGYWN0b3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUGFydGljbGVQb3NpdGlvbihwYXJ0aWNsZSwgdik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5saW1pdC5yYWRpdXMgPD0gMCB8fCB0aGlzLnNpemUgPCB0aGlzLmxpbWl0LnJhZGl1cykge1xuICAgICAgICAgICAgICAgIHRoaXMuc2l6ZSArPSBzaXplRmFjdG9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMubGltaXQubWFzcyA8PSAwIHx8IHRoaXMubWFzcyA8IHRoaXMubGltaXQubWFzcykge1xuICAgICAgICAgICAgICAgIHRoaXMubWFzcyArPSBzaXplRmFjdG9yICogdGhpcy5vcHRpb25zLnNpemUuZGVuc2l0eSAqIGNvbnRhaW5lci5yZXRpbmEucmVkdWNlRmFjdG9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVQYXJ0aWNsZVBvc2l0aW9uKHBhcnRpY2xlLCB2KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXNpemUoKSB7XG4gICAgICAgIGNvbnN0IGluaXRpYWxQb3NpdGlvbiA9IHRoaXMuaW5pdGlhbFBvc2l0aW9uO1xuICAgICAgICB0aGlzLnBvc2l0aW9uID1cbiAgICAgICAgICAgIGluaXRpYWxQb3NpdGlvbiAmJiAoMCwgVXRpbHNfMS5pc1BvaW50SW5zaWRlKShpbml0aWFsUG9zaXRpb24sIHRoaXMuY29udGFpbmVyLmNhbnZhcy5zaXplKVxuICAgICAgICAgICAgICAgID8gaW5pdGlhbFBvc2l0aW9uXG4gICAgICAgICAgICAgICAgOiB0aGlzLmNhbGNQb3NpdGlvbigpO1xuICAgIH1cbiAgICBkcmF3KGNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dC50cmFuc2xhdGUodGhpcy5wb3NpdGlvbi54LCB0aGlzLnBvc2l0aW9uLnkpO1xuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICBjb250ZXh0LmFyYygwLCAwLCB0aGlzLnNpemUsIDAsIE1hdGguUEkgKiAyLCBmYWxzZSk7XG4gICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gKDAsIFV0aWxzXzEuZ2V0U3R5bGVGcm9tUmdiKSh0aGlzLmNvbG9yLCB0aGlzLm9wYWNpdHkpO1xuICAgICAgICBjb250ZXh0LmZpbGwoKTtcbiAgICB9XG4gICAgY2FsY1Bvc2l0aW9uKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcjtcbiAgICAgICAgY29uc3QgcGVyY2VudFBvc2l0aW9uID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uO1xuICAgICAgICByZXR1cm4gVmVjdG9yXzEuVmVjdG9yLmNyZWF0ZSgoKChfYSA9IHBlcmNlbnRQb3NpdGlvbiA9PT0gbnVsbCB8fCBwZXJjZW50UG9zaXRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBlcmNlbnRQb3NpdGlvbi54KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBNYXRoLnJhbmRvbSgpICogMTAwKSAvIDEwMCkgKiBjb250YWluZXIuY2FudmFzLnNpemUud2lkdGgsICgoKF9iID0gcGVyY2VudFBvc2l0aW9uID09PSBudWxsIHx8IHBlcmNlbnRQb3NpdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGVyY2VudFBvc2l0aW9uLnkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IE1hdGgucmFuZG9tKCkgKiAxMDApIC8gMTAwKSAqIGNvbnRhaW5lci5jYW52YXMuc2l6ZS5oZWlnaHQpO1xuICAgIH1cbiAgICB1cGRhdGVQYXJ0aWNsZVBvc2l0aW9uKHBhcnRpY2xlLCB2KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHBhcnRpY2xlLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyO1xuICAgICAgICBjb25zdCBjYW52YXNTaXplID0gY29udGFpbmVyLmNhbnZhcy5zaXplO1xuICAgICAgICBpZiAocGFydGljbGUubmVlZHNOZXdQb3NpdGlvbikge1xuICAgICAgICAgICAgcGFydGljbGUucG9zaXRpb24ueCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNhbnZhc1NpemUud2lkdGgpO1xuICAgICAgICAgICAgcGFydGljbGUucG9zaXRpb24ueSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNhbnZhc1NpemUuaGVpZ2h0KTtcbiAgICAgICAgICAgIHBhcnRpY2xlLnZlbG9jaXR5LnNldFRvKHBhcnRpY2xlLmluaXRpYWxWZWxvY2l0eSk7XG4gICAgICAgICAgICBwYXJ0aWNsZS5hYnNvcmJlck9yYml0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgcGFydGljbGUubmVlZHNOZXdQb3NpdGlvbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMub3JiaXRzKSB7XG4gICAgICAgICAgICBpZiAocGFydGljbGUuYWJzb3JiZXJPcmJpdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcGFydGljbGUuYWJzb3JiZXJPcmJpdCA9IFZlY3Rvcl8xLlZlY3Rvci5jcmVhdGUoMCwgMCk7XG4gICAgICAgICAgICAgICAgcGFydGljbGUuYWJzb3JiZXJPcmJpdC5sZW5ndGggPSAoMCwgVXRpbHNfMS5nZXREaXN0YW5jZSkocGFydGljbGUuZ2V0UG9zaXRpb24oKSwgdGhpcy5wb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgcGFydGljbGUuYWJzb3JiZXJPcmJpdC5hbmdsZSA9IE1hdGgucmFuZG9tKCkgKiBNYXRoLlBJICogMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwYXJ0aWNsZS5hYnNvcmJlck9yYml0Lmxlbmd0aCA8PSB0aGlzLnNpemUgJiYgIXRoaXMub3B0aW9ucy5kZXN0cm95KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWluU2l6ZSA9IE1hdGgubWluKGNhbnZhc1NpemUud2lkdGgsIGNhbnZhc1NpemUuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICBwYXJ0aWNsZS5hYnNvcmJlck9yYml0Lmxlbmd0aCA9IG1pblNpemUgKiAoMSArIChNYXRoLnJhbmRvbSgpICogMC4yIC0gMC4xKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGFydGljbGUuYWJzb3JiZXJPcmJpdERpcmVjdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcGFydGljbGUuYWJzb3JiZXJPcmJpdERpcmVjdGlvbiA9XG4gICAgICAgICAgICAgICAgICAgIHBhcnRpY2xlLnZlbG9jaXR5LnggPj0gMCA/IEVudW1zXzEuUm90YXRlRGlyZWN0aW9uLmNsb2Nrd2lzZSA6IEVudW1zXzEuUm90YXRlRGlyZWN0aW9uLmNvdW50ZXJDbG9ja3dpc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBvcmJpdFJhZGl1cyA9IHBhcnRpY2xlLmFic29yYmVyT3JiaXQubGVuZ3RoO1xuICAgICAgICAgICAgY29uc3Qgb3JiaXRBbmdsZSA9IHBhcnRpY2xlLmFic29yYmVyT3JiaXQuYW5nbGU7XG4gICAgICAgICAgICBjb25zdCBvcmJpdERpcmVjdGlvbiA9IHBhcnRpY2xlLmFic29yYmVyT3JiaXREaXJlY3Rpb247XG4gICAgICAgICAgICBwYXJ0aWNsZS52ZWxvY2l0eS54ID0gMDtcbiAgICAgICAgICAgIHBhcnRpY2xlLnZlbG9jaXR5LnkgPSAwO1xuICAgICAgICAgICAgY29uc3QgdXBkYXRlRnVuYyA9IHtcbiAgICAgICAgICAgICAgICB4OiBvcmJpdERpcmVjdGlvbiA9PT0gRW51bXNfMS5Sb3RhdGVEaXJlY3Rpb24uY2xvY2t3aXNlID8gTWF0aC5jb3MgOiBNYXRoLnNpbixcbiAgICAgICAgICAgICAgICB5OiBvcmJpdERpcmVjdGlvbiA9PT0gRW51bXNfMS5Sb3RhdGVEaXJlY3Rpb24uY2xvY2t3aXNlID8gTWF0aC5zaW4gOiBNYXRoLmNvcyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBwYXJ0aWNsZS5wb3NpdGlvbi54ID0gdGhpcy5wb3NpdGlvbi54ICsgb3JiaXRSYWRpdXMgKiB1cGRhdGVGdW5jLngob3JiaXRBbmdsZSk7XG4gICAgICAgICAgICBwYXJ0aWNsZS5wb3NpdGlvbi55ID0gdGhpcy5wb3NpdGlvbi55ICsgb3JiaXRSYWRpdXMgKiB1cGRhdGVGdW5jLnkob3JiaXRBbmdsZSk7XG4gICAgICAgICAgICBwYXJ0aWNsZS5hYnNvcmJlck9yYml0Lmxlbmd0aCAtPSB2Lmxlbmd0aDtcbiAgICAgICAgICAgIHBhcnRpY2xlLmFic29yYmVyT3JiaXQuYW5nbGUgKz1cbiAgICAgICAgICAgICAgICAoKCgoX2EgPSBwYXJ0aWNsZS5yZXRpbmEubW92ZVNwZWVkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAwKSAqIGNvbnRhaW5lci5yZXRpbmEucGl4ZWxSYXRpbykgLyAxMDApICpcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLnJldGluYS5yZWR1Y2VGYWN0b3I7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBhZGRWID0gVmVjdG9yXzEuVmVjdG9yLm9yaWdpbjtcbiAgICAgICAgICAgIGFkZFYubGVuZ3RoID0gdi5sZW5ndGg7XG4gICAgICAgICAgICBhZGRWLmFuZ2xlID0gdi5hbmdsZTtcbiAgICAgICAgICAgIHBhcnRpY2xlLnZlbG9jaXR5LmFkZFRvKGFkZFYpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5BYnNvcmJlckluc3RhbmNlID0gQWJzb3JiZXJJbnN0YW5jZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BYnNvcmJlcnMgPSB2b2lkIDA7XG5jb25zdCBBYnNvcmJlckluc3RhbmNlXzEgPSByZXF1aXJlKFwiLi9BYnNvcmJlckluc3RhbmNlXCIpO1xuY29uc3QgQWJzb3JiZXJfMSA9IHJlcXVpcmUoXCIuL09wdGlvbnMvQ2xhc3Nlcy9BYnNvcmJlclwiKTtcbmNvbnN0IEVudW1zXzEgPSByZXF1aXJlKFwiLi9FbnVtc1wiKTtcbmNvbnN0IFV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vVXRpbHNcIik7XG5jbGFzcyBBYnNvcmJlcnMge1xuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lcikge1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgICAgdGhpcy5hcnJheSA9IFtdO1xuICAgICAgICB0aGlzLmFic29yYmVycyA9IFtdO1xuICAgICAgICB0aGlzLmludGVyYWN0aXZpdHlBYnNvcmJlcnMgPSBbXTtcbiAgICAgICAgY29uc3Qgb3ZlcnJpZGFibGVDb250YWluZXIgPSBjb250YWluZXI7XG4gICAgICAgIG92ZXJyaWRhYmxlQ29udGFpbmVyLmdldEFic29yYmVyID0gKGlkeE9yTmFtZSkgPT4gaWR4T3JOYW1lID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIGlkeE9yTmFtZSA9PT0gXCJudW1iZXJcIlxuICAgICAgICAgICAgPyB0aGlzLmFycmF5W2lkeE9yTmFtZSB8fCAwXVxuICAgICAgICAgICAgOiB0aGlzLmFycmF5LmZpbmQoKHQpID0+IHQubmFtZSA9PT0gaWR4T3JOYW1lKTtcbiAgICAgICAgb3ZlcnJpZGFibGVDb250YWluZXIuYWRkQWJzb3JiZXIgPSAob3B0aW9ucywgcG9zaXRpb24pID0+IHRoaXMuYWRkQWJzb3JiZXIob3B0aW9ucywgcG9zaXRpb24pO1xuICAgIH1cbiAgICBpbml0KG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuYWJzb3JiZXJzKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5hYnNvcmJlcnMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWJzb3JiZXJzID0gb3B0aW9ucy5hYnNvcmJlcnMubWFwKChzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRtcCA9IG5ldyBBYnNvcmJlcl8xLkFic29yYmVyKCk7XG4gICAgICAgICAgICAgICAgICAgIHRtcC5sb2FkKHMpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG1wO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYWJzb3JiZXJzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hYnNvcmJlcnMgPSBuZXcgQWJzb3JiZXJfMS5BYnNvcmJlcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmFic29yYmVycy5sb2FkKG9wdGlvbnMuYWJzb3JiZXJzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbnRlcmFjdGl2aXR5QWJzb3JiZXJzID0gKF9iID0gKF9hID0gb3B0aW9ucy5pbnRlcmFjdGl2aXR5KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubW9kZXMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5hYnNvcmJlcnM7XG4gICAgICAgIGlmIChpbnRlcmFjdGl2aXR5QWJzb3JiZXJzKSB7XG4gICAgICAgICAgICBpZiAoaW50ZXJhY3Rpdml0eUFic29yYmVycyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnRlcmFjdGl2aXR5QWJzb3JiZXJzID0gaW50ZXJhY3Rpdml0eUFic29yYmVycy5tYXAoKHMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdG1wID0gbmV3IEFic29yYmVyXzEuQWJzb3JiZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgdG1wLmxvYWQocyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0bXA7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbnRlcmFjdGl2aXR5QWJzb3JiZXJzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnRlcmFjdGl2aXR5QWJzb3JiZXJzID0gbmV3IEFic29yYmVyXzEuQWJzb3JiZXIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5pbnRlcmFjdGl2aXR5QWJzb3JiZXJzLmxvYWQoaW50ZXJhY3Rpdml0eUFic29yYmVycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuYWJzb3JiZXJzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgYWJzb3JiZXJPcHRpb25zIG9mIHRoaXMuYWJzb3JiZXJzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRBYnNvcmJlcihhYnNvcmJlck9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGRBYnNvcmJlcih0aGlzLmFic29yYmVycyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcGFydGljbGVVcGRhdGUocGFydGljbGUpIHtcbiAgICAgICAgZm9yIChjb25zdCBhYnNvcmJlciBvZiB0aGlzLmFycmF5KSB7XG4gICAgICAgICAgICBhYnNvcmJlci5hdHRyYWN0KHBhcnRpY2xlKTtcbiAgICAgICAgICAgIGlmIChwYXJ0aWNsZS5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBkcmF3KGNvbnRleHQpIHtcbiAgICAgICAgZm9yIChjb25zdCBhYnNvcmJlciBvZiB0aGlzLmFycmF5KSB7XG4gICAgICAgICAgICBjb250ZXh0LnNhdmUoKTtcbiAgICAgICAgICAgIGFic29yYmVyLmRyYXcoY29udGV4dCk7XG4gICAgICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdG9wKCkge1xuICAgICAgICB0aGlzLmFycmF5ID0gW107XG4gICAgfVxuICAgIHJlc2l6ZSgpIHtcbiAgICAgICAgZm9yIChjb25zdCBhYnNvcmJlciBvZiB0aGlzLmFycmF5KSB7XG4gICAgICAgICAgICBhYnNvcmJlci5yZXNpemUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBoYW5kbGVDbGlja01vZGUobW9kZSkge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcjtcbiAgICAgICAgY29uc3QgYWJzb3JiZXJPcHRpb25zID0gdGhpcy5hYnNvcmJlcnM7XG4gICAgICAgIGNvbnN0IG1vZGVBYnNvcmJlcnMgPSB0aGlzLmludGVyYWN0aXZpdHlBYnNvcmJlcnM7XG4gICAgICAgIGlmIChtb2RlID09PSBFbnVtc18xLkFic29yYmVyQ2xpY2tNb2RlLmFic29yYmVyKSB7XG4gICAgICAgICAgICBsZXQgYWJzb3JiZXJzTW9kZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAobW9kZUFic29yYmVycyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICAgICAgaWYgKG1vZGVBYnNvcmJlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBhYnNvcmJlcnNNb2RlT3B0aW9ucyA9ICgwLCBVdGlsc18xLml0ZW1Gcm9tQXJyYXkpKG1vZGVBYnNvcmJlcnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGFic29yYmVyc01vZGVPcHRpb25zID0gbW9kZUFic29yYmVycztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGFic29yYmVyc09wdGlvbnMgPSBhYnNvcmJlcnNNb2RlT3B0aW9ucyAhPT0gbnVsbCAmJiBhYnNvcmJlcnNNb2RlT3B0aW9ucyAhPT0gdm9pZCAwID8gYWJzb3JiZXJzTW9kZU9wdGlvbnMgOiAoYWJzb3JiZXJPcHRpb25zIGluc3RhbmNlb2YgQXJyYXkgPyAoMCwgVXRpbHNfMS5pdGVtRnJvbUFycmF5KShhYnNvcmJlck9wdGlvbnMpIDogYWJzb3JiZXJPcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IGFQb3NpdGlvbiA9IGNvbnRhaW5lci5pbnRlcmFjdGl2aXR5Lm1vdXNlLmNsaWNrUG9zaXRpb247XG4gICAgICAgICAgICB0aGlzLmFkZEFic29yYmVyKGFic29yYmVyc09wdGlvbnMsIGFQb3NpdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWRkQWJzb3JiZXIob3B0aW9ucywgcG9zaXRpb24pIHtcbiAgICAgICAgY29uc3QgYWJzb3JiZXIgPSBuZXcgQWJzb3JiZXJJbnN0YW5jZV8xLkFic29yYmVySW5zdGFuY2UodGhpcywgdGhpcy5jb250YWluZXIsIG9wdGlvbnMsIHBvc2l0aW9uKTtcbiAgICAgICAgdGhpcy5hcnJheS5wdXNoKGFic29yYmVyKTtcbiAgICAgICAgcmV0dXJuIGFic29yYmVyO1xuICAgIH1cbiAgICByZW1vdmVBYnNvcmJlcihhYnNvcmJlcikge1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuYXJyYXkuaW5kZXhPZihhYnNvcmJlcik7XG4gICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmFycmF5LnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkFic29yYmVycyA9IEFic29yYmVycztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BYnNvcmJlckNsaWNrTW9kZSA9IHZvaWQgMDtcbnZhciBBYnNvcmJlckNsaWNrTW9kZTtcbihmdW5jdGlvbiAoQWJzb3JiZXJDbGlja01vZGUpIHtcbiAgICBBYnNvcmJlckNsaWNrTW9kZVtcImFic29yYmVyXCJdID0gXCJhYnNvcmJlclwiO1xufSkoQWJzb3JiZXJDbGlja01vZGUgPSBleHBvcnRzLkFic29yYmVyQ2xpY2tNb2RlIHx8IChleHBvcnRzLkFic29yYmVyQ2xpY2tNb2RlID0ge30pKTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vQWJzb3JiZXJDbGlja01vZGVcIiksIGV4cG9ydHMpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFic29yYmVyID0gdm9pZCAwO1xuY29uc3QgQWJzb3JiZXJTaXplXzEgPSByZXF1aXJlKFwiLi9BYnNvcmJlclNpemVcIik7XG5jb25zdCBPcHRpb25zQ29sb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9PcHRpb25zL0NsYXNzZXMvT3B0aW9uc0NvbG9yXCIpO1xuY2xhc3MgQWJzb3JiZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmNvbG9yID0gbmV3IE9wdGlvbnNDb2xvcl8xLk9wdGlvbnNDb2xvcigpO1xuICAgICAgICB0aGlzLmNvbG9yLnZhbHVlID0gXCIjMDAwMDAwXCI7XG4gICAgICAgIHRoaXMuZHJhZ2dhYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMub3BhY2l0eSA9IDE7XG4gICAgICAgIHRoaXMuZGVzdHJveSA9IHRydWU7XG4gICAgICAgIHRoaXMub3JiaXRzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2l6ZSA9IG5ldyBBYnNvcmJlclNpemVfMS5BYnNvcmJlclNpemUoKTtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5jb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmNvbG9yID0gT3B0aW9uc0NvbG9yXzEuT3B0aW9uc0NvbG9yLmNyZWF0ZSh0aGlzLmNvbG9yLCBkYXRhLmNvbG9yKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5kcmFnZ2FibGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5kcmFnZ2FibGUgPSBkYXRhLmRyYWdnYWJsZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5hbWUgPSBkYXRhLm5hbWU7XG4gICAgICAgIGlmIChkYXRhLm9wYWNpdHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5vcGFjaXR5ID0gZGF0YS5vcGFjaXR5O1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLnBvc2l0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb24gPSB7XG4gICAgICAgICAgICAgICAgeDogZGF0YS5wb3NpdGlvbi54LFxuICAgICAgICAgICAgICAgIHk6IGRhdGEucG9zaXRpb24ueSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuc2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnNpemUubG9hZChkYXRhLnNpemUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmRlc3Ryb3kgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0cm95ID0gZGF0YS5kZXN0cm95O1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLm9yYml0cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLm9yYml0cyA9IGRhdGEub3JiaXRzO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5BYnNvcmJlciA9IEFic29yYmVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFic29yYmVyU2l6ZSA9IHZvaWQgMDtcbmNvbnN0IFZhbHVlV2l0aFJhbmRvbV8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL09wdGlvbnMvQ2xhc3Nlcy9WYWx1ZVdpdGhSYW5kb21cIik7XG5jb25zdCBBYnNvcmJlclNpemVMaW1pdF8xID0gcmVxdWlyZShcIi4vQWJzb3JiZXJTaXplTGltaXRcIik7XG5jbGFzcyBBYnNvcmJlclNpemUgZXh0ZW5kcyBWYWx1ZVdpdGhSYW5kb21fMS5WYWx1ZVdpdGhSYW5kb20ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmRlbnNpdHkgPSA1O1xuICAgICAgICB0aGlzLnJhbmRvbS5taW5pbXVtVmFsdWUgPSAxO1xuICAgICAgICB0aGlzLnZhbHVlID0gNTA7XG4gICAgICAgIHRoaXMubGltaXQgPSBuZXcgQWJzb3JiZXJTaXplTGltaXRfMS5BYnNvcmJlclNpemVMaW1pdCgpO1xuICAgIH1cbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIubG9hZChkYXRhKTtcbiAgICAgICAgaWYgKGRhdGEuZGVuc2l0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmRlbnNpdHkgPSBkYXRhLmRlbnNpdHk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhLmxpbWl0ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICB0aGlzLmxpbWl0LnJhZGl1cyA9IGRhdGEubGltaXQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxpbWl0LmxvYWQoZGF0YS5saW1pdCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkFic29yYmVyU2l6ZSA9IEFic29yYmVyU2l6ZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BYnNvcmJlclNpemVMaW1pdCA9IHZvaWQgMDtcbmNsYXNzIEFic29yYmVyU2l6ZUxpbWl0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5yYWRpdXMgPSAwO1xuICAgICAgICB0aGlzLm1hc3MgPSAwO1xuICAgIH1cbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEubWFzcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLm1hc3MgPSBkYXRhLm1hc3M7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEucmFkaXVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMucmFkaXVzID0gZGF0YS5yYWRpdXM7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkFic29yYmVyU2l6ZUxpbWl0ID0gQWJzb3JiZXJTaXplTGltaXQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubG9hZEFic29yYmVyc1BsdWdpbiA9IHZvaWQgMDtcbmNvbnN0IEFic29yYmVyc18xID0gcmVxdWlyZShcIi4vQWJzb3JiZXJzXCIpO1xuY29uc3QgRW51bXNfMSA9IHJlcXVpcmUoXCIuL0VudW1zXCIpO1xuY29uc3QgQWJzb3JiZXJfMSA9IHJlcXVpcmUoXCIuL09wdGlvbnMvQ2xhc3Nlcy9BYnNvcmJlclwiKTtcbmNvbnN0IFV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vVXRpbHNcIik7XG5jbGFzcyBQbHVnaW4ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmlkID0gXCJhYnNvcmJlcnNcIjtcbiAgICB9XG4gICAgZ2V0UGx1Z2luKGNvbnRhaW5lcikge1xuICAgICAgICByZXR1cm4gbmV3IEFic29yYmVyc18xLkFic29yYmVycyhjb250YWluZXIpO1xuICAgIH1cbiAgICBuZWVkc1BsdWdpbihvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWJzb3JiZXJzID0gb3B0aW9ucy5hYnNvcmJlcnM7XG4gICAgICAgIGxldCBsb2FkQWJzb3JiZXJzID0gZmFsc2U7XG4gICAgICAgIGlmIChhYnNvcmJlcnMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgaWYgKGFic29yYmVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBsb2FkQWJzb3JiZXJzID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhYnNvcmJlcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbG9hZEFic29yYmVycyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKChfYyA9IChfYiA9IChfYSA9IG9wdGlvbnMuaW50ZXJhY3Rpdml0eSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmV2ZW50cykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLm9uQ2xpY2spID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5tb2RlKSAmJlxuICAgICAgICAgICAgKDAsIFV0aWxzXzEuaXNJbkFycmF5KShFbnVtc18xLkFic29yYmVyQ2xpY2tNb2RlLmFic29yYmVyLCBvcHRpb25zLmludGVyYWN0aXZpdHkuZXZlbnRzLm9uQ2xpY2subW9kZSkpIHtcbiAgICAgICAgICAgIGxvYWRBYnNvcmJlcnMgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2FkQWJzb3JiZXJzO1xuICAgIH1cbiAgICBsb2FkT3B0aW9ucyhvcHRpb25zLCBzb3VyY2UpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgaWYgKCF0aGlzLm5lZWRzUGx1Z2luKG9wdGlvbnMpICYmICF0aGlzLm5lZWRzUGx1Z2luKHNvdXJjZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvcHRpb25zQ2FzdCA9IG9wdGlvbnM7XG4gICAgICAgIGlmIChzb3VyY2UgPT09IG51bGwgfHwgc291cmNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzb3VyY2UuYWJzb3JiZXJzKSB7XG4gICAgICAgICAgICBpZiAoKHNvdXJjZSA9PT0gbnVsbCB8fCBzb3VyY2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNvdXJjZS5hYnNvcmJlcnMpIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zQ2FzdC5hYnNvcmJlcnMgPSBzb3VyY2UgPT09IG51bGwgfHwgc291cmNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzb3VyY2UuYWJzb3JiZXJzLm1hcCgocykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0bXAgPSBuZXcgQWJzb3JiZXJfMS5BYnNvcmJlcigpO1xuICAgICAgICAgICAgICAgICAgICB0bXAubG9hZChzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRtcDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBhYnNvcmJlck9wdGlvbnMgPSBvcHRpb25zQ2FzdC5hYnNvcmJlcnM7XG4gICAgICAgICAgICAgICAgaWYgKChhYnNvcmJlck9wdGlvbnMgPT09IG51bGwgfHwgYWJzb3JiZXJPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhYnNvcmJlck9wdGlvbnMubG9hZCkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zQ2FzdC5hYnNvcmJlcnMgPSBhYnNvcmJlck9wdGlvbnMgPSBuZXcgQWJzb3JiZXJfMS5BYnNvcmJlcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhYnNvcmJlck9wdGlvbnMubG9hZChzb3VyY2UgPT09IG51bGwgfHwgc291cmNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzb3VyY2UuYWJzb3JiZXJzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbnRlcmFjdGl2aXR5QWJzb3JiZXJzID0gKF9iID0gKF9hID0gc291cmNlID09PSBudWxsIHx8IHNvdXJjZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc291cmNlLmludGVyYWN0aXZpdHkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5tb2RlcykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmFic29yYmVycztcbiAgICAgICAgaWYgKGludGVyYWN0aXZpdHlBYnNvcmJlcnMpIHtcbiAgICAgICAgICAgIGlmIChpbnRlcmFjdGl2aXR5QWJzb3JiZXJzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zQ2FzdC5pbnRlcmFjdGl2aXR5Lm1vZGVzLmFic29yYmVycyA9IGludGVyYWN0aXZpdHlBYnNvcmJlcnMubWFwKChzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRtcCA9IG5ldyBBYnNvcmJlcl8xLkFic29yYmVyKCk7XG4gICAgICAgICAgICAgICAgICAgIHRtcC5sb2FkKHMpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG1wO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IGFic29yYmVyT3B0aW9ucyA9IG9wdGlvbnNDYXN0LmludGVyYWN0aXZpdHkubW9kZXMuYWJzb3JiZXJzO1xuICAgICAgICAgICAgICAgIGlmICgoYWJzb3JiZXJPcHRpb25zID09PSBudWxsIHx8IGFic29yYmVyT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogYWJzb3JiZXJPcHRpb25zLmxvYWQpID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uc0Nhc3QuaW50ZXJhY3Rpdml0eS5tb2Rlcy5hYnNvcmJlcnMgPSBhYnNvcmJlck9wdGlvbnMgPSBuZXcgQWJzb3JiZXJfMS5BYnNvcmJlcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhYnNvcmJlck9wdGlvbnMubG9hZChpbnRlcmFjdGl2aXR5QWJzb3JiZXJzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIGxvYWRBYnNvcmJlcnNQbHVnaW4odHNQYXJ0aWNsZXMpIHtcbiAgICBjb25zdCBwbHVnaW4gPSBuZXcgUGx1Z2luKCk7XG4gICAgYXdhaXQgdHNQYXJ0aWNsZXMuYWRkUGx1Z2luKHBsdWdpbik7XG59XG5leHBvcnRzLmxvYWRBYnNvcmJlcnNQbHVnaW4gPSBsb2FkQWJzb3JiZXJzUGx1Z2luO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZFNldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZFNldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59O1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX0VtaXR0ZXJJbnN0YW5jZV9maXJzdFNwYXduLCBfRW1pdHRlckluc3RhbmNlX3N0YXJ0UGFydGljbGVzQWRkZWQ7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkVtaXR0ZXJJbnN0YW5jZSA9IHZvaWQgMDtcbmNvbnN0IFV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vVXRpbHNcIik7XG5jb25zdCBFbnVtc18xID0gcmVxdWlyZShcIi4uLy4uL0VudW1zXCIpO1xuY29uc3QgRW1pdHRlclNpemVfMSA9IHJlcXVpcmUoXCIuL09wdGlvbnMvQ2xhc3Nlcy9FbWl0dGVyU2l6ZVwiKTtcbmNvbnN0IFNoYXBlTWFuYWdlcl8xID0gcmVxdWlyZShcIi4vU2hhcGVNYW5hZ2VyXCIpO1xuY2xhc3MgRW1pdHRlckluc3RhbmNlIHtcbiAgICBjb25zdHJ1Y3RvcihlbWl0dGVycywgY29udGFpbmVyLCBlbWl0dGVyT3B0aW9ucywgcG9zaXRpb24pIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2Y7XG4gICAgICAgIHZhciBfZztcbiAgICAgICAgdGhpcy5lbWl0dGVycyA9IGVtaXR0ZXJzO1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgICAgX0VtaXR0ZXJJbnN0YW5jZV9maXJzdFNwYXduLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfRW1pdHRlckluc3RhbmNlX3N0YXJ0UGFydGljbGVzQWRkZWQuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIHRoaXMuY3VycmVudER1cmF0aW9uID0gMDtcbiAgICAgICAgdGhpcy5jdXJyZW50RW1pdERlbGF5ID0gMDtcbiAgICAgICAgdGhpcy5jdXJyZW50U3Bhd25EZWxheSA9IDA7XG4gICAgICAgIHRoaXMuaW5pdGlhbFBvc2l0aW9uID0gcG9zaXRpb247XG4gICAgICAgIHRoaXMuZW1pdHRlck9wdGlvbnMgPSAoMCwgVXRpbHNfMS5kZWVwRXh0ZW5kKSh7fSwgZW1pdHRlck9wdGlvbnMpO1xuICAgICAgICB0aGlzLnNwYXduRGVsYXkgPSAoKChfYSA9IHRoaXMuZW1pdHRlck9wdGlvbnMubGlmZS5kZWxheSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMCkgKiAxMDAwKSAvIHRoaXMuY29udGFpbmVyLnJldGluYS5yZWR1Y2VGYWN0b3I7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSAoX2IgPSB0aGlzLmluaXRpYWxQb3NpdGlvbikgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogdGhpcy5jYWxjUG9zaXRpb24oKTtcbiAgICAgICAgdGhpcy5uYW1lID0gZW1pdHRlck9wdGlvbnMubmFtZTtcbiAgICAgICAgdGhpcy5zaGFwZSA9IFNoYXBlTWFuYWdlcl8xLlNoYXBlTWFuYWdlci5nZXRTaGFwZShlbWl0dGVyT3B0aW9ucy5zaGFwZSk7XG4gICAgICAgIHRoaXMuZmlsbCA9IGVtaXR0ZXJPcHRpb25zLmZpbGw7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0VtaXR0ZXJJbnN0YW5jZV9maXJzdFNwYXduLCAhdGhpcy5lbWl0dGVyT3B0aW9ucy5saWZlLndhaXQsIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfRW1pdHRlckluc3RhbmNlX3N0YXJ0UGFydGljbGVzQWRkZWQsIGZhbHNlLCBcImZcIik7XG4gICAgICAgIGxldCBwYXJ0aWNsZXNPcHRpb25zID0gKDAsIFV0aWxzXzEuZGVlcEV4dGVuZCkoe30sIHRoaXMuZW1pdHRlck9wdGlvbnMucGFydGljbGVzKTtcbiAgICAgICAgcGFydGljbGVzT3B0aW9ucyAhPT0gbnVsbCAmJiBwYXJ0aWNsZXNPcHRpb25zICE9PSB2b2lkIDAgPyBwYXJ0aWNsZXNPcHRpb25zIDogKHBhcnRpY2xlc09wdGlvbnMgPSB7fSk7XG4gICAgICAgIChfYyA9IHBhcnRpY2xlc09wdGlvbnMubW92ZSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogKHBhcnRpY2xlc09wdGlvbnMubW92ZSA9IHt9KTtcbiAgICAgICAgKF9kID0gKF9nID0gcGFydGljbGVzT3B0aW9ucy5tb3ZlKS5kaXJlY3Rpb24pICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IChfZy5kaXJlY3Rpb24gPSB0aGlzLmVtaXR0ZXJPcHRpb25zLmRpcmVjdGlvbik7XG4gICAgICAgIGlmICh0aGlzLmVtaXR0ZXJPcHRpb25zLnNwYXduQ29sb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5zcGF3bkNvbG9yID0gKDAsIFV0aWxzXzEuY29sb3JUb0hzbCkodGhpcy5lbWl0dGVyT3B0aW9ucy5zcGF3bkNvbG9yKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBhdXNlZCA9ICF0aGlzLmVtaXR0ZXJPcHRpb25zLmF1dG9QbGF5O1xuICAgICAgICB0aGlzLnBhcnRpY2xlc09wdGlvbnMgPSBwYXJ0aWNsZXNPcHRpb25zO1xuICAgICAgICB0aGlzLnNpemUgPVxuICAgICAgICAgICAgKF9lID0gdGhpcy5lbWl0dGVyT3B0aW9ucy5zaXplKSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiAoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNpemUgPSBuZXcgRW1pdHRlclNpemVfMS5FbWl0dGVyU2l6ZSgpO1xuICAgICAgICAgICAgICAgIHNpemUubG9hZCh7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMCxcbiAgICAgICAgICAgICAgICAgICAgbW9kZTogRW51bXNfMS5TaXplTW9kZS5wZXJjZW50LFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2l6ZTtcbiAgICAgICAgICAgIH0pKCk7XG4gICAgICAgIHRoaXMubGlmZUNvdW50ID0gKF9mID0gdGhpcy5lbWl0dGVyT3B0aW9ucy5saWZlLmNvdW50KSAhPT0gbnVsbCAmJiBfZiAhPT0gdm9pZCAwID8gX2YgOiAtMTtcbiAgICAgICAgdGhpcy5pbW1vcnRhbCA9IHRoaXMubGlmZUNvdW50IDw9IDA7XG4gICAgICAgIHRoaXMucGxheSgpO1xuICAgIH1cbiAgICBleHRlcm5hbFBsYXkoKSB7XG4gICAgICAgIHRoaXMucGF1c2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucGxheSgpO1xuICAgIH1cbiAgICBleHRlcm5hbFBhdXNlKCkge1xuICAgICAgICB0aGlzLnBhdXNlZCA9IHRydWU7XG4gICAgICAgIHRoaXMucGF1c2UoKTtcbiAgICB9XG4gICAgcGxheSgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodGhpcy5wYXVzZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jb250YWluZXIucmV0aW5hLnJlZHVjZUZhY3RvciAmJlxuICAgICAgICAgICAgKHRoaXMubGlmZUNvdW50ID4gMCB8fCB0aGlzLmltbW9ydGFsIHx8ICF0aGlzLmVtaXR0ZXJPcHRpb25zLmxpZmUuY291bnQpICYmXG4gICAgICAgICAgICAoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfRW1pdHRlckluc3RhbmNlX2ZpcnN0U3Bhd24sIFwiZlwiKSB8fCB0aGlzLmN1cnJlbnRTcGF3bkRlbGF5ID49ICgoX2EgPSB0aGlzLnNwYXduRGVsYXkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDApKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZW1pdERlbGF5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkZWxheSA9ICgwLCBVdGlsc18xLmdldFJhbmdlVmFsdWUpKHRoaXMuZW1pdHRlck9wdGlvbnMucmF0ZS5kZWxheSk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0RGVsYXkgPSAoMTAwMCAqIGRlbGF5KSAvIHRoaXMuY29udGFpbmVyLnJldGluYS5yZWR1Y2VGYWN0b3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5saWZlQ291bnQgPiAwIHx8IHRoaXMuaW1tb3J0YWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByZXBhcmVUb0RpZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHBhdXNlKCkge1xuICAgICAgICBpZiAodGhpcy5wYXVzZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgdGhpcy5lbWl0RGVsYXk7XG4gICAgfVxuICAgIHJlc2l6ZSgpIHtcbiAgICAgICAgY29uc3QgaW5pdGlhbFBvc2l0aW9uID0gdGhpcy5pbml0aWFsUG9zaXRpb247XG4gICAgICAgIHRoaXMucG9zaXRpb24gPVxuICAgICAgICAgICAgaW5pdGlhbFBvc2l0aW9uICYmICgwLCBVdGlsc18xLmlzUG9pbnRJbnNpZGUpKGluaXRpYWxQb3NpdGlvbiwgdGhpcy5jb250YWluZXIuY2FudmFzLnNpemUpXG4gICAgICAgICAgICAgICAgPyBpbml0aWFsUG9zaXRpb25cbiAgICAgICAgICAgICAgICA6IHRoaXMuY2FsY1Bvc2l0aW9uKCk7XG4gICAgfVxuICAgIHVwZGF0ZShkZWx0YSkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgaWYgKHRoaXMucGF1c2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0VtaXR0ZXJJbnN0YW5jZV9maXJzdFNwYXduLCBcImZcIikpIHtcbiAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0VtaXR0ZXJJbnN0YW5jZV9maXJzdFNwYXduLCBmYWxzZSwgXCJmXCIpO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50U3Bhd25EZWxheSA9IChfYSA9IHRoaXMuc3Bhd25EZWxheSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMDtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEVtaXREZWxheSA9IChfYiA9IHRoaXMuZW1pdERlbGF5KSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICghX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfRW1pdHRlckluc3RhbmNlX3N0YXJ0UGFydGljbGVzQWRkZWQsIFwiZlwiKSkge1xuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfRW1pdHRlckluc3RhbmNlX3N0YXJ0UGFydGljbGVzQWRkZWQsIHRydWUsIFwiZlwiKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdFBhcnRpY2xlcyh0aGlzLmVtaXR0ZXJPcHRpb25zLnN0YXJ0Q291bnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmR1cmF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudER1cmF0aW9uICs9IGRlbHRhLnZhbHVlO1xuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudER1cmF0aW9uID49IHRoaXMuZHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3Bhd25EZWxheSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnNwYXduRGVsYXk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pbW1vcnRhbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpZmVDb3VudC0tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5saWZlQ291bnQgPiAwIHx8IHRoaXMuaW1tb3J0YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHRoaXMuY2FsY1Bvc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3Bhd25EZWxheSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAoKChfYyA9IHRoaXMuZW1pdHRlck9wdGlvbnMubGlmZS5kZWxheSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogMCkgKiAxMDAwKSAvIHRoaXMuY29udGFpbmVyLnJldGluYS5yZWR1Y2VGYWN0b3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50RHVyYXRpb24gLT0gdGhpcy5kdXJhdGlvbjtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5kdXJhdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zcGF3bkRlbGF5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFNwYXduRGVsYXkgKz0gZGVsdGEudmFsdWU7XG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50U3Bhd25EZWxheSA+PSB0aGlzLnNwYXduRGVsYXkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXkoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRTcGF3bkRlbGF5IC09IHRoaXMuY3VycmVudFNwYXduRGVsYXk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuc3Bhd25EZWxheTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5lbWl0RGVsYXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50RW1pdERlbGF5ICs9IGRlbHRhLnZhbHVlO1xuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudEVtaXREZWxheSA+PSB0aGlzLmVtaXREZWxheSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEVtaXREZWxheSAtPSB0aGlzLmVtaXREZWxheTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBwcmVwYXJlVG9EaWUoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHRoaXMucGF1c2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZHVyYXRpb24gPSAoX2EgPSB0aGlzLmVtaXR0ZXJPcHRpb25zLmxpZmUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kdXJhdGlvbjtcbiAgICAgICAgaWYgKHRoaXMuY29udGFpbmVyLnJldGluYS5yZWR1Y2VGYWN0b3IgJiZcbiAgICAgICAgICAgICh0aGlzLmxpZmVDb3VudCA+IDAgfHwgdGhpcy5pbW1vcnRhbCkgJiZcbiAgICAgICAgICAgIGR1cmF0aW9uICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIGR1cmF0aW9uID4gMCkge1xuICAgICAgICAgICAgdGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uICogMTAwMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLmVtaXR0ZXJzLnJlbW92ZUVtaXR0ZXIodGhpcyk7XG4gICAgfVxuICAgIGNhbGNQb3NpdGlvbigpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXI7XG4gICAgICAgIGNvbnN0IHBlcmNlbnRQb3NpdGlvbiA9IHRoaXMuZW1pdHRlck9wdGlvbnMucG9zaXRpb247XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiAoKChfYSA9IHBlcmNlbnRQb3NpdGlvbiA9PT0gbnVsbCB8fCBwZXJjZW50UG9zaXRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBlcmNlbnRQb3NpdGlvbi54KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBNYXRoLnJhbmRvbSgpICogMTAwKSAvIDEwMCkgKiBjb250YWluZXIuY2FudmFzLnNpemUud2lkdGgsXG4gICAgICAgICAgICB5OiAoKChfYiA9IHBlcmNlbnRQb3NpdGlvbiA9PT0gbnVsbCB8fCBwZXJjZW50UG9zaXRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBlcmNlbnRQb3NpdGlvbi55KSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBNYXRoLnJhbmRvbSgpICogMTAwKSAvIDEwMCkgKiBjb250YWluZXIuY2FudmFzLnNpemUuaGVpZ2h0LFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbWl0KCkge1xuICAgICAgICBpZiAodGhpcy5wYXVzZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBxdWFudGl0eSA9ICgwLCBVdGlsc18xLmdldFJhbmdlVmFsdWUpKHRoaXMuZW1pdHRlck9wdGlvbnMucmF0ZS5xdWFudGl0eSk7XG4gICAgICAgIHRoaXMuZW1pdFBhcnRpY2xlcyhxdWFudGl0eSk7XG4gICAgfVxuICAgIGVtaXRQYXJ0aWNsZXMocXVhbnRpdHkpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyO1xuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMucG9zaXRpb247XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IHtcbiAgICAgICAgICAgIHg6IHRoaXMuc2l6ZS5tb2RlID09PSBFbnVtc18xLlNpemVNb2RlLnBlcmNlbnRcbiAgICAgICAgICAgICAgICA/IChjb250YWluZXIuY2FudmFzLnNpemUud2lkdGggKiB0aGlzLnNpemUud2lkdGgpIC8gMTAwXG4gICAgICAgICAgICAgICAgOiB0aGlzLnNpemUud2lkdGgsXG4gICAgICAgICAgICB5OiB0aGlzLnNpemUubW9kZSA9PT0gRW51bXNfMS5TaXplTW9kZS5wZXJjZW50XG4gICAgICAgICAgICAgICAgPyAoY29udGFpbmVyLmNhbnZhcy5zaXplLmhlaWdodCAqIHRoaXMuc2l6ZS5oZWlnaHQpIC8gMTAwXG4gICAgICAgICAgICAgICAgOiB0aGlzLnNpemUuaGVpZ2h0LFxuICAgICAgICB9O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHF1YW50aXR5OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcnRpY2xlc09wdGlvbnMgPSAoMCwgVXRpbHNfMS5kZWVwRXh0ZW5kKSh7fSwgdGhpcy5wYXJ0aWNsZXNPcHRpb25zKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnNwYXduQ29sb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2xvckFuaW1hdGlvbiA9IChfYSA9IHRoaXMuZW1pdHRlck9wdGlvbnMuc3Bhd25Db2xvcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFuaW1hdGlvbjtcbiAgICAgICAgICAgICAgICBpZiAoY29sb3JBbmltYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaHVlQW5pbWF0aW9uID0gY29sb3JBbmltYXRpb247XG4gICAgICAgICAgICAgICAgICAgIGlmIChodWVBbmltYXRpb24uZW5hYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNwYXduQ29sb3IuaCA9IHRoaXMuc2V0Q29sb3JBbmltYXRpb24oaHVlQW5pbWF0aW9uLCB0aGlzLnNwYXduQ29sb3IuaCwgMzYwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhzbEFuaW1hdGlvbiA9IGNvbG9yQW5pbWF0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zcGF3bkNvbG9yLmggPSB0aGlzLnNldENvbG9yQW5pbWF0aW9uKGhzbEFuaW1hdGlvbi5oLCB0aGlzLnNwYXduQ29sb3IuaCwgMzYwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3Bhd25Db2xvci5zID0gdGhpcy5zZXRDb2xvckFuaW1hdGlvbihoc2xBbmltYXRpb24ucywgdGhpcy5zcGF3bkNvbG9yLnMsIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNwYXduQ29sb3IubCA9IHRoaXMuc2V0Q29sb3JBbmltYXRpb24oaHNsQW5pbWF0aW9uLmwsIHRoaXMuc3Bhd25Db2xvci5sLCAxMDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghcGFydGljbGVzT3B0aW9ucy5jb2xvcikge1xuICAgICAgICAgICAgICAgICAgICBwYXJ0aWNsZXNPcHRpb25zLmNvbG9yID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuc3Bhd25Db2xvcixcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnRpY2xlc09wdGlvbnMuY29sb3IudmFsdWUgPSB0aGlzLnNwYXduQ29sb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcFBvc2l0aW9uID0gKF9jID0gKF9iID0gdGhpcy5zaGFwZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnJhbmRvbVBvc2l0aW9uKHBvc2l0aW9uLCBvZmZzZXQsIHRoaXMuZmlsbCkpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IHBvc2l0aW9uO1xuICAgICAgICAgICAgY29udGFpbmVyLnBhcnRpY2xlcy5hZGRQYXJ0aWNsZShwUG9zaXRpb24sIHBhcnRpY2xlc09wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldENvbG9yQW5pbWF0aW9uKGFuaW1hdGlvbiwgaW5pdFZhbHVlLCBtYXhWYWx1ZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyO1xuICAgICAgICBpZiAoIWFuaW1hdGlvbi5lbmFibGUpIHtcbiAgICAgICAgICAgIHJldHVybiBpbml0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29sb3JPZmZzZXQgPSAoMCwgVXRpbHNfMS5yYW5kb21JblJhbmdlKShhbmltYXRpb24ub2Zmc2V0KTtcbiAgICAgICAgY29uc3QgZGVsYXkgPSAoMCwgVXRpbHNfMS5nZXRSYW5nZVZhbHVlKSh0aGlzLmVtaXR0ZXJPcHRpb25zLnJhdGUuZGVsYXkpO1xuICAgICAgICBjb25zdCBlbWl0RmFjdG9yID0gKDEwMDAgKiBkZWxheSkgLyBjb250YWluZXIucmV0aW5hLnJlZHVjZUZhY3RvcjtcbiAgICAgICAgY29uc3QgY29sb3JTcGVlZCA9IChfYSA9IGFuaW1hdGlvbi5zcGVlZCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMDtcbiAgICAgICAgcmV0dXJuIChpbml0VmFsdWUgKyAoY29sb3JTcGVlZCAqIGNvbnRhaW5lci5mcHNMaW1pdCkgLyBlbWl0RmFjdG9yICsgY29sb3JPZmZzZXQgKiAzLjYpICUgbWF4VmFsdWU7XG4gICAgfVxufVxuZXhwb3J0cy5FbWl0dGVySW5zdGFuY2UgPSBFbWl0dGVySW5zdGFuY2U7XG5fRW1pdHRlckluc3RhbmNlX2ZpcnN0U3Bhd24gPSBuZXcgV2Vha01hcCgpLCBfRW1pdHRlckluc3RhbmNlX3N0YXJ0UGFydGljbGVzQWRkZWQgPSBuZXcgV2Vha01hcCgpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkVtaXR0ZXJzID0gdm9pZCAwO1xuY29uc3QgRW1pdHRlckluc3RhbmNlXzEgPSByZXF1aXJlKFwiLi9FbWl0dGVySW5zdGFuY2VcIik7XG5jb25zdCBFbWl0dGVyXzEgPSByZXF1aXJlKFwiLi9PcHRpb25zL0NsYXNzZXMvRW1pdHRlclwiKTtcbmNvbnN0IEVudW1zXzEgPSByZXF1aXJlKFwiLi9FbnVtc1wiKTtcbmNvbnN0IFV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vVXRpbHNcIik7XG5jbGFzcyBFbWl0dGVycyB7XG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICB0aGlzLmFycmF5ID0gW107XG4gICAgICAgIHRoaXMuZW1pdHRlcnMgPSBbXTtcbiAgICAgICAgdGhpcy5pbnRlcmFjdGl2aXR5RW1pdHRlcnMgPSBbXTtcbiAgICAgICAgY29uc3Qgb3ZlcnJpZGFibGVDb250YWluZXIgPSBjb250YWluZXI7XG4gICAgICAgIG92ZXJyaWRhYmxlQ29udGFpbmVyLmdldEVtaXR0ZXIgPSAoaWR4T3JOYW1lKSA9PiBpZHhPck5hbWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgaWR4T3JOYW1lID09PSBcIm51bWJlclwiXG4gICAgICAgICAgICA/IHRoaXMuYXJyYXlbaWR4T3JOYW1lIHx8IDBdXG4gICAgICAgICAgICA6IHRoaXMuYXJyYXkuZmluZCgodCkgPT4gdC5uYW1lID09PSBpZHhPck5hbWUpO1xuICAgICAgICBvdmVycmlkYWJsZUNvbnRhaW5lci5hZGRFbWl0dGVyID0gKG9wdGlvbnMsIHBvc2l0aW9uKSA9PiB0aGlzLmFkZEVtaXR0ZXIob3B0aW9ucywgcG9zaXRpb24pO1xuICAgICAgICBvdmVycmlkYWJsZUNvbnRhaW5lci5wbGF5RW1pdHRlciA9IChpZHhPck5hbWUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVtaXR0ZXIgPSBvdmVycmlkYWJsZUNvbnRhaW5lci5nZXRFbWl0dGVyKGlkeE9yTmFtZSk7XG4gICAgICAgICAgICBpZiAoZW1pdHRlcikge1xuICAgICAgICAgICAgICAgIGVtaXR0ZXIuZXh0ZXJuYWxQbGF5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIG92ZXJyaWRhYmxlQ29udGFpbmVyLnBhdXNlRW1pdHRlciA9IChpZHhPck5hbWUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVtaXR0ZXIgPSBvdmVycmlkYWJsZUNvbnRhaW5lci5nZXRFbWl0dGVyKGlkeE9yTmFtZSk7XG4gICAgICAgICAgICBpZiAoZW1pdHRlcikge1xuICAgICAgICAgICAgICAgIGVtaXR0ZXIuZXh0ZXJuYWxQYXVzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICBpbml0KG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuZW1pdHRlcnMpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmVtaXR0ZXJzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXR0ZXJzID0gb3B0aW9ucy5lbWl0dGVycy5tYXAoKHMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdG1wID0gbmV3IEVtaXR0ZXJfMS5FbWl0dGVyKCk7XG4gICAgICAgICAgICAgICAgICAgIHRtcC5sb2FkKHMpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG1wO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZW1pdHRlcnMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXR0ZXJzID0gbmV3IEVtaXR0ZXJfMS5FbWl0dGVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdHRlcnMubG9hZChvcHRpb25zLmVtaXR0ZXJzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbnRlcmFjdGl2aXR5RW1pdHRlcnMgPSAoX2IgPSAoX2EgPSBvcHRpb25zLmludGVyYWN0aXZpdHkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5tb2RlcykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmVtaXR0ZXJzO1xuICAgICAgICBpZiAoaW50ZXJhY3Rpdml0eUVtaXR0ZXJzKSB7XG4gICAgICAgICAgICBpZiAoaW50ZXJhY3Rpdml0eUVtaXR0ZXJzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmludGVyYWN0aXZpdHlFbWl0dGVycyA9IGludGVyYWN0aXZpdHlFbWl0dGVycy5tYXAoKHMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdG1wID0gbmV3IEVtaXR0ZXJfMS5FbWl0dGVyKCk7XG4gICAgICAgICAgICAgICAgICAgIHRtcC5sb2FkKHMpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG1wO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaW50ZXJhY3Rpdml0eUVtaXR0ZXJzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnRlcmFjdGl2aXR5RW1pdHRlcnMgPSBuZXcgRW1pdHRlcl8xLkVtaXR0ZXIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5pbnRlcmFjdGl2aXR5RW1pdHRlcnMubG9hZChpbnRlcmFjdGl2aXR5RW1pdHRlcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmVtaXR0ZXJzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZW1pdHRlck9wdGlvbnMgb2YgdGhpcy5lbWl0dGVycykge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkRW1pdHRlcihlbWl0dGVyT3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFkZEVtaXR0ZXIodGhpcy5lbWl0dGVycyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcGxheSgpIHtcbiAgICAgICAgZm9yIChjb25zdCBlbWl0dGVyIG9mIHRoaXMuYXJyYXkpIHtcbiAgICAgICAgICAgIGVtaXR0ZXIucGxheSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHBhdXNlKCkge1xuICAgICAgICBmb3IgKGNvbnN0IGVtaXR0ZXIgb2YgdGhpcy5hcnJheSkge1xuICAgICAgICAgICAgZW1pdHRlci5wYXVzZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0b3AoKSB7XG4gICAgICAgIHRoaXMuYXJyYXkgPSBbXTtcbiAgICB9XG4gICAgdXBkYXRlKGRlbHRhKSB7XG4gICAgICAgIGZvciAoY29uc3QgZW1pdHRlciBvZiB0aGlzLmFycmF5KSB7XG4gICAgICAgICAgICBlbWl0dGVyLnVwZGF0ZShkZWx0YSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaGFuZGxlQ2xpY2tNb2RlKG1vZGUpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXI7XG4gICAgICAgIGNvbnN0IGVtaXR0ZXJPcHRpb25zID0gdGhpcy5lbWl0dGVycztcbiAgICAgICAgY29uc3QgbW9kZUVtaXR0ZXJzID0gdGhpcy5pbnRlcmFjdGl2aXR5RW1pdHRlcnM7XG4gICAgICAgIGlmIChtb2RlID09PSBFbnVtc18xLkVtaXR0ZXJDbGlja01vZGUuZW1pdHRlcikge1xuICAgICAgICAgICAgbGV0IGVtaXR0ZXJNb2RlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChtb2RlRW1pdHRlcnMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgIGlmIChtb2RlRW1pdHRlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBlbWl0dGVyTW9kZU9wdGlvbnMgPSAoMCwgVXRpbHNfMS5pdGVtRnJvbUFycmF5KShtb2RlRW1pdHRlcnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVtaXR0ZXJNb2RlT3B0aW9ucyA9IG1vZGVFbWl0dGVycztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGVtaXR0ZXJzT3B0aW9ucyA9IGVtaXR0ZXJNb2RlT3B0aW9ucyAhPT0gbnVsbCAmJiBlbWl0dGVyTW9kZU9wdGlvbnMgIT09IHZvaWQgMCA/IGVtaXR0ZXJNb2RlT3B0aW9ucyA6IChlbWl0dGVyT3B0aW9ucyBpbnN0YW5jZW9mIEFycmF5ID8gKDAsIFV0aWxzXzEuaXRlbUZyb21BcnJheSkoZW1pdHRlck9wdGlvbnMpIDogZW1pdHRlck9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgZVBvc2l0aW9uID0gY29udGFpbmVyLmludGVyYWN0aXZpdHkubW91c2UuY2xpY2tQb3NpdGlvbjtcbiAgICAgICAgICAgIHRoaXMuYWRkRW1pdHRlcigoMCwgVXRpbHNfMS5kZWVwRXh0ZW5kKSh7fSwgZW1pdHRlcnNPcHRpb25zKSwgZVBvc2l0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXNpemUoKSB7XG4gICAgICAgIGZvciAoY29uc3QgZW1pdHRlciBvZiB0aGlzLmFycmF5KSB7XG4gICAgICAgICAgICBlbWl0dGVyLnJlc2l6ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFkZEVtaXR0ZXIob3B0aW9ucywgcG9zaXRpb24pIHtcbiAgICAgICAgY29uc3QgZW1pdHRlciA9IG5ldyBFbWl0dGVySW5zdGFuY2VfMS5FbWl0dGVySW5zdGFuY2UodGhpcywgdGhpcy5jb250YWluZXIsIG9wdGlvbnMsIHBvc2l0aW9uKTtcbiAgICAgICAgdGhpcy5hcnJheS5wdXNoKGVtaXR0ZXIpO1xuICAgICAgICByZXR1cm4gZW1pdHRlcjtcbiAgICB9XG4gICAgcmVtb3ZlRW1pdHRlcihlbWl0dGVyKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5hcnJheS5pbmRleE9mKGVtaXR0ZXIpO1xuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgdGhpcy5hcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5FbWl0dGVycyA9IEVtaXR0ZXJzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRW1pdHRlckNsaWNrTW9kZSA9IHZvaWQgMDtcbnZhciBFbWl0dGVyQ2xpY2tNb2RlO1xuKGZ1bmN0aW9uIChFbWl0dGVyQ2xpY2tNb2RlKSB7XG4gICAgRW1pdHRlckNsaWNrTW9kZVtcImVtaXR0ZXJcIl0gPSBcImVtaXR0ZXJcIjtcbn0pKEVtaXR0ZXJDbGlja01vZGUgPSBleHBvcnRzLkVtaXR0ZXJDbGlja01vZGUgfHwgKGV4cG9ydHMuRW1pdHRlckNsaWNrTW9kZSA9IHt9KSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRW1pdHRlclNoYXBlVHlwZSA9IHZvaWQgMDtcbnZhciBFbWl0dGVyU2hhcGVUeXBlO1xuKGZ1bmN0aW9uIChFbWl0dGVyU2hhcGVUeXBlKSB7XG4gICAgRW1pdHRlclNoYXBlVHlwZVtcImNpcmNsZVwiXSA9IFwiY2lyY2xlXCI7XG4gICAgRW1pdHRlclNoYXBlVHlwZVtcInNxdWFyZVwiXSA9IFwic3F1YXJlXCI7XG59KShFbWl0dGVyU2hhcGVUeXBlID0gZXhwb3J0cy5FbWl0dGVyU2hhcGVUeXBlIHx8IChleHBvcnRzLkVtaXR0ZXJTaGFwZVR5cGUgPSB7fSkpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9FbWl0dGVyQ2xpY2tNb2RlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9FbWl0dGVyU2hhcGVUeXBlXCIpLCBleHBvcnRzKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FbWl0dGVyID0gdm9pZCAwO1xuY29uc3QgRW1pdHRlclJhdGVfMSA9IHJlcXVpcmUoXCIuL0VtaXR0ZXJSYXRlXCIpO1xuY29uc3QgRW1pdHRlckxpZmVfMSA9IHJlcXVpcmUoXCIuL0VtaXR0ZXJMaWZlXCIpO1xuY29uc3QgVXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9VdGlsc1wiKTtcbmNvbnN0IEVtaXR0ZXJTaXplXzEgPSByZXF1aXJlKFwiLi9FbWl0dGVyU2l6ZVwiKTtcbmNvbnN0IEFuaW1hdGFibGVDb2xvcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL09wdGlvbnMvQ2xhc3Nlcy9BbmltYXRhYmxlQ29sb3JcIik7XG5jb25zdCBFbnVtc18xID0gcmVxdWlyZShcIi4uLy4uL0VudW1zXCIpO1xuY2xhc3MgRW1pdHRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuYXV0b1BsYXkgPSB0cnVlO1xuICAgICAgICB0aGlzLmZpbGwgPSB0cnVlO1xuICAgICAgICB0aGlzLmxpZmUgPSBuZXcgRW1pdHRlckxpZmVfMS5FbWl0dGVyTGlmZSgpO1xuICAgICAgICB0aGlzLnJhdGUgPSBuZXcgRW1pdHRlclJhdGVfMS5FbWl0dGVyUmF0ZSgpO1xuICAgICAgICB0aGlzLnNoYXBlID0gRW51bXNfMS5FbWl0dGVyU2hhcGVUeXBlLnNxdWFyZTtcbiAgICAgICAgdGhpcy5zdGFydENvdW50ID0gMDtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5hdXRvUGxheSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmF1dG9QbGF5ID0gZGF0YS5hdXRvUGxheTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5zaXplICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnNpemUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2l6ZSA9IG5ldyBFbWl0dGVyU2l6ZV8xLkVtaXR0ZXJTaXplKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNpemUubG9hZChkYXRhLnNpemUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmRpcmVjdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IGRhdGEuZGlyZWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5maWxsID0gZGF0YS5maWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGlmZS5sb2FkKGRhdGEubGlmZSk7XG4gICAgICAgIHRoaXMubmFtZSA9IGRhdGEubmFtZTtcbiAgICAgICAgaWYgKGRhdGEucGFydGljbGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMucGFydGljbGVzID0gKDAsIFV0aWxzXzEuZGVlcEV4dGVuZCkoe30sIGRhdGEucGFydGljbGVzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJhdGUubG9hZChkYXRhLnJhdGUpO1xuICAgICAgICBpZiAoZGF0YS5zaGFwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnNoYXBlID0gZGF0YS5zaGFwZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5wb3NpdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnBvc2l0aW9uID0ge1xuICAgICAgICAgICAgICAgIHg6IGRhdGEucG9zaXRpb24ueCxcbiAgICAgICAgICAgICAgICB5OiBkYXRhLnBvc2l0aW9uLnksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLnNwYXduQ29sb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3Bhd25Db2xvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zcGF3bkNvbG9yID0gbmV3IEFuaW1hdGFibGVDb2xvcl8xLkFuaW1hdGFibGVDb2xvcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zcGF3bkNvbG9yLmxvYWQoZGF0YS5zcGF3bkNvbG9yKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5zdGFydENvdW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRDb3VudCA9IGRhdGEuc3RhcnRDb3VudDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuRW1pdHRlciA9IEVtaXR0ZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRW1pdHRlckxpZmUgPSB2b2lkIDA7XG5jbGFzcyBFbWl0dGVyTGlmZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMud2FpdCA9IGZhbHNlO1xuICAgIH1cbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmNvdW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY291bnQgPSBkYXRhLmNvdW50O1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmRlbGF5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZGVsYXkgPSBkYXRhLmRlbGF5O1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmR1cmF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLndhaXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy53YWl0ID0gZGF0YS53YWl0O1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5FbWl0dGVyTGlmZSA9IEVtaXR0ZXJMaWZlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkVtaXR0ZXJSYXRlID0gdm9pZCAwO1xuY29uc3QgVXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9VdGlsc1wiKTtcbmNsYXNzIEVtaXR0ZXJSYXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5xdWFudGl0eSA9IDE7XG4gICAgICAgIHRoaXMuZGVsYXkgPSAwLjE7XG4gICAgfVxuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEucXVhbnRpdHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5xdWFudGl0eSA9ICgwLCBVdGlsc18xLnNldFJhbmdlVmFsdWUpKGRhdGEucXVhbnRpdHkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmRlbGF5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZGVsYXkgPSAoMCwgVXRpbHNfMS5zZXRSYW5nZVZhbHVlKShkYXRhLmRlbGF5KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuRW1pdHRlclJhdGUgPSBFbWl0dGVyUmF0ZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FbWl0dGVyU2l6ZSA9IHZvaWQgMDtcbmNvbnN0IEVudW1zXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vRW51bXNcIik7XG5jbGFzcyBFbWl0dGVyU2l6ZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMubW9kZSA9IEVudW1zXzEuU2l6ZU1vZGUucGVyY2VudDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSAwO1xuICAgICAgICB0aGlzLndpZHRoID0gMDtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5tb2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMubW9kZSA9IGRhdGEubW9kZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5oZWlnaHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSBkYXRhLmhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS53aWR0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLndpZHRoID0gZGF0YS53aWR0aDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuRW1pdHRlclNpemUgPSBFbWl0dGVyU2l6ZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TaGFwZU1hbmFnZXIgPSB2b2lkIDA7XG5jb25zdCBzaGFwZXMgPSBuZXcgTWFwKCk7XG5jbGFzcyBTaGFwZU1hbmFnZXIge1xuICAgIHN0YXRpYyBhZGRTaGFwZShuYW1lLCBkcmF3ZXIpIHtcbiAgICAgICAgaWYgKCFTaGFwZU1hbmFnZXIuZ2V0U2hhcGUobmFtZSkpIHtcbiAgICAgICAgICAgIHNoYXBlcy5zZXQobmFtZSwgZHJhd2VyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgZ2V0U2hhcGUobmFtZSkge1xuICAgICAgICByZXR1cm4gc2hhcGVzLmdldChuYW1lKTtcbiAgICB9XG4gICAgc3RhdGljIGdldFN1cHBvcnRlZFNoYXBlcygpIHtcbiAgICAgICAgcmV0dXJuIHNoYXBlcy5rZXlzKCk7XG4gICAgfVxufVxuZXhwb3J0cy5TaGFwZU1hbmFnZXIgPSBTaGFwZU1hbmFnZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ2lyY2xlU2hhcGUgPSB2b2lkIDA7XG5jbGFzcyBDaXJjbGVTaGFwZSB7XG4gICAgcmFuZG9tUG9zaXRpb24ocG9zaXRpb24sIG9mZnNldCwgZmlsbCkge1xuICAgICAgICBjb25zdCBnZW5lcmF0ZVRoZXRhID0gKHgsIHkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHUgPSBNYXRoLnJhbmRvbSgpIC8gNC4wO1xuICAgICAgICAgICAgY29uc3QgdGhldGEgPSBNYXRoLmF0YW4oKHkgLyB4KSAqIE1hdGgudGFuKDIgKiBNYXRoLlBJICogdSkpO1xuICAgICAgICAgICAgY29uc3QgdiA9IE1hdGgucmFuZG9tKCk7XG4gICAgICAgICAgICBpZiAodiA8IDAuMjUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhldGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh2IDwgMC41KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguUEkgLSB0aGV0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHYgPCAwLjc1KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguUEkgKyB0aGV0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAtdGhldGE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJhZGl1cyA9ICh4LCB5LCB0aGV0YSkgPT4gKHggKiB5KSAvIE1hdGguc3FydCgoeSAqIE1hdGguY29zKHRoZXRhKSkgKiogMiArICh4ICogTWF0aC5zaW4odGhldGEpKSAqKiAyKTtcbiAgICAgICAgY29uc3QgW2EsIGJdID0gW29mZnNldC54IC8gMiwgb2Zmc2V0LnkgLyAyXTtcbiAgICAgICAgY29uc3QgcmFuZG9tVGhldGEgPSBnZW5lcmF0ZVRoZXRhKGEsIGIpLCBtYXhSYWRpdXMgPSByYWRpdXMoYSwgYiwgcmFuZG9tVGhldGEpLCByYW5kb21SYWRpdXMgPSBmaWxsID8gbWF4UmFkaXVzICogTWF0aC5zcXJ0KE1hdGgucmFuZG9tKCkpIDogbWF4UmFkaXVzO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogcG9zaXRpb24ueCArIHJhbmRvbVJhZGl1cyAqIE1hdGguY29zKHJhbmRvbVRoZXRhKSxcbiAgICAgICAgICAgIHk6IHBvc2l0aW9uLnkgKyByYW5kb21SYWRpdXMgKiBNYXRoLnNpbihyYW5kb21UaGV0YSksXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5DaXJjbGVTaGFwZSA9IENpcmNsZVNoYXBlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNxdWFyZVNoYXBlID0gdm9pZCAwO1xuZnVuY3Rpb24gcmFuZG9tU3F1YXJlQ29vcmRpbmF0ZShwb3NpdGlvbiwgb2Zmc2V0KSB7XG4gICAgcmV0dXJuIHBvc2l0aW9uICsgb2Zmc2V0ICogKE1hdGgucmFuZG9tKCkgLSAwLjUpO1xufVxuY2xhc3MgU3F1YXJlU2hhcGUge1xuICAgIHJhbmRvbVBvc2l0aW9uKHBvc2l0aW9uLCBvZmZzZXQsIGZpbGwpIHtcbiAgICAgICAgaWYgKGZpbGwpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgeDogcmFuZG9tU3F1YXJlQ29vcmRpbmF0ZShwb3NpdGlvbi54LCBvZmZzZXQueCksXG4gICAgICAgICAgICAgICAgeTogcmFuZG9tU3F1YXJlQ29vcmRpbmF0ZShwb3NpdGlvbi55LCBvZmZzZXQueSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgaGFsZlcgPSBvZmZzZXQueCAvIDIsIGhhbGZIID0gb2Zmc2V0LnkgLyAyLCBzaWRlID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNCksIHYgPSAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKiAyO1xuICAgICAgICAgICAgc3dpdGNoIChzaWRlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogcG9zaXRpb24ueCArIHYgKiBoYWxmVyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IHBvc2l0aW9uLnkgLSBoYWxmSCxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBwb3NpdGlvbi54IC0gaGFsZlcsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBwb3NpdGlvbi55ICsgdiAqIGhhbGZILFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IHBvc2l0aW9uLnggKyB2ICogaGFsZlcsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBwb3NpdGlvbi55ICsgaGFsZkgsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBwb3NpdGlvbi54ICsgaGFsZlcsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBwb3NpdGlvbi55ICsgdiAqIGhhbGZILFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5TcXVhcmVTaGFwZSA9IFNxdWFyZVNoYXBlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubG9hZEVtaXR0ZXJzUGx1Z2luID0gdm9pZCAwO1xuY29uc3QgVXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi9VdGlsc1wiKTtcbmNvbnN0IEVtaXR0ZXJzXzEgPSByZXF1aXJlKFwiLi9FbWl0dGVyc1wiKTtcbmNvbnN0IEVudW1zXzEgPSByZXF1aXJlKFwiLi9FbnVtc1wiKTtcbmNvbnN0IEVtaXR0ZXJfMSA9IHJlcXVpcmUoXCIuL09wdGlvbnMvQ2xhc3Nlcy9FbWl0dGVyXCIpO1xuY29uc3QgU2hhcGVNYW5hZ2VyXzEgPSByZXF1aXJlKFwiLi9TaGFwZU1hbmFnZXJcIik7XG5jb25zdCBDaXJjbGVTaGFwZV8xID0gcmVxdWlyZShcIi4vU2hhcGVzL0NpcmNsZS9DaXJjbGVTaGFwZVwiKTtcbmNvbnN0IFNxdWFyZVNoYXBlXzEgPSByZXF1aXJlKFwiLi9TaGFwZXMvU3F1YXJlL1NxdWFyZVNoYXBlXCIpO1xuY2xhc3MgRW1pdHRlcnNQbHVnaW4ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmlkID0gXCJlbWl0dGVyc1wiO1xuICAgIH1cbiAgICBnZXRQbHVnaW4oY29udGFpbmVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgRW1pdHRlcnNfMS5FbWl0dGVycyhjb250YWluZXIpO1xuICAgIH1cbiAgICBuZWVkc1BsdWdpbihvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZW1pdHRlcnMgPSBvcHRpb25zLmVtaXR0ZXJzO1xuICAgICAgICByZXR1cm4gKChlbWl0dGVycyBpbnN0YW5jZW9mIEFycmF5ICYmICEhZW1pdHRlcnMubGVuZ3RoKSB8fFxuICAgICAgICAgICAgZW1pdHRlcnMgIT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgKCEhKChfYyA9IChfYiA9IChfYSA9IG9wdGlvbnMuaW50ZXJhY3Rpdml0eSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmV2ZW50cykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLm9uQ2xpY2spID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5tb2RlKSAmJlxuICAgICAgICAgICAgICAgICgwLCBVdGlsc18xLmlzSW5BcnJheSkoRW51bXNfMS5FbWl0dGVyQ2xpY2tNb2RlLmVtaXR0ZXIsIG9wdGlvbnMuaW50ZXJhY3Rpdml0eS5ldmVudHMub25DbGljay5tb2RlKSkpO1xuICAgIH1cbiAgICBsb2FkT3B0aW9ucyhvcHRpb25zLCBzb3VyY2UpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgaWYgKCF0aGlzLm5lZWRzUGx1Z2luKG9wdGlvbnMpICYmICF0aGlzLm5lZWRzUGx1Z2luKHNvdXJjZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvcHRpb25zQ2FzdCA9IG9wdGlvbnM7XG4gICAgICAgIGlmIChzb3VyY2UgPT09IG51bGwgfHwgc291cmNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzb3VyY2UuZW1pdHRlcnMpIHtcbiAgICAgICAgICAgIGlmICgoc291cmNlID09PSBudWxsIHx8IHNvdXJjZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc291cmNlLmVtaXR0ZXJzKSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICAgICAgb3B0aW9uc0Nhc3QuZW1pdHRlcnMgPSBzb3VyY2UgPT09IG51bGwgfHwgc291cmNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzb3VyY2UuZW1pdHRlcnMubWFwKChzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRtcCA9IG5ldyBFbWl0dGVyXzEuRW1pdHRlcigpO1xuICAgICAgICAgICAgICAgICAgICB0bXAubG9hZChzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRtcDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBlbWl0dGVyT3B0aW9ucyA9IG9wdGlvbnNDYXN0LmVtaXR0ZXJzO1xuICAgICAgICAgICAgICAgIGlmICgoZW1pdHRlck9wdGlvbnMgPT09IG51bGwgfHwgZW1pdHRlck9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGVtaXR0ZXJPcHRpb25zLmxvYWQpID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uc0Nhc3QuZW1pdHRlcnMgPSBlbWl0dGVyT3B0aW9ucyA9IG5ldyBFbWl0dGVyXzEuRW1pdHRlcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbWl0dGVyT3B0aW9ucy5sb2FkKHNvdXJjZSA9PT0gbnVsbCB8fCBzb3VyY2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNvdXJjZS5lbWl0dGVycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW50ZXJhY3Rpdml0eUVtaXR0ZXJzID0gKF9iID0gKF9hID0gc291cmNlID09PSBudWxsIHx8IHNvdXJjZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc291cmNlLmludGVyYWN0aXZpdHkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5tb2RlcykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmVtaXR0ZXJzO1xuICAgICAgICBpZiAoaW50ZXJhY3Rpdml0eUVtaXR0ZXJzKSB7XG4gICAgICAgICAgICBpZiAoaW50ZXJhY3Rpdml0eUVtaXR0ZXJzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zQ2FzdC5pbnRlcmFjdGl2aXR5Lm1vZGVzLmVtaXR0ZXJzID0gaW50ZXJhY3Rpdml0eUVtaXR0ZXJzLm1hcCgocykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0bXAgPSBuZXcgRW1pdHRlcl8xLkVtaXR0ZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgdG1wLmxvYWQocyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0bXA7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgZW1pdHRlck9wdGlvbnMgPSBvcHRpb25zQ2FzdC5pbnRlcmFjdGl2aXR5Lm1vZGVzLmVtaXR0ZXJzO1xuICAgICAgICAgICAgICAgIGlmICgoZW1pdHRlck9wdGlvbnMgPT09IG51bGwgfHwgZW1pdHRlck9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGVtaXR0ZXJPcHRpb25zLmxvYWQpID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uc0Nhc3QuaW50ZXJhY3Rpdml0eS5tb2Rlcy5lbWl0dGVycyA9IGVtaXR0ZXJPcHRpb25zID0gbmV3IEVtaXR0ZXJfMS5FbWl0dGVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVtaXR0ZXJPcHRpb25zLmxvYWQoaW50ZXJhY3Rpdml0eUVtaXR0ZXJzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIGxvYWRFbWl0dGVyc1BsdWdpbih0c1BhcnRpY2xlcykge1xuICAgIGNvbnN0IHBsdWdpbiA9IG5ldyBFbWl0dGVyc1BsdWdpbigpO1xuICAgIGF3YWl0IHRzUGFydGljbGVzLmFkZFBsdWdpbihwbHVnaW4pO1xuICAgIGlmICghdHNQYXJ0aWNsZXMuYWRkRW1pdHRlclNoYXBlKSB7XG4gICAgICAgIHRzUGFydGljbGVzLmFkZEVtaXR0ZXJTaGFwZSA9IChuYW1lLCBzaGFwZSkgPT4ge1xuICAgICAgICAgICAgU2hhcGVNYW5hZ2VyXzEuU2hhcGVNYW5hZ2VyLmFkZFNoYXBlKG5hbWUsIHNoYXBlKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgdHNQYXJ0aWNsZXMuYWRkRW1pdHRlclNoYXBlKEVudW1zXzEuRW1pdHRlclNoYXBlVHlwZS5jaXJjbGUsIG5ldyBDaXJjbGVTaGFwZV8xLkNpcmNsZVNoYXBlKCkpO1xuICAgIHRzUGFydGljbGVzLmFkZEVtaXR0ZXJTaGFwZShFbnVtc18xLkVtaXR0ZXJTaGFwZVR5cGUuc3F1YXJlLCBuZXcgU3F1YXJlU2hhcGVfMS5TcXVhcmVTaGFwZSgpKTtcbn1cbmV4cG9ydHMubG9hZEVtaXR0ZXJzUGx1Z2luID0gbG9hZEVtaXR0ZXJzUGx1Z2luO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0VtaXR0ZXJzTWFpblwiKSwgZXhwb3J0cyk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSW5saW5lQXJyYW5nZW1lbnQgPSB2b2lkIDA7XG52YXIgSW5saW5lQXJyYW5nZW1lbnQ7XG4oZnVuY3Rpb24gKElubGluZUFycmFuZ2VtZW50KSB7XG4gICAgSW5saW5lQXJyYW5nZW1lbnRbXCJlcXVpZGlzdGFudFwiXSA9IFwiZXF1aWRpc3RhbnRcIjtcbiAgICBJbmxpbmVBcnJhbmdlbWVudFtcIm9uZVBlclBvaW50XCJdID0gXCJvbmUtcGVyLXBvaW50XCI7XG4gICAgSW5saW5lQXJyYW5nZW1lbnRbXCJwZXJQb2ludFwiXSA9IFwicGVyLXBvaW50XCI7XG4gICAgSW5saW5lQXJyYW5nZW1lbnRbXCJyYW5kb21MZW5ndGhcIl0gPSBcInJhbmRvbS1sZW5ndGhcIjtcbiAgICBJbmxpbmVBcnJhbmdlbWVudFtcInJhbmRvbVBvaW50XCJdID0gXCJyYW5kb20tcG9pbnRcIjtcbn0pKElubGluZUFycmFuZ2VtZW50ID0gZXhwb3J0cy5JbmxpbmVBcnJhbmdlbWVudCB8fCAoZXhwb3J0cy5JbmxpbmVBcnJhbmdlbWVudCA9IHt9KSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTW92ZVR5cGUgPSB2b2lkIDA7XG52YXIgTW92ZVR5cGU7XG4oZnVuY3Rpb24gKE1vdmVUeXBlKSB7XG4gICAgTW92ZVR5cGVbXCJwYXRoXCJdID0gXCJwYXRoXCI7XG4gICAgTW92ZVR5cGVbXCJyYWRpdXNcIl0gPSBcInJhZGl1c1wiO1xufSkoTW92ZVR5cGUgPSBleHBvcnRzLk1vdmVUeXBlIHx8IChleHBvcnRzLk1vdmVUeXBlID0ge30pKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UeXBlID0gdm9pZCAwO1xudmFyIFR5cGU7XG4oZnVuY3Rpb24gKFR5cGUpIHtcbiAgICBUeXBlW1wiaW5saW5lXCJdID0gXCJpbmxpbmVcIjtcbiAgICBUeXBlW1wiaW5zaWRlXCJdID0gXCJpbnNpZGVcIjtcbiAgICBUeXBlW1wib3V0c2lkZVwiXSA9IFwib3V0c2lkZVwiO1xuICAgIFR5cGVbXCJub25lXCJdID0gXCJub25lXCI7XG59KShUeXBlID0gZXhwb3J0cy5UeXBlIHx8IChleHBvcnRzLlR5cGUgPSB7fSkpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9JbmxpbmVBcnJhbmdlbWVudFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vTW92ZVR5cGVcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL1R5cGVcIiksIGV4cG9ydHMpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRyYXcgPSB2b2lkIDA7XG5jb25zdCBEcmF3U3Ryb2tlXzEgPSByZXF1aXJlKFwiLi9EcmF3U3Ryb2tlXCIpO1xuY29uc3QgT3B0aW9uc0NvbG9yXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vT3B0aW9ucy9DbGFzc2VzL09wdGlvbnNDb2xvclwiKTtcbmNsYXNzIERyYXcge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmVuYWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnN0cm9rZSA9IG5ldyBEcmF3U3Ryb2tlXzEuRHJhd1N0cm9rZSgpO1xuICAgIH1cbiAgICBnZXQgbGluZVdpZHRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdHJva2Uud2lkdGg7XG4gICAgfVxuICAgIHNldCBsaW5lV2lkdGgodmFsdWUpIHtcbiAgICAgICAgdGhpcy5zdHJva2Uud2lkdGggPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IGxpbmVDb2xvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3Ryb2tlLmNvbG9yO1xuICAgIH1cbiAgICBzZXQgbGluZUNvbG9yKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuc3Ryb2tlLmNvbG9yID0gT3B0aW9uc0NvbG9yXzEuT3B0aW9uc0NvbG9yLmNyZWF0ZSh0aGlzLnN0cm9rZS5jb2xvciwgdmFsdWUpO1xuICAgIH1cbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoZGF0YS5lbmFibGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW5hYmxlID0gZGF0YS5lbmFibGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzdHJva2UgPSAoX2EgPSBkYXRhLnN0cm9rZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBkYXRhLmxpbmVDb2xvcixcbiAgICAgICAgICAgICAgICB3aWR0aDogZGF0YS5saW5lV2lkdGgsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5zdHJva2UubG9hZChzdHJva2UpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5EcmF3ID0gRHJhdztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5EcmF3U3Ryb2tlID0gdm9pZCAwO1xuY29uc3QgT3B0aW9uc0NvbG9yXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vT3B0aW9ucy9DbGFzc2VzL09wdGlvbnNDb2xvclwiKTtcbmNvbnN0IFV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vVXRpbHNcIik7XG5jbGFzcyBEcmF3U3Ryb2tlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5jb2xvciA9IG5ldyBPcHRpb25zQ29sb3JfMS5PcHRpb25zQ29sb3IoKTtcbiAgICAgICAgdGhpcy53aWR0aCA9IDAuNTtcbiAgICAgICAgdGhpcy5vcGFjaXR5ID0gMTtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKGRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5jb2xvciA9IE9wdGlvbnNDb2xvcl8xLk9wdGlvbnNDb2xvci5jcmVhdGUodGhpcy5jb2xvciwgZGF0YS5jb2xvcik7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuY29sb3IudmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wYWNpdHkgPSAoX2EgPSAoMCwgVXRpbHNfMS5zdHJpbmdUb0FscGhhKSh0aGlzLmNvbG9yLnZhbHVlKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdGhpcy5vcGFjaXR5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGEub3BhY2l0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vcGFjaXR5ID0gZGF0YS5vcGFjaXR5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGEud2lkdGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMud2lkdGggPSBkYXRhLndpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5EcmF3U3Ryb2tlID0gRHJhd1N0cm9rZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5JbmxpbmUgPSB2b2lkIDA7XG5jb25zdCBFbnVtc18xID0gcmVxdWlyZShcIi4uLy4uL0VudW1zXCIpO1xuY2xhc3MgSW5saW5lIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5hcnJhbmdlbWVudCA9IEVudW1zXzEuSW5saW5lQXJyYW5nZW1lbnQub25lUGVyUG9pbnQ7XG4gICAgfVxuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICBpZiAoZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoZGF0YS5hcnJhbmdlbWVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hcnJhbmdlbWVudCA9IGRhdGEuYXJyYW5nZW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLklubGluZSA9IElubGluZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Mb2NhbFN2ZyA9IHZvaWQgMDtcbmNsYXNzIExvY2FsU3ZnIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5wYXRoID0gW107XG4gICAgICAgIHRoaXMuc2l6ZSA9IHtcbiAgICAgICAgICAgIGhlaWdodDogMCxcbiAgICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgaWYgKGRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKGRhdGEucGF0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXRoID0gZGF0YS5wYXRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGEuc2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuc2l6ZS53aWR0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2l6ZS53aWR0aCA9IGRhdGEuc2l6ZS53aWR0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuc2l6ZS5oZWlnaHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNpemUuaGVpZ2h0ID0gZGF0YS5zaXplLmhlaWdodDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkxvY2FsU3ZnID0gTG9jYWxTdmc7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTW92ZSA9IHZvaWQgMDtcbmNvbnN0IEVudW1zXzEgPSByZXF1aXJlKFwiLi4vLi4vRW51bXNcIik7XG5jbGFzcyBNb3ZlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5yYWRpdXMgPSAxMDtcbiAgICAgICAgdGhpcy50eXBlID0gRW51bXNfMS5Nb3ZlVHlwZS5wYXRoO1xuICAgIH1cbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgaWYgKGRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKGRhdGEucmFkaXVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJhZGl1cyA9IGRhdGEucmFkaXVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGEudHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50eXBlID0gZGF0YS50eXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5Nb3ZlID0gTW92ZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Qb2x5Z29uTWFzayA9IHZvaWQgMDtcbmNvbnN0IEVudW1zXzEgPSByZXF1aXJlKFwiLi4vLi4vRW51bXNcIik7XG5jb25zdCBEcmF3XzEgPSByZXF1aXJlKFwiLi9EcmF3XCIpO1xuY29uc3QgTW92ZV8xID0gcmVxdWlyZShcIi4vTW92ZVwiKTtcbmNvbnN0IElubGluZV8xID0gcmVxdWlyZShcIi4vSW5saW5lXCIpO1xuY29uc3QgTG9jYWxTdmdfMSA9IHJlcXVpcmUoXCIuL0xvY2FsU3ZnXCIpO1xuY29uc3QgVXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9VdGlsc1wiKTtcbmNsYXNzIFBvbHlnb25NYXNrIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5kcmF3ID0gbmV3IERyYXdfMS5EcmF3KCk7XG4gICAgICAgIHRoaXMuZW5hYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaW5saW5lID0gbmV3IElubGluZV8xLklubGluZSgpO1xuICAgICAgICB0aGlzLm1vdmUgPSBuZXcgTW92ZV8xLk1vdmUoKTtcbiAgICAgICAgdGhpcy5zY2FsZSA9IDE7XG4gICAgICAgIHRoaXMudHlwZSA9IEVudW1zXzEuVHlwZS5ub25lO1xuICAgIH1cbiAgICBnZXQgaW5saW5lQXJyYW5nZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlubGluZS5hcnJhbmdlbWVudDtcbiAgICB9XG4gICAgc2V0IGlubGluZUFycmFuZ2VtZW50KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuaW5saW5lLmFycmFuZ2VtZW50ID0gdmFsdWU7XG4gICAgfVxuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmIChkYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhdy5sb2FkKGRhdGEuZHJhdyk7XG4gICAgICAgICAgICBjb25zdCBpbmxpbmUgPSAoX2EgPSBkYXRhLmlubGluZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge1xuICAgICAgICAgICAgICAgIGFycmFuZ2VtZW50OiBkYXRhLmlubGluZUFycmFuZ2VtZW50LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChpbmxpbmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5saW5lLmxvYWQoaW5saW5lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubW92ZS5sb2FkKGRhdGEubW92ZSk7XG4gICAgICAgICAgICBpZiAoZGF0YS5zY2FsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zY2FsZSA9IGRhdGEuc2NhbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0YS50eXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnR5cGUgPSBkYXRhLnR5cGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0YS5lbmFibGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW5hYmxlID0gZGF0YS5lbmFibGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVuYWJsZSA9IHRoaXMudHlwZSAhPT0gRW51bXNfMS5UeXBlLm5vbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0YS51cmwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMudXJsID0gZGF0YS51cmw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0YS5kYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRhdGEuZGF0YSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEgPSBkYXRhLmRhdGE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEgPSBuZXcgTG9jYWxTdmdfMS5Mb2NhbFN2ZygpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEubG9hZChkYXRhLmRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkYXRhLnBvc2l0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uID0gKDAsIFV0aWxzXzEuZGVlcEV4dGVuZCkoe30sIGRhdGEucG9zaXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5Qb2x5Z29uTWFzayA9IFBvbHlnb25NYXNrO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBvbHlnb25NYXNrSW5zdGFuY2UgPSB2b2lkIDA7XG5jb25zdCBFbnVtc18xID0gcmVxdWlyZShcIi4vRW51bXNcIik7XG5jb25zdCBVdGlsc18xID0gcmVxdWlyZShcIi4uLy4uL1V0aWxzXCIpO1xuY29uc3QgUG9seWdvbk1hc2tfMSA9IHJlcXVpcmUoXCIuL09wdGlvbnMvQ2xhc3Nlcy9Qb2x5Z29uTWFza1wiKTtcbmNvbnN0IEVudW1zXzIgPSByZXF1aXJlKFwiLi4vLi4vRW51bXNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5jbGFzcyBQb2x5Z29uTWFza0luc3RhbmNlIHtcbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXIpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgICAgIHRoaXMuZGltZW5zaW9uID0ge1xuICAgICAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucGF0aDJEU3VwcG9ydGVkID0gISF3aW5kb3cuUGF0aDJEO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBuZXcgUG9seWdvbk1hc2tfMS5Qb2x5Z29uTWFzaygpO1xuICAgICAgICB0aGlzLnBvbHlnb25NYXNrTW92ZVJhZGl1cyA9IHRoaXMub3B0aW9ucy5tb3ZlLnJhZGl1cyAqIGNvbnRhaW5lci5yZXRpbmEucGl4ZWxSYXRpbztcbiAgICB9XG4gICAgYXN5bmMgaW5pdEFzeW5jKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmxvYWQob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnBvbHlnb24pO1xuICAgICAgICBjb25zdCBwb2x5Z29uTWFza09wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIHRoaXMucG9seWdvbk1hc2tNb3ZlUmFkaXVzID0gcG9seWdvbk1hc2tPcHRpb25zLm1vdmUucmFkaXVzICogdGhpcy5jb250YWluZXIucmV0aW5hLnBpeGVsUmF0aW87XG4gICAgICAgIGlmIChwb2x5Z29uTWFza09wdGlvbnMuZW5hYmxlKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmluaXRSYXdEYXRhKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVzaXplKCkge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcjtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgaWYgKCEob3B0aW9ucy5lbmFibGUgJiYgb3B0aW9ucy50eXBlICE9PSBFbnVtc18xLlR5cGUubm9uZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5yZWRyYXdUaW1lb3V0KSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5yZWRyYXdUaW1lb3V0KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlZHJhd1RpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmluaXRSYXdEYXRhKHRydWUpO1xuICAgICAgICAgICAgY29udGFpbmVyLnBhcnRpY2xlcy5yZWRyYXcoKTtcbiAgICAgICAgfSwgMjUwKTtcbiAgICB9XG4gICAgc3RvcCgpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMucmF3O1xuICAgICAgICBkZWxldGUgdGhpcy5wYXRocztcbiAgICB9XG4gICAgcGFydGljbGVzSW5pdGlhbGl6YXRpb24oKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGlmIChvcHRpb25zLmVuYWJsZSAmJlxuICAgICAgICAgICAgb3B0aW9ucy50eXBlID09PSBFbnVtc18xLlR5cGUuaW5saW5lICYmXG4gICAgICAgICAgICAob3B0aW9ucy5pbmxpbmUuYXJyYW5nZW1lbnQgPT09IEVudW1zXzEuSW5saW5lQXJyYW5nZW1lbnQub25lUGVyUG9pbnQgfHxcbiAgICAgICAgICAgICAgICBvcHRpb25zLmlubGluZS5hcnJhbmdlbWVudCA9PT0gRW51bXNfMS5JbmxpbmVBcnJhbmdlbWVudC5wZXJQb2ludCkpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd1BvaW50cygpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBwYXJ0aWNsZVBvc2l0aW9uKHBvc2l0aW9uKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGlmICghKG9wdGlvbnMuZW5hYmxlICYmICgoX2IgPSAoX2EgPSB0aGlzLnJhdykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMCkgPiAwKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoMCwgVXRpbHNfMS5kZWVwRXh0ZW5kKSh7fSwgcG9zaXRpb24gPyBwb3NpdGlvbiA6IHRoaXMucmFuZG9tUG9pbnQoKSk7XG4gICAgfVxuICAgIHBhcnRpY2xlQm91bmNlKHBhcnRpY2xlLCBkZWx0YSwgZGlyZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvbHlnb25Cb3VuY2UocGFydGljbGUsIGRlbHRhLCBkaXJlY3Rpb24pO1xuICAgIH1cbiAgICBjbGlja1Bvc2l0aW9uVmFsaWQocG9zaXRpb24pIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgcmV0dXJuIChvcHRpb25zLmVuYWJsZSAmJlxuICAgICAgICAgICAgb3B0aW9ucy50eXBlICE9PSBFbnVtc18xLlR5cGUubm9uZSAmJlxuICAgICAgICAgICAgb3B0aW9ucy50eXBlICE9PSBFbnVtc18xLlR5cGUuaW5saW5lICYmXG4gICAgICAgICAgICB0aGlzLmNoZWNrSW5zaWRlUG9seWdvbihwb3NpdGlvbikpO1xuICAgIH1cbiAgICBkcmF3KGNvbnRleHQpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoISgoX2EgPSB0aGlzLnBhdGhzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGVuZ3RoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHBvbHlnb25EcmF3ID0gb3B0aW9ucy5kcmF3O1xuICAgICAgICBpZiAoIShvcHRpb25zLmVuYWJsZSAmJiBwb2x5Z29uRHJhdy5lbmFibGUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmF3RGF0YSA9IHRoaXMucmF3O1xuICAgICAgICBmb3IgKGNvbnN0IHBhdGggb2YgdGhpcy5wYXRocykge1xuICAgICAgICAgICAgY29uc3QgcGF0aDJkID0gcGF0aC5wYXRoMmQ7XG4gICAgICAgICAgICBjb25zdCBwYXRoMmRTdXBwb3J0ZWQgPSB0aGlzLnBhdGgyRFN1cHBvcnRlZDtcbiAgICAgICAgICAgIGlmICghY29udGV4dCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhdGgyZFN1cHBvcnRlZCAmJiBwYXRoMmQgJiYgdGhpcy5vZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAoMCwgdXRpbHNfMS5kcmF3UG9seWdvbk1hc2tQYXRoKShjb250ZXh0LCBwYXRoMmQsIHBvbHlnb25EcmF3LnN0cm9rZSwgdGhpcy5vZmZzZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocmF3RGF0YSkge1xuICAgICAgICAgICAgICAgICgwLCB1dGlsc18xLmRyYXdQb2x5Z29uTWFzaykoY29udGV4dCwgcmF3RGF0YSwgcG9seWdvbkRyYXcuc3Ryb2tlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBwb2x5Z29uQm91bmNlKHBhcnRpY2xlLCBfZGVsdGEsIGRpcmVjdGlvbikge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBpZiAoIXRoaXMucmF3IHx8ICFvcHRpb25zLmVuYWJsZSB8fCBkaXJlY3Rpb24gIT09IEVudW1zXzIuT3V0TW9kZURpcmVjdGlvbi50b3ApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy50eXBlID09PSBFbnVtc18xLlR5cGUuaW5zaWRlIHx8IG9wdGlvbnMudHlwZSA9PT0gRW51bXNfMS5UeXBlLm91dHNpZGUpIHtcbiAgICAgICAgICAgIGxldCBjbG9zZXN0LCBkeCwgZHk7XG4gICAgICAgICAgICBjb25zdCBwb3MgPSBwYXJ0aWNsZS5nZXRQb3NpdGlvbigpLCByYWRpdXMgPSBwYXJ0aWNsZS5nZXRSYWRpdXMoKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBqID0gdGhpcy5yYXcubGVuZ3RoIC0gMTsgaSA8IHRoaXMucmF3Lmxlbmd0aDsgaiA9IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBpID0gdGhpcy5yYXdbaV0sIHBqID0gdGhpcy5yYXdbal07XG4gICAgICAgICAgICAgICAgY2xvc2VzdCA9ICgwLCB1dGlsc18xLmNhbGNDbG9zZXN0UHRPblNlZ21lbnQpKHBpLCBwaiwgcG9zKTtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXN0ID0gKDAsIFV0aWxzXzEuZ2V0RGlzdGFuY2VzKShwb3MsIGNsb3Nlc3QpO1xuICAgICAgICAgICAgICAgIFtkeCwgZHldID0gW2Rpc3QuZHgsIGRpc3QuZHldO1xuICAgICAgICAgICAgICAgIGlmIChkaXN0LmRpc3RhbmNlIDwgcmFkaXVzKSB7XG4gICAgICAgICAgICAgICAgICAgICgwLCB1dGlsc18xLnNlZ21lbnRCb3VuY2UpKHBpLCBwaiwgcGFydGljbGUudmVsb2NpdHkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2xvc2VzdCAmJiBkeCAhPT0gdW5kZWZpbmVkICYmIGR5ICE9PSB1bmRlZmluZWQgJiYgIXRoaXMuY2hlY2tJbnNpZGVQb2x5Z29uKHBvcykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmYWN0b3IgPSB7IHg6IDEsIHk6IDEgfTtcbiAgICAgICAgICAgICAgICBpZiAocGFydGljbGUucG9zaXRpb24ueCA+PSBjbG9zZXN0LngpIHtcbiAgICAgICAgICAgICAgICAgICAgZmFjdG9yLnggPSAtMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHBhcnRpY2xlLnBvc2l0aW9uLnkgPj0gY2xvc2VzdC55KSB7XG4gICAgICAgICAgICAgICAgICAgIGZhY3Rvci55ID0gLTE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBhcnRpY2xlLnBvc2l0aW9uLnggPSBjbG9zZXN0LnggKyByYWRpdXMgKiAyICogZmFjdG9yLng7XG4gICAgICAgICAgICAgICAgcGFydGljbGUucG9zaXRpb24ueSA9IGNsb3Nlc3QueSArIHJhZGl1cyAqIDIgKiBmYWN0b3IueTtcbiAgICAgICAgICAgICAgICBwYXJ0aWNsZS52ZWxvY2l0eS5tdWx0KC0xKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvcHRpb25zLnR5cGUgPT09IEVudW1zXzEuVHlwZS5pbmxpbmUgJiYgcGFydGljbGUuaW5pdGlhbFBvc2l0aW9uKSB7XG4gICAgICAgICAgICBjb25zdCBkaXN0ID0gKDAsIFV0aWxzXzEuZ2V0RGlzdGFuY2UpKHBhcnRpY2xlLmluaXRpYWxQb3NpdGlvbiwgcGFydGljbGUuZ2V0UG9zaXRpb24oKSk7XG4gICAgICAgICAgICBpZiAoZGlzdCA+IHRoaXMucG9seWdvbk1hc2tNb3ZlUmFkaXVzKSB7XG4gICAgICAgICAgICAgICAgcGFydGljbGUudmVsb2NpdHkueCA9IHBhcnRpY2xlLnZlbG9jaXR5LnkgLyAyIC0gcGFydGljbGUudmVsb2NpdHkueDtcbiAgICAgICAgICAgICAgICBwYXJ0aWNsZS52ZWxvY2l0eS55ID0gcGFydGljbGUudmVsb2NpdHkueCAvIDIgLSBwYXJ0aWNsZS52ZWxvY2l0eS55O1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY2hlY2tJbnNpZGVQb2x5Z29uKHBvc2l0aW9uKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBpZiAoIW9wdGlvbnMuZW5hYmxlIHx8IG9wdGlvbnMudHlwZSA9PT0gRW51bXNfMS5UeXBlLm5vbmUgfHwgb3B0aW9ucy50eXBlID09PSBFbnVtc18xLlR5cGUuaW5saW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMucmF3KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoVXRpbHNfMS5Db25zdGFudHMubm9Qb2x5Z29uRm91bmQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNhbnZhc1NpemUgPSBjb250YWluZXIuY2FudmFzLnNpemU7XG4gICAgICAgIGNvbnN0IHggPSAoX2EgPSBwb3NpdGlvbiA9PT0gbnVsbCB8fCBwb3NpdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogcG9zaXRpb24ueCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogTWF0aC5yYW5kb20oKSAqIGNhbnZhc1NpemUud2lkdGg7XG4gICAgICAgIGNvbnN0IHkgPSAoX2IgPSBwb3NpdGlvbiA9PT0gbnVsbCB8fCBwb3NpdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogcG9zaXRpb24ueSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogTWF0aC5yYW5kb20oKSAqIGNhbnZhc1NpemUuaGVpZ2h0O1xuICAgICAgICBsZXQgaW5zaWRlID0gZmFsc2U7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBqID0gdGhpcy5yYXcubGVuZ3RoIC0gMTsgaSA8IHRoaXMucmF3Lmxlbmd0aDsgaiA9IGkrKykge1xuICAgICAgICAgICAgY29uc3QgcGkgPSB0aGlzLnJhd1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHBqID0gdGhpcy5yYXdbal07XG4gICAgICAgICAgICBjb25zdCBpbnRlcnNlY3QgPSBwaS55ID4geSAhPT0gcGoueSA+IHkgJiYgeCA8ICgocGoueCAtIHBpLngpICogKHkgLSBwaS55KSkgLyAocGoueSAtIHBpLnkpICsgcGkueDtcbiAgICAgICAgICAgIGlmIChpbnRlcnNlY3QpIHtcbiAgICAgICAgICAgICAgICBpbnNpZGUgPSAhaW5zaWRlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcHRpb25zLnR5cGUgPT09IEVudW1zXzEuVHlwZS5pbnNpZGUgPyBpbnNpZGUgOiBvcHRpb25zLnR5cGUgPT09IEVudW1zXzEuVHlwZS5vdXRzaWRlID8gIWluc2lkZSA6IGZhbHNlO1xuICAgIH1cbiAgICBwYXJzZVN2Z1BhdGgoeG1sLCBmb3JjZSkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgY29uc3QgZm9yY2VEb3dubG9hZCA9IGZvcmNlICE9PSBudWxsICYmIGZvcmNlICE9PSB2b2lkIDAgPyBmb3JjZSA6IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5wYXRocyAhPT0gdW5kZWZpbmVkICYmICFmb3JjZURvd25sb2FkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yYXc7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXI7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcbiAgICAgICAgY29uc3QgZG9jID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyh4bWwsIFwiaW1hZ2Uvc3ZnK3htbFwiKTtcbiAgICAgICAgY29uc3Qgc3ZnID0gZG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic3ZnXCIpWzBdO1xuICAgICAgICBsZXQgc3ZnUGF0aHMgPSBzdmcuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJwYXRoXCIpO1xuICAgICAgICBpZiAoIXN2Z1BhdGhzLmxlbmd0aCkge1xuICAgICAgICAgICAgc3ZnUGF0aHMgPSBkb2MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJwYXRoXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGF0aHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdmdQYXRocy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgcGF0aCA9IHN2Z1BhdGhzLml0ZW0oaSk7XG4gICAgICAgICAgICBpZiAocGF0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMucGF0aHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IHBhdGgsXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aDogcGF0aC5nZXRUb3RhbExlbmd0aCgpLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHB4UmF0aW8gPSBjb250YWluZXIucmV0aW5hLnBpeGVsUmF0aW87XG4gICAgICAgIGNvbnN0IHNjYWxlID0gb3B0aW9ucy5zY2FsZSAvIHB4UmF0aW87XG4gICAgICAgIHRoaXMuZGltZW5zaW9uLndpZHRoID0gcGFyc2VGbG9hdCgoX2EgPSBzdmcuZ2V0QXR0cmlidXRlKFwid2lkdGhcIikpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFwiMFwiKSAqIHNjYWxlO1xuICAgICAgICB0aGlzLmRpbWVuc2lvbi5oZWlnaHQgPSBwYXJzZUZsb2F0KChfYiA9IHN2Zy5nZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIikpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFwiMFwiKSAqIHNjYWxlO1xuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IChfYyA9IG9wdGlvbnMucG9zaXRpb24pICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IHtcbiAgICAgICAgICAgIHg6IDUwLFxuICAgICAgICAgICAgeTogNTAsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub2Zmc2V0ID0ge1xuICAgICAgICAgICAgeDogKGNvbnRhaW5lci5jYW52YXMuc2l6ZS53aWR0aCAqIHBvc2l0aW9uLngpIC8gKDEwMCAqIHB4UmF0aW8pIC0gdGhpcy5kaW1lbnNpb24ud2lkdGggLyAyLFxuICAgICAgICAgICAgeTogKGNvbnRhaW5lci5jYW52YXMuc2l6ZS5oZWlnaHQgKiBwb3NpdGlvbi55KSAvICgxMDAgKiBweFJhdGlvKSAtIHRoaXMuZGltZW5zaW9uLmhlaWdodCAvIDIsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiAoMCwgdXRpbHNfMS5wYXJzZVBhdGhzKSh0aGlzLnBhdGhzLCBzY2FsZSwgdGhpcy5vZmZzZXQpO1xuICAgIH1cbiAgICBhc3luYyBkb3dubG9hZFN2Z1BhdGgoc3ZnVXJsLCBmb3JjZSkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB1cmwgPSBzdmdVcmwgfHwgb3B0aW9ucy51cmw7XG4gICAgICAgIGNvbnN0IGZvcmNlRG93bmxvYWQgPSBmb3JjZSAhPT0gbnVsbCAmJiBmb3JjZSAhPT0gdm9pZCAwID8gZm9yY2UgOiBmYWxzZTtcbiAgICAgICAgaWYgKCF1cmwgfHwgKHRoaXMucGF0aHMgIT09IHVuZGVmaW5lZCAmJiAhZm9yY2VEb3dubG9hZCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJhdztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXEgPSBhd2FpdCBmZXRjaCh1cmwpO1xuICAgICAgICBpZiAoIXJlcS5vaykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHNQYXJ0aWNsZXMgRXJyb3IgLSBFcnJvciBvY2N1cnJlZCBkdXJpbmcgcG9seWdvbiBtYXNrIGRvd25sb2FkXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlU3ZnUGF0aChhd2FpdCByZXEudGV4dCgpLCBmb3JjZSk7XG4gICAgfVxuICAgIGRyYXdQb2ludHMoKSB7XG4gICAgICAgIGlmICghdGhpcy5yYXcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdGhpcy5yYXcpIHtcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLnBhcnRpY2xlcy5hZGRQYXJ0aWNsZSh7XG4gICAgICAgICAgICAgICAgeDogaXRlbS54LFxuICAgICAgICAgICAgICAgIHk6IGl0ZW0ueSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJhbmRvbVBvaW50KCkge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcjtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgbGV0IHBvc2l0aW9uO1xuICAgICAgICBpZiAob3B0aW9ucy50eXBlID09PSBFbnVtc18xLlR5cGUuaW5saW5lKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKG9wdGlvbnMuaW5saW5lLmFycmFuZ2VtZW50KSB7XG4gICAgICAgICAgICAgICAgY2FzZSBFbnVtc18xLklubGluZUFycmFuZ2VtZW50LnJhbmRvbVBvaW50OlxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IHRoaXMuZ2V0UmFuZG9tUG9pbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBFbnVtc18xLklubGluZUFycmFuZ2VtZW50LnJhbmRvbUxlbmd0aDpcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gPSB0aGlzLmdldFJhbmRvbVBvaW50QnlMZW5ndGgoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBFbnVtc18xLklubGluZUFycmFuZ2VtZW50LmVxdWlkaXN0YW50OlxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IHRoaXMuZ2V0RXF1aWRpc3RhbnRQb2ludEJ5SW5kZXgoY29udGFpbmVyLnBhcnRpY2xlcy5jb3VudCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgRW51bXNfMS5JbmxpbmVBcnJhbmdlbWVudC5vbmVQZXJQb2ludDpcbiAgICAgICAgICAgICAgICBjYXNlIEVudW1zXzEuSW5saW5lQXJyYW5nZW1lbnQucGVyUG9pbnQ6XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gPSB0aGlzLmdldFBvaW50QnlJbmRleChjb250YWluZXIucGFydGljbGVzLmNvdW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBvc2l0aW9uID0ge1xuICAgICAgICAgICAgICAgIHg6IE1hdGgucmFuZG9tKCkgKiBjb250YWluZXIuY2FudmFzLnNpemUud2lkdGgsXG4gICAgICAgICAgICAgICAgeTogTWF0aC5yYW5kb20oKSAqIGNvbnRhaW5lci5jYW52YXMuc2l6ZS5oZWlnaHQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNoZWNrSW5zaWRlUG9seWdvbihwb3NpdGlvbikpIHtcbiAgICAgICAgICAgIHJldHVybiBwb3NpdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJhbmRvbVBvaW50KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0UmFuZG9tUG9pbnQoKSB7XG4gICAgICAgIGlmICghdGhpcy5yYXcgfHwgIXRoaXMucmF3Lmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFV0aWxzXzEuQ29uc3RhbnRzLm5vUG9seWdvbkRhdGFMb2FkZWQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvb3JkcyA9ICgwLCBVdGlsc18xLml0ZW1Gcm9tQXJyYXkpKHRoaXMucmF3KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IGNvb3Jkcy54LFxuICAgICAgICAgICAgeTogY29vcmRzLnksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGdldFJhbmRvbVBvaW50QnlMZW5ndGgoKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBpZiAoIXRoaXMucmF3IHx8ICF0aGlzLnJhdy5sZW5ndGggfHwgISgoX2EgPSB0aGlzLnBhdGhzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGVuZ3RoKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFV0aWxzXzEuQ29uc3RhbnRzLm5vUG9seWdvbkRhdGFMb2FkZWQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhdGggPSAoMCwgVXRpbHNfMS5pdGVtRnJvbUFycmF5KSh0aGlzLnBhdGhzKTtcbiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwYXRoLmxlbmd0aCkgKyAxO1xuICAgICAgICBjb25zdCBwb2ludCA9IHBhdGguZWxlbWVudC5nZXRQb2ludEF0TGVuZ3RoKGRpc3RhbmNlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IHBvaW50LnggKiBvcHRpb25zLnNjYWxlICsgKCgoX2IgPSB0aGlzLm9mZnNldCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLngpIHx8IDApLFxuICAgICAgICAgICAgeTogcG9pbnQueSAqIG9wdGlvbnMuc2NhbGUgKyAoKChfYyA9IHRoaXMub2Zmc2V0KSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MueSkgfHwgMCksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGdldEVxdWlkaXN0YW50UG9pbnRCeUluZGV4KGluZGV4KSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZztcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuY29udGFpbmVyLmFjdHVhbE9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHBvbHlnb25NYXNrT3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgaWYgKCF0aGlzLnJhdyB8fCAhdGhpcy5yYXcubGVuZ3RoIHx8ICEoKF9hID0gdGhpcy5wYXRocykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aCkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoVXRpbHNfMS5Db25zdGFudHMubm9Qb2x5Z29uRGF0YUxvYWRlZCk7XG4gICAgICAgIGxldCBvZmZzZXQgPSAwO1xuICAgICAgICBsZXQgcG9pbnQ7XG4gICAgICAgIGNvbnN0IHRvdGFsTGVuZ3RoID0gdGhpcy5wYXRocy5yZWR1Y2UoKHRvdCwgcGF0aCkgPT4gdG90ICsgcGF0aC5sZW5ndGgsIDApO1xuICAgICAgICBjb25zdCBkaXN0YW5jZSA9IHRvdGFsTGVuZ3RoIC8gb3B0aW9ucy5wYXJ0aWNsZXMubnVtYmVyLnZhbHVlO1xuICAgICAgICBmb3IgKGNvbnN0IHBhdGggb2YgdGhpcy5wYXRocykge1xuICAgICAgICAgICAgY29uc3QgcGF0aERpc3RhbmNlID0gZGlzdGFuY2UgKiBpbmRleCAtIG9mZnNldDtcbiAgICAgICAgICAgIGlmIChwYXRoRGlzdGFuY2UgPD0gcGF0aC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBwb2ludCA9IHBhdGguZWxlbWVudC5nZXRQb2ludEF0TGVuZ3RoKHBhdGhEaXN0YW5jZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gcGF0aC5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6ICgoX2IgPSBwb2ludCA9PT0gbnVsbCB8fCBwb2ludCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcG9pbnQueCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMCkgKiBwb2x5Z29uTWFza09wdGlvbnMuc2NhbGUgKyAoKF9kID0gKF9jID0gdGhpcy5vZmZzZXQpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy54KSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiAwKSxcbiAgICAgICAgICAgIHk6ICgoX2UgPSBwb2ludCA9PT0gbnVsbCB8fCBwb2ludCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcG9pbnQueSkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogMCkgKiBwb2x5Z29uTWFza09wdGlvbnMuc2NhbGUgKyAoKF9nID0gKF9mID0gdGhpcy5vZmZzZXQpID09PSBudWxsIHx8IF9mID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZi55KSAhPT0gbnVsbCAmJiBfZyAhPT0gdm9pZCAwID8gX2cgOiAwKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZ2V0UG9pbnRCeUluZGV4KGluZGV4KSB7XG4gICAgICAgIGlmICghdGhpcy5yYXcgfHwgIXRoaXMucmF3Lmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFV0aWxzXzEuQ29uc3RhbnRzLm5vUG9seWdvbkRhdGFMb2FkZWQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvb3JkcyA9IHRoaXMucmF3W2luZGV4ICUgdGhpcy5yYXcubGVuZ3RoXTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IGNvb3Jkcy54LFxuICAgICAgICAgICAgeTogY29vcmRzLnksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNyZWF0ZVBhdGgyRCgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgaWYgKCF0aGlzLnBhdGgyRFN1cHBvcnRlZCB8fCAhKChfYSA9IHRoaXMucGF0aHMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5sZW5ndGgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBwYXRoIG9mIHRoaXMucGF0aHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhEYXRhID0gKF9iID0gcGF0aC5lbGVtZW50KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuZ2V0QXR0cmlidXRlKFwiZFwiKTtcbiAgICAgICAgICAgIGlmIChwYXRoRGF0YSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhdGgyZCA9IG5ldyBQYXRoMkQocGF0aERhdGEpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hdHJpeCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwic3ZnXCIpLmNyZWF0ZVNWR01hdHJpeCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpbmFsUGF0aCA9IG5ldyBQYXRoMkQoKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSBtYXRyaXguc2NhbGUob3B0aW9ucy5zY2FsZSk7XG4gICAgICAgICAgICAgICAgaWYgKGZpbmFsUGF0aC5hZGRQYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsUGF0aC5hZGRQYXRoKHBhdGgyZCwgdHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgcGF0aC5wYXRoMmQgPSBmaW5hbFBhdGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcGF0aC5wYXRoMmQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHBhdGgucGF0aDJkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhdGgucGF0aDJkIHx8ICF0aGlzLnJhdykge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGF0aC5wYXRoMmQgPSBuZXcgUGF0aDJEKCk7XG4gICAgICAgICAgICBwYXRoLnBhdGgyZC5tb3ZlVG8odGhpcy5yYXdbMF0ueCwgdGhpcy5yYXdbMF0ueSk7XG4gICAgICAgICAgICB0aGlzLnJhdy5mb3JFYWNoKChwb3MsIGkpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIChfYSA9IHBhdGgucGF0aDJkKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGluZVRvKHBvcy54LCBwb3MueSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwYXRoLnBhdGgyZC5jbG9zZVBhdGgoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBpbml0UmF3RGF0YShmb3JjZSkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBpZiAob3B0aW9ucy51cmwpIHtcbiAgICAgICAgICAgIHRoaXMucmF3ID0gYXdhaXQgdGhpcy5kb3dubG9hZFN2Z1BhdGgob3B0aW9ucy51cmwsIGZvcmNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvcHRpb25zLmRhdGEpIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBvcHRpb25zLmRhdGE7XG4gICAgICAgICAgICBsZXQgc3ZnO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGF0aCA9IGRhdGEucGF0aCBpbnN0YW5jZW9mIEFycmF5XG4gICAgICAgICAgICAgICAgICAgID8gZGF0YS5wYXRoLm1hcCgodCkgPT4gYDxwYXRoIGQ9XCIke3R9XCIgLz5gKS5qb2luKFwiXCIpXG4gICAgICAgICAgICAgICAgICAgIDogYDxwYXRoIGQ9XCIke2RhdGEucGF0aH1cIiAvPmA7XG4gICAgICAgICAgICAgICAgY29uc3QgbmFtZXNwYWNlcyA9ICd4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCInO1xuICAgICAgICAgICAgICAgIHN2ZyA9IGA8c3ZnICR7bmFtZXNwYWNlc30gd2lkdGg9XCIke2RhdGEuc2l6ZS53aWR0aH1cIiBoZWlnaHQ9XCIke2RhdGEuc2l6ZS5oZWlnaHR9XCI+JHtwYXRofTwvc3ZnPmA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdmcgPSBkYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yYXcgPSB0aGlzLnBhcnNlU3ZnUGF0aChzdmcsIGZvcmNlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNyZWF0ZVBhdGgyRCgpO1xuICAgIH1cbn1cbmV4cG9ydHMuUG9seWdvbk1hc2tJbnN0YW5jZSA9IFBvbHlnb25NYXNrSW5zdGFuY2U7XG4iLCJcInVzZSBzdHJpY3RcIjtcbihmdW5jdGlvbiAoKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICghKFwiU1ZHUGF0aFNlZ1wiIGluIHdpbmRvdykpIHtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnID0gZnVuY3Rpb24gKHR5cGUsIHR5cGVBc0xldHRlciwgb3duaW5nUGF0aFNlZ0xpc3QpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhdGhTZWdUeXBlID0gdHlwZTtcbiAgICAgICAgICAgICAgICB0aGlzLnBhdGhTZWdUeXBlQXNMZXR0ZXIgPSB0eXBlQXNMZXR0ZXI7XG4gICAgICAgICAgICAgICAgdGhpcy5fb3duaW5nUGF0aFNlZ0xpc3QgPSBvd25pbmdQYXRoU2VnTGlzdDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZy5wcm90b3R5cGUuY2xhc3NuYW1lID0gXCJTVkdQYXRoU2VnXCI7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX1VOS05PV04gPSAwO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19DTE9TRVBBVEggPSAxO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19NT1ZFVE9fQUJTID0gMjtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfTU9WRVRPX1JFTCA9IDM7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0xJTkVUT19BQlMgPSA0O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fUkVMID0gNTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfQ1VSVkVUT19DVUJJQ19BQlMgPSA2O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX0NVQklDX1JFTCA9IDc7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0NVUlZFVE9fUVVBRFJBVElDX0FCUyA9IDg7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0NVUlZFVE9fUVVBRFJBVElDX1JFTCA9IDk7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0FSQ19BQlMgPSAxMDtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfQVJDX1JFTCA9IDExO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fSE9SSVpPTlRBTF9BQlMgPSAxMjtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfTElORVRPX0hPUklaT05UQUxfUkVMID0gMTM7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0xJTkVUT19WRVJUSUNBTF9BQlMgPSAxNDtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfTElORVRPX1ZFUlRJQ0FMX1JFTCA9IDE1O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX0NVQklDX1NNT09USF9BQlMgPSAxNjtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfQ1VSVkVUT19DVUJJQ19TTU9PVEhfUkVMID0gMTc7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0NVUlZFVE9fUVVBRFJBVElDX1NNT09USF9BQlMgPSAxODtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfQ1VSVkVUT19RVUFEUkFUSUNfU01PT1RIX1JFTCA9IDE5O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWcucHJvdG90eXBlLl9zZWdtZW50Q2hhbmdlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fb3duaW5nUGF0aFNlZ0xpc3QpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX293bmluZ1BhdGhTZWdMaXN0LnNlZ21lbnRDaGFuZ2VkKHRoaXMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQ2xvc2VQYXRoID0gZnVuY3Rpb24gKG93bmluZ1BhdGhTZWdMaXN0KSB7XG4gICAgICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWcuY2FsbCh0aGlzLCB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0NMT1NFUEFUSCwgXCJ6XCIsIG93bmluZ1BhdGhTZWdMaXN0KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0Nsb3NlUGF0aC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHdpbmRvdy5TVkdQYXRoU2VnLnByb3RvdHlwZSk7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0Nsb3NlUGF0aC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiW29iamVjdCBTVkdQYXRoU2VnQ2xvc2VQYXRoXVwiO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQ2xvc2VQYXRoLnByb3RvdHlwZS5fYXNQYXRoU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhdGhTZWdUeXBlQXNMZXR0ZXI7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDbG9zZVBhdGgucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdDbG9zZVBhdGgodW5kZWZpbmVkKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ01vdmV0b0FicyA9IGZ1bmN0aW9uIChvd25pbmdQYXRoU2VnTGlzdCwgeCwgeSkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnLmNhbGwodGhpcywgd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19NT1ZFVE9fQUJTLCBcIk1cIiwgb3duaW5nUGF0aFNlZ0xpc3QpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3ggPSB4O1xuICAgICAgICAgICAgICAgIHRoaXMuX3kgPSB5O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTW92ZXRvQWJzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUod2luZG93LlNWR1BhdGhTZWcucHJvdG90eXBlKTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTW92ZXRvQWJzLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJbb2JqZWN0IFNWR1BhdGhTZWdNb3ZldG9BYnNdXCI7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdNb3ZldG9BYnMucHJvdG90eXBlLl9hc1BhdGhTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGF0aFNlZ1R5cGVBc0xldHRlciArIFwiIFwiICsgdGhpcy5feCArIFwiIFwiICsgdGhpcy5feTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ01vdmV0b0Ficy5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ01vdmV0b0Ficyh1bmRlZmluZWQsIHRoaXMuX3gsIHRoaXMuX3kpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ01vdmV0b0Ficy5wcm90b3R5cGUsIFwieFwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl94O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl94ID0geDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ01vdmV0b0Ficy5wcm90b3R5cGUsIFwieVwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl95O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoeSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl95ID0geTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTW92ZXRvUmVsID0gZnVuY3Rpb24gKG93bmluZ1BhdGhTZWdMaXN0LCB4LCB5KSB7XG4gICAgICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWcuY2FsbCh0aGlzLCB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX01PVkVUT19SRUwsIFwibVwiLCBvd25pbmdQYXRoU2VnTGlzdCk7XG4gICAgICAgICAgICAgICAgdGhpcy5feCA9IHg7XG4gICAgICAgICAgICAgICAgdGhpcy5feSA9IHk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdNb3ZldG9SZWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh3aW5kb3cuU1ZHUGF0aFNlZy5wcm90b3R5cGUpO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdNb3ZldG9SZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIltvYmplY3QgU1ZHUGF0aFNlZ01vdmV0b1JlbF1cIjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ01vdmV0b1JlbC5wcm90b3R5cGUuX2FzUGF0aFN0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXRoU2VnVHlwZUFzTGV0dGVyICsgXCIgXCIgKyB0aGlzLl94ICsgXCIgXCIgKyB0aGlzLl95O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTW92ZXRvUmVsLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnTW92ZXRvUmVsKHVuZGVmaW5lZCwgdGhpcy5feCwgdGhpcy5feSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVkdQYXRoU2VnTW92ZXRvUmVsLnByb3RvdHlwZSwgXCJ4XCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3g7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ggPSB4O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVkdQYXRoU2VnTW92ZXRvUmVsLnByb3RvdHlwZSwgXCJ5XCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3k7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh5KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3kgPSB5O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9BYnMgPSBmdW5jdGlvbiAob3duaW5nUGF0aFNlZ0xpc3QsIHgsIHkpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZy5jYWxsKHRoaXMsIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfTElORVRPX0FCUywgXCJMXCIsIG93bmluZ1BhdGhTZWdMaXN0KTtcbiAgICAgICAgICAgICAgICB0aGlzLl94ID0geDtcbiAgICAgICAgICAgICAgICB0aGlzLl95ID0geTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b0Ficy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHdpbmRvdy5TVkdQYXRoU2VnLnByb3RvdHlwZSk7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b0Ficy5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiW29iamVjdCBTVkdQYXRoU2VnTGluZXRvQWJzXVwiO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTGluZXRvQWJzLnByb3RvdHlwZS5fYXNQYXRoU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhdGhTZWdUeXBlQXNMZXR0ZXIgKyBcIiBcIiArIHRoaXMuX3ggKyBcIiBcIiArIHRoaXMuX3k7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9BYnMucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9BYnModW5kZWZpbmVkLCB0aGlzLl94LCB0aGlzLl95KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdMaW5ldG9BYnMucHJvdG90eXBlLCBcInhcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feCA9IHg7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdMaW5ldG9BYnMucHJvdG90eXBlLCBcInlcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feSA9IHk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b1JlbCA9IGZ1bmN0aW9uIChvd25pbmdQYXRoU2VnTGlzdCwgeCwgeSkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnLmNhbGwodGhpcywgd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fUkVMLCBcImxcIiwgb3duaW5nUGF0aFNlZ0xpc3QpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3ggPSB4O1xuICAgICAgICAgICAgICAgIHRoaXMuX3kgPSB5O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTGluZXRvUmVsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUod2luZG93LlNWR1BhdGhTZWcucHJvdG90eXBlKTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTGluZXRvUmVsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJbb2JqZWN0IFNWR1BhdGhTZWdMaW5ldG9SZWxdXCI7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9SZWwucHJvdG90eXBlLl9hc1BhdGhTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGF0aFNlZ1R5cGVBc0xldHRlciArIFwiIFwiICsgdGhpcy5feCArIFwiIFwiICsgdGhpcy5feTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b1JlbC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b1JlbCh1bmRlZmluZWQsIHRoaXMuX3gsIHRoaXMuX3kpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b1JlbC5wcm90b3R5cGUsIFwieFwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl94O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl94ID0geDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b1JlbC5wcm90b3R5cGUsIFwieVwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl95O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoeSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl95ID0geTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b0N1YmljQWJzID0gZnVuY3Rpb24gKG93bmluZ1BhdGhTZWdMaXN0LCB4LCB5LCB4MSwgeTEsIHgyLCB5Mikge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnLmNhbGwodGhpcywgd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX0NVQklDX0FCUywgXCJDXCIsIG93bmluZ1BhdGhTZWdMaXN0KTtcbiAgICAgICAgICAgICAgICB0aGlzLl94ID0geDtcbiAgICAgICAgICAgICAgICB0aGlzLl95ID0geTtcbiAgICAgICAgICAgICAgICB0aGlzLl94MSA9IHgxO1xuICAgICAgICAgICAgICAgIHRoaXMuX3kxID0geTE7XG4gICAgICAgICAgICAgICAgdGhpcy5feDIgPSB4MjtcbiAgICAgICAgICAgICAgICB0aGlzLl95MiA9IHkyO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b0N1YmljQWJzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUod2luZG93LlNWR1BhdGhTZWcucHJvdG90eXBlKTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b0N1YmljQWJzLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJbb2JqZWN0IFNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNBYnNdXCI7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNBYnMucHJvdG90eXBlLl9hc1BhdGhTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLnBhdGhTZWdUeXBlQXNMZXR0ZXIgK1xuICAgICAgICAgICAgICAgICAgICBcIiBcIiArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3gxICtcbiAgICAgICAgICAgICAgICAgICAgXCIgXCIgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl95MSArXG4gICAgICAgICAgICAgICAgICAgIFwiIFwiICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feDIgK1xuICAgICAgICAgICAgICAgICAgICBcIiBcIiArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3kyICtcbiAgICAgICAgICAgICAgICAgICAgXCIgXCIgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl94ICtcbiAgICAgICAgICAgICAgICAgICAgXCIgXCIgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl95KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY0Ficy5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY0Ficyh1bmRlZmluZWQsIHRoaXMuX3gsIHRoaXMuX3ksIHRoaXMuX3gxLCB0aGlzLl95MSwgdGhpcy5feDIsIHRoaXMuX3kyKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNBYnMucHJvdG90eXBlLCBcInhcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feCA9IHg7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNBYnMucHJvdG90eXBlLCBcInlcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feSA9IHk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNBYnMucHJvdG90eXBlLCBcIngxXCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3gxO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoeDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feDEgPSB4MTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY0Ficy5wcm90b3R5cGUsIFwieTFcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feTE7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh5MSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl95MSA9IHkxO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b0N1YmljQWJzLnByb3RvdHlwZSwgXCJ4MlwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl94MjtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHgyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3gyID0geDI7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNBYnMucHJvdG90eXBlLCBcInkyXCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3kyO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoeTIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feTIgPSB5MjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b0N1YmljUmVsID0gZnVuY3Rpb24gKG93bmluZ1BhdGhTZWdMaXN0LCB4LCB5LCB4MSwgeTEsIHgyLCB5Mikge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnLmNhbGwodGhpcywgd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX0NVQklDX1JFTCwgXCJjXCIsIG93bmluZ1BhdGhTZWdMaXN0KTtcbiAgICAgICAgICAgICAgICB0aGlzLl94ID0geDtcbiAgICAgICAgICAgICAgICB0aGlzLl95ID0geTtcbiAgICAgICAgICAgICAgICB0aGlzLl94MSA9IHgxO1xuICAgICAgICAgICAgICAgIHRoaXMuX3kxID0geTE7XG4gICAgICAgICAgICAgICAgdGhpcy5feDIgPSB4MjtcbiAgICAgICAgICAgICAgICB0aGlzLl95MiA9IHkyO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b0N1YmljUmVsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUod2luZG93LlNWR1BhdGhTZWcucHJvdG90eXBlKTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b0N1YmljUmVsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJbb2JqZWN0IFNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNSZWxdXCI7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNSZWwucHJvdG90eXBlLl9hc1BhdGhTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLnBhdGhTZWdUeXBlQXNMZXR0ZXIgK1xuICAgICAgICAgICAgICAgICAgICBcIiBcIiArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3gxICtcbiAgICAgICAgICAgICAgICAgICAgXCIgXCIgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl95MSArXG4gICAgICAgICAgICAgICAgICAgIFwiIFwiICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feDIgK1xuICAgICAgICAgICAgICAgICAgICBcIiBcIiArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3kyICtcbiAgICAgICAgICAgICAgICAgICAgXCIgXCIgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl94ICtcbiAgICAgICAgICAgICAgICAgICAgXCIgXCIgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl95KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1JlbC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1JlbCh1bmRlZmluZWQsIHRoaXMuX3gsIHRoaXMuX3ksIHRoaXMuX3gxLCB0aGlzLl95MSwgdGhpcy5feDIsIHRoaXMuX3kyKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNSZWwucHJvdG90eXBlLCBcInhcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feCA9IHg7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNSZWwucHJvdG90eXBlLCBcInlcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feSA9IHk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNSZWwucHJvdG90eXBlLCBcIngxXCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3gxO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoeDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feDEgPSB4MTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1JlbC5wcm90b3R5cGUsIFwieTFcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feTE7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh5MSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl95MSA9IHkxO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b0N1YmljUmVsLnByb3RvdHlwZSwgXCJ4MlwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl94MjtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHgyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3gyID0geDI7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNSZWwucHJvdG90eXBlLCBcInkyXCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3kyO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoeTIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feTIgPSB5MjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY0FicyA9IGZ1bmN0aW9uIChvd25pbmdQYXRoU2VnTGlzdCwgeCwgeSwgeDEsIHkxKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWcuY2FsbCh0aGlzLCB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0NVUlZFVE9fUVVBRFJBVElDX0FCUywgXCJRXCIsIG93bmluZ1BhdGhTZWdMaXN0KTtcbiAgICAgICAgICAgICAgICB0aGlzLl94ID0geDtcbiAgICAgICAgICAgICAgICB0aGlzLl95ID0geTtcbiAgICAgICAgICAgICAgICB0aGlzLl94MSA9IHgxO1xuICAgICAgICAgICAgICAgIHRoaXMuX3kxID0geTE7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljQWJzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUod2luZG93LlNWR1BhdGhTZWcucHJvdG90eXBlKTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY0Ficy5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiW29iamVjdCBTVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY0Fic11cIjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNBYnMucHJvdG90eXBlLl9hc1BhdGhTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGF0aFNlZ1R5cGVBc0xldHRlciArIFwiIFwiICsgdGhpcy5feDEgKyBcIiBcIiArIHRoaXMuX3kxICsgXCIgXCIgKyB0aGlzLl94ICsgXCIgXCIgKyB0aGlzLl95O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY0Ficy5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNBYnModW5kZWZpbmVkLCB0aGlzLl94LCB0aGlzLl95LCB0aGlzLl94MSwgdGhpcy5feTEpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNBYnMucHJvdG90eXBlLCBcInhcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feCA9IHg7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljQWJzLnByb3RvdHlwZSwgXCJ5XCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3k7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh5KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3kgPSB5O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY0Ficy5wcm90b3R5cGUsIFwieDFcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feDE7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh4MSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl94MSA9IHgxO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY0Ficy5wcm90b3R5cGUsIFwieTFcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feTE7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh5MSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl95MSA9IHkxO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljUmVsID0gZnVuY3Rpb24gKG93bmluZ1BhdGhTZWdMaXN0LCB4LCB5LCB4MSwgeTEpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZy5jYWxsKHRoaXMsIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfQ1VSVkVUT19RVUFEUkFUSUNfUkVMLCBcInFcIiwgb3duaW5nUGF0aFNlZ0xpc3QpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3ggPSB4O1xuICAgICAgICAgICAgICAgIHRoaXMuX3kgPSB5O1xuICAgICAgICAgICAgICAgIHRoaXMuX3gxID0geDE7XG4gICAgICAgICAgICAgICAgdGhpcy5feTEgPSB5MTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNSZWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh3aW5kb3cuU1ZHUGF0aFNlZy5wcm90b3R5cGUpO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljUmVsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJbb2JqZWN0IFNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljUmVsXVwiO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1JlbC5wcm90b3R5cGUuX2FzUGF0aFN0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXRoU2VnVHlwZUFzTGV0dGVyICsgXCIgXCIgKyB0aGlzLl94MSArIFwiIFwiICsgdGhpcy5feTEgKyBcIiBcIiArIHRoaXMuX3ggKyBcIiBcIiArIHRoaXMuX3k7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljUmVsLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1JlbCh1bmRlZmluZWQsIHRoaXMuX3gsIHRoaXMuX3ksIHRoaXMuX3gxLCB0aGlzLl95MSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1JlbC5wcm90b3R5cGUsIFwieFwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl94O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl94ID0geDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNSZWwucHJvdG90eXBlLCBcInlcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feSA9IHk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljUmVsLnByb3RvdHlwZSwgXCJ4MVwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl94MTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHgxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3gxID0geDE7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljUmVsLnByb3RvdHlwZSwgXCJ5MVwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl95MTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHkxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3kxID0geTE7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0FyY0FicyA9IGZ1bmN0aW9uIChvd25pbmdQYXRoU2VnTGlzdCwgeCwgeSwgcjEsIHIyLCBhbmdsZSwgbGFyZ2VBcmNGbGFnLCBzd2VlcEZsYWcpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZy5jYWxsKHRoaXMsIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfQVJDX0FCUywgXCJBXCIsIG93bmluZ1BhdGhTZWdMaXN0KTtcbiAgICAgICAgICAgICAgICB0aGlzLl94ID0geDtcbiAgICAgICAgICAgICAgICB0aGlzLl95ID0geTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yMSA9IHIxO1xuICAgICAgICAgICAgICAgIHRoaXMuX3IyID0gcjI7XG4gICAgICAgICAgICAgICAgdGhpcy5fYW5nbGUgPSBhbmdsZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9sYXJnZUFyY0ZsYWcgPSBsYXJnZUFyY0ZsYWc7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3dlZXBGbGFnID0gc3dlZXBGbGFnO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQXJjQWJzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUod2luZG93LlNWR1BhdGhTZWcucHJvdG90eXBlKTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQXJjQWJzLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJbb2JqZWN0IFNWR1BhdGhTZWdBcmNBYnNdXCI7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdBcmNBYnMucHJvdG90eXBlLl9hc1BhdGhTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLnBhdGhTZWdUeXBlQXNMZXR0ZXIgK1xuICAgICAgICAgICAgICAgICAgICBcIiBcIiArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3IxICtcbiAgICAgICAgICAgICAgICAgICAgXCIgXCIgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yMiArXG4gICAgICAgICAgICAgICAgICAgIFwiIFwiICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYW5nbGUgK1xuICAgICAgICAgICAgICAgICAgICBcIiBcIiArXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLl9sYXJnZUFyY0ZsYWcgPyBcIjFcIiA6IFwiMFwiKSArXG4gICAgICAgICAgICAgICAgICAgIFwiIFwiICtcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuX3N3ZWVwRmxhZyA/IFwiMVwiIDogXCIwXCIpICtcbiAgICAgICAgICAgICAgICAgICAgXCIgXCIgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl94ICtcbiAgICAgICAgICAgICAgICAgICAgXCIgXCIgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl95KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0FyY0Ficy5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ0FyY0Ficyh1bmRlZmluZWQsIHRoaXMuX3gsIHRoaXMuX3ksIHRoaXMuX3IxLCB0aGlzLl9yMiwgdGhpcy5fYW5nbGUsIHRoaXMuX2xhcmdlQXJjRmxhZywgdGhpcy5fc3dlZXBGbGFnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdBcmNBYnMucHJvdG90eXBlLCBcInhcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feCA9IHg7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdBcmNBYnMucHJvdG90eXBlLCBcInlcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feSA9IHk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdBcmNBYnMucHJvdG90eXBlLCBcInIxXCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3IxO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAocjEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcjEgPSByMTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0FyY0Ficy5wcm90b3R5cGUsIFwicjJcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcjI7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChyMikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yMiA9IHIyO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVkdQYXRoU2VnQXJjQWJzLnByb3RvdHlwZSwgXCJhbmdsZVwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9hbmdsZTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKGFuZ2xlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FuZ2xlID0gYW5nbGU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdBcmNBYnMucHJvdG90eXBlLCBcImxhcmdlQXJjRmxhZ1wiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9sYXJnZUFyY0ZsYWc7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChsYXJnZUFyY0ZsYWcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGFyZ2VBcmNGbGFnID0gbGFyZ2VBcmNGbGFnO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVkdQYXRoU2VnQXJjQWJzLnByb3RvdHlwZSwgXCJzd2VlcEZsYWdcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc3dlZXBGbGFnO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoc3dlZXBGbGFnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N3ZWVwRmxhZyA9IHN3ZWVwRmxhZztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQXJjUmVsID0gZnVuY3Rpb24gKG93bmluZ1BhdGhTZWdMaXN0LCB4LCB5LCByMSwgcjIsIGFuZ2xlLCBsYXJnZUFyY0ZsYWcsIHN3ZWVwRmxhZykge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnLmNhbGwodGhpcywgd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19BUkNfUkVMLCBcImFcIiwgb3duaW5nUGF0aFNlZ0xpc3QpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3ggPSB4O1xuICAgICAgICAgICAgICAgIHRoaXMuX3kgPSB5O1xuICAgICAgICAgICAgICAgIHRoaXMuX3IxID0gcjE7XG4gICAgICAgICAgICAgICAgdGhpcy5fcjIgPSByMjtcbiAgICAgICAgICAgICAgICB0aGlzLl9hbmdsZSA9IGFuZ2xlO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xhcmdlQXJjRmxhZyA9IGxhcmdlQXJjRmxhZztcbiAgICAgICAgICAgICAgICB0aGlzLl9zd2VlcEZsYWcgPSBzd2VlcEZsYWc7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdBcmNSZWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh3aW5kb3cuU1ZHUGF0aFNlZy5wcm90b3R5cGUpO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdBcmNSZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIltvYmplY3QgU1ZHUGF0aFNlZ0FyY1JlbF1cIjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0FyY1JlbC5wcm90b3R5cGUuX2FzUGF0aFN0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMucGF0aFNlZ1R5cGVBc0xldHRlciArXG4gICAgICAgICAgICAgICAgICAgIFwiIFwiICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcjEgK1xuICAgICAgICAgICAgICAgICAgICBcIiBcIiArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3IyICtcbiAgICAgICAgICAgICAgICAgICAgXCIgXCIgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hbmdsZSArXG4gICAgICAgICAgICAgICAgICAgIFwiIFwiICtcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuX2xhcmdlQXJjRmxhZyA/IFwiMVwiIDogXCIwXCIpICtcbiAgICAgICAgICAgICAgICAgICAgXCIgXCIgK1xuICAgICAgICAgICAgICAgICAgICAodGhpcy5fc3dlZXBGbGFnID8gXCIxXCIgOiBcIjBcIikgK1xuICAgICAgICAgICAgICAgICAgICBcIiBcIiArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ggK1xuICAgICAgICAgICAgICAgICAgICBcIiBcIiArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3kpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQXJjUmVsLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnQXJjUmVsKHVuZGVmaW5lZCwgdGhpcy5feCwgdGhpcy5feSwgdGhpcy5fcjEsIHRoaXMuX3IyLCB0aGlzLl9hbmdsZSwgdGhpcy5fbGFyZ2VBcmNGbGFnLCB0aGlzLl9zd2VlcEZsYWcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0FyY1JlbC5wcm90b3R5cGUsIFwieFwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl94O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl94ID0geDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0FyY1JlbC5wcm90b3R5cGUsIFwieVwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl95O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoeSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl95ID0geTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0FyY1JlbC5wcm90b3R5cGUsIFwicjFcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcjE7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChyMSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yMSA9IHIxO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVkdQYXRoU2VnQXJjUmVsLnByb3RvdHlwZSwgXCJyMlwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9yMjtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHIyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3IyID0gcjI7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdBcmNSZWwucHJvdG90eXBlLCBcImFuZ2xlXCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FuZ2xlO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoYW5nbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYW5nbGUgPSBhbmdsZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0FyY1JlbC5wcm90b3R5cGUsIFwibGFyZ2VBcmNGbGFnXCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xhcmdlQXJjRmxhZztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKGxhcmdlQXJjRmxhZykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9sYXJnZUFyY0ZsYWcgPSBsYXJnZUFyY0ZsYWc7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdBcmNSZWwucHJvdG90eXBlLCBcInN3ZWVwRmxhZ1wiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zd2VlcEZsYWc7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChzd2VlcEZsYWcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3dlZXBGbGFnID0gc3dlZXBGbGFnO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9Ib3Jpem9udGFsQWJzID0gZnVuY3Rpb24gKG93bmluZ1BhdGhTZWdMaXN0LCB4KSB7XG4gICAgICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWcuY2FsbCh0aGlzLCB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0xJTkVUT19IT1JJWk9OVEFMX0FCUywgXCJIXCIsIG93bmluZ1BhdGhTZWdMaXN0KTtcbiAgICAgICAgICAgICAgICB0aGlzLl94ID0geDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxBYnMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh3aW5kb3cuU1ZHUGF0aFNlZy5wcm90b3R5cGUpO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9Ib3Jpem9udGFsQWJzLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJbb2JqZWN0IFNWR1BhdGhTZWdMaW5ldG9Ib3Jpem9udGFsQWJzXVwiO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTGluZXRvSG9yaXpvbnRhbEFicy5wcm90b3R5cGUuX2FzUGF0aFN0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXRoU2VnVHlwZUFzTGV0dGVyICsgXCIgXCIgKyB0aGlzLl94O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTGluZXRvSG9yaXpvbnRhbEFicy5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxBYnModW5kZWZpbmVkLCB0aGlzLl94KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdMaW5ldG9Ib3Jpem9udGFsQWJzLnByb3RvdHlwZSwgXCJ4XCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3g7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ggPSB4O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9Ib3Jpem9udGFsUmVsID0gZnVuY3Rpb24gKG93bmluZ1BhdGhTZWdMaXN0LCB4KSB7XG4gICAgICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWcuY2FsbCh0aGlzLCB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0xJTkVUT19IT1JJWk9OVEFMX1JFTCwgXCJoXCIsIG93bmluZ1BhdGhTZWdMaXN0KTtcbiAgICAgICAgICAgICAgICB0aGlzLl94ID0geDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxSZWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh3aW5kb3cuU1ZHUGF0aFNlZy5wcm90b3R5cGUpO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9Ib3Jpem9udGFsUmVsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJbb2JqZWN0IFNWR1BhdGhTZWdMaW5ldG9Ib3Jpem9udGFsUmVsXVwiO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTGluZXRvSG9yaXpvbnRhbFJlbC5wcm90b3R5cGUuX2FzUGF0aFN0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXRoU2VnVHlwZUFzTGV0dGVyICsgXCIgXCIgKyB0aGlzLl94O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTGluZXRvSG9yaXpvbnRhbFJlbC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxSZWwodW5kZWZpbmVkLCB0aGlzLl94KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdMaW5ldG9Ib3Jpem9udGFsUmVsLnByb3RvdHlwZSwgXCJ4XCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3g7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ggPSB4O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9WZXJ0aWNhbEFicyA9IGZ1bmN0aW9uIChvd25pbmdQYXRoU2VnTGlzdCwgeSkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnLmNhbGwodGhpcywgd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fVkVSVElDQUxfQUJTLCBcIlZcIiwgb3duaW5nUGF0aFNlZ0xpc3QpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3kgPSB5O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTGluZXRvVmVydGljYWxBYnMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh3aW5kb3cuU1ZHUGF0aFNlZy5wcm90b3R5cGUpO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9WZXJ0aWNhbEFicy5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiW29iamVjdCBTVkdQYXRoU2VnTGluZXRvVmVydGljYWxBYnNdXCI7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9WZXJ0aWNhbEFicy5wcm90b3R5cGUuX2FzUGF0aFN0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXRoU2VnVHlwZUFzTGV0dGVyICsgXCIgXCIgKyB0aGlzLl95O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTGluZXRvVmVydGljYWxBYnMucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9WZXJ0aWNhbEFicyh1bmRlZmluZWQsIHRoaXMuX3kpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b1ZlcnRpY2FsQWJzLnByb3RvdHlwZSwgXCJ5XCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3k7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh5KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3kgPSB5O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9WZXJ0aWNhbFJlbCA9IGZ1bmN0aW9uIChvd25pbmdQYXRoU2VnTGlzdCwgeSkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnLmNhbGwodGhpcywgd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fVkVSVElDQUxfUkVMLCBcInZcIiwgb3duaW5nUGF0aFNlZ0xpc3QpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3kgPSB5O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTGluZXRvVmVydGljYWxSZWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh3aW5kb3cuU1ZHUGF0aFNlZy5wcm90b3R5cGUpO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9WZXJ0aWNhbFJlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiW29iamVjdCBTVkdQYXRoU2VnTGluZXRvVmVydGljYWxSZWxdXCI7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9WZXJ0aWNhbFJlbC5wcm90b3R5cGUuX2FzUGF0aFN0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXRoU2VnVHlwZUFzTGV0dGVyICsgXCIgXCIgKyB0aGlzLl95O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTGluZXRvVmVydGljYWxSZWwucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9WZXJ0aWNhbFJlbCh1bmRlZmluZWQsIHRoaXMuX3kpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0xpbmV0b1ZlcnRpY2FsUmVsLnByb3RvdHlwZSwgXCJ5XCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3k7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh5KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3kgPSB5O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhBYnMgPSBmdW5jdGlvbiAob3duaW5nUGF0aFNlZ0xpc3QsIHgsIHksIHgyLCB5Mikge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnLmNhbGwodGhpcywgd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX0NVQklDX1NNT09USF9BQlMsIFwiU1wiLCBvd25pbmdQYXRoU2VnTGlzdCk7XG4gICAgICAgICAgICAgICAgdGhpcy5feCA9IHg7XG4gICAgICAgICAgICAgICAgdGhpcy5feSA9IHk7XG4gICAgICAgICAgICAgICAgdGhpcy5feDIgPSB4MjtcbiAgICAgICAgICAgICAgICB0aGlzLl95MiA9IHkyO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b0N1YmljU21vb3RoQWJzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUod2luZG93LlNWR1BhdGhTZWcucHJvdG90eXBlKTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b0N1YmljU21vb3RoQWJzLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJbb2JqZWN0IFNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhBYnNdXCI7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhBYnMucHJvdG90eXBlLl9hc1BhdGhTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGF0aFNlZ1R5cGVBc0xldHRlciArIFwiIFwiICsgdGhpcy5feDIgKyBcIiBcIiArIHRoaXMuX3kyICsgXCIgXCIgKyB0aGlzLl94ICsgXCIgXCIgKyB0aGlzLl95O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b0N1YmljU21vb3RoQWJzLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b0N1YmljU21vb3RoQWJzKHVuZGVmaW5lZCwgdGhpcy5feCwgdGhpcy5feSwgdGhpcy5feDIsIHRoaXMuX3kyKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhBYnMucHJvdG90eXBlLCBcInhcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feCA9IHg7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhBYnMucHJvdG90eXBlLCBcInlcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feSA9IHk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhBYnMucHJvdG90eXBlLCBcIngyXCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3gyO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoeDIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feDIgPSB4MjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aEFicy5wcm90b3R5cGUsIFwieTJcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feTI7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh5Mikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl95MiA9IHkyO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhSZWwgPSBmdW5jdGlvbiAob3duaW5nUGF0aFNlZ0xpc3QsIHgsIHksIHgyLCB5Mikge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnLmNhbGwodGhpcywgd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX0NVQklDX1NNT09USF9SRUwsIFwic1wiLCBvd25pbmdQYXRoU2VnTGlzdCk7XG4gICAgICAgICAgICAgICAgdGhpcy5feCA9IHg7XG4gICAgICAgICAgICAgICAgdGhpcy5feSA9IHk7XG4gICAgICAgICAgICAgICAgdGhpcy5feDIgPSB4MjtcbiAgICAgICAgICAgICAgICB0aGlzLl95MiA9IHkyO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b0N1YmljU21vb3RoUmVsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUod2luZG93LlNWR1BhdGhTZWcucHJvdG90eXBlKTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b0N1YmljU21vb3RoUmVsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJbb2JqZWN0IFNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhSZWxdXCI7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhSZWwucHJvdG90eXBlLl9hc1BhdGhTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGF0aFNlZ1R5cGVBc0xldHRlciArIFwiIFwiICsgdGhpcy5feDIgKyBcIiBcIiArIHRoaXMuX3kyICsgXCIgXCIgKyB0aGlzLl94ICsgXCIgXCIgKyB0aGlzLl95O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b0N1YmljU21vb3RoUmVsLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b0N1YmljU21vb3RoUmVsKHVuZGVmaW5lZCwgdGhpcy5feCwgdGhpcy5feSwgdGhpcy5feDIsIHRoaXMuX3kyKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhSZWwucHJvdG90eXBlLCBcInhcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feCA9IHg7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhSZWwucHJvdG90eXBlLCBcInlcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feSA9IHk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhSZWwucHJvdG90eXBlLCBcIngyXCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3gyO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoeDIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feDIgPSB4MjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aFJlbC5wcm90b3R5cGUsIFwieTJcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feTI7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh5Mikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl95MiA9IHkyO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljU21vb3RoQWJzID0gZnVuY3Rpb24gKG93bmluZ1BhdGhTZWdMaXN0LCB4LCB5KSB7XG4gICAgICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWcuY2FsbCh0aGlzLCB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0NVUlZFVE9fUVVBRFJBVElDX1NNT09USF9BQlMsIFwiVFwiLCBvd25pbmdQYXRoU2VnTGlzdCk7XG4gICAgICAgICAgICAgICAgdGhpcy5feCA9IHg7XG4gICAgICAgICAgICAgICAgdGhpcy5feSA9IHk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljU21vb3RoQWJzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUod2luZG93LlNWR1BhdGhTZWcucHJvdG90eXBlKTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1Ntb290aEFicy5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiW29iamVjdCBTVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1Ntb290aEFic11cIjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhBYnMucHJvdG90eXBlLl9hc1BhdGhTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGF0aFNlZ1R5cGVBc0xldHRlciArIFwiIFwiICsgdGhpcy5feCArIFwiIFwiICsgdGhpcy5feTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhBYnMucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljU21vb3RoQWJzKHVuZGVmaW5lZCwgdGhpcy5feCwgdGhpcy5feSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1Ntb290aEFicy5wcm90b3R5cGUsIFwieFwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl94O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl94ID0geDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhBYnMucHJvdG90eXBlLCBcInlcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5feTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5feSA9IHk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlZ21lbnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhSZWwgPSBmdW5jdGlvbiAob3duaW5nUGF0aFNlZ0xpc3QsIHgsIHkpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZy5jYWxsKHRoaXMsIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfQ1VSVkVUT19RVUFEUkFUSUNfU01PT1RIX1JFTCwgXCJ0XCIsIG93bmluZ1BhdGhTZWdMaXN0KTtcbiAgICAgICAgICAgICAgICB0aGlzLl94ID0geDtcbiAgICAgICAgICAgICAgICB0aGlzLl95ID0geTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhSZWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh3aW5kb3cuU1ZHUGF0aFNlZy5wcm90b3R5cGUpO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljU21vb3RoUmVsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJbb2JqZWN0IFNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljU21vb3RoUmVsXVwiO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1Ntb290aFJlbC5wcm90b3R5cGUuX2FzUGF0aFN0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXRoU2VnVHlwZUFzTGV0dGVyICsgXCIgXCIgKyB0aGlzLl94ICsgXCIgXCIgKyB0aGlzLl95O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1Ntb290aFJlbC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhSZWwodW5kZWZpbmVkLCB0aGlzLl94LCB0aGlzLl95KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljU21vb3RoUmVsLnByb3RvdHlwZSwgXCJ4XCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3g7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ggPSB4O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWdtZW50Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1Ntb290aFJlbC5wcm90b3R5cGUsIFwieVwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl95O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoeSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl95ID0geTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VnbWVudENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlU1ZHUGF0aFNlZ0Nsb3NlUGF0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnQ2xvc2VQYXRoKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVTVkdQYXRoU2VnTW92ZXRvQWJzID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnTW92ZXRvQWJzKHVuZGVmaW5lZCwgeCwgeSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVTVkdQYXRoU2VnTW92ZXRvUmVsID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnTW92ZXRvUmVsKHVuZGVmaW5lZCwgeCwgeSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVTVkdQYXRoU2VnTGluZXRvQWJzID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnTGluZXRvQWJzKHVuZGVmaW5lZCwgeCwgeSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVTVkdQYXRoU2VnTGluZXRvUmVsID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnTGluZXRvUmVsKHVuZGVmaW5lZCwgeCwgeSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVTVkdQYXRoU2VnQ3VydmV0b0N1YmljQWJzID0gZnVuY3Rpb24gKHgsIHksIHgxLCB5MSwgeDIsIHkyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY0Ficyh1bmRlZmluZWQsIHgsIHksIHgxLCB5MSwgeDIsIHkyKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aEVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZVNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNSZWwgPSBmdW5jdGlvbiAoeCwgeSwgeDEsIHkxLCB4MiwgeTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b0N1YmljUmVsKHVuZGVmaW5lZCwgeCwgeSwgeDEsIHkxLCB4MiwgeTIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNBYnMgPSBmdW5jdGlvbiAoeCwgeSwgeDEsIHkxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNBYnModW5kZWZpbmVkLCB4LCB5LCB4MSwgeTEpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNSZWwgPSBmdW5jdGlvbiAoeCwgeSwgeDEsIHkxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNSZWwodW5kZWZpbmVkLCB4LCB5LCB4MSwgeTEpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlU1ZHUGF0aFNlZ0FyY0FicyA9IGZ1bmN0aW9uICh4LCB5LCByMSwgcjIsIGFuZ2xlLCBsYXJnZUFyY0ZsYWcsIHN3ZWVwRmxhZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdBcmNBYnModW5kZWZpbmVkLCB4LCB5LCByMSwgcjIsIGFuZ2xlLCBsYXJnZUFyY0ZsYWcsIHN3ZWVwRmxhZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVTVkdQYXRoU2VnQXJjUmVsID0gZnVuY3Rpb24gKHgsIHksIHIxLCByMiwgYW5nbGUsIGxhcmdlQXJjRmxhZywgc3dlZXBGbGFnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ0FyY1JlbCh1bmRlZmluZWQsIHgsIHksIHIxLCByMiwgYW5nbGUsIGxhcmdlQXJjRmxhZywgc3dlZXBGbGFnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aEVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZVNWR1BhdGhTZWdMaW5ldG9Ib3Jpem9udGFsQWJzID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnTGluZXRvSG9yaXpvbnRhbEFicyh1bmRlZmluZWQsIHgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxSZWwgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9Ib3Jpem9udGFsUmVsKHVuZGVmaW5lZCwgeCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVTVkdQYXRoU2VnTGluZXRvVmVydGljYWxBYnMgPSBmdW5jdGlvbiAoeSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9WZXJ0aWNhbEFicyh1bmRlZmluZWQsIHkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlU1ZHUGF0aFNlZ0xpbmV0b1ZlcnRpY2FsUmVsID0gZnVuY3Rpb24gKHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnTGluZXRvVmVydGljYWxSZWwodW5kZWZpbmVkLCB5KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aEVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZVNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhBYnMgPSBmdW5jdGlvbiAoeCwgeSwgeDIsIHkyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aEFicyh1bmRlZmluZWQsIHgsIHksIHgyLCB5Mik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVTVkdQYXRoU2VnQ3VydmV0b0N1YmljU21vb3RoUmVsID0gZnVuY3Rpb24gKHgsIHksIHgyLCB5Mikge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhSZWwodW5kZWZpbmVkLCB4LCB5LCB4MiwgeTIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhBYnMgPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljU21vb3RoQWJzKHVuZGVmaW5lZCwgeCwgeSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVTVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1Ntb290aFJlbCA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhSZWwodW5kZWZpbmVkLCB4LCB5KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoIShcImdldFBhdGhTZWdBdExlbmd0aFwiIGluIHdpbmRvdy5TVkdQYXRoRWxlbWVudC5wcm90b3R5cGUpKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LlNWR1BhdGhFbGVtZW50LnByb3RvdHlwZS5nZXRQYXRoU2VnQXRMZW5ndGggPSBmdW5jdGlvbiAoZGlzdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpc3RhbmNlID09PSB1bmRlZmluZWQgfHwgIWlzRmluaXRlKGRpc3RhbmNlKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IFwiSW52YWxpZCBhcmd1bWVudHMuXCI7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtZWFzdXJlbWVudEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcInBhdGhcIik7XG4gICAgICAgICAgICAgICAgICAgIG1lYXN1cmVtZW50RWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkXCIsIHRoaXMuZ2V0QXR0cmlidXRlKFwiZFwiKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYXN0UGF0aFNlZ21lbnQgPSBtZWFzdXJlbWVudEVsZW1lbnQucGF0aFNlZ0xpc3QubnVtYmVyT2ZJdGVtcyAtIDE7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXN0UGF0aFNlZ21lbnQgPD0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZWFzdXJlbWVudEVsZW1lbnQucGF0aFNlZ0xpc3QucmVtb3ZlSXRlbShsYXN0UGF0aFNlZ21lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpc3RhbmNlID4gbWVhc3VyZW1lbnRFbGVtZW50LmdldFRvdGFsTGVuZ3RoKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0UGF0aFNlZ21lbnQtLTtcbiAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAobGFzdFBhdGhTZWdtZW50ID4gMCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsYXN0UGF0aFNlZ21lbnQ7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIShcIlNWR1BhdGhTZWdMaXN0XCIgaW4gd2luZG93KSB8fCAhKFwiYXBwZW5kSXRlbVwiIGluIHdpbmRvdy5TVkdQYXRoU2VnTGlzdC5wcm90b3R5cGUpKSB7XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0xpc3QgPSBmdW5jdGlvbiAocGF0aEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXRoRWxlbWVudCA9IHBhdGhFbGVtZW50O1xuICAgICAgICAgICAgICAgIHRoaXMuX2xpc3QgPSB0aGlzLl9wYXJzZVBhdGgodGhpcy5fcGF0aEVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZFwiKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbXV0YXRpb25PYnNlcnZlckNvbmZpZyA9IHsgYXR0cmlidXRlczogdHJ1ZSwgYXR0cmlidXRlRmlsdGVyOiBbXCJkXCJdIH07XG4gICAgICAgICAgICAgICAgdGhpcy5fcGF0aEVsZW1lbnRNdXRhdGlvbk9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIodGhpcy5fdXBkYXRlTGlzdEZyb21QYXRoTXV0YXRpb25zLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3BhdGhFbGVtZW50TXV0YXRpb25PYnNlcnZlci5vYnNlcnZlKHRoaXMuX3BhdGhFbGVtZW50LCB0aGlzLl9tdXRhdGlvbk9ic2VydmVyQ29uZmlnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0xpc3QucHJvdG90eXBlLmNsYXNzbmFtZSA9IFwiU1ZHUGF0aFNlZ0xpc3RcIjtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aFNlZ0xpc3QucHJvdG90eXBlLCBcIm51bWJlck9mSXRlbXNcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGVja1BhdGhTeW5jaHJvbml6ZWRUb0xpc3QoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xpc3QubGVuZ3RoO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVkdQYXRoU2VnTGlzdC5wcm90b3R5cGUsIFwibGVuZ3RoXCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tQYXRoU3luY2hyb25pemVkVG9MaXN0KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9saXN0Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1ZHUGF0aEVsZW1lbnQucHJvdG90eXBlLCBcInBhdGhTZWdMaXN0XCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9wYXRoU2VnTGlzdClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3BhdGhTZWdMaXN0ID0gbmV3IHdpbmRvdy5TVkdQYXRoU2VnTGlzdCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BhdGhTZWdMaXN0O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVkdQYXRoRWxlbWVudC5wcm90b3R5cGUsIFwibm9ybWFsaXplZFBhdGhTZWdMaXN0XCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGF0aFNlZ0xpc3Q7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhFbGVtZW50LnByb3RvdHlwZSwgXCJhbmltYXRlZFBhdGhTZWdMaXN0XCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGF0aFNlZ0xpc3Q7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNWR1BhdGhFbGVtZW50LnByb3RvdHlwZSwgXCJhbmltYXRlZE5vcm1hbGl6ZWRQYXRoU2VnTGlzdFwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhdGhTZWdMaXN0O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaXN0LnByb3RvdHlwZS5fY2hlY2tQYXRoU3luY2hyb25pemVkVG9MaXN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUxpc3RGcm9tUGF0aE11dGF0aW9ucyh0aGlzLl9wYXRoRWxlbWVudE11dGF0aW9uT2JzZXJ2ZXIudGFrZVJlY29yZHMoKSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaXN0LnByb3RvdHlwZS5fdXBkYXRlTGlzdEZyb21QYXRoTXV0YXRpb25zID0gZnVuY3Rpb24gKG11dGF0aW9uUmVjb3Jkcykge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fcGF0aEVsZW1lbnQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB2YXIgaGFzUGF0aE11dGF0aW9ucyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIG11dGF0aW9uUmVjb3Jkcy5mb3JFYWNoKGZ1bmN0aW9uIChyZWNvcmQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlY29yZC5hdHRyaWJ1dGVOYW1lID09IFwiZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzUGF0aE11dGF0aW9ucyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKGhhc1BhdGhNdXRhdGlvbnMpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xpc3QgPSB0aGlzLl9wYXJzZVBhdGgodGhpcy5fcGF0aEVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZFwiKSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaXN0LnByb3RvdHlwZS5fd3JpdGVMaXN0VG9QYXRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3BhdGhFbGVtZW50TXV0YXRpb25PYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGF0aEVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZFwiLCB3aW5kb3cuU1ZHUGF0aFNlZ0xpc3QuX3BhdGhTZWdBcnJheUFzU3RyaW5nKHRoaXMuX2xpc3QpKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXRoRWxlbWVudE11dGF0aW9uT2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLl9wYXRoRWxlbWVudCwgdGhpcy5fbXV0YXRpb25PYnNlcnZlckNvbmZpZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaXN0LnByb3RvdHlwZS5zZWdtZW50Q2hhbmdlZCA9IGZ1bmN0aW9uIChwYXRoU2VnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd3JpdGVMaXN0VG9QYXRoKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaXN0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja1BhdGhTeW5jaHJvbml6ZWRUb0xpc3QoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9saXN0LmZvckVhY2goZnVuY3Rpb24gKHBhdGhTZWcpIHtcbiAgICAgICAgICAgICAgICAgICAgcGF0aFNlZy5fb3duaW5nUGF0aFNlZ0xpc3QgPSBudWxsO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xpc3QgPSBbXTtcbiAgICAgICAgICAgICAgICB0aGlzLl93cml0ZUxpc3RUb1BhdGgoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0xpc3QucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAobmV3SXRlbSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrUGF0aFN5bmNocm9uaXplZFRvTGlzdCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xpc3QgPSBbbmV3SXRlbV07XG4gICAgICAgICAgICAgICAgbmV3SXRlbS5fb3duaW5nUGF0aFNlZ0xpc3QgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHRoaXMuX3dyaXRlTGlzdFRvUGF0aCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXdJdGVtO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTGlzdC5wcm90b3R5cGUuX2NoZWNrVmFsaWRJbmRleCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgICAgIGlmIChpc05hTihpbmRleCkgfHwgaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMubnVtYmVyT2ZJdGVtcylcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgXCJJTkRFWF9TSVpFX0VSUlwiO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTGlzdC5wcm90b3R5cGUuZ2V0SXRlbSA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrUGF0aFN5bmNocm9uaXplZFRvTGlzdCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrVmFsaWRJbmRleChpbmRleCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xpc3RbaW5kZXhdO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTGlzdC5wcm90b3R5cGUuaW5zZXJ0SXRlbUJlZm9yZSA9IGZ1bmN0aW9uIChuZXdJdGVtLCBpbmRleCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrUGF0aFN5bmNocm9uaXplZFRvTGlzdCgpO1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA+IHRoaXMubnVtYmVyT2ZJdGVtcylcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSB0aGlzLm51bWJlck9mSXRlbXM7XG4gICAgICAgICAgICAgICAgaWYgKG5ld0l0ZW0uX293bmluZ1BhdGhTZWdMaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0l0ZW0gPSBuZXdJdGVtLmNsb25lKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX2xpc3Quc3BsaWNlKGluZGV4LCAwLCBuZXdJdGVtKTtcbiAgICAgICAgICAgICAgICBuZXdJdGVtLl9vd25pbmdQYXRoU2VnTGlzdCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdGhpcy5fd3JpdGVMaXN0VG9QYXRoKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld0l0ZW07XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaXN0LnByb3RvdHlwZS5yZXBsYWNlSXRlbSA9IGZ1bmN0aW9uIChuZXdJdGVtLCBpbmRleCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrUGF0aFN5bmNocm9uaXplZFRvTGlzdCgpO1xuICAgICAgICAgICAgICAgIGlmIChuZXdJdGVtLl9vd25pbmdQYXRoU2VnTGlzdCkge1xuICAgICAgICAgICAgICAgICAgICBuZXdJdGVtID0gbmV3SXRlbS5jbG9uZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja1ZhbGlkSW5kZXgoaW5kZXgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xpc3RbaW5kZXhdID0gbmV3SXRlbTtcbiAgICAgICAgICAgICAgICBuZXdJdGVtLl9vd25pbmdQYXRoU2VnTGlzdCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdGhpcy5fd3JpdGVMaXN0VG9QYXRoKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld0l0ZW07XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaXN0LnByb3RvdHlwZS5yZW1vdmVJdGVtID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tQYXRoU3luY2hyb25pemVkVG9MaXN0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tWYWxpZEluZGV4KGluZGV4KTtcbiAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IHRoaXMuX2xpc3RbaW5kZXhdO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xpc3Quc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB0aGlzLl93cml0ZUxpc3RUb1BhdGgoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuU1ZHUGF0aFNlZ0xpc3QucHJvdG90eXBlLmFwcGVuZEl0ZW0gPSBmdW5jdGlvbiAobmV3SXRlbSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrUGF0aFN5bmNocm9uaXplZFRvTGlzdCgpO1xuICAgICAgICAgICAgICAgIGlmIChuZXdJdGVtLl9vd25pbmdQYXRoU2VnTGlzdCkge1xuICAgICAgICAgICAgICAgICAgICBuZXdJdGVtID0gbmV3SXRlbS5jbG9uZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9saXN0LnB1c2gobmV3SXRlbSk7XG4gICAgICAgICAgICAgICAgbmV3SXRlbS5fb3duaW5nUGF0aFNlZ0xpc3QgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHRoaXMuX3dyaXRlTGlzdFRvUGF0aCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXdJdGVtO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5TVkdQYXRoU2VnTGlzdC5fcGF0aFNlZ0FycmF5QXNTdHJpbmcgPSBmdW5jdGlvbiAocGF0aFNlZ0FycmF5KSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0cmluZyA9IFwiXCI7XG4gICAgICAgICAgICAgICAgdmFyIGZpcnN0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBwYXRoU2VnQXJyYXkuZm9yRWFjaChmdW5jdGlvbiAocGF0aFNlZykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmlyc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmcgKz0gcGF0aFNlZy5fYXNQYXRoU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmcgKz0gXCIgXCIgKyBwYXRoU2VnLl9hc1BhdGhTdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LlNWR1BhdGhTZWdMaXN0LnByb3RvdHlwZS5fcGFyc2VQYXRoID0gZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgICAgIGlmICghc3RyaW5nIHx8IHN0cmluZy5sZW5ndGggPT0gMClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgICAgIHZhciBvd25pbmdQYXRoU2VnTGlzdCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIEJ1aWxkZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGF0aFNlZ0xpc3QgPSBbXTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIEJ1aWxkZXIucHJvdG90eXBlLmFwcGVuZFNlZ21lbnQgPSBmdW5jdGlvbiAocGF0aFNlZykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhdGhTZWdMaXN0LnB1c2gocGF0aFNlZyk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB2YXIgU291cmNlID0gZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdHJpbmcgPSBzdHJpbmc7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRJbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2VuZEluZGV4ID0gdGhpcy5fc3RyaW5nLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJldmlvdXNDb21tYW5kID0gd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19VTktOT1dOO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9za2lwT3B0aW9uYWxTcGFjZXMoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFNvdXJjZS5wcm90b3R5cGUuX2lzQ3VycmVudFNwYWNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2hhcmFjdGVyID0gdGhpcy5fc3RyaW5nW3RoaXMuX2N1cnJlbnRJbmRleF07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoY2hhcmFjdGVyIDw9IFwiIFwiICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoY2hhcmFjdGVyID09IFwiIFwiIHx8IGNoYXJhY3RlciA9PSBcIlxcblwiIHx8IGNoYXJhY3RlciA9PSBcIlxcdFwiIHx8IGNoYXJhY3RlciA9PSBcIlxcclwiIHx8IGNoYXJhY3RlciA9PSBcIlxcZlwiKSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBTb3VyY2UucHJvdG90eXBlLl9za2lwT3B0aW9uYWxTcGFjZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICh0aGlzLl9jdXJyZW50SW5kZXggPCB0aGlzLl9lbmRJbmRleCAmJiB0aGlzLl9pc0N1cnJlbnRTcGFjZSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudEluZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jdXJyZW50SW5kZXggPCB0aGlzLl9lbmRJbmRleDtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFNvdXJjZS5wcm90b3R5cGUuX3NraXBPcHRpb25hbFNwYWNlc09yRGVsaW1pdGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fY3VycmVudEluZGV4IDwgdGhpcy5fZW5kSW5kZXggJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICF0aGlzLl9pc0N1cnJlbnRTcGFjZSgpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdHJpbmcuY2hhckF0KHRoaXMuX2N1cnJlbnRJbmRleCkgIT0gXCIsXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9za2lwT3B0aW9uYWxTcGFjZXMoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRJbmRleCA8IHRoaXMuX2VuZEluZGV4ICYmIHRoaXMuX3N0cmluZy5jaGFyQXQodGhpcy5fY3VycmVudEluZGV4KSA9PSBcIixcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRJbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NraXBPcHRpb25hbFNwYWNlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jdXJyZW50SW5kZXggPCB0aGlzLl9lbmRJbmRleDtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFNvdXJjZS5wcm90b3R5cGUuaGFzTW9yZURhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jdXJyZW50SW5kZXggPCB0aGlzLl9lbmRJbmRleDtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFNvdXJjZS5wcm90b3R5cGUucGVla1NlZ21lbnRUeXBlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbG9va2FoZWFkID0gdGhpcy5fc3RyaW5nW3RoaXMuX2N1cnJlbnRJbmRleF07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wYXRoU2VnVHlwZUZyb21DaGFyKGxvb2thaGVhZCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBTb3VyY2UucHJvdG90eXBlLl9wYXRoU2VnVHlwZUZyb21DaGFyID0gZnVuY3Rpb24gKGxvb2thaGVhZCkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGxvb2thaGVhZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIlpcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ6XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfQ0xPU0VQQVRIO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIk1cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19NT1ZFVE9fQUJTO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19NT1ZFVE9fUkVMO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkxcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fQUJTO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImxcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fUkVMO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkNcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX0NVQklDX0FCUztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJjXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfQ1VSVkVUT19DVUJJQ19SRUw7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiUVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0NVUlZFVE9fUVVBRFJBVElDX0FCUztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJxXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfQ1VSVkVUT19RVUFEUkFUSUNfUkVMO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkFcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19BUkNfQUJTO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImFcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19BUkNfUkVMO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkhcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fSE9SSVpPTlRBTF9BQlM7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0xJTkVUT19IT1JJWk9OVEFMX1JFTDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJWXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfTElORVRPX1ZFUlRJQ0FMX0FCUztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ2XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfTElORVRPX1ZFUlRJQ0FMX1JFTDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJTXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfQ1VSVkVUT19DVUJJQ19TTU9PVEhfQUJTO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInNcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX0NVQklDX1NNT09USF9SRUw7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiVFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0NVUlZFVE9fUVVBRFJBVElDX1NNT09USF9BQlM7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwidFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0NVUlZFVE9fUVVBRFJBVElDX1NNT09USF9SRUw7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX1VOS05PV047XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFNvdXJjZS5wcm90b3R5cGUuX25leHRDb21tYW5kSGVscGVyID0gZnVuY3Rpb24gKGxvb2thaGVhZCwgcHJldmlvdXNDb21tYW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgobG9va2FoZWFkID09IFwiK1wiIHx8IGxvb2thaGVhZCA9PSBcIi1cIiB8fCBsb29rYWhlYWQgPT0gXCIuXCIgfHwgKGxvb2thaGVhZCA+PSBcIjBcIiAmJiBsb29rYWhlYWQgPD0gXCI5XCIpKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNDb21tYW5kICE9IHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfQ0xPU0VQQVRIKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldmlvdXNDb21tYW5kID09IHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfTU9WRVRPX0FCUylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fQUJTO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZpb3VzQ29tbWFuZCA9PSB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX01PVkVUT19SRUwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfTElORVRPX1JFTDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcmV2aW91c0NvbW1hbmQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfVU5LTk9XTjtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFNvdXJjZS5wcm90b3R5cGUuaW5pdGlhbENvbW1hbmRJc01vdmVUbyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmhhc01vcmVEYXRhKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbW1hbmQgPSB0aGlzLnBlZWtTZWdtZW50VHlwZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZCA9PSB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX01PVkVUT19BQlMgfHwgY29tbWFuZCA9PSB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX01PVkVUT19SRUw7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBTb3VyY2UucHJvdG90eXBlLl9wYXJzZU51bWJlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV4cG9uZW50ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGludGVnZXIgPSAwO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZnJhYyA9IDE7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWNpbWFsID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNpZ24gPSAxO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXhwc2lnbiA9IDE7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGFydEluZGV4ID0gdGhpcy5fY3VycmVudEluZGV4O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9za2lwT3B0aW9uYWxTcGFjZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRJbmRleCA8IHRoaXMuX2VuZEluZGV4ICYmIHRoaXMuX3N0cmluZy5jaGFyQXQodGhpcy5fY3VycmVudEluZGV4KSA9PSBcIitcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRJbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9jdXJyZW50SW5kZXggPCB0aGlzLl9lbmRJbmRleCAmJiB0aGlzLl9zdHJpbmcuY2hhckF0KHRoaXMuX2N1cnJlbnRJbmRleCkgPT0gXCItXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRJbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2lnbiA9IC0xO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jdXJyZW50SW5kZXggPT0gdGhpcy5fZW5kSW5kZXggfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICgodGhpcy5fc3RyaW5nLmNoYXJBdCh0aGlzLl9jdXJyZW50SW5kZXgpIDwgXCIwXCIgfHwgdGhpcy5fc3RyaW5nLmNoYXJBdCh0aGlzLl9jdXJyZW50SW5kZXgpID4gXCI5XCIpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RyaW5nLmNoYXJBdCh0aGlzLl9jdXJyZW50SW5kZXgpICE9IFwiLlwiKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGFydEludFBhcnRJbmRleCA9IHRoaXMuX2N1cnJlbnRJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHRoaXMuX2N1cnJlbnRJbmRleCA8IHRoaXMuX2VuZEluZGV4ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdHJpbmcuY2hhckF0KHRoaXMuX2N1cnJlbnRJbmRleCkgPj0gXCIwXCIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0cmluZy5jaGFyQXQodGhpcy5fY3VycmVudEluZGV4KSA8PSBcIjlcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRJbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fY3VycmVudEluZGV4ICE9IHN0YXJ0SW50UGFydEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2NhbkludFBhcnRJbmRleCA9IHRoaXMuX2N1cnJlbnRJbmRleCAtIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbXVsdGlwbGllciA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoc2NhbkludFBhcnRJbmRleCA+PSBzdGFydEludFBhcnRJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVnZXIgKz0gbXVsdGlwbGllciAqICh0aGlzLl9zdHJpbmcuY2hhckF0KHNjYW5JbnRQYXJ0SW5kZXgtLSkgLSBcIjBcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGllciAqPSAxMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fY3VycmVudEluZGV4IDwgdGhpcy5fZW5kSW5kZXggJiYgdGhpcy5fc3RyaW5nLmNoYXJBdCh0aGlzLl9jdXJyZW50SW5kZXgpID09IFwiLlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50SW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jdXJyZW50SW5kZXggPj0gdGhpcy5fZW5kSW5kZXggfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdHJpbmcuY2hhckF0KHRoaXMuX2N1cnJlbnRJbmRleCkgPCBcIjBcIiB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0cmluZy5jaGFyQXQodGhpcy5fY3VycmVudEluZGV4KSA+IFwiOVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAodGhpcy5fY3VycmVudEluZGV4IDwgdGhpcy5fZW5kSW5kZXggJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdHJpbmcuY2hhckF0KHRoaXMuX2N1cnJlbnRJbmRleCkgPj0gXCIwXCIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdHJpbmcuY2hhckF0KHRoaXMuX2N1cnJlbnRJbmRleCkgPD0gXCI5XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmFjICo9IDEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY2ltYWwgKz0gKHRoaXMuX3N0cmluZy5jaGFyQXQodGhpcy5fY3VycmVudEluZGV4KSAtIFwiMFwiKSAvIGZyYWM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudEluZGV4ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRJbmRleCAhPSBzdGFydEluZGV4ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50SW5kZXggKyAxIDwgdGhpcy5fZW5kSW5kZXggJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLl9zdHJpbmcuY2hhckF0KHRoaXMuX2N1cnJlbnRJbmRleCkgPT0gXCJlXCIgfHwgdGhpcy5fc3RyaW5nLmNoYXJBdCh0aGlzLl9jdXJyZW50SW5kZXgpID09IFwiRVwiKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RyaW5nLmNoYXJBdCh0aGlzLl9jdXJyZW50SW5kZXggKyAxKSAhPSBcInhcIiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RyaW5nLmNoYXJBdCh0aGlzLl9jdXJyZW50SW5kZXggKyAxKSAhPSBcIm1cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudEluZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fc3RyaW5nLmNoYXJBdCh0aGlzLl9jdXJyZW50SW5kZXgpID09IFwiK1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudEluZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdHJpbmcuY2hhckF0KHRoaXMuX2N1cnJlbnRJbmRleCkgPT0gXCItXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50SW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBzaWduID0gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fY3VycmVudEluZGV4ID49IHRoaXMuX2VuZEluZGV4IHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RyaW5nLmNoYXJBdCh0aGlzLl9jdXJyZW50SW5kZXgpIDwgXCIwXCIgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdHJpbmcuY2hhckF0KHRoaXMuX2N1cnJlbnRJbmRleCkgPiBcIjlcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHRoaXMuX2N1cnJlbnRJbmRleCA8IHRoaXMuX2VuZEluZGV4ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RyaW5nLmNoYXJBdCh0aGlzLl9jdXJyZW50SW5kZXgpID49IFwiMFwiICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RyaW5nLmNoYXJBdCh0aGlzLl9jdXJyZW50SW5kZXgpIDw9IFwiOVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwb25lbnQgKj0gMTA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwb25lbnQgKz0gdGhpcy5fc3RyaW5nLmNoYXJBdCh0aGlzLl9jdXJyZW50SW5kZXgpIC0gXCIwXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudEluZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIG51bWJlciA9IGludGVnZXIgKyBkZWNpbWFsO1xuICAgICAgICAgICAgICAgICAgICBudW1iZXIgKj0gc2lnbjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4cG9uZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgbnVtYmVyICo9IE1hdGgucG93KDEwLCBleHBzaWduICogZXhwb25lbnQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhcnRJbmRleCA9PSB0aGlzLl9jdXJyZW50SW5kZXgpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9za2lwT3B0aW9uYWxTcGFjZXNPckRlbGltaXRlcigpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgU291cmNlLnByb3RvdHlwZS5fcGFyc2VBcmNGbGFnID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fY3VycmVudEluZGV4ID49IHRoaXMuX2VuZEluZGV4KVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZsYWcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZsYWdDaGFyID0gdGhpcy5fc3RyaW5nLmNoYXJBdCh0aGlzLl9jdXJyZW50SW5kZXgrKyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmbGFnQ2hhciA9PSBcIjBcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsYWcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZmxhZ0NoYXIgPT0gXCIxXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBmbGFnID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2tpcE9wdGlvbmFsU3BhY2VzT3JEZWxpbWl0ZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZsYWc7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBTb3VyY2UucHJvdG90eXBlLnBhcnNlU2VnbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxvb2thaGVhZCA9IHRoaXMuX3N0cmluZ1t0aGlzLl9jdXJyZW50SW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29tbWFuZCA9IHRoaXMuX3BhdGhTZWdUeXBlRnJvbUNoYXIobG9va2FoZWFkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbW1hbmQgPT0gd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19VTktOT1dOKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fcHJldmlvdXNDb21tYW5kID09IHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfVU5LTk9XTilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmQgPSB0aGlzLl9uZXh0Q29tbWFuZEhlbHBlcihsb29rYWhlYWQsIHRoaXMuX3ByZXZpb3VzQ29tbWFuZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29tbWFuZCA9PSB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX1VOS05PV04pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50SW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcmV2aW91c0NvbW1hbmQgPSBjb21tYW5kO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGNvbW1hbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2Ugd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19NT1ZFVE9fUkVMOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdNb3ZldG9SZWwob3duaW5nUGF0aFNlZ0xpc3QsIHRoaXMuX3BhcnNlTnVtYmVyKCksIHRoaXMuX3BhcnNlTnVtYmVyKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX01PVkVUT19BQlM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ01vdmV0b0Ficyhvd25pbmdQYXRoU2VnTGlzdCwgdGhpcy5fcGFyc2VOdW1iZXIoKSwgdGhpcy5fcGFyc2VOdW1iZXIoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfTElORVRPX1JFTDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnTGluZXRvUmVsKG93bmluZ1BhdGhTZWdMaXN0LCB0aGlzLl9wYXJzZU51bWJlcigpLCB0aGlzLl9wYXJzZU51bWJlcigpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2Ugd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fQUJTOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9BYnMob3duaW5nUGF0aFNlZ0xpc3QsIHRoaXMuX3BhcnNlTnVtYmVyKCksIHRoaXMuX3BhcnNlTnVtYmVyKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0xJTkVUT19IT1JJWk9OVEFMX1JFTDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnTGluZXRvSG9yaXpvbnRhbFJlbChvd25pbmdQYXRoU2VnTGlzdCwgdGhpcy5fcGFyc2VOdW1iZXIoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfTElORVRPX0hPUklaT05UQUxfQUJTOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9Ib3Jpem9udGFsQWJzKG93bmluZ1BhdGhTZWdMaXN0LCB0aGlzLl9wYXJzZU51bWJlcigpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2Ugd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fVkVSVElDQUxfUkVMOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdMaW5ldG9WZXJ0aWNhbFJlbChvd25pbmdQYXRoU2VnTGlzdCwgdGhpcy5fcGFyc2VOdW1iZXIoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfTElORVRPX1ZFUlRJQ0FMX0FCUzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnTGluZXRvVmVydGljYWxBYnMob3duaW5nUGF0aFNlZ0xpc3QsIHRoaXMuX3BhcnNlTnVtYmVyKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0NMT1NFUEFUSDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9za2lwT3B0aW9uYWxTcGFjZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnQ2xvc2VQYXRoKG93bmluZ1BhdGhTZWdMaXN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2Ugd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX0NVQklDX1JFTDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9pbnRzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MTogdGhpcy5fcGFyc2VOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTE6IHRoaXMuX3BhcnNlTnVtYmVyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgyOiB0aGlzLl9wYXJzZU51bWJlcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5MjogdGhpcy5fcGFyc2VOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogdGhpcy5fcGFyc2VOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogdGhpcy5fcGFyc2VOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNSZWwob3duaW5nUGF0aFNlZ0xpc3QsIHBvaW50cy54LCBwb2ludHMueSwgcG9pbnRzLngxLCBwb2ludHMueTEsIHBvaW50cy54MiwgcG9pbnRzLnkyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2Ugd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX0NVQklDX0FCUzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9pbnRzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MTogdGhpcy5fcGFyc2VOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTE6IHRoaXMuX3BhcnNlTnVtYmVyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgyOiB0aGlzLl9wYXJzZU51bWJlcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5MjogdGhpcy5fcGFyc2VOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogdGhpcy5fcGFyc2VOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogdGhpcy5fcGFyc2VOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNBYnMob3duaW5nUGF0aFNlZ0xpc3QsIHBvaW50cy54LCBwb2ludHMueSwgcG9pbnRzLngxLCBwb2ludHMueTEsIHBvaW50cy54MiwgcG9pbnRzLnkyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2Ugd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX0NVQklDX1NNT09USF9SRUw6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvaW50cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDI6IHRoaXMuX3BhcnNlTnVtYmVyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkyOiB0aGlzLl9wYXJzZU51bWJlcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiB0aGlzLl9wYXJzZU51bWJlcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiB0aGlzLl9wYXJzZU51bWJlcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aFJlbChvd25pbmdQYXRoU2VnTGlzdCwgcG9pbnRzLngsIHBvaW50cy55LCBwb2ludHMueDIsIHBvaW50cy55Mik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfQ1VSVkVUT19DVUJJQ19TTU9PVEhfQUJTOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb2ludHMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgyOiB0aGlzLl9wYXJzZU51bWJlcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5MjogdGhpcy5fcGFyc2VOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogdGhpcy5fcGFyc2VOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogdGhpcy5fcGFyc2VOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhBYnMob3duaW5nUGF0aFNlZ0xpc3QsIHBvaW50cy54LCBwb2ludHMueSwgcG9pbnRzLngyLCBwb2ludHMueTIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSB3aW5kb3cuU1ZHUGF0aFNlZy5QQVRIU0VHX0NVUlZFVE9fUVVBRFJBVElDX1JFTDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9pbnRzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MTogdGhpcy5fcGFyc2VOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTE6IHRoaXMuX3BhcnNlTnVtYmVyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IHRoaXMuX3BhcnNlTnVtYmVyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IHRoaXMuX3BhcnNlTnVtYmVyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5TVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1JlbChvd25pbmdQYXRoU2VnTGlzdCwgcG9pbnRzLngsIHBvaW50cy55LCBwb2ludHMueDEsIHBvaW50cy55MSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfQ1VSVkVUT19RVUFEUkFUSUNfQUJTOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb2ludHMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgxOiB0aGlzLl9wYXJzZU51bWJlcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5MTogdGhpcy5fcGFyc2VOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogdGhpcy5fcGFyc2VOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogdGhpcy5fcGFyc2VOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljQWJzKG93bmluZ1BhdGhTZWdMaXN0LCBwb2ludHMueCwgcG9pbnRzLnksIHBvaW50cy54MSwgcG9pbnRzLnkxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2Ugd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX1FVQURSQVRJQ19TTU9PVEhfUkVMOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljU21vb3RoUmVsKG93bmluZ1BhdGhTZWdMaXN0LCB0aGlzLl9wYXJzZU51bWJlcigpLCB0aGlzLl9wYXJzZU51bWJlcigpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2Ugd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX1FVQURSQVRJQ19TTU9PVEhfQUJTOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljU21vb3RoQWJzKG93bmluZ1BhdGhTZWdMaXN0LCB0aGlzLl9wYXJzZU51bWJlcigpLCB0aGlzLl9wYXJzZU51bWJlcigpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2Ugd2luZG93LlNWR1BhdGhTZWcuUEFUSFNFR19BUkNfUkVMOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb2ludHMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgxOiB0aGlzLl9wYXJzZU51bWJlcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5MTogdGhpcy5fcGFyc2VOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJjQW5nbGU6IHRoaXMuX3BhcnNlTnVtYmVyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyY0xhcmdlOiB0aGlzLl9wYXJzZUFyY0ZsYWcoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJjU3dlZXA6IHRoaXMuX3BhcnNlQXJjRmxhZygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiB0aGlzLl9wYXJzZU51bWJlcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiB0aGlzLl9wYXJzZU51bWJlcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuU1ZHUGF0aFNlZ0FyY1JlbChvd25pbmdQYXRoU2VnTGlzdCwgcG9pbnRzLngsIHBvaW50cy55LCBwb2ludHMueDEsIHBvaW50cy55MSwgcG9pbnRzLmFyY0FuZ2xlLCBwb2ludHMuYXJjTGFyZ2UsIHBvaW50cy5hcmNTd2VlcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIHdpbmRvdy5TVkdQYXRoU2VnLlBBVEhTRUdfQVJDX0FCUzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9pbnRzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MTogdGhpcy5fcGFyc2VOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTE6IHRoaXMuX3BhcnNlTnVtYmVyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyY0FuZ2xlOiB0aGlzLl9wYXJzZU51bWJlcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmNMYXJnZTogdGhpcy5fcGFyc2VBcmNGbGFnKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyY1N3ZWVwOiB0aGlzLl9wYXJzZUFyY0ZsYWcoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogdGhpcy5fcGFyc2VOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogdGhpcy5fcGFyc2VOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlNWR1BhdGhTZWdBcmNBYnMob3duaW5nUGF0aFNlZ0xpc3QsIHBvaW50cy54LCBwb2ludHMueSwgcG9pbnRzLngxLCBwb2ludHMueTEsIHBvaW50cy5hcmNBbmdsZSwgcG9pbnRzLmFyY0xhcmdlLCBwb2ludHMuYXJjU3dlZXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBcIlVua25vd24gcGF0aCBzZWcgdHlwZS5cIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdmFyIGJ1aWxkZXIgPSBuZXcgQnVpbGRlcigpO1xuICAgICAgICAgICAgICAgIHZhciBzb3VyY2UgPSBuZXcgU291cmNlKHN0cmluZyk7XG4gICAgICAgICAgICAgICAgaWYgKCFzb3VyY2UuaW5pdGlhbENvbW1hbmRJc01vdmVUbygpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICAgICAgd2hpbGUgKHNvdXJjZS5oYXNNb3JlRGF0YSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXRoU2VnID0gc291cmNlLnBhcnNlU2VnbWVudCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXBhdGhTZWcpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICAgICAgICAgIGJ1aWxkZXIuYXBwZW5kU2VnbWVudChwYXRoU2VnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1aWxkZXIucGF0aFNlZ0xpc3Q7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIkFuIGVycm9yIG9jY3VycmVkIGluIHRzUGFydGljbGVzIHBhdGhzZWcgcG9seWZpbGwuIElmIHRoZSBQb2x5Z29uIE1hc2sgaXMgbm90IHdvcmtpbmcsIHBsZWFzZSBvcGVuIGFuIGlzc3VlIGhlcmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9tYXR0ZW9icnVuaS90c3BhcnRpY2xlc1wiLCBlKTtcbiAgICB9XG59KSgpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubG9hZFBvbHlnb25NYXNrUGx1Z2luID0gdm9pZCAwO1xuY29uc3QgUG9seWdvbk1hc2tJbnN0YW5jZV8xID0gcmVxdWlyZShcIi4vUG9seWdvbk1hc2tJbnN0YW5jZVwiKTtcbmNvbnN0IFBvbHlnb25NYXNrXzEgPSByZXF1aXJlKFwiLi9PcHRpb25zL0NsYXNzZXMvUG9seWdvbk1hc2tcIik7XG5jb25zdCBFbnVtc18xID0gcmVxdWlyZShcIi4vRW51bXNcIik7XG5jb25zdCBVdGlsc18xID0gcmVxdWlyZShcIi4uLy4uL1V0aWxzXCIpO1xuY2xhc3MgUGx1Z2luIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5pZCA9IFwicG9seWdvbk1hc2tcIjtcbiAgICB9XG4gICAgZ2V0UGx1Z2luKGNvbnRhaW5lcikge1xuICAgICAgICByZXR1cm4gbmV3IFBvbHlnb25NYXNrSW5zdGFuY2VfMS5Qb2x5Z29uTWFza0luc3RhbmNlKGNvbnRhaW5lcik7XG4gICAgfVxuICAgIG5lZWRzUGx1Z2luKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIHJldHVybiAoX2IgPSAoX2EgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMucG9seWdvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmVuYWJsZSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogKCgoX2MgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMucG9seWdvbikgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLnR5cGUpICE9PSB1bmRlZmluZWQgJiYgb3B0aW9ucy5wb2x5Z29uLnR5cGUgIT09IEVudW1zXzEuVHlwZS5ub25lKTtcbiAgICB9XG4gICAgbG9hZE9wdGlvbnMob3B0aW9ucywgc291cmNlKSB7XG4gICAgICAgIGlmICghdGhpcy5uZWVkc1BsdWdpbihzb3VyY2UpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3B0aW9uc0Nhc3QgPSBvcHRpb25zO1xuICAgICAgICBsZXQgcG9seWdvbk9wdGlvbnMgPSBvcHRpb25zQ2FzdC5wb2x5Z29uO1xuICAgICAgICBpZiAoKHBvbHlnb25PcHRpb25zID09PSBudWxsIHx8IHBvbHlnb25PcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwb2x5Z29uT3B0aW9ucy5sb2FkKSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBvcHRpb25zQ2FzdC5wb2x5Z29uID0gcG9seWdvbk9wdGlvbnMgPSBuZXcgUG9seWdvbk1hc2tfMS5Qb2x5Z29uTWFzaygpO1xuICAgICAgICB9XG4gICAgICAgIHBvbHlnb25PcHRpb25zLmxvYWQoc291cmNlID09PSBudWxsIHx8IHNvdXJjZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc291cmNlLnBvbHlnb24pO1xuICAgIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIGxvYWRQb2x5Z29uTWFza1BsdWdpbih0c1BhcnRpY2xlcykge1xuICAgIGlmICghKDAsIFV0aWxzXzEuaXNTc3IpKCkgJiYgIXdpbmRvdy5TVkdQYXRoU2VnKSB7XG4gICAgICAgIGF3YWl0IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL3BhdGhzZWdcIikpKTtcbiAgICB9XG4gICAgY29uc3QgcGx1Z2luID0gbmV3IFBsdWdpbigpO1xuICAgIGF3YWl0IHRzUGFydGljbGVzLmFkZFBsdWdpbihwbHVnaW4pO1xufVxuZXhwb3J0cy5sb2FkUG9seWdvbk1hc2tQbHVnaW4gPSBsb2FkUG9seWdvbk1hc2tQbHVnaW47XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2VnbWVudEJvdW5jZSA9IGV4cG9ydHMuY2FsY0Nsb3Nlc3RQdE9uU2VnbWVudCA9IGV4cG9ydHMucGFyc2VQYXRocyA9IGV4cG9ydHMuZHJhd1BvbHlnb25NYXNrUGF0aCA9IGV4cG9ydHMuZHJhd1BvbHlnb25NYXNrID0gdm9pZCAwO1xuY29uc3QgVXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi9VdGlsc1wiKTtcbmZ1bmN0aW9uIGRyYXdQb2x5Z29uTWFzayhjb250ZXh0LCByYXdEYXRhLCBzdHJva2UpIHtcbiAgICBjb25zdCBjb2xvciA9ICgwLCBVdGlsc18xLmNvbG9yVG9SZ2IpKHN0cm9rZS5jb2xvcik7XG4gICAgaWYgKCFjb2xvcikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgY29udGV4dC5tb3ZlVG8ocmF3RGF0YVswXS54LCByYXdEYXRhWzBdLnkpO1xuICAgIGZvciAoY29uc3QgaXRlbSBvZiByYXdEYXRhKSB7XG4gICAgICAgIGNvbnRleHQubGluZVRvKGl0ZW0ueCwgaXRlbS55KTtcbiAgICB9XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gKDAsIFV0aWxzXzEuZ2V0U3R5bGVGcm9tUmdiKShjb2xvcik7XG4gICAgY29udGV4dC5saW5lV2lkdGggPSBzdHJva2Uud2lkdGg7XG4gICAgY29udGV4dC5zdHJva2UoKTtcbn1cbmV4cG9ydHMuZHJhd1BvbHlnb25NYXNrID0gZHJhd1BvbHlnb25NYXNrO1xuZnVuY3Rpb24gZHJhd1BvbHlnb25NYXNrUGF0aChjb250ZXh0LCBwYXRoLCBzdHJva2UsIHBvc2l0aW9uKSB7XG4gICAgY29udGV4dC50cmFuc2xhdGUocG9zaXRpb24ueCwgcG9zaXRpb24ueSk7XG4gICAgY29uc3QgY29sb3IgPSAoMCwgVXRpbHNfMS5jb2xvclRvUmdiKShzdHJva2UuY29sb3IpO1xuICAgIGlmICghY29sb3IpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gKDAsIFV0aWxzXzEuZ2V0U3R5bGVGcm9tUmdiKShjb2xvciwgc3Ryb2tlLm9wYWNpdHkpO1xuICAgIGNvbnRleHQubGluZVdpZHRoID0gc3Ryb2tlLndpZHRoO1xuICAgIGNvbnRleHQuc3Ryb2tlKHBhdGgpO1xufVxuZXhwb3J0cy5kcmF3UG9seWdvbk1hc2tQYXRoID0gZHJhd1BvbHlnb25NYXNrUGF0aDtcbmZ1bmN0aW9uIHBhcnNlUGF0aHMocGF0aHMsIHNjYWxlLCBvZmZzZXQpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgcmVzID0gW107XG4gICAgZm9yIChjb25zdCBwYXRoIG9mIHBhdGhzKSB7XG4gICAgICAgIGNvbnN0IHNlZ21lbnRzID0gcGF0aC5lbGVtZW50LnBhdGhTZWdMaXN0O1xuICAgICAgICBjb25zdCBsZW4gPSAoX2EgPSBzZWdtZW50cyA9PT0gbnVsbCB8fCBzZWdtZW50cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2VnbWVudHMubnVtYmVyT2ZJdGVtcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMDtcbiAgICAgICAgY29uc3QgcCA9IHtcbiAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICB5OiAwLFxuICAgICAgICB9O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBzZWdtZW50ID0gc2VnbWVudHMgPT09IG51bGwgfHwgc2VnbWVudHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNlZ21lbnRzLmdldEl0ZW0oaSk7XG4gICAgICAgICAgICBjb25zdCBzdmdQYXRoU2VnID0gd2luZG93LlNWR1BhdGhTZWc7XG4gICAgICAgICAgICBzd2l0Y2ggKHNlZ21lbnQgPT09IG51bGwgfHwgc2VnbWVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2VnbWVudC5wYXRoU2VnVHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2Ugc3ZnUGF0aFNlZy5QQVRIU0VHX01PVkVUT19BQlM6XG4gICAgICAgICAgICAgICAgY2FzZSBzdmdQYXRoU2VnLlBBVEhTRUdfTElORVRPX0FCUzpcbiAgICAgICAgICAgICAgICBjYXNlIHN2Z1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX0NVQklDX0FCUzpcbiAgICAgICAgICAgICAgICBjYXNlIHN2Z1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX1FVQURSQVRJQ19BQlM6XG4gICAgICAgICAgICAgICAgY2FzZSBzdmdQYXRoU2VnLlBBVEhTRUdfQVJDX0FCUzpcbiAgICAgICAgICAgICAgICBjYXNlIHN2Z1BhdGhTZWcuUEFUSFNFR19DVVJWRVRPX0NVQklDX1NNT09USF9BQlM6XG4gICAgICAgICAgICAgICAgY2FzZSBzdmdQYXRoU2VnLlBBVEhTRUdfQ1VSVkVUT19RVUFEUkFUSUNfU01PT1RIX0FCUzoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhYnNTZWcgPSBzZWdtZW50O1xuICAgICAgICAgICAgICAgICAgICBwLnggPSBhYnNTZWcueDtcbiAgICAgICAgICAgICAgICAgICAgcC55ID0gYWJzU2VnLnk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIHN2Z1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fSE9SSVpPTlRBTF9BQlM6XG4gICAgICAgICAgICAgICAgICAgIHAueCA9IHNlZ21lbnQueDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBzdmdQYXRoU2VnLlBBVEhTRUdfTElORVRPX1ZFUlRJQ0FMX0FCUzpcbiAgICAgICAgICAgICAgICAgICAgcC55ID0gc2VnbWVudC55O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIHN2Z1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fUkVMOlxuICAgICAgICAgICAgICAgIGNhc2Ugc3ZnUGF0aFNlZy5QQVRIU0VHX01PVkVUT19SRUw6XG4gICAgICAgICAgICAgICAgY2FzZSBzdmdQYXRoU2VnLlBBVEhTRUdfQ1VSVkVUT19DVUJJQ19SRUw6XG4gICAgICAgICAgICAgICAgY2FzZSBzdmdQYXRoU2VnLlBBVEhTRUdfQ1VSVkVUT19RVUFEUkFUSUNfUkVMOlxuICAgICAgICAgICAgICAgIGNhc2Ugc3ZnUGF0aFNlZy5QQVRIU0VHX0FSQ19SRUw6XG4gICAgICAgICAgICAgICAgY2FzZSBzdmdQYXRoU2VnLlBBVEhTRUdfQ1VSVkVUT19DVUJJQ19TTU9PVEhfUkVMOlxuICAgICAgICAgICAgICAgIGNhc2Ugc3ZnUGF0aFNlZy5QQVRIU0VHX0NVUlZFVE9fUVVBRFJBVElDX1NNT09USF9SRUw6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVsU2VnID0gc2VnbWVudDtcbiAgICAgICAgICAgICAgICAgICAgcC54ICs9IHJlbFNlZy54O1xuICAgICAgICAgICAgICAgICAgICBwLnkgKz0gcmVsU2VnLnk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIHN2Z1BhdGhTZWcuUEFUSFNFR19MSU5FVE9fSE9SSVpPTlRBTF9SRUw6XG4gICAgICAgICAgICAgICAgICAgIHAueCArPSBzZWdtZW50Lng7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2Ugc3ZnUGF0aFNlZy5QQVRIU0VHX0xJTkVUT19WRVJUSUNBTF9SRUw6XG4gICAgICAgICAgICAgICAgICAgIHAueSArPSBzZWdtZW50Lnk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2Ugc3ZnUGF0aFNlZy5QQVRIU0VHX1VOS05PV046XG4gICAgICAgICAgICAgICAgY2FzZSBzdmdQYXRoU2VnLlBBVEhTRUdfQ0xPU0VQQVRIOlxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICB4OiBwLnggKiBzY2FsZSArIG9mZnNldC54LFxuICAgICAgICAgICAgICAgIHk6IHAueSAqIHNjYWxlICsgb2Zmc2V0LnksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy5wYXJzZVBhdGhzID0gcGFyc2VQYXRocztcbmZ1bmN0aW9uIGNhbGNDbG9zZXN0UHRPblNlZ21lbnQoczEsIHMyLCBwb3MpIHtcbiAgICBjb25zdCB7IGR4LCBkeSB9ID0gKDAsIFV0aWxzXzEuZ2V0RGlzdGFuY2VzKShwb3MsIHMxKTtcbiAgICBjb25zdCB7IGR4OiBkeHgsIGR5OiBkeXkgfSA9ICgwLCBVdGlsc18xLmdldERpc3RhbmNlcykoczIsIHMxKTtcbiAgICBjb25zdCB0ID0gKGR4ICogZHh4ICsgZHkgKiBkeXkpIC8gKGR4eCAqKiAyICsgZHl5ICoqIDIpO1xuICAgIGxldCB4ID0gczEueCArIGR4eCAqIHQ7XG4gICAgbGV0IHkgPSBzMS55ICsgZHl5ICogdDtcbiAgICBpZiAodCA8IDApIHtcbiAgICAgICAgeCA9IHMxLng7XG4gICAgICAgIHkgPSBzMS55O1xuICAgIH1cbiAgICBlbHNlIGlmICh0ID4gMSkge1xuICAgICAgICB4ID0gczIueDtcbiAgICAgICAgeSA9IHMyLnk7XG4gICAgfVxuICAgIHJldHVybiB7IHg6IHgsIHk6IHksIGlzT25TZWdtZW50OiB0ID49IDAgJiYgdCA8PSAxIH07XG59XG5leHBvcnRzLmNhbGNDbG9zZXN0UHRPblNlZ21lbnQgPSBjYWxjQ2xvc2VzdFB0T25TZWdtZW50O1xuZnVuY3Rpb24gc2VnbWVudEJvdW5jZShzdGFydCwgc3RvcCwgdmVsb2NpdHkpIHtcbiAgICBjb25zdCB7IGR4LCBkeSB9ID0gKDAsIFV0aWxzXzEuZ2V0RGlzdGFuY2VzKShzdGFydCwgc3RvcCk7XG4gICAgY29uc3Qgd2FsbEFuZ2xlID0gTWF0aC5hdGFuMihkeSwgZHgpO1xuICAgIGNvbnN0IHdhbGxOb3JtYWxYID0gTWF0aC5zaW4od2FsbEFuZ2xlKTtcbiAgICBjb25zdCB3YWxsTm9ybWFsWSA9IC1NYXRoLmNvcyh3YWxsQW5nbGUpO1xuICAgIGNvbnN0IGQgPSAyICogKHZlbG9jaXR5LnggKiB3YWxsTm9ybWFsWCArIHZlbG9jaXR5LnkgKiB3YWxsTm9ybWFsWSk7XG4gICAgdmVsb2NpdHkueCAtPSBkICogd2FsbE5vcm1hbFg7XG4gICAgdmVsb2NpdHkueSAtPSBkICogd2FsbE5vcm1hbFk7XG59XG5leHBvcnRzLnNlZ21lbnRCb3VuY2UgPSBzZWdtZW50Qm91bmNlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNpcmNsZURyYXdlciA9IHZvaWQgMDtcbmNsYXNzIENpcmNsZURyYXdlciB7XG4gICAgZ2V0U2lkZXNDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIDEyO1xuICAgIH1cbiAgICBkcmF3KGNvbnRleHQsIHBhcnRpY2xlLCByYWRpdXMpIHtcbiAgICAgICAgY29udGV4dC5hcmMoMCwgMCwgcmFkaXVzLCAwLCBNYXRoLlBJICogMiwgZmFsc2UpO1xuICAgIH1cbn1cbmV4cG9ydHMuQ2lyY2xlRHJhd2VyID0gQ2lyY2xlRHJhd2VyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvYWRDaXJjbGVTaGFwZSA9IHZvaWQgMDtcbmNvbnN0IENpcmNsZURyYXdlcl8xID0gcmVxdWlyZShcIi4vQ2lyY2xlRHJhd2VyXCIpO1xuYXN5bmMgZnVuY3Rpb24gbG9hZENpcmNsZVNoYXBlKHRzUGFydGljbGVzKSB7XG4gICAgYXdhaXQgdHNQYXJ0aWNsZXMuYWRkU2hhcGUoXCJjaXJjbGVcIiwgbmV3IENpcmNsZURyYXdlcl8xLkNpcmNsZURyYXdlcigpKTtcbn1cbmV4cG9ydHMubG9hZENpcmNsZVNoYXBlID0gbG9hZENpcmNsZVNoYXBlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZFNldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZFNldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59O1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX0ltYWdlRHJhd2VyX2ltYWdlcztcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSW1hZ2VEcmF3ZXIgPSB2b2lkIDA7XG5jb25zdCBVdGlsc18xID0gcmVxdWlyZShcIi4uLy4uL1V0aWxzXCIpO1xuY29uc3QgRW51bXNfMSA9IHJlcXVpcmUoXCIuLi8uLi9FbnVtc1wiKTtcbmNvbnN0IFV0aWxzXzIgPSByZXF1aXJlKFwiLi9VdGlsc1wiKTtcbmNsYXNzIEltYWdlRHJhd2VyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgX0ltYWdlRHJhd2VyX2ltYWdlcy5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfSW1hZ2VEcmF3ZXJfaW1hZ2VzLCBbXSwgXCJmXCIpO1xuICAgIH1cbiAgICBnZXRTaWRlc0NvdW50KCkge1xuICAgICAgICByZXR1cm4gMTI7XG4gICAgfVxuICAgIGdldEltYWdlcyhjb250YWluZXIpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVySW1hZ2VzID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfSW1hZ2VEcmF3ZXJfaW1hZ2VzLCBcImZcIikuZmluZCgodCkgPT4gdC5pZCA9PT0gY29udGFpbmVyLmlkKTtcbiAgICAgICAgaWYgKCFjb250YWluZXJJbWFnZXMpIHtcbiAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0ltYWdlRHJhd2VyX2ltYWdlcywgXCJmXCIpLnB1c2goe1xuICAgICAgICAgICAgICAgIGlkOiBjb250YWluZXIuaWQsXG4gICAgICAgICAgICAgICAgaW1hZ2VzOiBbXSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0SW1hZ2VzKGNvbnRhaW5lcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGFpbmVySW1hZ2VzO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFkZEltYWdlKGNvbnRhaW5lciwgaW1hZ2UpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVySW1hZ2VzID0gdGhpcy5nZXRJbWFnZXMoY29udGFpbmVyKTtcbiAgICAgICAgY29udGFpbmVySW1hZ2VzID09PSBudWxsIHx8IGNvbnRhaW5lckltYWdlcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29udGFpbmVySW1hZ2VzLmltYWdlcy5wdXNoKGltYWdlKTtcbiAgICB9XG4gICAgYXN5bmMgaW5pdChjb250YWluZXIpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkSW1hZ2VzRnJvbVBhcnRpY2xlc09wdGlvbnMoY29udGFpbmVyLCBjb250YWluZXIuYWN0dWFsT3B0aW9ucy5wYXJ0aWNsZXMpO1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRJbWFnZXNGcm9tUGFydGljbGVzT3B0aW9ucyhjb250YWluZXIsIGNvbnRhaW5lci5hY3R1YWxPcHRpb25zLmludGVyYWN0aXZpdHkubW9kZXMudHJhaWwucGFydGljbGVzKTtcbiAgICAgICAgZm9yIChjb25zdCBtYW51YWxQYXJ0aWNsZSBvZiBjb250YWluZXIuYWN0dWFsT3B0aW9ucy5tYW51YWxQYXJ0aWNsZXMpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubG9hZEltYWdlc0Zyb21QYXJ0aWNsZXNPcHRpb25zKGNvbnRhaW5lciwgbWFudWFsUGFydGljbGUub3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZW1pdHRlck9wdGlvbnMgPSBjb250YWluZXIuYWN0dWFsT3B0aW9ucztcbiAgICAgICAgaWYgKGVtaXR0ZXJPcHRpb25zLmVtaXR0ZXJzKSB7XG4gICAgICAgICAgICBpZiAoZW1pdHRlck9wdGlvbnMuZW1pdHRlcnMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZW1pdHRlciBvZiBlbWl0dGVyT3B0aW9ucy5lbWl0dGVycykge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmxvYWRJbWFnZXNGcm9tUGFydGljbGVzT3B0aW9ucyhjb250YWluZXIsIGVtaXR0ZXIucGFydGljbGVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmxvYWRJbWFnZXNGcm9tUGFydGljbGVzT3B0aW9ucyhjb250YWluZXIsIGVtaXR0ZXJPcHRpb25zLmVtaXR0ZXJzLnBhcnRpY2xlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW50ZXJhY3RpdmVFbWl0dGVycyA9IGVtaXR0ZXJPcHRpb25zLmludGVyYWN0aXZpdHkubW9kZXMuZW1pdHRlcnM7XG4gICAgICAgIGlmIChpbnRlcmFjdGl2ZUVtaXR0ZXJzKSB7XG4gICAgICAgICAgICBpZiAoaW50ZXJhY3RpdmVFbWl0dGVycyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBlbWl0dGVyIG9mIGludGVyYWN0aXZlRW1pdHRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2FkSW1hZ2VzRnJvbVBhcnRpY2xlc09wdGlvbnMoY29udGFpbmVyLCBlbWl0dGVyLnBhcnRpY2xlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2FkSW1hZ2VzRnJvbVBhcnRpY2xlc09wdGlvbnMoY29udGFpbmVyLCBpbnRlcmFjdGl2ZUVtaXR0ZXJzLnBhcnRpY2xlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfSW1hZ2VEcmF3ZXJfaW1hZ2VzLCBbXSwgXCJmXCIpO1xuICAgIH1cbiAgICBhc3luYyBsb2FkSW1hZ2VzRnJvbVBhcnRpY2xlc09wdGlvbnMoY29udGFpbmVyLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICBjb25zdCBzaGFwZU9wdGlvbnMgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2hhcGU7XG4gICAgICAgIGlmICghKHNoYXBlT3B0aW9ucyA9PT0gbnVsbCB8fCBzaGFwZU9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNoYXBlT3B0aW9ucy50eXBlKSB8fFxuICAgICAgICAgICAgIXNoYXBlT3B0aW9ucy5vcHRpb25zIHx8XG4gICAgICAgICAgICAoISgwLCBVdGlsc18xLmlzSW5BcnJheSkoRW51bXNfMS5TaGFwZVR5cGUuaW1hZ2UsIHNoYXBlT3B0aW9ucy50eXBlKSAmJiAhKDAsIFV0aWxzXzEuaXNJbkFycmF5KShFbnVtc18xLlNoYXBlVHlwZS5pbWFnZXMsIHNoYXBlT3B0aW9ucy50eXBlKSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpZHggPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9JbWFnZURyYXdlcl9pbWFnZXMsIFwiZlwiKS5maW5kSW5kZXgoKHQpID0+IHQuaWQgPT09IGNvbnRhaW5lci5pZCk7XG4gICAgICAgIGlmIChpZHggPj0gMCkge1xuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfSW1hZ2VEcmF3ZXJfaW1hZ2VzLCBcImZcIikuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW1hZ2VPcHRpb25zID0gKF9hID0gc2hhcGVPcHRpb25zLm9wdGlvbnNbRW51bXNfMS5TaGFwZVR5cGUuaW1hZ2VzXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogc2hhcGVPcHRpb25zLm9wdGlvbnNbRW51bXNfMS5TaGFwZVR5cGUuaW1hZ2VdO1xuICAgICAgICBpZiAoaW1hZ2VPcHRpb25zIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgb3B0aW9uc0ltYWdlIG9mIGltYWdlT3B0aW9ucykge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMubG9hZEltYWdlU2hhcGUoY29udGFpbmVyLCBvcHRpb25zSW1hZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2FkSW1hZ2VTaGFwZShjb250YWluZXIsIGltYWdlT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5ncm91cHMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZ3JvdXBOYW1lIGluIG9wdGlvbnMuZ3JvdXBzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZ3JvdXAgPSBvcHRpb25zLmdyb3Vwc1tncm91cE5hbWVdO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMubG9hZEltYWdlc0Zyb21QYXJ0aWNsZXNPcHRpb25zKGNvbnRhaW5lciwgZ3JvdXApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICgoX2MgPSAoX2IgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZGVzdHJveSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnNwbGl0KSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MucGFydGljbGVzKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmxvYWRJbWFnZXNGcm9tUGFydGljbGVzT3B0aW9ucyhjb250YWluZXIsIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5kZXN0cm95LnNwbGl0LnBhcnRpY2xlcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgbG9hZEltYWdlU2hhcGUoY29udGFpbmVyLCBpbWFnZVNoYXBlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBpbWFnZUZ1bmMgPSBpbWFnZVNoYXBlLnJlcGxhY2VDb2xvciA/IFV0aWxzXzIuZG93bmxvYWRTdmdJbWFnZSA6IFV0aWxzXzIubG9hZEltYWdlO1xuICAgICAgICAgICAgY29uc3QgaW1hZ2UgPSBhd2FpdCBpbWFnZUZ1bmMoaW1hZ2VTaGFwZS5zcmMpO1xuICAgICAgICAgICAgaWYgKGltYWdlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRJbWFnZShjb250YWluZXIsIGltYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoX2EpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgdHNQYXJ0aWNsZXMgZXJyb3IgLSAke2ltYWdlU2hhcGUuc3JjfSBub3QgZm91bmRgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkcmF3KGNvbnRleHQsIHBhcnRpY2xlLCByYWRpdXMsIG9wYWNpdHkpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgaWYgKCFjb250ZXh0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW1hZ2UgPSBwYXJ0aWNsZS5pbWFnZTtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IChfYSA9IGltYWdlID09PSBudWxsIHx8IGltYWdlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbWFnZS5kYXRhKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZWxlbWVudDtcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmF0aW8gPSAoX2IgPSBpbWFnZSA9PT0gbnVsbCB8fCBpbWFnZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW1hZ2UucmF0aW8pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IDE7XG4gICAgICAgIGNvbnN0IHBvcyA9IHtcbiAgICAgICAgICAgIHg6IC1yYWRpdXMsXG4gICAgICAgICAgICB5OiAtcmFkaXVzLFxuICAgICAgICB9O1xuICAgICAgICBpZiAoIShpbWFnZSA9PT0gbnVsbCB8fCBpbWFnZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW1hZ2UuZGF0YS5zdmdEYXRhKSB8fCAhKGltYWdlID09PSBudWxsIHx8IGltYWdlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbWFnZS5yZXBsYWNlQ29sb3IpKSB7XG4gICAgICAgICAgICBjb250ZXh0Lmdsb2JhbEFscGhhID0gb3BhY2l0eTtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShlbGVtZW50LCBwb3MueCwgcG9zLnksIHJhZGl1cyAqIDIsIChyYWRpdXMgKiAyKSAvIHJhdGlvKTtcbiAgICAgICAgaWYgKCEoaW1hZ2UgPT09IG51bGwgfHwgaW1hZ2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGltYWdlLmRhdGEuc3ZnRGF0YSkgfHwgIShpbWFnZSA9PT0gbnVsbCB8fCBpbWFnZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW1hZ2UucmVwbGFjZUNvbG9yKSkge1xuICAgICAgICAgICAgY29udGV4dC5nbG9iYWxBbHBoYSA9IDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbG9hZFNoYXBlKHBhcnRpY2xlKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZztcbiAgICAgICAgaWYgKHBhcnRpY2xlLnNoYXBlICE9PSBcImltYWdlXCIgJiYgcGFydGljbGUuc2hhcGUgIT09IFwiaW1hZ2VzXCIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbWFnZXMgPSB0aGlzLmdldEltYWdlcyhwYXJ0aWNsZS5jb250YWluZXIpLmltYWdlcztcbiAgICAgICAgY29uc3QgaW1hZ2VEYXRhID0gcGFydGljbGUuc2hhcGVEYXRhO1xuICAgICAgICBjb25zdCBpbWFnZSA9IChfYSA9IGltYWdlcy5maW5kKCh0KSA9PiB0LnNvdXJjZSA9PT0gaW1hZ2VEYXRhLnNyYykpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGltYWdlc1swXTtcbiAgICAgICAgY29uc3QgY29sb3IgPSBwYXJ0aWNsZS5nZXRGaWxsQ29sb3IoKTtcbiAgICAgICAgbGV0IGltYWdlUmVzO1xuICAgICAgICBpZiAoIWltYWdlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGltYWdlLnN2Z0RhdGEgIT09IHVuZGVmaW5lZCAmJiBpbWFnZURhdGEucmVwbGFjZUNvbG9yICYmIGNvbG9yKSB7XG4gICAgICAgICAgICBjb25zdCBzdmdDb2xvcmVkRGF0YSA9ICgwLCBVdGlsc18yLnJlcGxhY2VDb2xvclN2ZykoaW1hZ2UsIGNvbG9yLCAoX2MgPSAoX2IgPSBwYXJ0aWNsZS5vcGFjaXR5KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IudmFsdWUpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IDEpO1xuICAgICAgICAgICAgY29uc3Qgc3ZnID0gbmV3IEJsb2IoW3N2Z0NvbG9yZWREYXRhXSwgeyB0eXBlOiBcImltYWdlL3N2Zyt4bWxcIiB9KTtcbiAgICAgICAgICAgIGNvbnN0IGRvbVVybCA9IFVSTCB8fCB3aW5kb3cuVVJMIHx8IHdpbmRvdy53ZWJraXRVUkwgfHwgd2luZG93O1xuICAgICAgICAgICAgY29uc3QgdXJsID0gZG9tVXJsLmNyZWF0ZU9iamVjdFVSTChzdmcpO1xuICAgICAgICAgICAgY29uc3QgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgICAgICAgICBpbWFnZVJlcyA9IHtcbiAgICAgICAgICAgICAgICBkYXRhOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGltYWdlKSwgeyBzdmdEYXRhOiBzdmdDb2xvcmVkRGF0YSB9KSxcbiAgICAgICAgICAgICAgICByYXRpbzogaW1hZ2VEYXRhLndpZHRoIC8gaW1hZ2VEYXRhLmhlaWdodCxcbiAgICAgICAgICAgICAgICByZXBsYWNlQ29sb3I6IChfZCA9IGltYWdlRGF0YS5yZXBsYWNlQ29sb3IpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IGltYWdlRGF0YS5yZXBsYWNlX2NvbG9yLFxuICAgICAgICAgICAgICAgIHNvdXJjZTogaW1hZ2VEYXRhLnNyYyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpbWcuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBJbWFnZSA9IHBhcnRpY2xlLmltYWdlO1xuICAgICAgICAgICAgICAgIGlmIChwSW1hZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcEltYWdlLmxvYWRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGltYWdlLmVsZW1lbnQgPSBpbWc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRvbVVybC5yZXZva2VPYmplY3RVUkwodXJsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaW1nLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgZG9tVXJsLnJldm9rZU9iamVjdFVSTCh1cmwpO1xuICAgICAgICAgICAgICAgICgwLCBVdGlsc18yLmxvYWRJbWFnZSkoaW1hZ2VEYXRhLnNyYykudGhlbigoaW1nMikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwSW1hZ2UgPSBwYXJ0aWNsZS5pbWFnZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBJbWFnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2UuZWxlbWVudCA9IGltZzIgPT09IG51bGwgfHwgaW1nMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW1nMi5lbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgcEltYWdlLmxvYWRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaW1nLnNyYyA9IHVybDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGltYWdlUmVzID0ge1xuICAgICAgICAgICAgICAgIGRhdGE6IGltYWdlLFxuICAgICAgICAgICAgICAgIGxvYWRlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICByYXRpbzogaW1hZ2VEYXRhLndpZHRoIC8gaW1hZ2VEYXRhLmhlaWdodCxcbiAgICAgICAgICAgICAgICByZXBsYWNlQ29sb3I6IChfZSA9IGltYWdlRGF0YS5yZXBsYWNlQ29sb3IpICE9PSBudWxsICYmIF9lICE9PSB2b2lkIDAgPyBfZSA6IGltYWdlRGF0YS5yZXBsYWNlX2NvbG9yLFxuICAgICAgICAgICAgICAgIHNvdXJjZTogaW1hZ2VEYXRhLnNyYyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpbWFnZVJlcy5yYXRpbykge1xuICAgICAgICAgICAgaW1hZ2VSZXMucmF0aW8gPSAxO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZpbGwgPSAoX2YgPSBpbWFnZURhdGEuZmlsbCkgIT09IG51bGwgJiYgX2YgIT09IHZvaWQgMCA/IF9mIDogcGFydGljbGUuZmlsbDtcbiAgICAgICAgY29uc3QgY2xvc2UgPSAoX2cgPSBpbWFnZURhdGEuY2xvc2UpICE9PSBudWxsICYmIF9nICE9PSB2b2lkIDAgPyBfZyA6IHBhcnRpY2xlLmNsb3NlO1xuICAgICAgICBjb25zdCBpbWFnZVNoYXBlID0ge1xuICAgICAgICAgICAgaW1hZ2U6IGltYWdlUmVzLFxuICAgICAgICAgICAgZmlsbCxcbiAgICAgICAgICAgIGNsb3NlLFxuICAgICAgICB9O1xuICAgICAgICBwYXJ0aWNsZS5pbWFnZSA9IGltYWdlU2hhcGUuaW1hZ2U7XG4gICAgICAgIHBhcnRpY2xlLmZpbGwgPSBpbWFnZVNoYXBlLmZpbGw7XG4gICAgICAgIHBhcnRpY2xlLmNsb3NlID0gaW1hZ2VTaGFwZS5jbG9zZTtcbiAgICB9XG59XG5leHBvcnRzLkltYWdlRHJhd2VyID0gSW1hZ2VEcmF3ZXI7XG5fSW1hZ2VEcmF3ZXJfaW1hZ2VzID0gbmV3IFdlYWtNYXAoKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZXBsYWNlQ29sb3JTdmcgPSBleHBvcnRzLmRvd25sb2FkU3ZnSW1hZ2UgPSBleHBvcnRzLmxvYWRJbWFnZSA9IHZvaWQgMDtcbmNvbnN0IFV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vVXRpbHNcIik7XG5mdW5jdGlvbiBsb2FkSW1hZ2Uoc291cmNlKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgICAgIHJlamVjdChcIkVycm9yIHRzUGFydGljbGVzIC0gTm8gaW1hZ2Uuc3JjXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGltYWdlID0ge1xuICAgICAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgICAgICB0eXBlOiBzb3VyY2Uuc3Vic3RyKHNvdXJjZS5sZW5ndGggLSAzKSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgICAgIGltZy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICBpbWFnZS5lbGVtZW50ID0gaW1nO1xuICAgICAgICAgICAgcmVzb2x2ZShpbWFnZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpbWcuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsICgpID0+IHtcbiAgICAgICAgICAgIHJlamVjdChgRXJyb3IgdHNQYXJ0aWNsZXMgLSBsb2FkaW5nIGltYWdlOiAke3NvdXJjZX1gKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGltZy5zcmMgPSBzb3VyY2U7XG4gICAgfSk7XG59XG5leHBvcnRzLmxvYWRJbWFnZSA9IGxvYWRJbWFnZTtcbmFzeW5jIGZ1bmN0aW9uIGRvd25sb2FkU3ZnSW1hZ2Uoc291cmNlKSB7XG4gICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXJyb3IgdHNQYXJ0aWNsZXMgLSBObyBpbWFnZS5zcmNcIik7XG4gICAgfVxuICAgIGNvbnN0IGltYWdlID0ge1xuICAgICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgICAgdHlwZTogc291cmNlLnN1YnN0cihzb3VyY2UubGVuZ3RoIC0gMyksXG4gICAgfTtcbiAgICBpZiAoaW1hZ2UudHlwZSAhPT0gXCJzdmdcIikge1xuICAgICAgICByZXR1cm4gbG9hZEltYWdlKHNvdXJjZSk7XG4gICAgfVxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goaW1hZ2Uuc291cmNlKTtcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVycm9yIHRzUGFydGljbGVzIC0gSW1hZ2Ugbm90IGZvdW5kXCIpO1xuICAgIH1cbiAgICBpbWFnZS5zdmdEYXRhID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICAgIHJldHVybiBpbWFnZTtcbn1cbmV4cG9ydHMuZG93bmxvYWRTdmdJbWFnZSA9IGRvd25sb2FkU3ZnSW1hZ2U7XG5mdW5jdGlvbiByZXBsYWNlQ29sb3JTdmcoaW1hZ2VTaGFwZSwgY29sb3IsIG9wYWNpdHkpIHtcbiAgICBjb25zdCB7IHN2Z0RhdGEgfSA9IGltYWdlU2hhcGU7XG4gICAgaWYgKCFzdmdEYXRhKSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICBpZiAoc3ZnRGF0YS5pbmNsdWRlcyhcImZpbGxcIikpIHtcbiAgICAgICAgY29uc3QgY3VycmVudENvbG9yID0gLygjKD86WzAtOWEtZl17Mn0pezIsNH18KCNbMC05YS1mXXszfSl8KHJnYnxoc2wpYT9cXCgoLT9cXGQrJT9bLFxcc10rKXsyLDN9XFxzKltcXGQuXSslP1xcKSl8Y3VycmVudGNvbG9yL2dpO1xuICAgICAgICByZXR1cm4gc3ZnRGF0YS5yZXBsYWNlKGN1cnJlbnRDb2xvciwgKCkgPT4gKDAsIFV0aWxzXzEuZ2V0U3R5bGVGcm9tSHNsKShjb2xvciwgb3BhY2l0eSkpO1xuICAgIH1cbiAgICBjb25zdCBwcmVGaWxsSW5kZXggPSBzdmdEYXRhLmluZGV4T2YoXCI+XCIpO1xuICAgIHJldHVybiBgJHtzdmdEYXRhLnN1YnN0cmluZygwLCBwcmVGaWxsSW5kZXgpfSBmaWxsPVwiJHsoMCwgVXRpbHNfMS5nZXRTdHlsZUZyb21Ic2wpKGNvbG9yLCBvcGFjaXR5KX1cIiR7c3ZnRGF0YS5zdWJzdHJpbmcocHJlRmlsbEluZGV4KX1gO1xufVxuZXhwb3J0cy5yZXBsYWNlQ29sb3JTdmcgPSByZXBsYWNlQ29sb3JTdmc7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubG9hZEltYWdlU2hhcGUgPSB2b2lkIDA7XG5jb25zdCBJbWFnZURyYXdlcl8xID0gcmVxdWlyZShcIi4vSW1hZ2VEcmF3ZXJcIik7XG5hc3luYyBmdW5jdGlvbiBsb2FkSW1hZ2VTaGFwZSh0c1BhcnRpY2xlcykge1xuICAgIGNvbnN0IGltYWdlRHJhd2VyID0gbmV3IEltYWdlRHJhd2VyXzEuSW1hZ2VEcmF3ZXIoKTtcbiAgICBhd2FpdCB0c1BhcnRpY2xlcy5hZGRTaGFwZShcImltYWdlXCIsIGltYWdlRHJhd2VyKTtcbiAgICBhd2FpdCB0c1BhcnRpY2xlcy5hZGRTaGFwZShcImltYWdlc1wiLCBpbWFnZURyYXdlcik7XG59XG5leHBvcnRzLmxvYWRJbWFnZVNoYXBlID0gbG9hZEltYWdlU2hhcGU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTGluZURyYXdlciA9IHZvaWQgMDtcbmNsYXNzIExpbmVEcmF3ZXIge1xuICAgIGdldFNpZGVzQ291bnQoKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICBkcmF3KGNvbnRleHQsIHBhcnRpY2xlLCByYWRpdXMpIHtcbiAgICAgICAgY29udGV4dC5tb3ZlVG8oLXJhZGl1cyAvIDIsIDApO1xuICAgICAgICBjb250ZXh0LmxpbmVUbyhyYWRpdXMgLyAyLCAwKTtcbiAgICB9XG59XG5leHBvcnRzLkxpbmVEcmF3ZXIgPSBMaW5lRHJhd2VyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvYWRMaW5lU2hhcGUgPSB2b2lkIDA7XG5jb25zdCBMaW5lRHJhd2VyXzEgPSByZXF1aXJlKFwiLi9MaW5lRHJhd2VyXCIpO1xuYXN5bmMgZnVuY3Rpb24gbG9hZExpbmVTaGFwZSh0c1BhcnRpY2xlcykge1xuICAgIGF3YWl0IHRzUGFydGljbGVzLmFkZFNoYXBlKFwibGluZVwiLCBuZXcgTGluZURyYXdlcl8xLkxpbmVEcmF3ZXIoKSk7XG59XG5leHBvcnRzLmxvYWRMaW5lU2hhcGUgPSBsb2FkTGluZVNoYXBlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBvbHlnb25EcmF3ZXIgPSB2b2lkIDA7XG5jb25zdCBQb2x5Z29uRHJhd2VyQmFzZV8xID0gcmVxdWlyZShcIi4vUG9seWdvbkRyYXdlckJhc2VcIik7XG5jbGFzcyBQb2x5Z29uRHJhd2VyIGV4dGVuZHMgUG9seWdvbkRyYXdlckJhc2VfMS5Qb2x5Z29uRHJhd2VyQmFzZSB7XG4gICAgZ2V0U2lkZXNEYXRhKHBhcnRpY2xlLCByYWRpdXMpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgY29uc3QgcG9seWdvbiA9IHBhcnRpY2xlLnNoYXBlRGF0YTtcbiAgICAgICAgY29uc3Qgc2lkZXMgPSAoX2IgPSAoX2EgPSBwb2x5Z29uID09PSBudWxsIHx8IHBvbHlnb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBvbHlnb24uc2lkZXMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHBvbHlnb24gPT09IG51bGwgfHwgcG9seWdvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogcG9seWdvbi5uYl9zaWRlcykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogNTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvdW50OiB7XG4gICAgICAgICAgICAgICAgZGVub21pbmF0b3I6IDEsXG4gICAgICAgICAgICAgICAgbnVtZXJhdG9yOiBzaWRlcyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsZW5ndGg6IChyYWRpdXMgKiAyLjY2KSAvIChzaWRlcyAvIDMpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBnZXRDZW50ZXIocGFydGljbGUsIHJhZGl1cykge1xuICAgICAgICBjb25zdCBzaWRlcyA9IHRoaXMuZ2V0U2lkZXNDb3VudChwYXJ0aWNsZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiAtcmFkaXVzIC8gKHNpZGVzIC8gMy41KSxcbiAgICAgICAgICAgIHk6IC1yYWRpdXMgLyAoMi42NiAvIDMuNSksXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5Qb2x5Z29uRHJhd2VyID0gUG9seWdvbkRyYXdlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Qb2x5Z29uRHJhd2VyQmFzZSA9IHZvaWQgMDtcbmNsYXNzIFBvbHlnb25EcmF3ZXJCYXNlIHtcbiAgICBnZXRTaWRlc0NvdW50KHBhcnRpY2xlKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGNvbnN0IHBvbHlnb24gPSBwYXJ0aWNsZS5zaGFwZURhdGE7XG4gICAgICAgIHJldHVybiAoX2IgPSAoX2EgPSBwb2x5Z29uID09PSBudWxsIHx8IHBvbHlnb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBvbHlnb24uc2lkZXMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHBvbHlnb24gPT09IG51bGwgfHwgcG9seWdvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogcG9seWdvbi5uYl9zaWRlcykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogNTtcbiAgICB9XG4gICAgZHJhdyhjb250ZXh0LCBwYXJ0aWNsZSwgcmFkaXVzKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5nZXRDZW50ZXIocGFydGljbGUsIHJhZGl1cyk7XG4gICAgICAgIGNvbnN0IHNpZGUgPSB0aGlzLmdldFNpZGVzRGF0YShwYXJ0aWNsZSwgcmFkaXVzKTtcbiAgICAgICAgY29uc3Qgc2lkZUNvdW50ID0gc2lkZS5jb3VudC5udW1lcmF0b3IgKiBzaWRlLmNvdW50LmRlbm9taW5hdG9yO1xuICAgICAgICBjb25zdCBkZWNpbWFsU2lkZXMgPSBzaWRlLmNvdW50Lm51bWVyYXRvciAvIHNpZGUuY291bnQuZGVub21pbmF0b3I7XG4gICAgICAgIGNvbnN0IGludGVyaW9yQW5nbGVEZWdyZWVzID0gKDE4MCAqIChkZWNpbWFsU2lkZXMgLSAyKSkgLyBkZWNpbWFsU2lkZXM7XG4gICAgICAgIGNvbnN0IGludGVyaW9yQW5nbGUgPSBNYXRoLlBJIC0gKE1hdGguUEkgKiBpbnRlcmlvckFuZ2xlRGVncmVlcykgLyAxODA7XG4gICAgICAgIGlmICghY29udGV4dCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgIGNvbnRleHQudHJhbnNsYXRlKHN0YXJ0LngsIHN0YXJ0LnkpO1xuICAgICAgICBjb250ZXh0Lm1vdmVUbygwLCAwKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaWRlQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgY29udGV4dC5saW5lVG8oc2lkZS5sZW5ndGgsIDApO1xuICAgICAgICAgICAgY29udGV4dC50cmFuc2xhdGUoc2lkZS5sZW5ndGgsIDApO1xuICAgICAgICAgICAgY29udGV4dC5yb3RhdGUoaW50ZXJpb3JBbmdsZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlBvbHlnb25EcmF3ZXJCYXNlID0gUG9seWdvbkRyYXdlckJhc2U7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVHJpYW5nbGVEcmF3ZXIgPSB2b2lkIDA7XG5jb25zdCBQb2x5Z29uRHJhd2VyQmFzZV8xID0gcmVxdWlyZShcIi4vUG9seWdvbkRyYXdlckJhc2VcIik7XG5jbGFzcyBUcmlhbmdsZURyYXdlciBleHRlbmRzIFBvbHlnb25EcmF3ZXJCYXNlXzEuUG9seWdvbkRyYXdlckJhc2Uge1xuICAgIGdldFNpZGVzQ291bnQoKSB7XG4gICAgICAgIHJldHVybiAzO1xuICAgIH1cbiAgICBnZXRTaWRlc0RhdGEocGFydGljbGUsIHJhZGl1cykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY291bnQ6IHtcbiAgICAgICAgICAgICAgICBkZW5vbWluYXRvcjogMixcbiAgICAgICAgICAgICAgICBudW1lcmF0b3I6IDMsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGVuZ3RoOiByYWRpdXMgKiAyLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBnZXRDZW50ZXIocGFydGljbGUsIHJhZGl1cykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogLXJhZGl1cyxcbiAgICAgICAgICAgIHk6IHJhZGl1cyAvIDEuNjYsXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5UcmlhbmdsZURyYXdlciA9IFRyaWFuZ2xlRHJhd2VyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvYWRQb2x5Z29uU2hhcGUgPSBleHBvcnRzLmxvYWRUcmlhbmdsZVNoYXBlID0gZXhwb3J0cy5sb2FkR2VuZXJpY1BvbHlnb25TaGFwZSA9IHZvaWQgMDtcbmNvbnN0IFBvbHlnb25EcmF3ZXJfMSA9IHJlcXVpcmUoXCIuL1BvbHlnb25EcmF3ZXJcIik7XG5jb25zdCBUcmlhbmdsZURyYXdlcl8xID0gcmVxdWlyZShcIi4vVHJpYW5nbGVEcmF3ZXJcIik7XG5hc3luYyBmdW5jdGlvbiBsb2FkR2VuZXJpY1BvbHlnb25TaGFwZSh0c1BhcnRpY2xlcykge1xuICAgIGF3YWl0IHRzUGFydGljbGVzLmFkZFNoYXBlKFwicG9seWdvblwiLCBuZXcgUG9seWdvbkRyYXdlcl8xLlBvbHlnb25EcmF3ZXIoKSk7XG59XG5leHBvcnRzLmxvYWRHZW5lcmljUG9seWdvblNoYXBlID0gbG9hZEdlbmVyaWNQb2x5Z29uU2hhcGU7XG5hc3luYyBmdW5jdGlvbiBsb2FkVHJpYW5nbGVTaGFwZSh0c1BhcnRpY2xlcykge1xuICAgIGF3YWl0IHRzUGFydGljbGVzLmFkZFNoYXBlKFwidHJpYW5nbGVcIiwgbmV3IFRyaWFuZ2xlRHJhd2VyXzEuVHJpYW5nbGVEcmF3ZXIoKSk7XG59XG5leHBvcnRzLmxvYWRUcmlhbmdsZVNoYXBlID0gbG9hZFRyaWFuZ2xlU2hhcGU7XG5hc3luYyBmdW5jdGlvbiBsb2FkUG9seWdvblNoYXBlKHRzUGFydGljbGVzKSB7XG4gICAgYXdhaXQgbG9hZEdlbmVyaWNQb2x5Z29uU2hhcGUodHNQYXJ0aWNsZXMpO1xuICAgIGF3YWl0IGxvYWRUcmlhbmdsZVNoYXBlKHRzUGFydGljbGVzKTtcbn1cbmV4cG9ydHMubG9hZFBvbHlnb25TaGFwZSA9IGxvYWRQb2x5Z29uU2hhcGU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3F1YXJlRHJhd2VyID0gdm9pZCAwO1xuY29uc3QgZml4RmFjdG9yID0gTWF0aC5zcXJ0KDIpO1xuY2xhc3MgU3F1YXJlRHJhd2VyIHtcbiAgICBnZXRTaWRlc0NvdW50KCkge1xuICAgICAgICByZXR1cm4gNDtcbiAgICB9XG4gICAgZHJhdyhjb250ZXh0LCBwYXJ0aWNsZSwgcmFkaXVzKSB7XG4gICAgICAgIGNvbnRleHQucmVjdCgtcmFkaXVzIC8gZml4RmFjdG9yLCAtcmFkaXVzIC8gZml4RmFjdG9yLCAocmFkaXVzICogMikgLyBmaXhGYWN0b3IsIChyYWRpdXMgKiAyKSAvIGZpeEZhY3Rvcik7XG4gICAgfVxufVxuZXhwb3J0cy5TcXVhcmVEcmF3ZXIgPSBTcXVhcmVEcmF3ZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubG9hZFNxdWFyZVNoYXBlID0gdm9pZCAwO1xuY29uc3QgU3F1YXJlRHJhd2VyXzEgPSByZXF1aXJlKFwiLi9TcXVhcmVEcmF3ZXJcIik7XG5hc3luYyBmdW5jdGlvbiBsb2FkU3F1YXJlU2hhcGUodHNQYXJ0aWNsZXMpIHtcbiAgICBjb25zdCBkcmF3ZXIgPSBuZXcgU3F1YXJlRHJhd2VyXzEuU3F1YXJlRHJhd2VyKCk7XG4gICAgYXdhaXQgdHNQYXJ0aWNsZXMuYWRkU2hhcGUoXCJlZGdlXCIsIGRyYXdlcik7XG4gICAgYXdhaXQgdHNQYXJ0aWNsZXMuYWRkU2hhcGUoXCJzcXVhcmVcIiwgZHJhd2VyKTtcbn1cbmV4cG9ydHMubG9hZFNxdWFyZVNoYXBlID0gbG9hZFNxdWFyZVNoYXBlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlN0YXJEcmF3ZXIgPSB2b2lkIDA7XG5jbGFzcyBTdGFyRHJhd2VyIHtcbiAgICBnZXRTaWRlc0NvdW50KHBhcnRpY2xlKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGNvbnN0IHN0YXIgPSBwYXJ0aWNsZS5zaGFwZURhdGE7XG4gICAgICAgIHJldHVybiAoX2IgPSAoX2EgPSBzdGFyID09PSBudWxsIHx8IHN0YXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHN0YXIuc2lkZXMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHN0YXIgPT09IG51bGwgfHwgc3RhciA9PT0gdm9pZCAwID8gdm9pZCAwIDogc3Rhci5uYl9zaWRlcykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogNTtcbiAgICB9XG4gICAgZHJhdyhjb250ZXh0LCBwYXJ0aWNsZSwgcmFkaXVzKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3Qgc3RhciA9IHBhcnRpY2xlLnNoYXBlRGF0YTtcbiAgICAgICAgY29uc3Qgc2lkZXMgPSB0aGlzLmdldFNpZGVzQ291bnQocGFydGljbGUpO1xuICAgICAgICBjb25zdCBpbnNldCA9IChfYSA9IHN0YXIgPT09IG51bGwgfHwgc3RhciA9PT0gdm9pZCAwID8gdm9pZCAwIDogc3Rhci5pbnNldCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMjtcbiAgICAgICAgY29udGV4dC5tb3ZlVG8oMCwgMCAtIHJhZGl1cyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2lkZXM7IGkrKykge1xuICAgICAgICAgICAgY29udGV4dC5yb3RhdGUoTWF0aC5QSSAvIHNpZGVzKTtcbiAgICAgICAgICAgIGNvbnRleHQubGluZVRvKDAsIDAgLSByYWRpdXMgKiBpbnNldCk7XG4gICAgICAgICAgICBjb250ZXh0LnJvdGF0ZShNYXRoLlBJIC8gc2lkZXMpO1xuICAgICAgICAgICAgY29udGV4dC5saW5lVG8oMCwgMCAtIHJhZGl1cyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlN0YXJEcmF3ZXIgPSBTdGFyRHJhd2VyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvYWRTdGFyU2hhcGUgPSB2b2lkIDA7XG5jb25zdCBTdGFyRHJhd2VyXzEgPSByZXF1aXJlKFwiLi9TdGFyRHJhd2VyXCIpO1xuYXN5bmMgZnVuY3Rpb24gbG9hZFN0YXJTaGFwZSh0c1BhcnRpY2xlcykge1xuICAgIGF3YWl0IHRzUGFydGljbGVzLmFkZFNoYXBlKFwic3RhclwiLCBuZXcgU3RhckRyYXdlcl8xLlN0YXJEcmF3ZXIoKSk7XG59XG5leHBvcnRzLmxvYWRTdGFyU2hhcGUgPSBsb2FkU3RhclNoYXBlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRleHREcmF3ZXIgPSBleHBvcnRzLnZhbGlkVHlwZXMgPSB2b2lkIDA7XG5jb25zdCBVdGlsc18xID0gcmVxdWlyZShcIi4uLy4uL1V0aWxzXCIpO1xuZXhwb3J0cy52YWxpZFR5cGVzID0gW1widGV4dFwiLCBcImNoYXJhY3RlclwiLCBcImNoYXJcIl07XG5jbGFzcyBUZXh0RHJhd2VyIHtcbiAgICBnZXRTaWRlc0NvdW50KCkge1xuICAgICAgICByZXR1cm4gMTI7XG4gICAgfVxuICAgIGFzeW5jIGluaXQoY29udGFpbmVyKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBjb250YWluZXIuYWN0dWFsT3B0aW9ucztcbiAgICAgICAgaWYgKGV4cG9ydHMudmFsaWRUeXBlcy5maW5kKCh0KSA9PiAoMCwgVXRpbHNfMS5pc0luQXJyYXkpKHQsIG9wdGlvbnMucGFydGljbGVzLnNoYXBlLnR5cGUpKSkge1xuICAgICAgICAgICAgY29uc3Qgc2hhcGVPcHRpb25zID0gZXhwb3J0cy52YWxpZFR5cGVzLm1hcCgodCkgPT4gb3B0aW9ucy5wYXJ0aWNsZXMuc2hhcGUub3B0aW9uc1t0XSkuZmluZCgodCkgPT4gISF0KTtcbiAgICAgICAgICAgIGlmIChzaGFwZU9wdGlvbnMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb21pc2VzID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBjaGFyYWN0ZXIgb2Ygc2hhcGVPcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2goKDAsIFV0aWxzXzEubG9hZEZvbnQpKGNoYXJhY3RlcikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhd2FpdCBQcm9taXNlLmFsbFNldHRsZWQocHJvbWlzZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHNoYXBlT3B0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0ICgwLCBVdGlsc18xLmxvYWRGb250KShzaGFwZU9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBkcmF3KGNvbnRleHQsIHBhcnRpY2xlLCByYWRpdXMsIG9wYWNpdHkpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIGNvbnN0IGNoYXJhY3RlciA9IHBhcnRpY2xlLnNoYXBlRGF0YTtcbiAgICAgICAgaWYgKGNoYXJhY3RlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGV4dERhdGEgPSBjaGFyYWN0ZXIudmFsdWU7XG4gICAgICAgIGlmICh0ZXh0RGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGV4dFBhcnRpY2xlID0gcGFydGljbGU7XG4gICAgICAgIGlmICh0ZXh0UGFydGljbGUudGV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0ZXh0UGFydGljbGUudGV4dCA9XG4gICAgICAgICAgICAgICAgdGV4dERhdGEgaW5zdGFuY2VvZiBBcnJheSA/ICgwLCBVdGlsc18xLml0ZW1Gcm9tQXJyYXkpKHRleHREYXRhLCBwYXJ0aWNsZS5yYW5kb21JbmRleERhdGEpIDogdGV4dERhdGE7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGV4dCA9IHRleHRQYXJ0aWNsZS50ZXh0O1xuICAgICAgICBjb25zdCBzdHlsZSA9IChfYSA9IGNoYXJhY3Rlci5zdHlsZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogXCJcIjtcbiAgICAgICAgY29uc3Qgd2VpZ2h0ID0gKF9iID0gY2hhcmFjdGVyLndlaWdodCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogXCI0MDBcIjtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IE1hdGgucm91bmQocmFkaXVzKSAqIDI7XG4gICAgICAgIGNvbnN0IGZvbnQgPSAoX2MgPSBjaGFyYWN0ZXIuZm9udCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogXCJWZXJkYW5hXCI7XG4gICAgICAgIGNvbnN0IGZpbGwgPSBwYXJ0aWNsZS5maWxsO1xuICAgICAgICBjb25zdCBvZmZzZXRYID0gKHRleHQubGVuZ3RoICogcmFkaXVzKSAvIDI7XG4gICAgICAgIGNvbnRleHQuZm9udCA9IGAke3N0eWxlfSAke3dlaWdodH0gJHtzaXplfXB4IFwiJHtmb250fVwiYDtcbiAgICAgICAgY29uc3QgcG9zID0ge1xuICAgICAgICAgICAgeDogLW9mZnNldFgsXG4gICAgICAgICAgICB5OiByYWRpdXMgLyAyLFxuICAgICAgICB9O1xuICAgICAgICBjb250ZXh0Lmdsb2JhbEFscGhhID0gb3BhY2l0eTtcbiAgICAgICAgaWYgKGZpbGwpIHtcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFRleHQodGV4dCwgcG9zLngsIHBvcy55KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlVGV4dCh0ZXh0LCBwb3MueCwgcG9zLnkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRleHQuZ2xvYmFsQWxwaGEgPSAxO1xuICAgIH1cbn1cbmV4cG9ydHMuVGV4dERyYXdlciA9IFRleHREcmF3ZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubG9hZFRleHRTaGFwZSA9IHZvaWQgMDtcbmNvbnN0IFRleHREcmF3ZXJfMSA9IHJlcXVpcmUoXCIuL1RleHREcmF3ZXJcIik7XG5hc3luYyBmdW5jdGlvbiBsb2FkVGV4dFNoYXBlKHRzUGFydGljbGVzKSB7XG4gICAgY29uc3QgZHJhd2VyID0gbmV3IFRleHREcmF3ZXJfMS5UZXh0RHJhd2VyKCk7XG4gICAgZm9yIChjb25zdCB0eXBlIG9mIFRleHREcmF3ZXJfMS52YWxpZFR5cGVzKSB7XG4gICAgICAgIGF3YWl0IHRzUGFydGljbGVzLmFkZFNoYXBlKHR5cGUsIGRyYXdlcik7XG4gICAgfVxufVxuZXhwb3J0cy5sb2FkVGV4dFNoYXBlID0gbG9hZFRleHRTaGFwZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vUmFuZ2VWYWx1ZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vUmVjdXJzaXZlUGFydGlhbFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vU2hhcGVEYXRhXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9TaGFwZURyYXdlckZ1bmN0aW9uc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vU2luZ2xlT3JNdWx0aXBsZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vUGF0aE9wdGlvbnNcIiksIGV4cG9ydHMpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFuZ2xlVXBkYXRlciA9IHZvaWQgMDtcbmNvbnN0IEVudW1zXzEgPSByZXF1aXJlKFwiLi4vLi4vRW51bXNcIik7XG5jb25zdCBVdGlsc18xID0gcmVxdWlyZShcIi4uLy4uL1V0aWxzXCIpO1xuZnVuY3Rpb24gdXBkYXRlQW5nbGUocGFydGljbGUsIGRlbHRhKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IHJvdGF0ZSA9IHBhcnRpY2xlLnJvdGF0ZTtcbiAgICBpZiAoIXJvdGF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHJvdGF0ZU9wdGlvbnMgPSBwYXJ0aWNsZS5vcHRpb25zLnJvdGF0ZTtcbiAgICBjb25zdCByb3RhdGVBbmltYXRpb24gPSByb3RhdGVPcHRpb25zLmFuaW1hdGlvbjtcbiAgICBjb25zdCBzcGVlZCA9ICgoX2EgPSByb3RhdGUudmVsb2NpdHkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDApICogZGVsdGEuZmFjdG9yO1xuICAgIGNvbnN0IG1heCA9IDIgKiBNYXRoLlBJO1xuICAgIGlmICghcm90YXRlQW5pbWF0aW9uLmVuYWJsZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHN3aXRjaCAocm90YXRlLnN0YXR1cykge1xuICAgICAgICBjYXNlIEVudW1zXzEuQW5pbWF0aW9uU3RhdHVzLmluY3JlYXNpbmc6XG4gICAgICAgICAgICByb3RhdGUudmFsdWUgKz0gc3BlZWQ7XG4gICAgICAgICAgICBpZiAocm90YXRlLnZhbHVlID4gbWF4KSB7XG4gICAgICAgICAgICAgICAgcm90YXRlLnZhbHVlIC09IG1heDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEVudW1zXzEuQW5pbWF0aW9uU3RhdHVzLmRlY3JlYXNpbmc6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByb3RhdGUudmFsdWUgLT0gc3BlZWQ7XG4gICAgICAgICAgICBpZiAocm90YXRlLnZhbHVlIDwgMCkge1xuICAgICAgICAgICAgICAgIHJvdGF0ZS52YWx1ZSArPSBtYXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG59XG5jbGFzcyBBbmdsZVVwZGF0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lcikge1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICB9XG4gICAgaW5pdChwYXJ0aWNsZSkge1xuICAgICAgICBjb25zdCByb3RhdGVPcHRpb25zID0gcGFydGljbGUub3B0aW9ucy5yb3RhdGU7XG4gICAgICAgIHBhcnRpY2xlLnJvdGF0ZSA9IHtcbiAgICAgICAgICAgIGVuYWJsZTogcm90YXRlT3B0aW9ucy5hbmltYXRpb24uZW5hYmxlLFxuICAgICAgICAgICAgdmFsdWU6ICgoMCwgVXRpbHNfMS5nZXRSYW5nZVZhbHVlKShyb3RhdGVPcHRpb25zLnZhbHVlKSAqIE1hdGguUEkpIC8gMTgwLFxuICAgICAgICB9O1xuICAgICAgICBsZXQgcm90YXRlRGlyZWN0aW9uID0gcm90YXRlT3B0aW9ucy5kaXJlY3Rpb247XG4gICAgICAgIGlmIChyb3RhdGVEaXJlY3Rpb24gPT09IEVudW1zXzEuUm90YXRlRGlyZWN0aW9uLnJhbmRvbSkge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyKTtcbiAgICAgICAgICAgIHJvdGF0ZURpcmVjdGlvbiA9IGluZGV4ID4gMCA/IEVudW1zXzEuUm90YXRlRGlyZWN0aW9uLmNvdW50ZXJDbG9ja3dpc2UgOiBFbnVtc18xLlJvdGF0ZURpcmVjdGlvbi5jbG9ja3dpc2U7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChyb3RhdGVEaXJlY3Rpb24pIHtcbiAgICAgICAgICAgIGNhc2UgRW51bXNfMS5Sb3RhdGVEaXJlY3Rpb24uY291bnRlckNsb2Nrd2lzZTpcbiAgICAgICAgICAgIGNhc2UgXCJjb3VudGVyQ2xvY2t3aXNlXCI6XG4gICAgICAgICAgICAgICAgcGFydGljbGUucm90YXRlLnN0YXR1cyA9IEVudW1zXzEuQW5pbWF0aW9uU3RhdHVzLmRlY3JlYXNpbmc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEVudW1zXzEuUm90YXRlRGlyZWN0aW9uLmNsb2Nrd2lzZTpcbiAgICAgICAgICAgICAgICBwYXJ0aWNsZS5yb3RhdGUuc3RhdHVzID0gRW51bXNfMS5BbmltYXRpb25TdGF0dXMuaW5jcmVhc2luZztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByb3RhdGVBbmltYXRpb24gPSBwYXJ0aWNsZS5vcHRpb25zLnJvdGF0ZS5hbmltYXRpb247XG4gICAgICAgIGlmIChyb3RhdGVBbmltYXRpb24uZW5hYmxlKSB7XG4gICAgICAgICAgICBwYXJ0aWNsZS5yb3RhdGUudmVsb2NpdHkgPSAocm90YXRlQW5pbWF0aW9uLnNwZWVkIC8gMzYwKSAqIHRoaXMuY29udGFpbmVyLnJldGluYS5yZWR1Y2VGYWN0b3I7XG4gICAgICAgICAgICBpZiAoIXJvdGF0ZUFuaW1hdGlvbi5zeW5jKSB7XG4gICAgICAgICAgICAgICAgcGFydGljbGUucm90YXRlLnZlbG9jaXR5ICo9IE1hdGgucmFuZG9tKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaXNFbmFibGVkKHBhcnRpY2xlKSB7XG4gICAgICAgIGNvbnN0IHJvdGF0ZSA9IHBhcnRpY2xlLm9wdGlvbnMucm90YXRlO1xuICAgICAgICBjb25zdCByb3RhdGVBbmltYXRpb24gPSByb3RhdGUuYW5pbWF0aW9uO1xuICAgICAgICByZXR1cm4gIXBhcnRpY2xlLmRlc3Ryb3llZCAmJiAhcGFydGljbGUuc3Bhd25pbmcgJiYgIXJvdGF0ZS5wYXRoICYmIHJvdGF0ZUFuaW1hdGlvbi5lbmFibGU7XG4gICAgfVxuICAgIHVwZGF0ZShwYXJ0aWNsZSwgZGVsdGEpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzRW5hYmxlZChwYXJ0aWNsZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB1cGRhdGVBbmdsZShwYXJ0aWNsZSwgZGVsdGEpO1xuICAgIH1cbn1cbmV4cG9ydHMuQW5nbGVVcGRhdGVyID0gQW5nbGVVcGRhdGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvYWRBbmdsZVVwZGF0ZXIgPSB2b2lkIDA7XG5jb25zdCBBbmdsZVVwZGF0ZXJfMSA9IHJlcXVpcmUoXCIuL0FuZ2xlVXBkYXRlclwiKTtcbmFzeW5jIGZ1bmN0aW9uIGxvYWRBbmdsZVVwZGF0ZXIodHNQYXJ0aWNsZXMpIHtcbiAgICBhd2FpdCB0c1BhcnRpY2xlcy5hZGRQYXJ0aWNsZVVwZGF0ZXIoXCJhbmdsZVwiLCAoY29udGFpbmVyKSA9PiBuZXcgQW5nbGVVcGRhdGVyXzEuQW5nbGVVcGRhdGVyKGNvbnRhaW5lcikpO1xufVxuZXhwb3J0cy5sb2FkQW5nbGVVcGRhdGVyID0gbG9hZEFuZ2xlVXBkYXRlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db2xvclVwZGF0ZXIgPSB2b2lkIDA7XG5jb25zdCBFbnVtc18xID0gcmVxdWlyZShcIi4uLy4uL0VudW1zXCIpO1xuY29uc3QgVXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi9VdGlsc1wiKTtcbmZ1bmN0aW9uIHVwZGF0ZUNvbG9yVmFsdWUoZGVsdGEsIHZhbHVlLCB2YWx1ZUFuaW1hdGlvbiwgbWF4LCBkZWNyZWFzZSkge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCBjb2xvclZhbHVlID0gdmFsdWU7XG4gICAgaWYgKCFjb2xvclZhbHVlIHx8ICF2YWx1ZUFuaW1hdGlvbi5lbmFibGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBvZmZzZXQgPSAoMCwgVXRpbHNfMS5yYW5kb21JblJhbmdlKSh2YWx1ZUFuaW1hdGlvbi5vZmZzZXQpO1xuICAgIGNvbnN0IHZlbG9jaXR5ID0gKChfYSA9IHZhbHVlLnZlbG9jaXR5KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAwKSAqIGRlbHRhLmZhY3RvciArIG9mZnNldCAqIDMuNjtcbiAgICBpZiAoIWRlY3JlYXNlIHx8IGNvbG9yVmFsdWUuc3RhdHVzID09PSBFbnVtc18xLkFuaW1hdGlvblN0YXR1cy5pbmNyZWFzaW5nKSB7XG4gICAgICAgIGNvbG9yVmFsdWUudmFsdWUgKz0gdmVsb2NpdHk7XG4gICAgICAgIGlmIChkZWNyZWFzZSAmJiBjb2xvclZhbHVlLnZhbHVlID4gbWF4KSB7XG4gICAgICAgICAgICBjb2xvclZhbHVlLnN0YXR1cyA9IEVudW1zXzEuQW5pbWF0aW9uU3RhdHVzLmRlY3JlYXNpbmc7XG4gICAgICAgICAgICBjb2xvclZhbHVlLnZhbHVlIC09IGNvbG9yVmFsdWUudmFsdWUgJSBtYXg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbG9yVmFsdWUudmFsdWUgLT0gdmVsb2NpdHk7XG4gICAgICAgIGlmIChjb2xvclZhbHVlLnZhbHVlIDwgMCkge1xuICAgICAgICAgICAgY29sb3JWYWx1ZS5zdGF0dXMgPSBFbnVtc18xLkFuaW1hdGlvblN0YXR1cy5pbmNyZWFzaW5nO1xuICAgICAgICAgICAgY29sb3JWYWx1ZS52YWx1ZSArPSBjb2xvclZhbHVlLnZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChjb2xvclZhbHVlLnZhbHVlID4gbWF4KSB7XG4gICAgICAgIGNvbG9yVmFsdWUudmFsdWUgJT0gbWF4O1xuICAgIH1cbn1cbmZ1bmN0aW9uIHVwZGF0ZUNvbG9yKHBhcnRpY2xlLCBkZWx0YSkge1xuICAgIHZhciBfYSwgX2IsIF9jO1xuICAgIGNvbnN0IGFuaW1hdGlvbk9wdGlvbnMgPSBwYXJ0aWNsZS5vcHRpb25zLmNvbG9yLmFuaW1hdGlvbjtcbiAgICBpZiAoKChfYSA9IHBhcnRpY2xlLmNvbG9yKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaCkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB1cGRhdGVDb2xvclZhbHVlKGRlbHRhLCBwYXJ0aWNsZS5jb2xvci5oLCBhbmltYXRpb25PcHRpb25zLmgsIDM2MCwgZmFsc2UpO1xuICAgIH1cbiAgICBpZiAoKChfYiA9IHBhcnRpY2xlLmNvbG9yKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IucykgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB1cGRhdGVDb2xvclZhbHVlKGRlbHRhLCBwYXJ0aWNsZS5jb2xvci5zLCBhbmltYXRpb25PcHRpb25zLnMsIDEwMCwgdHJ1ZSk7XG4gICAgfVxuICAgIGlmICgoKF9jID0gcGFydGljbGUuY29sb3IpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5sKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHVwZGF0ZUNvbG9yVmFsdWUoZGVsdGEsIHBhcnRpY2xlLmNvbG9yLmwsIGFuaW1hdGlvbk9wdGlvbnMubCwgMTAwLCB0cnVlKTtcbiAgICB9XG59XG5jbGFzcyBDb2xvclVwZGF0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lcikge1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICB9XG4gICAgaW5pdChwYXJ0aWNsZSkge1xuICAgICAgICBjb25zdCBoc2xDb2xvciA9ICgwLCBVdGlsc18xLmNvbG9yVG9Ic2wpKHBhcnRpY2xlLm9wdGlvbnMuY29sb3IsIHBhcnRpY2xlLmlkLCBwYXJ0aWNsZS5vcHRpb25zLnJlZHVjZUR1cGxpY2F0ZXMpO1xuICAgICAgICBpZiAoaHNsQ29sb3IpIHtcbiAgICAgICAgICAgIHBhcnRpY2xlLmNvbG9yID0gKDAsIFV0aWxzXzEuZ2V0SHNsQW5pbWF0aW9uRnJvbUhzbCkoaHNsQ29sb3IsIHBhcnRpY2xlLm9wdGlvbnMuY29sb3IuYW5pbWF0aW9uLCB0aGlzLmNvbnRhaW5lci5yZXRpbmEucmVkdWNlRmFjdG9yKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpc0VuYWJsZWQocGFydGljbGUpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbk9wdGlvbnMgPSBwYXJ0aWNsZS5vcHRpb25zLmNvbG9yLmFuaW1hdGlvbjtcbiAgICAgICAgcmV0dXJuICghcGFydGljbGUuZGVzdHJveWVkICYmXG4gICAgICAgICAgICAhcGFydGljbGUuc3Bhd25pbmcgJiZcbiAgICAgICAgICAgICgoKChfYSA9IHBhcnRpY2xlLmNvbG9yKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaC52YWx1ZSkgIT09IHVuZGVmaW5lZCAmJiBhbmltYXRpb25PcHRpb25zLmguZW5hYmxlKSB8fFxuICAgICAgICAgICAgICAgICgoKF9iID0gcGFydGljbGUuY29sb3IpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5zLnZhbHVlKSAhPT0gdW5kZWZpbmVkICYmIGFuaW1hdGlvbk9wdGlvbnMucy5lbmFibGUpIHx8XG4gICAgICAgICAgICAgICAgKCgoX2MgPSBwYXJ0aWNsZS5jb2xvcikgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmwudmFsdWUpICE9PSB1bmRlZmluZWQgJiYgYW5pbWF0aW9uT3B0aW9ucy5sLmVuYWJsZSkpKTtcbiAgICB9XG4gICAgdXBkYXRlKHBhcnRpY2xlLCBkZWx0YSkge1xuICAgICAgICB1cGRhdGVDb2xvcihwYXJ0aWNsZSwgZGVsdGEpO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29sb3JVcGRhdGVyID0gQ29sb3JVcGRhdGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvYWRDb2xvclVwZGF0ZXIgPSB2b2lkIDA7XG5jb25zdCBDb2xvclVwZGF0ZXJfMSA9IHJlcXVpcmUoXCIuL0NvbG9yVXBkYXRlclwiKTtcbmFzeW5jIGZ1bmN0aW9uIGxvYWRDb2xvclVwZGF0ZXIodHNQYXJ0aWNsZXMpIHtcbiAgICBhd2FpdCB0c1BhcnRpY2xlcy5hZGRQYXJ0aWNsZVVwZGF0ZXIoXCJjb2xvclwiLCAoY29udGFpbmVyKSA9PiBuZXcgQ29sb3JVcGRhdGVyXzEuQ29sb3JVcGRhdGVyKGNvbnRhaW5lcikpO1xufVxuZXhwb3J0cy5sb2FkQ29sb3JVcGRhdGVyID0gbG9hZENvbG9yVXBkYXRlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5MaWZlVXBkYXRlciA9IHZvaWQgMDtcbmNvbnN0IFV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vVXRpbHNcIik7XG5jbGFzcyBMaWZlVXBkYXRlciB7XG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgIH1cbiAgICBpbml0KCkge1xuICAgIH1cbiAgICBpc0VuYWJsZWQocGFydGljbGUpIHtcbiAgICAgICAgcmV0dXJuICFwYXJ0aWNsZS5kZXN0cm95ZWQ7XG4gICAgfVxuICAgIHVwZGF0ZShwYXJ0aWNsZSwgZGVsdGEpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzRW5hYmxlZChwYXJ0aWNsZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsaWZlID0gcGFydGljbGUubGlmZTtcbiAgICAgICAgbGV0IGp1c3RTcGF3bmVkID0gZmFsc2U7XG4gICAgICAgIGlmIChwYXJ0aWNsZS5zcGF3bmluZykge1xuICAgICAgICAgICAgbGlmZS5kZWxheVRpbWUgKz0gZGVsdGEudmFsdWU7XG4gICAgICAgICAgICBpZiAobGlmZS5kZWxheVRpbWUgPj0gcGFydGljbGUubGlmZS5kZWxheSkge1xuICAgICAgICAgICAgICAgIGp1c3RTcGF3bmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBwYXJ0aWNsZS5zcGF3bmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGxpZmUuZGVsYXlUaW1lID0gMDtcbiAgICAgICAgICAgICAgICBsaWZlLnRpbWUgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChsaWZlLmR1cmF0aW9uID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0aWNsZS5zcGF3bmluZykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChqdXN0U3Bhd25lZCkge1xuICAgICAgICAgICAgbGlmZS50aW1lID0gMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxpZmUudGltZSArPSBkZWx0YS52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGlmZS50aW1lIDwgbGlmZS5kdXJhdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxpZmUudGltZSA9IDA7XG4gICAgICAgIGlmIChwYXJ0aWNsZS5saWZlLmNvdW50ID4gMCkge1xuICAgICAgICAgICAgcGFydGljbGUubGlmZS5jb3VudC0tO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0aWNsZS5saWZlLmNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICBwYXJ0aWNsZS5kZXN0cm95KCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2FudmFzU2l6ZSA9IHRoaXMuY29udGFpbmVyLmNhbnZhcy5zaXplLCB3aWR0aFJhbmdlID0gKDAsIFV0aWxzXzEuc2V0UmFuZ2VWYWx1ZSkoMCwgY2FudmFzU2l6ZS53aWR0aCksIGhlaWdodFJhbmdlID0gKDAsIFV0aWxzXzEuc2V0UmFuZ2VWYWx1ZSkoMCwgY2FudmFzU2l6ZS53aWR0aCk7XG4gICAgICAgIHBhcnRpY2xlLnBvc2l0aW9uLnggPSAoMCwgVXRpbHNfMS5yYW5kb21JblJhbmdlKSh3aWR0aFJhbmdlKTtcbiAgICAgICAgcGFydGljbGUucG9zaXRpb24ueSA9ICgwLCBVdGlsc18xLnJhbmRvbUluUmFuZ2UpKGhlaWdodFJhbmdlKTtcbiAgICAgICAgcGFydGljbGUuc3Bhd25pbmcgPSB0cnVlO1xuICAgICAgICBsaWZlLmRlbGF5VGltZSA9IDA7XG4gICAgICAgIGxpZmUudGltZSA9IDA7XG4gICAgICAgIHBhcnRpY2xlLnJlc2V0KCk7XG4gICAgICAgIGNvbnN0IGxpZmVPcHRpb25zID0gcGFydGljbGUub3B0aW9ucy5saWZlO1xuICAgICAgICBsaWZlLmRlbGF5ID0gKDAsIFV0aWxzXzEuZ2V0UmFuZ2VWYWx1ZSkobGlmZU9wdGlvbnMuZGVsYXkudmFsdWUpICogMTAwMDtcbiAgICAgICAgbGlmZS5kdXJhdGlvbiA9ICgwLCBVdGlsc18xLmdldFJhbmdlVmFsdWUpKGxpZmVPcHRpb25zLmR1cmF0aW9uLnZhbHVlKSAqIDEwMDA7XG4gICAgfVxufVxuZXhwb3J0cy5MaWZlVXBkYXRlciA9IExpZmVVcGRhdGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvYWRMaWZlVXBkYXRlciA9IHZvaWQgMDtcbmNvbnN0IExpZmVVcGRhdGVyXzEgPSByZXF1aXJlKFwiLi9MaWZlVXBkYXRlclwiKTtcbmFzeW5jIGZ1bmN0aW9uIGxvYWRMaWZlVXBkYXRlcih0c1BhcnRpY2xlcykge1xuICAgIGF3YWl0IHRzUGFydGljbGVzLmFkZFBhcnRpY2xlVXBkYXRlcihcImxpZmVcIiwgKGNvbnRhaW5lcikgPT4gbmV3IExpZmVVcGRhdGVyXzEuTGlmZVVwZGF0ZXIoY29udGFpbmVyKSk7XG59XG5leHBvcnRzLmxvYWRMaWZlVXBkYXRlciA9IGxvYWRMaWZlVXBkYXRlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5PcGFjaXR5VXBkYXRlciA9IHZvaWQgMDtcbmNvbnN0IEVudW1zXzEgPSByZXF1aXJlKFwiLi4vLi4vRW51bXNcIik7XG5jb25zdCBVdGlsc18xID0gcmVxdWlyZShcIi4uLy4uL1V0aWxzXCIpO1xuZnVuY3Rpb24gY2hlY2tEZXN0cm95KHBhcnRpY2xlLCB2YWx1ZSwgbWluVmFsdWUsIG1heFZhbHVlKSB7XG4gICAgc3dpdGNoIChwYXJ0aWNsZS5vcHRpb25zLm9wYWNpdHkuYW5pbWF0aW9uLmRlc3Ryb3kpIHtcbiAgICAgICAgY2FzZSBFbnVtc18xLkRlc3Ryb3lUeXBlLm1heDpcbiAgICAgICAgICAgIGlmICh2YWx1ZSA+PSBtYXhWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHBhcnRpY2xlLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEVudW1zXzEuRGVzdHJveVR5cGUubWluOlxuICAgICAgICAgICAgaWYgKHZhbHVlIDw9IG1pblZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcGFydGljbGUuZGVzdHJveSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxufVxuZnVuY3Rpb24gdXBkYXRlT3BhY2l0eShwYXJ0aWNsZSwgZGVsdGEpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lO1xuICAgIGlmICghcGFydGljbGUub3BhY2l0eSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG1pblZhbHVlID0gcGFydGljbGUub3BhY2l0eS5taW47XG4gICAgY29uc3QgbWF4VmFsdWUgPSBwYXJ0aWNsZS5vcGFjaXR5Lm1heDtcbiAgICBpZiAoISghcGFydGljbGUuZGVzdHJveWVkICYmXG4gICAgICAgIHBhcnRpY2xlLm9wYWNpdHkuZW5hYmxlICYmXG4gICAgICAgICgoKF9hID0gcGFydGljbGUub3BhY2l0eS5tYXhMb29wcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMCkgPD0gMCB8fCAoKF9iID0gcGFydGljbGUub3BhY2l0eS5sb29wcykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMCkgPCAoKF9jID0gcGFydGljbGUub3BhY2l0eS5tYXhMb29wcykgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogMCkpKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHN3aXRjaCAocGFydGljbGUub3BhY2l0eS5zdGF0dXMpIHtcbiAgICAgICAgY2FzZSBFbnVtc18xLkFuaW1hdGlvblN0YXR1cy5pbmNyZWFzaW5nOlxuICAgICAgICAgICAgaWYgKHBhcnRpY2xlLm9wYWNpdHkudmFsdWUgPj0gbWF4VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBwYXJ0aWNsZS5vcGFjaXR5LnN0YXR1cyA9IEVudW1zXzEuQW5pbWF0aW9uU3RhdHVzLmRlY3JlYXNpbmc7XG4gICAgICAgICAgICAgICAgaWYgKCFwYXJ0aWNsZS5vcGFjaXR5Lmxvb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnRpY2xlLm9wYWNpdHkubG9vcHMgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwYXJ0aWNsZS5vcGFjaXR5Lmxvb3BzKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXJ0aWNsZS5vcGFjaXR5LnZhbHVlICs9ICgoX2QgPSBwYXJ0aWNsZS5vcGFjaXR5LnZlbG9jaXR5KSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiAwKSAqIGRlbHRhLmZhY3RvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEVudW1zXzEuQW5pbWF0aW9uU3RhdHVzLmRlY3JlYXNpbmc6XG4gICAgICAgICAgICBpZiAocGFydGljbGUub3BhY2l0eS52YWx1ZSA8PSBtaW5WYWx1ZSkge1xuICAgICAgICAgICAgICAgIHBhcnRpY2xlLm9wYWNpdHkuc3RhdHVzID0gRW51bXNfMS5BbmltYXRpb25TdGF0dXMuaW5jcmVhc2luZztcbiAgICAgICAgICAgICAgICBpZiAoIXBhcnRpY2xlLm9wYWNpdHkubG9vcHMpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFydGljbGUub3BhY2l0eS5sb29wcyA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBhcnRpY2xlLm9wYWNpdHkubG9vcHMrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcnRpY2xlLm9wYWNpdHkudmFsdWUgLT0gKChfZSA9IHBhcnRpY2xlLm9wYWNpdHkudmVsb2NpdHkpICE9PSBudWxsICYmIF9lICE9PSB2b2lkIDAgPyBfZSA6IDApICogZGVsdGEuZmFjdG9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNoZWNrRGVzdHJveShwYXJ0aWNsZSwgcGFydGljbGUub3BhY2l0eS52YWx1ZSwgbWluVmFsdWUsIG1heFZhbHVlKTtcbiAgICBpZiAoIXBhcnRpY2xlLmRlc3Ryb3llZCkge1xuICAgICAgICBwYXJ0aWNsZS5vcGFjaXR5LnZhbHVlID0gKDAsIFV0aWxzXzEuY2xhbXApKHBhcnRpY2xlLm9wYWNpdHkudmFsdWUsIG1pblZhbHVlLCBtYXhWYWx1ZSk7XG4gICAgfVxufVxuY2xhc3MgT3BhY2l0eVVwZGF0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lcikge1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICB9XG4gICAgaW5pdChwYXJ0aWNsZSkge1xuICAgICAgICBjb25zdCBvcGFjaXR5T3B0aW9ucyA9IHBhcnRpY2xlLm9wdGlvbnMub3BhY2l0eTtcbiAgICAgICAgcGFydGljbGUub3BhY2l0eSA9IHtcbiAgICAgICAgICAgIGVuYWJsZTogb3BhY2l0eU9wdGlvbnMuYW5pbWF0aW9uLmVuYWJsZSxcbiAgICAgICAgICAgIG1heDogKDAsIFV0aWxzXzEuZ2V0UmFuZ2VNYXgpKG9wYWNpdHlPcHRpb25zLnZhbHVlKSxcbiAgICAgICAgICAgIG1pbjogKDAsIFV0aWxzXzEuZ2V0UmFuZ2VNaW4pKG9wYWNpdHlPcHRpb25zLnZhbHVlKSxcbiAgICAgICAgICAgIHZhbHVlOiAoMCwgVXRpbHNfMS5nZXRSYW5nZVZhbHVlKShvcGFjaXR5T3B0aW9ucy52YWx1ZSksXG4gICAgICAgICAgICBsb29wczogMCxcbiAgICAgICAgICAgIG1heExvb3BzOiBvcGFjaXR5T3B0aW9ucy5hbmltYXRpb24uY291bnQsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IG9wYWNpdHlBbmltYXRpb24gPSBvcGFjaXR5T3B0aW9ucy5hbmltYXRpb247XG4gICAgICAgIGlmIChvcGFjaXR5QW5pbWF0aW9uLmVuYWJsZSkge1xuICAgICAgICAgICAgcGFydGljbGUub3BhY2l0eS5zdGF0dXMgPSBFbnVtc18xLkFuaW1hdGlvblN0YXR1cy5pbmNyZWFzaW5nO1xuICAgICAgICAgICAgY29uc3Qgb3BhY2l0eVJhbmdlID0gb3BhY2l0eU9wdGlvbnMudmFsdWU7XG4gICAgICAgICAgICBwYXJ0aWNsZS5vcGFjaXR5Lm1pbiA9ICgwLCBVdGlsc18xLmdldFJhbmdlTWluKShvcGFjaXR5UmFuZ2UpO1xuICAgICAgICAgICAgcGFydGljbGUub3BhY2l0eS5tYXggPSAoMCwgVXRpbHNfMS5nZXRSYW5nZU1heCkob3BhY2l0eVJhbmdlKTtcbiAgICAgICAgICAgIHN3aXRjaCAob3BhY2l0eUFuaW1hdGlvbi5zdGFydFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBFbnVtc18xLlN0YXJ0VmFsdWVUeXBlLm1pbjpcbiAgICAgICAgICAgICAgICAgICAgcGFydGljbGUub3BhY2l0eS52YWx1ZSA9IHBhcnRpY2xlLm9wYWNpdHkubWluO1xuICAgICAgICAgICAgICAgICAgICBwYXJ0aWNsZS5vcGFjaXR5LnN0YXR1cyA9IEVudW1zXzEuQW5pbWF0aW9uU3RhdHVzLmluY3JlYXNpbmc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgRW51bXNfMS5TdGFydFZhbHVlVHlwZS5yYW5kb206XG4gICAgICAgICAgICAgICAgICAgIHBhcnRpY2xlLm9wYWNpdHkudmFsdWUgPSAoMCwgVXRpbHNfMS5yYW5kb21JblJhbmdlKShwYXJ0aWNsZS5vcGFjaXR5KTtcbiAgICAgICAgICAgICAgICAgICAgcGFydGljbGUub3BhY2l0eS5zdGF0dXMgPVxuICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5yYW5kb20oKSA+PSAwLjUgPyBFbnVtc18xLkFuaW1hdGlvblN0YXR1cy5pbmNyZWFzaW5nIDogRW51bXNfMS5BbmltYXRpb25TdGF0dXMuZGVjcmVhc2luZztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBFbnVtc18xLlN0YXJ0VmFsdWVUeXBlLm1heDpcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBwYXJ0aWNsZS5vcGFjaXR5LnZhbHVlID0gcGFydGljbGUub3BhY2l0eS5tYXg7XG4gICAgICAgICAgICAgICAgICAgIHBhcnRpY2xlLm9wYWNpdHkuc3RhdHVzID0gRW51bXNfMS5BbmltYXRpb25TdGF0dXMuZGVjcmVhc2luZztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJ0aWNsZS5vcGFjaXR5LnZlbG9jaXR5ID0gKG9wYWNpdHlBbmltYXRpb24uc3BlZWQgLyAxMDApICogdGhpcy5jb250YWluZXIucmV0aW5hLnJlZHVjZUZhY3RvcjtcbiAgICAgICAgICAgIGlmICghb3BhY2l0eUFuaW1hdGlvbi5zeW5jKSB7XG4gICAgICAgICAgICAgICAgcGFydGljbGUub3BhY2l0eS52ZWxvY2l0eSAqPSBNYXRoLnJhbmRvbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlzRW5hYmxlZChwYXJ0aWNsZSkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgcmV0dXJuICghcGFydGljbGUuZGVzdHJveWVkICYmXG4gICAgICAgICAgICAhcGFydGljbGUuc3Bhd25pbmcgJiZcbiAgICAgICAgICAgICEhcGFydGljbGUub3BhY2l0eSAmJlxuICAgICAgICAgICAgcGFydGljbGUub3BhY2l0eS5lbmFibGUgJiZcbiAgICAgICAgICAgICgoKF9hID0gcGFydGljbGUub3BhY2l0eS5tYXhMb29wcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMCkgPD0gMCB8fCAoKF9iID0gcGFydGljbGUub3BhY2l0eS5sb29wcykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMCkgPCAoKF9jID0gcGFydGljbGUub3BhY2l0eS5tYXhMb29wcykgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogMCkpKTtcbiAgICB9XG4gICAgdXBkYXRlKHBhcnRpY2xlLCBkZWx0YSkge1xuICAgICAgICBpZiAoIXRoaXMuaXNFbmFibGVkKHBhcnRpY2xlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZU9wYWNpdHkocGFydGljbGUsIGRlbHRhKTtcbiAgICB9XG59XG5leHBvcnRzLk9wYWNpdHlVcGRhdGVyID0gT3BhY2l0eVVwZGF0ZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubG9hZE9wYWNpdHlVcGRhdGVyID0gdm9pZCAwO1xuY29uc3QgT3BhY2l0eVVwZGF0ZXJfMSA9IHJlcXVpcmUoXCIuL09wYWNpdHlVcGRhdGVyXCIpO1xuYXN5bmMgZnVuY3Rpb24gbG9hZE9wYWNpdHlVcGRhdGVyKHRzUGFydGljbGVzKSB7XG4gICAgYXdhaXQgdHNQYXJ0aWNsZXMuYWRkUGFydGljbGVVcGRhdGVyKFwib3BhY2l0eVwiLCAoY29udGFpbmVyKSA9PiBuZXcgT3BhY2l0eVVwZGF0ZXJfMS5PcGFjaXR5VXBkYXRlcihjb250YWluZXIpKTtcbn1cbmV4cG9ydHMubG9hZE9wYWNpdHlVcGRhdGVyID0gbG9hZE9wYWNpdHlVcGRhdGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk91dE9mQ2FudmFzVXBkYXRlciA9IHZvaWQgMDtcbmNvbnN0IFV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vVXRpbHNcIik7XG5jb25zdCBFbnVtc18xID0gcmVxdWlyZShcIi4uLy4uL0VudW1zXCIpO1xuY29uc3QgVXRpbHNfMiA9IHJlcXVpcmUoXCIuL1V0aWxzXCIpO1xuY2xhc3MgT3V0T2ZDYW52YXNVcGRhdGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXIpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgfVxuICAgIGluaXQoKSB7XG4gICAgfVxuICAgIGlzRW5hYmxlZChwYXJ0aWNsZSkge1xuICAgICAgICByZXR1cm4gIXBhcnRpY2xlLmRlc3Ryb3llZCAmJiAhcGFydGljbGUuc3Bhd25pbmc7XG4gICAgfVxuICAgIHVwZGF0ZShwYXJ0aWNsZSwgZGVsdGEpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgICAgICBjb25zdCBvdXRNb2RlcyA9IHBhcnRpY2xlLm9wdGlvbnMubW92ZS5vdXRNb2RlcztcbiAgICAgICAgdGhpcy51cGRhdGVPdXRNb2RlKHBhcnRpY2xlLCBkZWx0YSwgKF9hID0gb3V0TW9kZXMuYm90dG9tKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBvdXRNb2Rlcy5kZWZhdWx0LCBFbnVtc18xLk91dE1vZGVEaXJlY3Rpb24uYm90dG9tKTtcbiAgICAgICAgdGhpcy51cGRhdGVPdXRNb2RlKHBhcnRpY2xlLCBkZWx0YSwgKF9iID0gb3V0TW9kZXMubGVmdCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogb3V0TW9kZXMuZGVmYXVsdCwgRW51bXNfMS5PdXRNb2RlRGlyZWN0aW9uLmxlZnQpO1xuICAgICAgICB0aGlzLnVwZGF0ZU91dE1vZGUocGFydGljbGUsIGRlbHRhLCAoX2MgPSBvdXRNb2Rlcy5yaWdodCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogb3V0TW9kZXMuZGVmYXVsdCwgRW51bXNfMS5PdXRNb2RlRGlyZWN0aW9uLnJpZ2h0KTtcbiAgICAgICAgdGhpcy51cGRhdGVPdXRNb2RlKHBhcnRpY2xlLCBkZWx0YSwgKF9kID0gb3V0TW9kZXMudG9wKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiBvdXRNb2Rlcy5kZWZhdWx0LCBFbnVtc18xLk91dE1vZGVEaXJlY3Rpb24udG9wKTtcbiAgICB9XG4gICAgdXBkYXRlT3V0TW9kZShwYXJ0aWNsZSwgZGVsdGEsIG91dE1vZGUsIGRpcmVjdGlvbikge1xuICAgICAgICBzd2l0Y2ggKG91dE1vZGUpIHtcbiAgICAgICAgICAgIGNhc2UgRW51bXNfMS5PdXRNb2RlLmJvdW5jZTpcbiAgICAgICAgICAgIGNhc2UgRW51bXNfMS5PdXRNb2RlLmJvdW5jZVZlcnRpY2FsOlxuICAgICAgICAgICAgY2FzZSBFbnVtc18xLk91dE1vZGUuYm91bmNlSG9yaXpvbnRhbDpcbiAgICAgICAgICAgIGNhc2UgXCJib3VuY2VWZXJ0aWNhbFwiOlxuICAgICAgICAgICAgY2FzZSBcImJvdW5jZUhvcml6b250YWxcIjpcbiAgICAgICAgICAgIGNhc2UgRW51bXNfMS5PdXRNb2RlLnNwbGl0OlxuICAgICAgICAgICAgICAgIHRoaXMuYm91bmNlKHBhcnRpY2xlLCBkZWx0YSwgZGlyZWN0aW9uLCBvdXRNb2RlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgRW51bXNfMS5PdXRNb2RlLmRlc3Ryb3k6XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0cm95KHBhcnRpY2xlLCBkaXJlY3Rpb24pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBFbnVtc18xLk91dE1vZGUub3V0OlxuICAgICAgICAgICAgICAgIHRoaXMub3V0KHBhcnRpY2xlLCBkaXJlY3Rpb24pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBFbnVtc18xLk91dE1vZGUubm9uZTpcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhpcy5ub25lKHBhcnRpY2xlLCBkaXJlY3Rpb24pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRlc3Ryb3kocGFydGljbGUsIGRpcmVjdGlvbikge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcjtcbiAgICAgICAgaWYgKCgwLCBVdGlsc18xLmlzUG9pbnRJbnNpZGUpKHBhcnRpY2xlLnBvc2l0aW9uLCBjb250YWluZXIuY2FudmFzLnNpemUsIHBhcnRpY2xlLmdldFJhZGl1cygpLCBkaXJlY3Rpb24pKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29udGFpbmVyLnBhcnRpY2xlcy5yZW1vdmUocGFydGljbGUsIHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgfVxuICAgIG91dChwYXJ0aWNsZSwgZGlyZWN0aW9uKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyO1xuICAgICAgICBpZiAoKDAsIFV0aWxzXzEuaXNQb2ludEluc2lkZSkocGFydGljbGUucG9zaXRpb24sIGNvbnRhaW5lci5jYW52YXMuc2l6ZSwgcGFydGljbGUuZ2V0UmFkaXVzKCksIGRpcmVjdGlvbikpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB3cmFwID0gcGFydGljbGUub3B0aW9ucy5tb3ZlLndhcnAsIGNhbnZhc1NpemUgPSBjb250YWluZXIuY2FudmFzLnNpemUsIG5ld1BvcyA9IHtcbiAgICAgICAgICAgIGJvdHRvbTogY2FudmFzU2l6ZS5oZWlnaHQgKyBwYXJ0aWNsZS5nZXRSYWRpdXMoKSArIHBhcnRpY2xlLm9mZnNldC55LFxuICAgICAgICAgICAgbGVmdDogLXBhcnRpY2xlLmdldFJhZGl1cygpIC0gcGFydGljbGUub2Zmc2V0LngsXG4gICAgICAgICAgICByaWdodDogY2FudmFzU2l6ZS53aWR0aCArIHBhcnRpY2xlLmdldFJhZGl1cygpICsgcGFydGljbGUub2Zmc2V0LngsXG4gICAgICAgICAgICB0b3A6IC1wYXJ0aWNsZS5nZXRSYWRpdXMoKSAtIHBhcnRpY2xlLm9mZnNldC55LFxuICAgICAgICB9LCBzaXplVmFsdWUgPSBwYXJ0aWNsZS5nZXRSYWRpdXMoKSwgbmV4dEJvdW5kcyA9ICgwLCBVdGlsc18xLmNhbGN1bGF0ZUJvdW5kcykocGFydGljbGUucG9zaXRpb24sIHNpemVWYWx1ZSk7XG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09IEVudW1zXzEuT3V0TW9kZURpcmVjdGlvbi5yaWdodCAmJiBuZXh0Qm91bmRzLmxlZnQgPiBjYW52YXNTaXplLndpZHRoICsgcGFydGljbGUub2Zmc2V0LngpIHtcbiAgICAgICAgICAgIHBhcnRpY2xlLnBvc2l0aW9uLnggPSBuZXdQb3MubGVmdDtcbiAgICAgICAgICAgIHBhcnRpY2xlLmluaXRpYWxQb3NpdGlvbi54ID0gcGFydGljbGUucG9zaXRpb24ueDtcbiAgICAgICAgICAgIGlmICghd3JhcCkge1xuICAgICAgICAgICAgICAgIHBhcnRpY2xlLnBvc2l0aW9uLnkgPSBNYXRoLnJhbmRvbSgpICogY2FudmFzU2l6ZS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgcGFydGljbGUuaW5pdGlhbFBvc2l0aW9uLnkgPSBwYXJ0aWNsZS5wb3NpdGlvbi55O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gRW51bXNfMS5PdXRNb2RlRGlyZWN0aW9uLmxlZnQgJiYgbmV4dEJvdW5kcy5yaWdodCA8IC1wYXJ0aWNsZS5vZmZzZXQueCkge1xuICAgICAgICAgICAgcGFydGljbGUucG9zaXRpb24ueCA9IG5ld1Bvcy5yaWdodDtcbiAgICAgICAgICAgIHBhcnRpY2xlLmluaXRpYWxQb3NpdGlvbi54ID0gcGFydGljbGUucG9zaXRpb24ueDtcbiAgICAgICAgICAgIGlmICghd3JhcCkge1xuICAgICAgICAgICAgICAgIHBhcnRpY2xlLnBvc2l0aW9uLnkgPSBNYXRoLnJhbmRvbSgpICogY2FudmFzU2l6ZS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgcGFydGljbGUuaW5pdGlhbFBvc2l0aW9uLnkgPSBwYXJ0aWNsZS5wb3NpdGlvbi55O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09IEVudW1zXzEuT3V0TW9kZURpcmVjdGlvbi5ib3R0b20gJiYgbmV4dEJvdW5kcy50b3AgPiBjYW52YXNTaXplLmhlaWdodCArIHBhcnRpY2xlLm9mZnNldC55KSB7XG4gICAgICAgICAgICBpZiAoIXdyYXApIHtcbiAgICAgICAgICAgICAgICBwYXJ0aWNsZS5wb3NpdGlvbi54ID0gTWF0aC5yYW5kb20oKSAqIGNhbnZhc1NpemUud2lkdGg7XG4gICAgICAgICAgICAgICAgcGFydGljbGUuaW5pdGlhbFBvc2l0aW9uLnggPSBwYXJ0aWNsZS5wb3NpdGlvbi54O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFydGljbGUucG9zaXRpb24ueSA9IG5ld1Bvcy50b3A7XG4gICAgICAgICAgICBwYXJ0aWNsZS5pbml0aWFsUG9zaXRpb24ueSA9IHBhcnRpY2xlLnBvc2l0aW9uLnk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGlyZWN0aW9uID09PSBFbnVtc18xLk91dE1vZGVEaXJlY3Rpb24udG9wICYmIG5leHRCb3VuZHMuYm90dG9tIDwgLXBhcnRpY2xlLm9mZnNldC55KSB7XG4gICAgICAgICAgICBpZiAoIXdyYXApIHtcbiAgICAgICAgICAgICAgICBwYXJ0aWNsZS5wb3NpdGlvbi54ID0gTWF0aC5yYW5kb20oKSAqIGNhbnZhc1NpemUud2lkdGg7XG4gICAgICAgICAgICAgICAgcGFydGljbGUuaW5pdGlhbFBvc2l0aW9uLnggPSBwYXJ0aWNsZS5wb3NpdGlvbi54O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFydGljbGUucG9zaXRpb24ueSA9IG5ld1Bvcy5ib3R0b207XG4gICAgICAgICAgICBwYXJ0aWNsZS5pbml0aWFsUG9zaXRpb24ueSA9IHBhcnRpY2xlLnBvc2l0aW9uLnk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYm91bmNlKHBhcnRpY2xlLCBkZWx0YSwgZGlyZWN0aW9uLCBvdXRNb2RlKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyO1xuICAgICAgICBsZXQgaGFuZGxlZCA9IGZhbHNlO1xuICAgICAgICBmb3IgKGNvbnN0IFssIHBsdWdpbl0gb2YgY29udGFpbmVyLnBsdWdpbnMpIHtcbiAgICAgICAgICAgIGlmIChwbHVnaW4ucGFydGljbGVCb3VuY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGhhbmRsZWQgPSBwbHVnaW4ucGFydGljbGVCb3VuY2UocGFydGljbGUsIGRlbHRhLCBkaXJlY3Rpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhhbmRsZWQpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFuZGxlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBvcyA9IHBhcnRpY2xlLmdldFBvc2l0aW9uKCksIG9mZnNldCA9IHBhcnRpY2xlLm9mZnNldCwgc2l6ZSA9IHBhcnRpY2xlLmdldFJhZGl1cygpLCBib3VuZHMgPSAoMCwgVXRpbHNfMS5jYWxjdWxhdGVCb3VuZHMpKHBvcywgc2l6ZSksIGNhbnZhc1NpemUgPSBjb250YWluZXIuY2FudmFzLnNpemU7XG4gICAgICAgICgwLCBVdGlsc18yLmJvdW5jZUhvcml6b250YWwpKHsgcGFydGljbGUsIG91dE1vZGUsIGRpcmVjdGlvbiwgYm91bmRzLCBjYW52YXNTaXplLCBvZmZzZXQsIHNpemUgfSk7XG4gICAgICAgICgwLCBVdGlsc18yLmJvdW5jZVZlcnRpY2FsKSh7IHBhcnRpY2xlLCBvdXRNb2RlLCBkaXJlY3Rpb24sIGJvdW5kcywgY2FudmFzU2l6ZSwgb2Zmc2V0LCBzaXplIH0pO1xuICAgIH1cbiAgICBub25lKHBhcnRpY2xlLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgaWYgKChwYXJ0aWNsZS5vcHRpb25zLm1vdmUuZGlzdGFuY2UuaG9yaXpvbnRhbCAmJlxuICAgICAgICAgICAgKGRpcmVjdGlvbiA9PT0gRW51bXNfMS5PdXRNb2RlRGlyZWN0aW9uLmxlZnQgfHwgZGlyZWN0aW9uID09PSBFbnVtc18xLk91dE1vZGVEaXJlY3Rpb24ucmlnaHQpKSB8fFxuICAgICAgICAgICAgKHBhcnRpY2xlLm9wdGlvbnMubW92ZS5kaXN0YW5jZS52ZXJ0aWNhbCAmJlxuICAgICAgICAgICAgICAgIChkaXJlY3Rpb24gPT09IEVudW1zXzEuT3V0TW9kZURpcmVjdGlvbi50b3AgfHwgZGlyZWN0aW9uID09PSBFbnVtc18xLk91dE1vZGVEaXJlY3Rpb24uYm90dG9tKSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBncmF2aXR5T3B0aW9ucyA9IHBhcnRpY2xlLm9wdGlvbnMubW92ZS5ncmF2aXR5LCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcjtcbiAgICAgICAgY29uc3QgY2FudmFzU2l6ZSA9IGNvbnRhaW5lci5jYW52YXMuc2l6ZTtcbiAgICAgICAgY29uc3QgcFJhZGl1cyA9IHBhcnRpY2xlLmdldFJhZGl1cygpO1xuICAgICAgICBpZiAoIWdyYXZpdHlPcHRpb25zLmVuYWJsZSkge1xuICAgICAgICAgICAgaWYgKChwYXJ0aWNsZS52ZWxvY2l0eS55ID4gMCAmJiBwYXJ0aWNsZS5wb3NpdGlvbi55IDw9IGNhbnZhc1NpemUuaGVpZ2h0ICsgcFJhZGl1cykgfHxcbiAgICAgICAgICAgICAgICAocGFydGljbGUudmVsb2NpdHkueSA8IDAgJiYgcGFydGljbGUucG9zaXRpb24ueSA+PSAtcFJhZGl1cykgfHxcbiAgICAgICAgICAgICAgICAocGFydGljbGUudmVsb2NpdHkueCA+IDAgJiYgcGFydGljbGUucG9zaXRpb24ueCA8PSBjYW52YXNTaXplLndpZHRoICsgcFJhZGl1cykgfHxcbiAgICAgICAgICAgICAgICAocGFydGljbGUudmVsb2NpdHkueCA8IDAgJiYgcGFydGljbGUucG9zaXRpb24ueCA+PSAtcFJhZGl1cykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoISgwLCBVdGlsc18xLmlzUG9pbnRJbnNpZGUpKHBhcnRpY2xlLnBvc2l0aW9uLCBjb250YWluZXIuY2FudmFzLnNpemUsIHBSYWRpdXMsIGRpcmVjdGlvbikpIHtcbiAgICAgICAgICAgICAgICBjb250YWluZXIucGFydGljbGVzLnJlbW92ZShwYXJ0aWNsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHBhcnRpY2xlLnBvc2l0aW9uO1xuICAgICAgICAgICAgaWYgKCghZ3Jhdml0eU9wdGlvbnMuaW52ZXJzZSAmJlxuICAgICAgICAgICAgICAgIHBvc2l0aW9uLnkgPiBjYW52YXNTaXplLmhlaWdodCArIHBSYWRpdXMgJiZcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPT09IEVudW1zXzEuT3V0TW9kZURpcmVjdGlvbi5ib3R0b20pIHx8XG4gICAgICAgICAgICAgICAgKGdyYXZpdHlPcHRpb25zLmludmVyc2UgJiYgcG9zaXRpb24ueSA8IC1wUmFkaXVzICYmIGRpcmVjdGlvbiA9PT0gRW51bXNfMS5PdXRNb2RlRGlyZWN0aW9uLnRvcCkpIHtcbiAgICAgICAgICAgICAgICBjb250YWluZXIucGFydGljbGVzLnJlbW92ZShwYXJ0aWNsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLk91dE9mQ2FudmFzVXBkYXRlciA9IE91dE9mQ2FudmFzVXBkYXRlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ib3VuY2VWZXJ0aWNhbCA9IGV4cG9ydHMuYm91bmNlSG9yaXpvbnRhbCA9IHZvaWQgMDtcbmNvbnN0IEVudW1zXzEgPSByZXF1aXJlKFwiLi4vLi4vRW51bXNcIik7XG5jb25zdCBVdGlsc18xID0gcmVxdWlyZShcIi4uLy4uL1V0aWxzXCIpO1xuZnVuY3Rpb24gYm91bmNlSG9yaXpvbnRhbChkYXRhKSB7XG4gICAgaWYgKCEoZGF0YS5vdXRNb2RlID09PSBFbnVtc18xLk91dE1vZGUuYm91bmNlIHx8XG4gICAgICAgIGRhdGEub3V0TW9kZSA9PT0gRW51bXNfMS5PdXRNb2RlLmJvdW5jZUhvcml6b250YWwgfHxcbiAgICAgICAgZGF0YS5vdXRNb2RlID09PSBcImJvdW5jZUhvcml6b250YWxcIiB8fFxuICAgICAgICBkYXRhLm91dE1vZGUgPT09IEVudW1zXzEuT3V0TW9kZS5zcGxpdCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB2ZWxvY2l0eSA9IGRhdGEucGFydGljbGUudmVsb2NpdHkueDtcbiAgICBsZXQgYm91bmNlZCA9IGZhbHNlO1xuICAgIGlmICgoZGF0YS5kaXJlY3Rpb24gPT09IEVudW1zXzEuT3V0TW9kZURpcmVjdGlvbi5yaWdodCAmJiBkYXRhLmJvdW5kcy5yaWdodCA+PSBkYXRhLmNhbnZhc1NpemUud2lkdGggJiYgdmVsb2NpdHkgPiAwKSB8fFxuICAgICAgICAoZGF0YS5kaXJlY3Rpb24gPT09IEVudW1zXzEuT3V0TW9kZURpcmVjdGlvbi5sZWZ0ICYmIGRhdGEuYm91bmRzLmxlZnQgPD0gMCAmJiB2ZWxvY2l0eSA8IDApKSB7XG4gICAgICAgIGNvbnN0IG5ld1ZlbG9jaXR5ID0gKDAsIFV0aWxzXzEuZ2V0UmFuZ2VWYWx1ZSkoZGF0YS5wYXJ0aWNsZS5vcHRpb25zLmJvdW5jZS5ob3Jpem9udGFsLnZhbHVlKTtcbiAgICAgICAgZGF0YS5wYXJ0aWNsZS52ZWxvY2l0eS54ICo9IC1uZXdWZWxvY2l0eTtcbiAgICAgICAgYm91bmNlZCA9IHRydWU7XG4gICAgfVxuICAgIGlmICghYm91bmNlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG1pblBvcyA9IGRhdGEub2Zmc2V0LnggKyBkYXRhLnNpemU7XG4gICAgaWYgKGRhdGEuYm91bmRzLnJpZ2h0ID49IGRhdGEuY2FudmFzU2l6ZS53aWR0aCkge1xuICAgICAgICBkYXRhLnBhcnRpY2xlLnBvc2l0aW9uLnggPSBkYXRhLmNhbnZhc1NpemUud2lkdGggLSBtaW5Qb3M7XG4gICAgfVxuICAgIGVsc2UgaWYgKGRhdGEuYm91bmRzLmxlZnQgPD0gMCkge1xuICAgICAgICBkYXRhLnBhcnRpY2xlLnBvc2l0aW9uLnggPSBtaW5Qb3M7XG4gICAgfVxuICAgIGlmIChkYXRhLm91dE1vZGUgPT09IEVudW1zXzEuT3V0TW9kZS5zcGxpdCkge1xuICAgICAgICBkYXRhLnBhcnRpY2xlLmRlc3Ryb3koKTtcbiAgICB9XG59XG5leHBvcnRzLmJvdW5jZUhvcml6b250YWwgPSBib3VuY2VIb3Jpem9udGFsO1xuZnVuY3Rpb24gYm91bmNlVmVydGljYWwoZGF0YSkge1xuICAgIGlmIChkYXRhLm91dE1vZGUgPT09IEVudW1zXzEuT3V0TW9kZS5ib3VuY2UgfHxcbiAgICAgICAgZGF0YS5vdXRNb2RlID09PSBFbnVtc18xLk91dE1vZGUuYm91bmNlVmVydGljYWwgfHxcbiAgICAgICAgZGF0YS5vdXRNb2RlID09PSBcImJvdW5jZVZlcnRpY2FsXCIgfHxcbiAgICAgICAgZGF0YS5vdXRNb2RlID09PSBFbnVtc18xLk91dE1vZGUuc3BsaXQpIHtcbiAgICAgICAgY29uc3QgdmVsb2NpdHkgPSBkYXRhLnBhcnRpY2xlLnZlbG9jaXR5Lnk7XG4gICAgICAgIGxldCBib3VuY2VkID0gZmFsc2U7XG4gICAgICAgIGlmICgoZGF0YS5kaXJlY3Rpb24gPT09IEVudW1zXzEuT3V0TW9kZURpcmVjdGlvbi5ib3R0b20gJiZcbiAgICAgICAgICAgIGRhdGEuYm91bmRzLmJvdHRvbSA+PSBkYXRhLmNhbnZhc1NpemUuaGVpZ2h0ICYmXG4gICAgICAgICAgICB2ZWxvY2l0eSA+IDApIHx8XG4gICAgICAgICAgICAoZGF0YS5kaXJlY3Rpb24gPT09IEVudW1zXzEuT3V0TW9kZURpcmVjdGlvbi50b3AgJiYgZGF0YS5ib3VuZHMudG9wIDw9IDAgJiYgdmVsb2NpdHkgPCAwKSkge1xuICAgICAgICAgICAgY29uc3QgbmV3VmVsb2NpdHkgPSAoMCwgVXRpbHNfMS5nZXRSYW5nZVZhbHVlKShkYXRhLnBhcnRpY2xlLm9wdGlvbnMuYm91bmNlLnZlcnRpY2FsLnZhbHVlKTtcbiAgICAgICAgICAgIGRhdGEucGFydGljbGUudmVsb2NpdHkueSAqPSAtbmV3VmVsb2NpdHk7XG4gICAgICAgICAgICBib3VuY2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWJvdW5jZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtaW5Qb3MgPSBkYXRhLm9mZnNldC55ICsgZGF0YS5zaXplO1xuICAgICAgICBpZiAoZGF0YS5ib3VuZHMuYm90dG9tID49IGRhdGEuY2FudmFzU2l6ZS5oZWlnaHQpIHtcbiAgICAgICAgICAgIGRhdGEucGFydGljbGUucG9zaXRpb24ueSA9IGRhdGEuY2FudmFzU2l6ZS5oZWlnaHQgLSBtaW5Qb3M7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGF0YS5ib3VuZHMudG9wIDw9IDApIHtcbiAgICAgICAgICAgIGRhdGEucGFydGljbGUucG9zaXRpb24ueSA9IG1pblBvcztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5vdXRNb2RlID09PSBFbnVtc18xLk91dE1vZGUuc3BsaXQpIHtcbiAgICAgICAgICAgIGRhdGEucGFydGljbGUuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5ib3VuY2VWZXJ0aWNhbCA9IGJvdW5jZVZlcnRpY2FsO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvYWRPdXRNb2Rlc1VwZGF0ZXIgPSB2b2lkIDA7XG5jb25zdCBPdXRPZkNhbnZhc1VwZGF0ZXJfMSA9IHJlcXVpcmUoXCIuL091dE9mQ2FudmFzVXBkYXRlclwiKTtcbmFzeW5jIGZ1bmN0aW9uIGxvYWRPdXRNb2Rlc1VwZGF0ZXIodHNQYXJ0aWNsZXMpIHtcbiAgICBhd2FpdCB0c1BhcnRpY2xlcy5hZGRQYXJ0aWNsZVVwZGF0ZXIoXCJvdXRNb2Rlc1wiLCAoY29udGFpbmVyKSA9PiBuZXcgT3V0T2ZDYW52YXNVcGRhdGVyXzEuT3V0T2ZDYW52YXNVcGRhdGVyKGNvbnRhaW5lcikpO1xufVxuZXhwb3J0cy5sb2FkT3V0TW9kZXNVcGRhdGVyID0gbG9hZE91dE1vZGVzVXBkYXRlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Sb2xsVXBkYXRlciA9IHZvaWQgMDtcbmNvbnN0IFV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vVXRpbHNcIik7XG5jb25zdCBFbnVtc18xID0gcmVxdWlyZShcIi4uLy4uL0VudW1zXCIpO1xuZnVuY3Rpb24gdXBkYXRlUm9sbChwYXJ0aWNsZSwgZGVsdGEpIHtcbiAgICBjb25zdCByb2xsID0gcGFydGljbGUub3B0aW9ucy5yb2xsO1xuICAgIGlmICghcGFydGljbGUucm9sbCB8fCAhcm9sbC5lbmFibGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBzcGVlZCA9IHBhcnRpY2xlLnJvbGwuc3BlZWQgKiBkZWx0YS5mYWN0b3I7XG4gICAgY29uc3QgbWF4ID0gMiAqIE1hdGguUEk7XG4gICAgcGFydGljbGUucm9sbC5hbmdsZSArPSBzcGVlZDtcbiAgICBpZiAocGFydGljbGUucm9sbC5hbmdsZSA+IG1heCkge1xuICAgICAgICBwYXJ0aWNsZS5yb2xsLmFuZ2xlIC09IG1heDtcbiAgICB9XG59XG5jbGFzcyBSb2xsVXBkYXRlciB7XG4gICAgaW5pdChwYXJ0aWNsZSkge1xuICAgICAgICBjb25zdCByb2xsT3B0ID0gcGFydGljbGUub3B0aW9ucy5yb2xsO1xuICAgICAgICBpZiAocm9sbE9wdC5lbmFibGUpIHtcbiAgICAgICAgICAgIHBhcnRpY2xlLnJvbGwgPSB7XG4gICAgICAgICAgICAgICAgYW5nbGU6IE1hdGgucmFuZG9tKCkgKiBNYXRoLlBJICogMixcbiAgICAgICAgICAgICAgICBzcGVlZDogKDAsIFV0aWxzXzEuZ2V0UmFuZ2VWYWx1ZSkocm9sbE9wdC5zcGVlZCkgLyAzNjAsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHJvbGxPcHQuYmFja0NvbG9yKSB7XG4gICAgICAgICAgICAgICAgcGFydGljbGUuYmFja0NvbG9yID0gKDAsIFV0aWxzXzEuY29sb3JUb0hzbCkocm9sbE9wdC5iYWNrQ29sb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocm9sbE9wdC5kYXJrZW4uZW5hYmxlICYmIHJvbGxPcHQuZW5saWdodGVuLmVuYWJsZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFsdGVyVHlwZSA9IE1hdGgucmFuZG9tKCkgPj0gMC41ID8gRW51bXNfMS5BbHRlclR5cGUuZGFya2VuIDogRW51bXNfMS5BbHRlclR5cGUuZW5saWdodGVuO1xuICAgICAgICAgICAgICAgIHBhcnRpY2xlLnJvbGwuYWx0ZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IGFsdGVyVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGFsdGVyVHlwZSA9PT0gRW51bXNfMS5BbHRlclR5cGUuZGFya2VuID8gcm9sbE9wdC5kYXJrZW4udmFsdWUgOiByb2xsT3B0LmVubGlnaHRlbi52YWx1ZSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocm9sbE9wdC5kYXJrZW4uZW5hYmxlKSB7XG4gICAgICAgICAgICAgICAgcGFydGljbGUucm9sbC5hbHRlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogRW51bXNfMS5BbHRlclR5cGUuZGFya2VuLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcm9sbE9wdC5kYXJrZW4udmFsdWUsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHJvbGxPcHQuZW5saWdodGVuLmVuYWJsZSkge1xuICAgICAgICAgICAgICAgIHBhcnRpY2xlLnJvbGwuYWx0ZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IEVudW1zXzEuQWx0ZXJUeXBlLmVubGlnaHRlbixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHJvbGxPcHQuZW5saWdodGVuLnZhbHVlLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwYXJ0aWNsZS5yb2xsID0geyBhbmdsZTogMCwgc3BlZWQ6IDAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpc0VuYWJsZWQocGFydGljbGUpIHtcbiAgICAgICAgY29uc3Qgcm9sbCA9IHBhcnRpY2xlLm9wdGlvbnMucm9sbDtcbiAgICAgICAgcmV0dXJuICFwYXJ0aWNsZS5kZXN0cm95ZWQgJiYgIXBhcnRpY2xlLnNwYXduaW5nICYmIHJvbGwuZW5hYmxlO1xuICAgIH1cbiAgICB1cGRhdGUocGFydGljbGUsIGRlbHRhKSB7XG4gICAgICAgIGlmICghdGhpcy5pc0VuYWJsZWQocGFydGljbGUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlUm9sbChwYXJ0aWNsZSwgZGVsdGEpO1xuICAgIH1cbn1cbmV4cG9ydHMuUm9sbFVwZGF0ZXIgPSBSb2xsVXBkYXRlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5sb2FkUm9sbFVwZGF0ZXIgPSB2b2lkIDA7XG5jb25zdCBSb2xsVXBkYXRlcl8xID0gcmVxdWlyZShcIi4vUm9sbFVwZGF0ZXJcIik7XG5hc3luYyBmdW5jdGlvbiBsb2FkUm9sbFVwZGF0ZXIodHNQYXJ0aWNsZXMpIHtcbiAgICBhd2FpdCB0c1BhcnRpY2xlcy5hZGRQYXJ0aWNsZVVwZGF0ZXIoXCJyb2xsXCIsICgpID0+IG5ldyBSb2xsVXBkYXRlcl8xLlJvbGxVcGRhdGVyKCkpO1xufVxuZXhwb3J0cy5sb2FkUm9sbFVwZGF0ZXIgPSBsb2FkUm9sbFVwZGF0ZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU2l6ZVVwZGF0ZXIgPSB2b2lkIDA7XG5jb25zdCBFbnVtc18xID0gcmVxdWlyZShcIi4uLy4uL0VudW1zXCIpO1xuY29uc3QgVXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi9VdGlsc1wiKTtcbmZ1bmN0aW9uIGNoZWNrRGVzdHJveShwYXJ0aWNsZSwgdmFsdWUsIG1pblZhbHVlLCBtYXhWYWx1ZSkge1xuICAgIHN3aXRjaCAocGFydGljbGUub3B0aW9ucy5zaXplLmFuaW1hdGlvbi5kZXN0cm95KSB7XG4gICAgICAgIGNhc2UgRW51bXNfMS5EZXN0cm95VHlwZS5tYXg6XG4gICAgICAgICAgICBpZiAodmFsdWUgPj0gbWF4VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBwYXJ0aWNsZS5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBFbnVtc18xLkRlc3Ryb3lUeXBlLm1pbjpcbiAgICAgICAgICAgIGlmICh2YWx1ZSA8PSBtaW5WYWx1ZSkge1xuICAgICAgICAgICAgICAgIHBhcnRpY2xlLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHVwZGF0ZVNpemUocGFydGljbGUsIGRlbHRhKSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgIGNvbnN0IHNpemVWZWxvY2l0eSA9ICgoX2EgPSBwYXJ0aWNsZS5zaXplLnZlbG9jaXR5KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAwKSAqIGRlbHRhLmZhY3RvcjtcbiAgICBjb25zdCBtaW5WYWx1ZSA9IHBhcnRpY2xlLnNpemUubWluO1xuICAgIGNvbnN0IG1heFZhbHVlID0gcGFydGljbGUuc2l6ZS5tYXg7XG4gICAgaWYgKCEoIXBhcnRpY2xlLmRlc3Ryb3llZCAmJlxuICAgICAgICBwYXJ0aWNsZS5zaXplLmVuYWJsZSAmJlxuICAgICAgICAoKChfYiA9IHBhcnRpY2xlLnNpemUubG9vcHMpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IDApIDw9IDAgfHwgKChfYyA9IHBhcnRpY2xlLnNpemUubG9vcHMpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IDApIDwgKChfZCA9IHBhcnRpY2xlLnNpemUubWF4TG9vcHMpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IDApKSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2l0Y2ggKHBhcnRpY2xlLnNpemUuc3RhdHVzKSB7XG4gICAgICAgIGNhc2UgRW51bXNfMS5BbmltYXRpb25TdGF0dXMuaW5jcmVhc2luZzpcbiAgICAgICAgICAgIGlmIChwYXJ0aWNsZS5zaXplLnZhbHVlID49IG1heFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcGFydGljbGUuc2l6ZS5zdGF0dXMgPSBFbnVtc18xLkFuaW1hdGlvblN0YXR1cy5kZWNyZWFzaW5nO1xuICAgICAgICAgICAgICAgIGlmICghcGFydGljbGUuc2l6ZS5sb29wcykge1xuICAgICAgICAgICAgICAgICAgICBwYXJ0aWNsZS5zaXplLmxvb3BzID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcGFydGljbGUuc2l6ZS5sb29wcysrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFydGljbGUuc2l6ZS52YWx1ZSArPSBzaXplVmVsb2NpdHk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBFbnVtc18xLkFuaW1hdGlvblN0YXR1cy5kZWNyZWFzaW5nOlxuICAgICAgICAgICAgaWYgKHBhcnRpY2xlLnNpemUudmFsdWUgPD0gbWluVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBwYXJ0aWNsZS5zaXplLnN0YXR1cyA9IEVudW1zXzEuQW5pbWF0aW9uU3RhdHVzLmluY3JlYXNpbmc7XG4gICAgICAgICAgICAgICAgaWYgKCFwYXJ0aWNsZS5zaXplLmxvb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnRpY2xlLnNpemUubG9vcHMgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwYXJ0aWNsZS5zaXplLmxvb3BzKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXJ0aWNsZS5zaXplLnZhbHVlIC09IHNpemVWZWxvY2l0eTtcbiAgICAgICAgICAgIH1cbiAgICB9XG4gICAgY2hlY2tEZXN0cm95KHBhcnRpY2xlLCBwYXJ0aWNsZS5zaXplLnZhbHVlLCBtaW5WYWx1ZSwgbWF4VmFsdWUpO1xuICAgIGlmICghcGFydGljbGUuZGVzdHJveWVkKSB7XG4gICAgICAgIHBhcnRpY2xlLnNpemUudmFsdWUgPSAoMCwgVXRpbHNfMS5jbGFtcCkocGFydGljbGUuc2l6ZS52YWx1ZSwgbWluVmFsdWUsIG1heFZhbHVlKTtcbiAgICB9XG59XG5jbGFzcyBTaXplVXBkYXRlciB7XG4gICAgaW5pdCgpIHtcbiAgICB9XG4gICAgaXNFbmFibGVkKHBhcnRpY2xlKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICByZXR1cm4gKCFwYXJ0aWNsZS5kZXN0cm95ZWQgJiZcbiAgICAgICAgICAgICFwYXJ0aWNsZS5zcGF3bmluZyAmJlxuICAgICAgICAgICAgcGFydGljbGUuc2l6ZS5lbmFibGUgJiZcbiAgICAgICAgICAgICgoKF9hID0gcGFydGljbGUuc2l6ZS5sb29wcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMCkgPD0gMCB8fCAoKF9iID0gcGFydGljbGUuc2l6ZS5sb29wcykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMCkgPCAoKF9jID0gcGFydGljbGUuc2l6ZS5tYXhMb29wcykgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogMCkpKTtcbiAgICB9XG4gICAgdXBkYXRlKHBhcnRpY2xlLCBkZWx0YSkge1xuICAgICAgICBpZiAoIXRoaXMuaXNFbmFibGVkKHBhcnRpY2xlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZVNpemUocGFydGljbGUsIGRlbHRhKTtcbiAgICB9XG59XG5leHBvcnRzLlNpemVVcGRhdGVyID0gU2l6ZVVwZGF0ZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubG9hZFNpemVVcGRhdGVyID0gdm9pZCAwO1xuY29uc3QgU2l6ZVVwZGF0ZXJfMSA9IHJlcXVpcmUoXCIuL1NpemVVcGRhdGVyXCIpO1xuYXN5bmMgZnVuY3Rpb24gbG9hZFNpemVVcGRhdGVyKHRzUGFydGljbGVzKSB7XG4gICAgYXdhaXQgdHNQYXJ0aWNsZXMuYWRkUGFydGljbGVVcGRhdGVyKFwic2l6ZVwiLCAoKSA9PiBuZXcgU2l6ZVVwZGF0ZXJfMS5TaXplVXBkYXRlcigpKTtcbn1cbmV4cG9ydHMubG9hZFNpemVVcGRhdGVyID0gbG9hZFNpemVVcGRhdGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlN0cm9rZUNvbG9yVXBkYXRlciA9IHZvaWQgMDtcbmNvbnN0IFV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vVXRpbHNcIik7XG5jb25zdCBFbnVtc18xID0gcmVxdWlyZShcIi4uLy4uL0VudW1zXCIpO1xuZnVuY3Rpb24gdXBkYXRlQ29sb3JWYWx1ZShkZWx0YSwgdmFsdWUsIHZhbHVlQW5pbWF0aW9uLCBtYXgsIGRlY3JlYXNlKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGNvbG9yVmFsdWUgPSB2YWx1ZTtcbiAgICBpZiAoIWNvbG9yVmFsdWUgfHwgIWNvbG9yVmFsdWUuZW5hYmxlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgb2Zmc2V0ID0gKDAsIFV0aWxzXzEucmFuZG9tSW5SYW5nZSkodmFsdWVBbmltYXRpb24ub2Zmc2V0KTtcbiAgICBjb25zdCB2ZWxvY2l0eSA9ICgoX2EgPSB2YWx1ZS52ZWxvY2l0eSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMCkgKiBkZWx0YS5mYWN0b3IgKyBvZmZzZXQgKiAzLjY7XG4gICAgaWYgKCFkZWNyZWFzZSB8fCBjb2xvclZhbHVlLnN0YXR1cyA9PT0gRW51bXNfMS5BbmltYXRpb25TdGF0dXMuaW5jcmVhc2luZykge1xuICAgICAgICBjb2xvclZhbHVlLnZhbHVlICs9IHZlbG9jaXR5O1xuICAgICAgICBpZiAoZGVjcmVhc2UgJiYgY29sb3JWYWx1ZS52YWx1ZSA+IG1heCkge1xuICAgICAgICAgICAgY29sb3JWYWx1ZS5zdGF0dXMgPSBFbnVtc18xLkFuaW1hdGlvblN0YXR1cy5kZWNyZWFzaW5nO1xuICAgICAgICAgICAgY29sb3JWYWx1ZS52YWx1ZSAtPSBjb2xvclZhbHVlLnZhbHVlICUgbWF4O1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb2xvclZhbHVlLnZhbHVlIC09IHZlbG9jaXR5O1xuICAgICAgICBpZiAoY29sb3JWYWx1ZS52YWx1ZSA8IDApIHtcbiAgICAgICAgICAgIGNvbG9yVmFsdWUuc3RhdHVzID0gRW51bXNfMS5BbmltYXRpb25TdGF0dXMuaW5jcmVhc2luZztcbiAgICAgICAgICAgIGNvbG9yVmFsdWUudmFsdWUgKz0gY29sb3JWYWx1ZS52YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoY29sb3JWYWx1ZS52YWx1ZSA+IG1heCkge1xuICAgICAgICBjb2xvclZhbHVlLnZhbHVlICU9IG1heDtcbiAgICB9XG59XG5mdW5jdGlvbiB1cGRhdGVTdHJva2VDb2xvcihwYXJ0aWNsZSwgZGVsdGEpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oLCBfaiwgX2s7XG4gICAgaWYgKCEoKF9hID0gcGFydGljbGUuc3Ryb2tlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29sb3IpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgYW5pbWF0aW9uT3B0aW9ucyA9IHBhcnRpY2xlLnN0cm9rZS5jb2xvci5hbmltYXRpb247XG4gICAgY29uc3QgaCA9IChfYyA9IChfYiA9IHBhcnRpY2xlLnN0cm9rZUNvbG9yKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuaCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogKF9kID0gcGFydGljbGUuY29sb3IpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5oO1xuICAgIGlmIChoKSB7XG4gICAgICAgIHVwZGF0ZUNvbG9yVmFsdWUoZGVsdGEsIGgsIGFuaW1hdGlvbk9wdGlvbnMuaCwgMzYwLCBmYWxzZSk7XG4gICAgfVxuICAgIGNvbnN0IHMgPSAoX2YgPSAoX2UgPSBwYXJ0aWNsZS5zdHJva2VDb2xvcikgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lLnMpICE9PSBudWxsICYmIF9mICE9PSB2b2lkIDAgPyBfZiA6IChfZyA9IHBhcnRpY2xlLmNvbG9yKSA9PT0gbnVsbCB8fCBfZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2cucztcbiAgICBpZiAocykge1xuICAgICAgICB1cGRhdGVDb2xvclZhbHVlKGRlbHRhLCBzLCBhbmltYXRpb25PcHRpb25zLnMsIDEwMCwgdHJ1ZSk7XG4gICAgfVxuICAgIGNvbnN0IGwgPSAoX2ogPSAoX2ggPSBwYXJ0aWNsZS5zdHJva2VDb2xvcikgPT09IG51bGwgfHwgX2ggPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9oLmwpICE9PSBudWxsICYmIF9qICE9PSB2b2lkIDAgPyBfaiA6IChfayA9IHBhcnRpY2xlLmNvbG9yKSA9PT0gbnVsbCB8fCBfayA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2subDtcbiAgICBpZiAobCkge1xuICAgICAgICB1cGRhdGVDb2xvclZhbHVlKGRlbHRhLCBsLCBhbmltYXRpb25PcHRpb25zLmwsIDEwMCwgdHJ1ZSk7XG4gICAgfVxufVxuY2xhc3MgU3Ryb2tlQ29sb3JVcGRhdGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXIpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgfVxuICAgIGluaXQocGFydGljbGUpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXI7XG4gICAgICAgIHBhcnRpY2xlLnN0cm9rZSA9XG4gICAgICAgICAgICBwYXJ0aWNsZS5vcHRpb25zLnN0cm9rZSBpbnN0YW5jZW9mIEFycmF5XG4gICAgICAgICAgICAgICAgPyAoMCwgVXRpbHNfMS5pdGVtRnJvbUFycmF5KShwYXJ0aWNsZS5vcHRpb25zLnN0cm9rZSwgcGFydGljbGUuaWQsIHBhcnRpY2xlLm9wdGlvbnMucmVkdWNlRHVwbGljYXRlcylcbiAgICAgICAgICAgICAgICA6IHBhcnRpY2xlLm9wdGlvbnMuc3Ryb2tlO1xuICAgICAgICBwYXJ0aWNsZS5zdHJva2VXaWR0aCA9IHBhcnRpY2xlLnN0cm9rZS53aWR0aCAqIGNvbnRhaW5lci5yZXRpbmEucGl4ZWxSYXRpbztcbiAgICAgICAgY29uc3Qgc3Ryb2tlSHNsQ29sb3IgPSAoX2EgPSAoMCwgVXRpbHNfMS5jb2xvclRvSHNsKShwYXJ0aWNsZS5zdHJva2UuY29sb3IpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBwYXJ0aWNsZS5nZXRGaWxsQ29sb3IoKTtcbiAgICAgICAgaWYgKHN0cm9rZUhzbENvbG9yKSB7XG4gICAgICAgICAgICBwYXJ0aWNsZS5zdHJva2VDb2xvciA9ICgwLCBVdGlsc18xLmdldEhzbEFuaW1hdGlvbkZyb21Ic2wpKHN0cm9rZUhzbENvbG9yLCAoX2IgPSBwYXJ0aWNsZS5zdHJva2UuY29sb3IpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5hbmltYXRpb24sIGNvbnRhaW5lci5yZXRpbmEucmVkdWNlRmFjdG9yKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpc0VuYWJsZWQocGFydGljbGUpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgICAgICBjb25zdCBjb2xvciA9IChfYSA9IHBhcnRpY2xlLnN0cm9rZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNvbG9yO1xuICAgICAgICByZXR1cm4gKCFwYXJ0aWNsZS5kZXN0cm95ZWQgJiZcbiAgICAgICAgICAgICFwYXJ0aWNsZS5zcGF3bmluZyAmJlxuICAgICAgICAgICAgISFjb2xvciAmJlxuICAgICAgICAgICAgKCgoKF9iID0gcGFydGljbGUuc3Ryb2tlQ29sb3IpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5oLnZhbHVlKSAhPT0gdW5kZWZpbmVkICYmIGNvbG9yLmFuaW1hdGlvbi5oLmVuYWJsZSkgfHxcbiAgICAgICAgICAgICAgICAoKChfYyA9IHBhcnRpY2xlLnN0cm9rZUNvbG9yKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Mucy52YWx1ZSkgIT09IHVuZGVmaW5lZCAmJiBjb2xvci5hbmltYXRpb24ucy5lbmFibGUpIHx8XG4gICAgICAgICAgICAgICAgKCgoX2QgPSBwYXJ0aWNsZS5zdHJva2VDb2xvcikgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmwudmFsdWUpICE9PSB1bmRlZmluZWQgJiYgY29sb3IuYW5pbWF0aW9uLmwuZW5hYmxlKSkpO1xuICAgIH1cbiAgICB1cGRhdGUocGFydGljbGUsIGRlbHRhKSB7XG4gICAgICAgIGlmICghdGhpcy5pc0VuYWJsZWQocGFydGljbGUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlU3Ryb2tlQ29sb3IocGFydGljbGUsIGRlbHRhKTtcbiAgICB9XG59XG5leHBvcnRzLlN0cm9rZUNvbG9yVXBkYXRlciA9IFN0cm9rZUNvbG9yVXBkYXRlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5sb2FkU3Ryb2tlQ29sb3JVcGRhdGVyID0gdm9pZCAwO1xuY29uc3QgU3Ryb2tlQ29sb3JVcGRhdGVyXzEgPSByZXF1aXJlKFwiLi9TdHJva2VDb2xvclVwZGF0ZXJcIik7XG5hc3luYyBmdW5jdGlvbiBsb2FkU3Ryb2tlQ29sb3JVcGRhdGVyKHRzUGFydGljbGVzKSB7XG4gICAgYXdhaXQgdHNQYXJ0aWNsZXMuYWRkUGFydGljbGVVcGRhdGVyKFwic3Ryb2tlQ29sb3JcIiwgKGNvbnRhaW5lcikgPT4gbmV3IFN0cm9rZUNvbG9yVXBkYXRlcl8xLlN0cm9rZUNvbG9yVXBkYXRlcihjb250YWluZXIpKTtcbn1cbmV4cG9ydHMubG9hZFN0cm9rZUNvbG9yVXBkYXRlciA9IGxvYWRTdHJva2VDb2xvclVwZGF0ZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVGlsdFVwZGF0ZXIgPSB2b2lkIDA7XG5jb25zdCBFbnVtc18xID0gcmVxdWlyZShcIi4uLy4uL0VudW1zXCIpO1xuY29uc3QgVXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi9VdGlsc1wiKTtcbmZ1bmN0aW9uIHVwZGF0ZVRpbHQocGFydGljbGUsIGRlbHRhKSB7XG4gICAgdmFyIF9hO1xuICAgIGlmICghcGFydGljbGUudGlsdCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHRpbHQgPSBwYXJ0aWNsZS5vcHRpb25zLnRpbHQ7XG4gICAgY29uc3QgdGlsdEFuaW1hdGlvbiA9IHRpbHQuYW5pbWF0aW9uO1xuICAgIGNvbnN0IHNwZWVkID0gKChfYSA9IHBhcnRpY2xlLnRpbHQudmVsb2NpdHkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDApICogZGVsdGEuZmFjdG9yO1xuICAgIGNvbnN0IG1heCA9IDIgKiBNYXRoLlBJO1xuICAgIGlmICghdGlsdEFuaW1hdGlvbi5lbmFibGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2l0Y2ggKHBhcnRpY2xlLnRpbHQuc3RhdHVzKSB7XG4gICAgICAgIGNhc2UgRW51bXNfMS5BbmltYXRpb25TdGF0dXMuaW5jcmVhc2luZzpcbiAgICAgICAgICAgIHBhcnRpY2xlLnRpbHQudmFsdWUgKz0gc3BlZWQ7XG4gICAgICAgICAgICBpZiAocGFydGljbGUudGlsdC52YWx1ZSA+IG1heCkge1xuICAgICAgICAgICAgICAgIHBhcnRpY2xlLnRpbHQudmFsdWUgLT0gbWF4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgRW51bXNfMS5BbmltYXRpb25TdGF0dXMuZGVjcmVhc2luZzpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHBhcnRpY2xlLnRpbHQudmFsdWUgLT0gc3BlZWQ7XG4gICAgICAgICAgICBpZiAocGFydGljbGUudGlsdC52YWx1ZSA8IDApIHtcbiAgICAgICAgICAgICAgICBwYXJ0aWNsZS50aWx0LnZhbHVlICs9IG1heDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbn1cbmNsYXNzIFRpbHRVcGRhdGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXIpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgfVxuICAgIGluaXQocGFydGljbGUpIHtcbiAgICAgICAgY29uc3QgdGlsdE9wdGlvbnMgPSBwYXJ0aWNsZS5vcHRpb25zLnRpbHQ7XG4gICAgICAgIHBhcnRpY2xlLnRpbHQgPSB7XG4gICAgICAgICAgICBlbmFibGU6IHRpbHRPcHRpb25zLmVuYWJsZSxcbiAgICAgICAgICAgIHZhbHVlOiAoKDAsIFV0aWxzXzEuZ2V0UmFuZ2VWYWx1ZSkodGlsdE9wdGlvbnMudmFsdWUpICogTWF0aC5QSSkgLyAxODAsXG4gICAgICAgICAgICBzaW5EaXJlY3Rpb246IE1hdGgucmFuZG9tKCkgPj0gMC41ID8gMSA6IC0xLFxuICAgICAgICAgICAgY29zRGlyZWN0aW9uOiBNYXRoLnJhbmRvbSgpID49IDAuNSA/IDEgOiAtMSxcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IHRpbHREaXJlY3Rpb24gPSB0aWx0T3B0aW9ucy5kaXJlY3Rpb247XG4gICAgICAgIGlmICh0aWx0RGlyZWN0aW9uID09PSBFbnVtc18xLlRpbHREaXJlY3Rpb24ucmFuZG9tKSB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIpO1xuICAgICAgICAgICAgdGlsdERpcmVjdGlvbiA9IGluZGV4ID4gMCA/IEVudW1zXzEuVGlsdERpcmVjdGlvbi5jb3VudGVyQ2xvY2t3aXNlIDogRW51bXNfMS5UaWx0RGlyZWN0aW9uLmNsb2Nrd2lzZTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHRpbHREaXJlY3Rpb24pIHtcbiAgICAgICAgICAgIGNhc2UgRW51bXNfMS5UaWx0RGlyZWN0aW9uLmNvdW50ZXJDbG9ja3dpc2U6XG4gICAgICAgICAgICBjYXNlIFwiY291bnRlckNsb2Nrd2lzZVwiOlxuICAgICAgICAgICAgICAgIHBhcnRpY2xlLnRpbHQuc3RhdHVzID0gRW51bXNfMS5BbmltYXRpb25TdGF0dXMuZGVjcmVhc2luZztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgRW51bXNfMS5UaWx0RGlyZWN0aW9uLmNsb2Nrd2lzZTpcbiAgICAgICAgICAgICAgICBwYXJ0aWNsZS50aWx0LnN0YXR1cyA9IEVudW1zXzEuQW5pbWF0aW9uU3RhdHVzLmluY3JlYXNpbmc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGlsdEFuaW1hdGlvbiA9IHBhcnRpY2xlLm9wdGlvbnMudGlsdC5hbmltYXRpb247XG4gICAgICAgIGlmICh0aWx0QW5pbWF0aW9uLmVuYWJsZSkge1xuICAgICAgICAgICAgcGFydGljbGUudGlsdC52ZWxvY2l0eSA9ICh0aWx0QW5pbWF0aW9uLnNwZWVkIC8gMzYwKSAqIHRoaXMuY29udGFpbmVyLnJldGluYS5yZWR1Y2VGYWN0b3I7XG4gICAgICAgICAgICBpZiAoIXRpbHRBbmltYXRpb24uc3luYykge1xuICAgICAgICAgICAgICAgIHBhcnRpY2xlLnRpbHQudmVsb2NpdHkgKj0gTWF0aC5yYW5kb20oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpc0VuYWJsZWQocGFydGljbGUpIHtcbiAgICAgICAgY29uc3QgdGlsdCA9IHBhcnRpY2xlLm9wdGlvbnMudGlsdDtcbiAgICAgICAgY29uc3QgdGlsdEFuaW1hdGlvbiA9IHRpbHQuYW5pbWF0aW9uO1xuICAgICAgICByZXR1cm4gIXBhcnRpY2xlLmRlc3Ryb3llZCAmJiAhcGFydGljbGUuc3Bhd25pbmcgJiYgdGlsdEFuaW1hdGlvbi5lbmFibGU7XG4gICAgfVxuICAgIHVwZGF0ZShwYXJ0aWNsZSwgZGVsdGEpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzRW5hYmxlZChwYXJ0aWNsZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB1cGRhdGVUaWx0KHBhcnRpY2xlLCBkZWx0YSk7XG4gICAgfVxufVxuZXhwb3J0cy5UaWx0VXBkYXRlciA9IFRpbHRVcGRhdGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvYWRUaWx0VXBkYXRlciA9IHZvaWQgMDtcbmNvbnN0IFRpbHRVcGRhdGVyXzEgPSByZXF1aXJlKFwiLi9UaWx0VXBkYXRlclwiKTtcbmFzeW5jIGZ1bmN0aW9uIGxvYWRUaWx0VXBkYXRlcih0c1BhcnRpY2xlcykge1xuICAgIGF3YWl0IHRzUGFydGljbGVzLmFkZFBhcnRpY2xlVXBkYXRlcihcInRpbHRcIiwgKGNvbnRhaW5lcikgPT4gbmV3IFRpbHRVcGRhdGVyXzEuVGlsdFVwZGF0ZXIoY29udGFpbmVyKSk7XG59XG5leHBvcnRzLmxvYWRUaWx0VXBkYXRlciA9IGxvYWRUaWx0VXBkYXRlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Xb2JibGVVcGRhdGVyID0gdm9pZCAwO1xuY29uc3QgVXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi9VdGlsc1wiKTtcbmZ1bmN0aW9uIHVwZGF0ZVdvYmJsZShwYXJ0aWNsZSwgZGVsdGEpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3Qgd29iYmxlID0gcGFydGljbGUub3B0aW9ucy53b2JibGU7XG4gICAgaWYgKCF3b2JibGUuZW5hYmxlIHx8ICFwYXJ0aWNsZS53b2JibGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBzcGVlZCA9IHBhcnRpY2xlLndvYmJsZS5zcGVlZCAqIGRlbHRhLmZhY3RvcjtcbiAgICBjb25zdCBkaXN0YW5jZSA9ICgoKF9hID0gcGFydGljbGUucmV0aW5hLndvYmJsZURpc3RhbmNlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAwKSAqIGRlbHRhLmZhY3RvcikgLyAoMTAwMCAvIDYwKTtcbiAgICBjb25zdCBtYXggPSAyICogTWF0aC5QSTtcbiAgICBwYXJ0aWNsZS53b2JibGUuYW5nbGUgKz0gc3BlZWQ7XG4gICAgaWYgKHBhcnRpY2xlLndvYmJsZS5hbmdsZSA+IG1heCkge1xuICAgICAgICBwYXJ0aWNsZS53b2JibGUuYW5nbGUgLT0gbWF4O1xuICAgIH1cbiAgICBwYXJ0aWNsZS5wb3NpdGlvbi54ICs9IGRpc3RhbmNlICogTWF0aC5jb3MocGFydGljbGUud29iYmxlLmFuZ2xlKTtcbiAgICBwYXJ0aWNsZS5wb3NpdGlvbi55ICs9IGRpc3RhbmNlICogTWF0aC5hYnMoTWF0aC5zaW4ocGFydGljbGUud29iYmxlLmFuZ2xlKSk7XG59XG5jbGFzcyBXb2JibGVVcGRhdGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXIpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgfVxuICAgIGluaXQocGFydGljbGUpIHtcbiAgICAgICAgY29uc3Qgd29iYmxlT3B0ID0gcGFydGljbGUub3B0aW9ucy53b2JibGU7XG4gICAgICAgIGlmICh3b2JibGVPcHQuZW5hYmxlKSB7XG4gICAgICAgICAgICBwYXJ0aWNsZS53b2JibGUgPSB7XG4gICAgICAgICAgICAgICAgYW5nbGU6IE1hdGgucmFuZG9tKCkgKiBNYXRoLlBJICogMixcbiAgICAgICAgICAgICAgICBzcGVlZDogKDAsIFV0aWxzXzEuZ2V0UmFuZ2VWYWx1ZSkod29iYmxlT3B0LnNwZWVkKSAvIDM2MCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwYXJ0aWNsZS53b2JibGUgPSB7XG4gICAgICAgICAgICAgICAgYW5nbGU6IDAsXG4gICAgICAgICAgICAgICAgc3BlZWQ6IDAsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHBhcnRpY2xlLnJldGluYS53b2JibGVEaXN0YW5jZSA9ICgwLCBVdGlsc18xLmdldFJhbmdlVmFsdWUpKHdvYmJsZU9wdC5kaXN0YW5jZSkgKiB0aGlzLmNvbnRhaW5lci5yZXRpbmEucGl4ZWxSYXRpbztcbiAgICB9XG4gICAgaXNFbmFibGVkKHBhcnRpY2xlKSB7XG4gICAgICAgIHJldHVybiAhcGFydGljbGUuZGVzdHJveWVkICYmICFwYXJ0aWNsZS5zcGF3bmluZyAmJiBwYXJ0aWNsZS5vcHRpb25zLndvYmJsZS5lbmFibGU7XG4gICAgfVxuICAgIHVwZGF0ZShwYXJ0aWNsZSwgZGVsdGEpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzRW5hYmxlZChwYXJ0aWNsZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB1cGRhdGVXb2JibGUocGFydGljbGUsIGRlbHRhKTtcbiAgICB9XG59XG5leHBvcnRzLldvYmJsZVVwZGF0ZXIgPSBXb2JibGVVcGRhdGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvYWRXb2JibGVVcGRhdGVyID0gdm9pZCAwO1xuY29uc3QgV29iYmxlVXBkYXRlcl8xID0gcmVxdWlyZShcIi4vV29iYmxlVXBkYXRlclwiKTtcbmFzeW5jIGZ1bmN0aW9uIGxvYWRXb2JibGVVcGRhdGVyKHRzUGFydGljbGVzKSB7XG4gICAgYXdhaXQgdHNQYXJ0aWNsZXMuYWRkUGFydGljbGVVcGRhdGVyKFwid29iYmxlXCIsIChjb250YWluZXIpID0+IG5ldyBXb2JibGVVcGRhdGVyXzEuV29iYmxlVXBkYXRlcihjb250YWluZXIpKTtcbn1cbmV4cG9ydHMubG9hZFdvYmJsZVVwZGF0ZXIgPSBsb2FkV29iYmxlVXBkYXRlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hbHRlckhzbCA9IGV4cG9ydHMuZHJhd0VsbGlwc2UgPSBleHBvcnRzLmRyYXdQYXJ0aWNsZVBsdWdpbiA9IGV4cG9ydHMuZHJhd1BsdWdpbiA9IGV4cG9ydHMuZHJhd1NoYXBlQWZ0ZXJFZmZlY3QgPSBleHBvcnRzLmRyYXdTaGFwZSA9IGV4cG9ydHMuZHJhd1BhcnRpY2xlID0gZXhwb3J0cy5kcmF3R3JhYkxpbmUgPSBleHBvcnRzLmdyYWRpZW50ID0gZXhwb3J0cy5kcmF3Q29ubmVjdExpbmUgPSBleHBvcnRzLmRyYXdMaW5rVHJpYW5nbGUgPSBleHBvcnRzLmRyYXdMaW5rTGluZSA9IGV4cG9ydHMuY2xlYXIgPSBleHBvcnRzLnBhaW50QmFzZSA9IHZvaWQgMDtcbmNvbnN0IE51bWJlclV0aWxzXzEgPSByZXF1aXJlKFwiLi9OdW1iZXJVdGlsc1wiKTtcbmNvbnN0IENvbG9yVXRpbHNfMSA9IHJlcXVpcmUoXCIuL0NvbG9yVXRpbHNcIik7XG5jb25zdCBFbnVtc18xID0gcmVxdWlyZShcIi4uL0VudW1zXCIpO1xuZnVuY3Rpb24gZHJhd0xpbmUoY29udGV4dCwgYmVnaW4sIGVuZCkge1xuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgY29udGV4dC5tb3ZlVG8oYmVnaW4ueCwgYmVnaW4ueSk7XG4gICAgY29udGV4dC5saW5lVG8oZW5kLngsIGVuZC55KTtcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xufVxuZnVuY3Rpb24gZHJhd1RyaWFuZ2xlKGNvbnRleHQsIHAxLCBwMiwgcDMpIHtcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgIGNvbnRleHQubW92ZVRvKHAxLngsIHAxLnkpO1xuICAgIGNvbnRleHQubGluZVRvKHAyLngsIHAyLnkpO1xuICAgIGNvbnRleHQubGluZVRvKHAzLngsIHAzLnkpO1xuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG59XG5mdW5jdGlvbiBwYWludEJhc2UoY29udGV4dCwgZGltZW5zaW9uLCBiYXNlQ29sb3IpIHtcbiAgICBjb250ZXh0LnNhdmUoKTtcbiAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGJhc2VDb2xvciAhPT0gbnVsbCAmJiBiYXNlQ29sb3IgIT09IHZvaWQgMCA/IGJhc2VDb2xvciA6IFwicmdiYSgwLDAsMCwwKVwiO1xuICAgIGNvbnRleHQuZmlsbFJlY3QoMCwgMCwgZGltZW5zaW9uLndpZHRoLCBkaW1lbnNpb24uaGVpZ2h0KTtcbiAgICBjb250ZXh0LnJlc3RvcmUoKTtcbn1cbmV4cG9ydHMucGFpbnRCYXNlID0gcGFpbnRCYXNlO1xuZnVuY3Rpb24gY2xlYXIoY29udGV4dCwgZGltZW5zaW9uKSB7XG4gICAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgZGltZW5zaW9uLndpZHRoLCBkaW1lbnNpb24uaGVpZ2h0KTtcbn1cbmV4cG9ydHMuY2xlYXIgPSBjbGVhcjtcbmZ1bmN0aW9uIGRyYXdMaW5rTGluZShjb250ZXh0LCB3aWR0aCwgYmVnaW4sIGVuZCwgbWF4RGlzdGFuY2UsIGNhbnZhc1NpemUsIHdhcnAsIGJhY2tncm91bmRNYXNrLCBjb21wb3NpdGUsIGNvbG9yTGluZSwgb3BhY2l0eSwgc2hhZG93KSB7XG4gICAgbGV0IGRyYXduID0gZmFsc2U7XG4gICAgaWYgKCgwLCBOdW1iZXJVdGlsc18xLmdldERpc3RhbmNlKShiZWdpbiwgZW5kKSA8PSBtYXhEaXN0YW5jZSkge1xuICAgICAgICBkcmF3TGluZShjb250ZXh0LCBiZWdpbiwgZW5kKTtcbiAgICAgICAgZHJhd24gPSB0cnVlO1xuICAgIH1cbiAgICBlbHNlIGlmICh3YXJwKSB7XG4gICAgICAgIGxldCBwaTE7XG4gICAgICAgIGxldCBwaTI7XG4gICAgICAgIGNvbnN0IGVuZE5FID0ge1xuICAgICAgICAgICAgeDogZW5kLnggLSBjYW52YXNTaXplLndpZHRoLFxuICAgICAgICAgICAgeTogZW5kLnksXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGQxID0gKDAsIE51bWJlclV0aWxzXzEuZ2V0RGlzdGFuY2VzKShiZWdpbiwgZW5kTkUpO1xuICAgICAgICBpZiAoZDEuZGlzdGFuY2UgPD0gbWF4RGlzdGFuY2UpIHtcbiAgICAgICAgICAgIGNvbnN0IHlpID0gYmVnaW4ueSAtIChkMS5keSAvIGQxLmR4KSAqIGJlZ2luLng7XG4gICAgICAgICAgICBwaTEgPSB7IHg6IDAsIHk6IHlpIH07XG4gICAgICAgICAgICBwaTIgPSB7IHg6IGNhbnZhc1NpemUud2lkdGgsIHk6IHlpIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBlbmRTVyA9IHtcbiAgICAgICAgICAgICAgICB4OiBlbmQueCxcbiAgICAgICAgICAgICAgICB5OiBlbmQueSAtIGNhbnZhc1NpemUuaGVpZ2h0LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGQyID0gKDAsIE51bWJlclV0aWxzXzEuZ2V0RGlzdGFuY2VzKShiZWdpbiwgZW5kU1cpO1xuICAgICAgICAgICAgaWYgKGQyLmRpc3RhbmNlIDw9IG1heERpc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeWkgPSBiZWdpbi55IC0gKGQyLmR5IC8gZDIuZHgpICogYmVnaW4ueDtcbiAgICAgICAgICAgICAgICBjb25zdCB4aSA9IC15aSAvIChkMi5keSAvIGQyLmR4KTtcbiAgICAgICAgICAgICAgICBwaTEgPSB7IHg6IHhpLCB5OiAwIH07XG4gICAgICAgICAgICAgICAgcGkyID0geyB4OiB4aSwgeTogY2FudmFzU2l6ZS5oZWlnaHQgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVuZFNFID0ge1xuICAgICAgICAgICAgICAgICAgICB4OiBlbmQueCAtIGNhbnZhc1NpemUud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIHk6IGVuZC55IC0gY2FudmFzU2l6ZS5oZWlnaHQsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCBkMyA9ICgwLCBOdW1iZXJVdGlsc18xLmdldERpc3RhbmNlcykoYmVnaW4sIGVuZFNFKTtcbiAgICAgICAgICAgICAgICBpZiAoZDMuZGlzdGFuY2UgPD0gbWF4RGlzdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeWkgPSBiZWdpbi55IC0gKGQzLmR5IC8gZDMuZHgpICogYmVnaW4ueDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeGkgPSAteWkgLyAoZDMuZHkgLyBkMy5keCk7XG4gICAgICAgICAgICAgICAgICAgIHBpMSA9IHsgeDogeGksIHk6IHlpIH07XG4gICAgICAgICAgICAgICAgICAgIHBpMiA9IHsgeDogcGkxLnggKyBjYW52YXNTaXplLndpZHRoLCB5OiBwaTEueSArIGNhbnZhc1NpemUuaGVpZ2h0IH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwaTEgJiYgcGkyKSB7XG4gICAgICAgICAgICBkcmF3TGluZShjb250ZXh0LCBiZWdpbiwgcGkxKTtcbiAgICAgICAgICAgIGRyYXdMaW5lKGNvbnRleHQsIGVuZCwgcGkyKTtcbiAgICAgICAgICAgIGRyYXduID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWRyYXduKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29udGV4dC5saW5lV2lkdGggPSB3aWR0aDtcbiAgICBpZiAoYmFja2dyb3VuZE1hc2spIHtcbiAgICAgICAgY29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSBjb21wb3NpdGU7XG4gICAgfVxuICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSAoMCwgQ29sb3JVdGlsc18xLmdldFN0eWxlRnJvbVJnYikoY29sb3JMaW5lLCBvcGFjaXR5KTtcbiAgICBpZiAoc2hhZG93LmVuYWJsZSkge1xuICAgICAgICBjb25zdCBzaGFkb3dDb2xvciA9ICgwLCBDb2xvclV0aWxzXzEuY29sb3JUb1JnYikoc2hhZG93LmNvbG9yKTtcbiAgICAgICAgaWYgKHNoYWRvd0NvbG9yKSB7XG4gICAgICAgICAgICBjb250ZXh0LnNoYWRvd0JsdXIgPSBzaGFkb3cuYmx1cjtcbiAgICAgICAgICAgIGNvbnRleHQuc2hhZG93Q29sb3IgPSAoMCwgQ29sb3JVdGlsc18xLmdldFN0eWxlRnJvbVJnYikoc2hhZG93Q29sb3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnRleHQuc3Ryb2tlKCk7XG59XG5leHBvcnRzLmRyYXdMaW5rTGluZSA9IGRyYXdMaW5rTGluZTtcbmZ1bmN0aW9uIGRyYXdMaW5rVHJpYW5nbGUoY29udGV4dCwgcG9zMSwgcG9zMiwgcG9zMywgYmFja2dyb3VuZE1hc2ssIGNvbXBvc2l0ZSwgY29sb3JUcmlhbmdsZSwgb3BhY2l0eVRyaWFuZ2xlKSB7XG4gICAgZHJhd1RyaWFuZ2xlKGNvbnRleHQsIHBvczEsIHBvczIsIHBvczMpO1xuICAgIGlmIChiYWNrZ3JvdW5kTWFzaykge1xuICAgICAgICBjb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IGNvbXBvc2l0ZTtcbiAgICB9XG4gICAgY29udGV4dC5maWxsU3R5bGUgPSAoMCwgQ29sb3JVdGlsc18xLmdldFN0eWxlRnJvbVJnYikoY29sb3JUcmlhbmdsZSwgb3BhY2l0eVRyaWFuZ2xlKTtcbiAgICBjb250ZXh0LmZpbGwoKTtcbn1cbmV4cG9ydHMuZHJhd0xpbmtUcmlhbmdsZSA9IGRyYXdMaW5rVHJpYW5nbGU7XG5mdW5jdGlvbiBkcmF3Q29ubmVjdExpbmUoY29udGV4dCwgd2lkdGgsIGxpbmVTdHlsZSwgYmVnaW4sIGVuZCkge1xuICAgIGNvbnRleHQuc2F2ZSgpO1xuICAgIGRyYXdMaW5lKGNvbnRleHQsIGJlZ2luLCBlbmQpO1xuICAgIGNvbnRleHQubGluZVdpZHRoID0gd2lkdGg7XG4gICAgY29udGV4dC5zdHJva2VTdHlsZSA9IGxpbmVTdHlsZTtcbiAgICBjb250ZXh0LnN0cm9rZSgpO1xuICAgIGNvbnRleHQucmVzdG9yZSgpO1xufVxuZXhwb3J0cy5kcmF3Q29ubmVjdExpbmUgPSBkcmF3Q29ubmVjdExpbmU7XG5mdW5jdGlvbiBncmFkaWVudChjb250ZXh0LCBwMSwgcDIsIG9wYWNpdHkpIHtcbiAgICBjb25zdCBncmFkU3RvcCA9IE1hdGguZmxvb3IocDIuZ2V0UmFkaXVzKCkgLyBwMS5nZXRSYWRpdXMoKSk7XG4gICAgY29uc3QgY29sb3IxID0gcDEuZ2V0RmlsbENvbG9yKCk7XG4gICAgY29uc3QgY29sb3IyID0gcDIuZ2V0RmlsbENvbG9yKCk7XG4gICAgaWYgKCFjb2xvcjEgfHwgIWNvbG9yMikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHNvdXJjZVBvcyA9IHAxLmdldFBvc2l0aW9uKCk7XG4gICAgY29uc3QgZGVzdFBvcyA9IHAyLmdldFBvc2l0aW9uKCk7XG4gICAgY29uc3QgbWlkUmdiID0gKDAsIENvbG9yVXRpbHNfMS5jb2xvck1peCkoY29sb3IxLCBjb2xvcjIsIHAxLmdldFJhZGl1cygpLCBwMi5nZXRSYWRpdXMoKSk7XG4gICAgY29uc3QgZ3JhZCA9IGNvbnRleHQuY3JlYXRlTGluZWFyR3JhZGllbnQoc291cmNlUG9zLngsIHNvdXJjZVBvcy55LCBkZXN0UG9zLngsIGRlc3RQb3MueSk7XG4gICAgZ3JhZC5hZGRDb2xvclN0b3AoMCwgKDAsIENvbG9yVXRpbHNfMS5nZXRTdHlsZUZyb21Ic2wpKGNvbG9yMSwgb3BhY2l0eSkpO1xuICAgIGdyYWQuYWRkQ29sb3JTdG9wKGdyYWRTdG9wID4gMSA/IDEgOiBncmFkU3RvcCwgKDAsIENvbG9yVXRpbHNfMS5nZXRTdHlsZUZyb21SZ2IpKG1pZFJnYiwgb3BhY2l0eSkpO1xuICAgIGdyYWQuYWRkQ29sb3JTdG9wKDEsICgwLCBDb2xvclV0aWxzXzEuZ2V0U3R5bGVGcm9tSHNsKShjb2xvcjIsIG9wYWNpdHkpKTtcbiAgICByZXR1cm4gZ3JhZDtcbn1cbmV4cG9ydHMuZ3JhZGllbnQgPSBncmFkaWVudDtcbmZ1bmN0aW9uIGRyYXdHcmFiTGluZShjb250ZXh0LCB3aWR0aCwgYmVnaW4sIGVuZCwgY29sb3JMaW5lLCBvcGFjaXR5KSB7XG4gICAgY29udGV4dC5zYXZlKCk7XG4gICAgZHJhd0xpbmUoY29udGV4dCwgYmVnaW4sIGVuZCk7XG4gICAgY29udGV4dC5zdHJva2VTdHlsZSA9ICgwLCBDb2xvclV0aWxzXzEuZ2V0U3R5bGVGcm9tUmdiKShjb2xvckxpbmUsIG9wYWNpdHkpO1xuICAgIGNvbnRleHQubGluZVdpZHRoID0gd2lkdGg7XG4gICAgY29udGV4dC5zdHJva2UoKTtcbiAgICBjb250ZXh0LnJlc3RvcmUoKTtcbn1cbmV4cG9ydHMuZHJhd0dyYWJMaW5lID0gZHJhd0dyYWJMaW5lO1xuZnVuY3Rpb24gZHJhd1BhcnRpY2xlKGNvbnRhaW5lciwgY29udGV4dCwgcGFydGljbGUsIGRlbHRhLCBmaWxsQ29sb3JWYWx1ZSwgc3Ryb2tlQ29sb3JWYWx1ZSwgYmFja2dyb3VuZE1hc2ssIGNvbXBvc2l0ZSwgcmFkaXVzLCBvcGFjaXR5LCBzaGFkb3csIGdyYWRpZW50KSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2Y7XG4gICAgY29uc3QgcG9zID0gcGFydGljbGUuZ2V0UG9zaXRpb24oKTtcbiAgICBjb25zdCB0aWx0T3B0aW9ucyA9IHBhcnRpY2xlLm9wdGlvbnMudGlsdDtcbiAgICBjb25zdCByb2xsT3B0aW9ucyA9IHBhcnRpY2xlLm9wdGlvbnMucm9sbDtcbiAgICBjb250ZXh0LnNhdmUoKTtcbiAgICBpZiAodGlsdE9wdGlvbnMuZW5hYmxlIHx8IHJvbGxPcHRpb25zLmVuYWJsZSkge1xuICAgICAgICBjb25zdCByb2xsID0gcm9sbE9wdGlvbnMuZW5hYmxlICYmIHBhcnRpY2xlLnJvbGw7XG4gICAgICAgIGNvbnN0IHRpbHQgPSB0aWx0T3B0aW9ucy5lbmFibGUgJiYgcGFydGljbGUudGlsdDtcbiAgICAgICAgY29uc3Qgcm9sbEhvcml6b250YWwgPSByb2xsICYmIChyb2xsT3B0aW9ucy5tb2RlID09PSBFbnVtc18xLlJvbGxNb2RlLmhvcml6b250YWwgfHwgcm9sbE9wdGlvbnMubW9kZSA9PT0gRW51bXNfMS5Sb2xsTW9kZS5ib3RoKTtcbiAgICAgICAgY29uc3Qgcm9sbFZlcnRpY2FsID0gcm9sbCAmJiAocm9sbE9wdGlvbnMubW9kZSA9PT0gRW51bXNfMS5Sb2xsTW9kZS52ZXJ0aWNhbCB8fCByb2xsT3B0aW9ucy5tb2RlID09PSBFbnVtc18xLlJvbGxNb2RlLmJvdGgpO1xuICAgICAgICBjb250ZXh0LnNldFRyYW5zZm9ybShyb2xsSG9yaXpvbnRhbCA/IE1hdGguY29zKHBhcnRpY2xlLnJvbGwuYW5nbGUpIDogMSwgdGlsdCA/IE1hdGguY29zKHBhcnRpY2xlLnRpbHQudmFsdWUpICogcGFydGljbGUudGlsdC5jb3NEaXJlY3Rpb24gOiAwLCB0aWx0ID8gTWF0aC5zaW4ocGFydGljbGUudGlsdC52YWx1ZSkgKiBwYXJ0aWNsZS50aWx0LnNpbkRpcmVjdGlvbiA6IDAsIHJvbGxWZXJ0aWNhbCA/IE1hdGguc2luKHBhcnRpY2xlLnJvbGwuYW5nbGUpIDogMSwgcG9zLngsIHBvcy55KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnRleHQudHJhbnNsYXRlKHBvcy54LCBwb3MueSk7XG4gICAgfVxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgY29uc3QgYW5nbGUgPSAoKF9iID0gKF9hID0gcGFydGljbGUucm90YXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudmFsdWUpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IDApICsgKHBhcnRpY2xlLm9wdGlvbnMucm90YXRlLnBhdGggPyBwYXJ0aWNsZS52ZWxvY2l0eS5hbmdsZSA6IDApO1xuICAgIGlmIChhbmdsZSAhPT0gMCkge1xuICAgICAgICBjb250ZXh0LnJvdGF0ZShhbmdsZSk7XG4gICAgfVxuICAgIGlmIChiYWNrZ3JvdW5kTWFzaykge1xuICAgICAgICBjb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IGNvbXBvc2l0ZTtcbiAgICB9XG4gICAgY29uc3Qgc2hhZG93Q29sb3IgPSBwYXJ0aWNsZS5zaGFkb3dDb2xvcjtcbiAgICBpZiAoc2hhZG93LmVuYWJsZSAmJiBzaGFkb3dDb2xvcikge1xuICAgICAgICBjb250ZXh0LnNoYWRvd0JsdXIgPSBzaGFkb3cuYmx1cjtcbiAgICAgICAgY29udGV4dC5zaGFkb3dDb2xvciA9ICgwLCBDb2xvclV0aWxzXzEuZ2V0U3R5bGVGcm9tUmdiKShzaGFkb3dDb2xvcik7XG4gICAgICAgIGNvbnRleHQuc2hhZG93T2Zmc2V0WCA9IHNoYWRvdy5vZmZzZXQueDtcbiAgICAgICAgY29udGV4dC5zaGFkb3dPZmZzZXRZID0gc2hhZG93Lm9mZnNldC55O1xuICAgIH1cbiAgICBpZiAoZ3JhZGllbnQpIHtcbiAgICAgICAgY29uc3QgZ3JhZGllbnRBbmdsZSA9IGdyYWRpZW50LmFuZ2xlLnZhbHVlO1xuICAgICAgICBjb25zdCBmaWxsR3JhZGllbnQgPSBncmFkaWVudC50eXBlID09PSBFbnVtc18xLkdyYWRpZW50VHlwZS5yYWRpYWxcbiAgICAgICAgICAgID8gY29udGV4dC5jcmVhdGVSYWRpYWxHcmFkaWVudCgwLCAwLCAwLCAwLCAwLCByYWRpdXMpXG4gICAgICAgICAgICA6IGNvbnRleHQuY3JlYXRlTGluZWFyR3JhZGllbnQoTWF0aC5jb3MoZ3JhZGllbnRBbmdsZSkgKiAtcmFkaXVzLCBNYXRoLnNpbihncmFkaWVudEFuZ2xlKSAqIC1yYWRpdXMsIE1hdGguY29zKGdyYWRpZW50QW5nbGUpICogcmFkaXVzLCBNYXRoLnNpbihncmFkaWVudEFuZ2xlKSAqIHJhZGl1cyk7XG4gICAgICAgIGZvciAoY29uc3QgY29sb3Igb2YgZ3JhZGllbnQuY29sb3JzKSB7XG4gICAgICAgICAgICBmaWxsR3JhZGllbnQuYWRkQ29sb3JTdG9wKGNvbG9yLnN0b3AsICgwLCBDb2xvclV0aWxzXzEuZ2V0U3R5bGVGcm9tSHNsKSh7XG4gICAgICAgICAgICAgICAgaDogY29sb3IudmFsdWUuaC52YWx1ZSxcbiAgICAgICAgICAgICAgICBzOiBjb2xvci52YWx1ZS5zLnZhbHVlLFxuICAgICAgICAgICAgICAgIGw6IGNvbG9yLnZhbHVlLmwudmFsdWUsXG4gICAgICAgICAgICB9LCAoX2QgPSAoX2MgPSBjb2xvci5vcGFjaXR5KSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MudmFsdWUpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IG9wYWNpdHkpKTtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGZpbGxHcmFkaWVudDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChmaWxsQ29sb3JWYWx1ZSkge1xuICAgICAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBmaWxsQ29sb3JWYWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBzdHJva2UgPSBwYXJ0aWNsZS5zdHJva2U7XG4gICAgY29udGV4dC5saW5lV2lkdGggPSAoX2UgPSBwYXJ0aWNsZS5zdHJva2VXaWR0aCkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogMDtcbiAgICBpZiAoc3Ryb2tlQ29sb3JWYWx1ZSkge1xuICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gc3Ryb2tlQ29sb3JWYWx1ZTtcbiAgICB9XG4gICAgZHJhd1NoYXBlKGNvbnRhaW5lciwgY29udGV4dCwgcGFydGljbGUsIHJhZGl1cywgb3BhY2l0eSwgZGVsdGEpO1xuICAgIGlmICgoKF9mID0gc3Ryb2tlID09PSBudWxsIHx8IHN0cm9rZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc3Ryb2tlLndpZHRoKSAhPT0gbnVsbCAmJiBfZiAhPT0gdm9pZCAwID8gX2YgOiAwKSA+IDApIHtcbiAgICAgICAgY29udGV4dC5zdHJva2UoKTtcbiAgICB9XG4gICAgaWYgKHBhcnRpY2xlLmNsb3NlKSB7XG4gICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgfVxuICAgIGlmIChwYXJ0aWNsZS5maWxsKSB7XG4gICAgICAgIGNvbnRleHQuZmlsbCgpO1xuICAgIH1cbiAgICBjb250ZXh0LnJlc3RvcmUoKTtcbiAgICBjb250ZXh0LnNhdmUoKTtcbiAgICBpZiAodGlsdE9wdGlvbnMuZW5hYmxlICYmIHBhcnRpY2xlLnRpbHQpIHtcbiAgICAgICAgY29udGV4dC5zZXRUcmFuc2Zvcm0oMSwgTWF0aC5jb3MocGFydGljbGUudGlsdC52YWx1ZSkgKiBwYXJ0aWNsZS50aWx0LmNvc0RpcmVjdGlvbiwgTWF0aC5zaW4ocGFydGljbGUudGlsdC52YWx1ZSkgKiBwYXJ0aWNsZS50aWx0LnNpbkRpcmVjdGlvbiwgMSwgcG9zLngsIHBvcy55KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnRleHQudHJhbnNsYXRlKHBvcy54LCBwb3MueSk7XG4gICAgfVxuICAgIGlmIChhbmdsZSAhPT0gMCkge1xuICAgICAgICBjb250ZXh0LnJvdGF0ZShhbmdsZSk7XG4gICAgfVxuICAgIGlmIChiYWNrZ3JvdW5kTWFzaykge1xuICAgICAgICBjb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IGNvbXBvc2l0ZTtcbiAgICB9XG4gICAgZHJhd1NoYXBlQWZ0ZXJFZmZlY3QoY29udGFpbmVyLCBjb250ZXh0LCBwYXJ0aWNsZSwgcmFkaXVzLCBvcGFjaXR5LCBkZWx0YSk7XG4gICAgY29udGV4dC5yZXN0b3JlKCk7XG59XG5leHBvcnRzLmRyYXdQYXJ0aWNsZSA9IGRyYXdQYXJ0aWNsZTtcbmZ1bmN0aW9uIGRyYXdTaGFwZShjb250YWluZXIsIGNvbnRleHQsIHBhcnRpY2xlLCByYWRpdXMsIG9wYWNpdHksIGRlbHRhKSB7XG4gICAgaWYgKCFwYXJ0aWNsZS5zaGFwZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGRyYXdlciA9IGNvbnRhaW5lci5kcmF3ZXJzLmdldChwYXJ0aWNsZS5zaGFwZSk7XG4gICAgaWYgKCFkcmF3ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmF3ZXIuZHJhdyhjb250ZXh0LCBwYXJ0aWNsZSwgcmFkaXVzLCBvcGFjaXR5LCBkZWx0YSwgY29udGFpbmVyLnJldGluYS5waXhlbFJhdGlvKTtcbn1cbmV4cG9ydHMuZHJhd1NoYXBlID0gZHJhd1NoYXBlO1xuZnVuY3Rpb24gZHJhd1NoYXBlQWZ0ZXJFZmZlY3QoY29udGFpbmVyLCBjb250ZXh0LCBwYXJ0aWNsZSwgcmFkaXVzLCBvcGFjaXR5LCBkZWx0YSkge1xuICAgIGlmICghcGFydGljbGUuc2hhcGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBkcmF3ZXIgPSBjb250YWluZXIuZHJhd2Vycy5nZXQocGFydGljbGUuc2hhcGUpO1xuICAgIGlmICghKGRyYXdlciA9PT0gbnVsbCB8fCBkcmF3ZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRyYXdlci5hZnRlckVmZmVjdCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmF3ZXIuYWZ0ZXJFZmZlY3QoY29udGV4dCwgcGFydGljbGUsIHJhZGl1cywgb3BhY2l0eSwgZGVsdGEsIGNvbnRhaW5lci5yZXRpbmEucGl4ZWxSYXRpbyk7XG59XG5leHBvcnRzLmRyYXdTaGFwZUFmdGVyRWZmZWN0ID0gZHJhd1NoYXBlQWZ0ZXJFZmZlY3Q7XG5mdW5jdGlvbiBkcmF3UGx1Z2luKGNvbnRleHQsIHBsdWdpbiwgZGVsdGEpIHtcbiAgICBpZiAoIXBsdWdpbi5kcmF3KSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29udGV4dC5zYXZlKCk7XG4gICAgcGx1Z2luLmRyYXcoY29udGV4dCwgZGVsdGEpO1xuICAgIGNvbnRleHQucmVzdG9yZSgpO1xufVxuZXhwb3J0cy5kcmF3UGx1Z2luID0gZHJhd1BsdWdpbjtcbmZ1bmN0aW9uIGRyYXdQYXJ0aWNsZVBsdWdpbihjb250ZXh0LCBwbHVnaW4sIHBhcnRpY2xlLCBkZWx0YSkge1xuICAgIGlmIChwbHVnaW4uZHJhd1BhcnRpY2xlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29udGV4dC5zYXZlKCk7XG4gICAgICAgIHBsdWdpbi5kcmF3UGFydGljbGUoY29udGV4dCwgcGFydGljbGUsIGRlbHRhKTtcbiAgICAgICAgY29udGV4dC5yZXN0b3JlKCk7XG4gICAgfVxufVxuZXhwb3J0cy5kcmF3UGFydGljbGVQbHVnaW4gPSBkcmF3UGFydGljbGVQbHVnaW47XG5mdW5jdGlvbiBkcmF3RWxsaXBzZShjb250ZXh0LCBwYXJ0aWNsZSwgZmlsbENvbG9yVmFsdWUsIHJhZGl1cywgb3BhY2l0eSwgd2lkdGgsIHJvdGF0aW9uLCBzdGFydCwgZW5kKSB7XG4gICAgY29uc3QgcG9zID0gcGFydGljbGUuZ2V0UG9zaXRpb24oKTtcbiAgICBpZiAoZmlsbENvbG9yVmFsdWUpIHtcbiAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9ICgwLCBDb2xvclV0aWxzXzEuZ2V0U3R5bGVGcm9tSHNsKShmaWxsQ29sb3JWYWx1ZSwgb3BhY2l0eSk7XG4gICAgfVxuICAgIGlmICh3aWR0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnRleHQubGluZVdpZHRoID0gd2lkdGg7XG4gICAgY29uc3Qgcm90YXRpb25SYWRpYW4gPSAocm90YXRpb24gKiBNYXRoLlBJKSAvIDE4MDtcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgIGNvbnRleHQuZWxsaXBzZShwb3MueCwgcG9zLnksIHJhZGl1cyAvIDIsIHJhZGl1cyAqIDIsIHJvdGF0aW9uUmFkaWFuLCBzdGFydCwgZW5kKTtcbiAgICBjb250ZXh0LnN0cm9rZSgpO1xufVxuZXhwb3J0cy5kcmF3RWxsaXBzZSA9IGRyYXdFbGxpcHNlO1xuZnVuY3Rpb24gYWx0ZXJIc2woY29sb3IsIHR5cGUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaDogY29sb3IuaCxcbiAgICAgICAgczogY29sb3IucyxcbiAgICAgICAgbDogY29sb3IubCArICh0eXBlID09PSBFbnVtc18xLkFsdGVyVHlwZS5kYXJrZW4gPyAtMSA6IDEpICogdmFsdWUsXG4gICAgfTtcbn1cbmV4cG9ydHMuYWx0ZXJIc2wgPSBhbHRlckhzbDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DaXJjbGUgPSB2b2lkIDA7XG5jb25zdCBSYW5nZV8xID0gcmVxdWlyZShcIi4vUmFuZ2VcIik7XG5jb25zdCBOdW1iZXJVdGlsc18xID0gcmVxdWlyZShcIi4vTnVtYmVyVXRpbHNcIik7XG5jbGFzcyBDaXJjbGUgZXh0ZW5kcyBSYW5nZV8xLlJhbmdlIHtcbiAgICBjb25zdHJ1Y3Rvcih4LCB5LCByYWRpdXMpIHtcbiAgICAgICAgc3VwZXIoeCwgeSk7XG4gICAgICAgIHRoaXMucmFkaXVzID0gcmFkaXVzO1xuICAgIH1cbiAgICBjb250YWlucyhwb2ludCkge1xuICAgICAgICByZXR1cm4gKDAsIE51bWJlclV0aWxzXzEuZ2V0RGlzdGFuY2UpKHBvaW50LCB0aGlzLnBvc2l0aW9uKSA8PSB0aGlzLnJhZGl1cztcbiAgICB9XG4gICAgaW50ZXJzZWN0cyhyYW5nZSkge1xuICAgICAgICBjb25zdCByZWN0ID0gcmFuZ2U7XG4gICAgICAgIGNvbnN0IGNpcmNsZSA9IHJhbmdlO1xuICAgICAgICBjb25zdCBwb3MxID0gdGhpcy5wb3NpdGlvbjtcbiAgICAgICAgY29uc3QgcG9zMiA9IHJhbmdlLnBvc2l0aW9uO1xuICAgICAgICBjb25zdCB4RGlzdCA9IE1hdGguYWJzKHBvczIueCAtIHBvczEueCk7XG4gICAgICAgIGNvbnN0IHlEaXN0ID0gTWF0aC5hYnMocG9zMi55IC0gcG9zMS55KTtcbiAgICAgICAgY29uc3QgciA9IHRoaXMucmFkaXVzO1xuICAgICAgICBpZiAoY2lyY2xlLnJhZGl1cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCByU3VtID0gciArIGNpcmNsZS5yYWRpdXM7XG4gICAgICAgICAgICBjb25zdCBkaXN0ID0gTWF0aC5zcXJ0KHhEaXN0ICogeERpc3QgKyB5RGlzdCArIHlEaXN0KTtcbiAgICAgICAgICAgIHJldHVybiByU3VtID4gZGlzdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChyZWN0LnNpemUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgdyA9IHJlY3Quc2l6ZS53aWR0aDtcbiAgICAgICAgICAgIGNvbnN0IGggPSByZWN0LnNpemUuaGVpZ2h0O1xuICAgICAgICAgICAgY29uc3QgZWRnZXMgPSBNYXRoLnBvdyh4RGlzdCAtIHcsIDIpICsgTWF0aC5wb3coeURpc3QgLSBoLCAyKTtcbiAgICAgICAgICAgIGlmICh4RGlzdCA+IHIgKyB3IHx8IHlEaXN0ID4gciArIGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoeERpc3QgPD0gdyB8fCB5RGlzdCA8PSBoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZWRnZXMgPD0gciAqIHI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmV4cG9ydHMuQ2lyY2xlID0gQ2lyY2xlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNpcmNsZVdhcnAgPSB2b2lkIDA7XG5jb25zdCBSZWN0YW5nbGVfMSA9IHJlcXVpcmUoXCIuL1JlY3RhbmdsZVwiKTtcbmNvbnN0IENpcmNsZV8xID0gcmVxdWlyZShcIi4vQ2lyY2xlXCIpO1xuY2xhc3MgQ2lyY2xlV2FycCBleHRlbmRzIENpcmNsZV8xLkNpcmNsZSB7XG4gICAgY29uc3RydWN0b3IoeCwgeSwgcmFkaXVzLCBjYW52YXNTaXplKSB7XG4gICAgICAgIHN1cGVyKHgsIHksIHJhZGl1cyk7XG4gICAgICAgIHRoaXMuY2FudmFzU2l6ZSA9IGNhbnZhc1NpemU7XG4gICAgICAgIHRoaXMuY2FudmFzU2l6ZSA9IHtcbiAgICAgICAgICAgIGhlaWdodDogY2FudmFzU2l6ZS5oZWlnaHQsXG4gICAgICAgICAgICB3aWR0aDogY2FudmFzU2l6ZS53aWR0aCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29udGFpbnMocG9pbnQpIHtcbiAgICAgICAgaWYgKHN1cGVyLmNvbnRhaW5zKHBvaW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcG9zTkUgPSB7XG4gICAgICAgICAgICB4OiBwb2ludC54IC0gdGhpcy5jYW52YXNTaXplLndpZHRoLFxuICAgICAgICAgICAgeTogcG9pbnQueSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHN1cGVyLmNvbnRhaW5zKHBvc05FKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcG9zU0UgPSB7XG4gICAgICAgICAgICB4OiBwb2ludC54IC0gdGhpcy5jYW52YXNTaXplLndpZHRoLFxuICAgICAgICAgICAgeTogcG9pbnQueSAtIHRoaXMuY2FudmFzU2l6ZS5oZWlnaHQsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChzdXBlci5jb250YWlucyhwb3NTRSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBvc1NXID0ge1xuICAgICAgICAgICAgeDogcG9pbnQueCxcbiAgICAgICAgICAgIHk6IHBvaW50LnkgLSB0aGlzLmNhbnZhc1NpemUuaGVpZ2h0LFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gc3VwZXIuY29udGFpbnMocG9zU1cpO1xuICAgIH1cbiAgICBpbnRlcnNlY3RzKHJhbmdlKSB7XG4gICAgICAgIGlmIChzdXBlci5pbnRlcnNlY3RzKHJhbmdlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVjdCA9IHJhbmdlO1xuICAgICAgICBjb25zdCBjaXJjbGUgPSByYW5nZTtcbiAgICAgICAgY29uc3QgbmV3UG9zID0ge1xuICAgICAgICAgICAgeDogcmFuZ2UucG9zaXRpb24ueCAtIHRoaXMuY2FudmFzU2l6ZS53aWR0aCxcbiAgICAgICAgICAgIHk6IHJhbmdlLnBvc2l0aW9uLnkgLSB0aGlzLmNhbnZhc1NpemUuaGVpZ2h0LFxuICAgICAgICB9O1xuICAgICAgICBpZiAoY2lyY2xlLnJhZGl1cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCBiaWdnZXJDaXJjbGUgPSBuZXcgQ2lyY2xlXzEuQ2lyY2xlKG5ld1Bvcy54LCBuZXdQb3MueSwgY2lyY2xlLnJhZGl1cyAqIDIpO1xuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLmludGVyc2VjdHMoYmlnZ2VyQ2lyY2xlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChyZWN0LnNpemUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgcmVjdFNXID0gbmV3IFJlY3RhbmdsZV8xLlJlY3RhbmdsZShuZXdQb3MueCwgbmV3UG9zLnksIHJlY3Quc2l6ZS53aWR0aCAqIDIsIHJlY3Quc2l6ZS5oZWlnaHQgKiAyKTtcbiAgICAgICAgICAgIHJldHVybiBzdXBlci5pbnRlcnNlY3RzKHJlY3RTVyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmV4cG9ydHMuQ2lyY2xlV2FycCA9IENpcmNsZVdhcnA7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0SHNsQW5pbWF0aW9uRnJvbUhzbCA9IGV4cG9ydHMuZ2V0SHNsRnJvbUFuaW1hdGlvbiA9IGV4cG9ydHMuZ2V0TGlua1JhbmRvbUNvbG9yID0gZXhwb3J0cy5nZXRMaW5rQ29sb3IgPSBleHBvcnRzLmNvbG9yTWl4ID0gZXhwb3J0cy5nZXRTdHlsZUZyb21Ic3YgPSBleHBvcnRzLmdldFN0eWxlRnJvbUhzbCA9IGV4cG9ydHMuZ2V0U3R5bGVGcm9tUmdiID0gZXhwb3J0cy5nZXRSYW5kb21SZ2JDb2xvciA9IGV4cG9ydHMucmdiYVRvSHN2YSA9IGV4cG9ydHMucmdiVG9Ic3YgPSBleHBvcnRzLmhzdmFUb1JnYmEgPSBleHBvcnRzLmhzdlRvUmdiID0gZXhwb3J0cy5oc3ZhVG9Ic2xhID0gZXhwb3J0cy5oc3ZUb0hzbCA9IGV4cG9ydHMuaHNsYVRvSHN2YSA9IGV4cG9ydHMuaHNsVG9Ic3YgPSBleHBvcnRzLmhzbGFUb1JnYmEgPSBleHBvcnRzLmhzbFRvUmdiID0gZXhwb3J0cy5zdHJpbmdUb1JnYiA9IGV4cG9ydHMuc3RyaW5nVG9BbHBoYSA9IGV4cG9ydHMucmdiVG9Ic2wgPSBleHBvcnRzLmNvbG9yVG9Ic2wgPSBleHBvcnRzLmNvbG9yVG9SZ2IgPSB2b2lkIDA7XG5jb25zdCBVdGlsc18xID0gcmVxdWlyZShcIi4vVXRpbHNcIik7XG5jb25zdCBDb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL0NvbnN0YW50c1wiKTtcbmNvbnN0IE51bWJlclV0aWxzXzEgPSByZXF1aXJlKFwiLi9OdW1iZXJVdGlsc1wiKTtcbmNvbnN0IEVudW1zXzEgPSByZXF1aXJlKFwiLi4vRW51bXNcIik7XG5mdW5jdGlvbiBodWUycmdiKHAsIHEsIHQpIHtcbiAgICBsZXQgdENhbGMgPSB0O1xuICAgIGlmICh0Q2FsYyA8IDApIHtcbiAgICAgICAgdENhbGMgKz0gMTtcbiAgICB9XG4gICAgaWYgKHRDYWxjID4gMSkge1xuICAgICAgICB0Q2FsYyAtPSAxO1xuICAgIH1cbiAgICBpZiAodENhbGMgPCAxIC8gNikge1xuICAgICAgICByZXR1cm4gcCArIChxIC0gcCkgKiA2ICogdENhbGM7XG4gICAgfVxuICAgIGlmICh0Q2FsYyA8IDEgLyAyKSB7XG4gICAgICAgIHJldHVybiBxO1xuICAgIH1cbiAgICBpZiAodENhbGMgPCAyIC8gMykge1xuICAgICAgICByZXR1cm4gcCArIChxIC0gcCkgKiAoMiAvIDMgLSB0Q2FsYykgKiA2O1xuICAgIH1cbiAgICByZXR1cm4gcDtcbn1cbmZ1bmN0aW9uIHN0cmluZ1RvUmdiYShpbnB1dCkge1xuICAgIGlmIChpbnB1dC5zdGFydHNXaXRoKFwicmdiXCIpKSB7XG4gICAgICAgIGNvbnN0IHJlZ2V4ID0gL3JnYmE/XFwoXFxzKihcXGQrKVxccyosXFxzKihcXGQrKVxccyosXFxzKihcXGQrKVxccyooLFxccyooW1xcZC5dKylcXHMqKT9cXCkvaTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gcmVnZXguZXhlYyhpbnB1dCk7XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgIGE6IHJlc3VsdC5sZW5ndGggPiA0ID8gcGFyc2VGbG9hdChyZXN1bHRbNV0pIDogMSxcbiAgICAgICAgICAgICAgICBiOiBwYXJzZUludChyZXN1bHRbM10sIDEwKSxcbiAgICAgICAgICAgICAgICBnOiBwYXJzZUludChyZXN1bHRbMl0sIDEwKSxcbiAgICAgICAgICAgICAgICByOiBwYXJzZUludChyZXN1bHRbMV0sIDEwKSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIGlmIChpbnB1dC5zdGFydHNXaXRoKFwiaHNsXCIpKSB7XG4gICAgICAgIGNvbnN0IHJlZ2V4ID0gL2hzbGE/XFwoXFxzKihcXGQrKVxccyosXFxzKihcXGQrKSVcXHMqLFxccyooXFxkKyklXFxzKigsXFxzKihbXFxkLl0rKVxccyopP1xcKS9pO1xuICAgICAgICBjb25zdCByZXN1bHQgPSByZWdleC5leGVjKGlucHV0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICAgICAgPyBoc2xhVG9SZ2JhKHtcbiAgICAgICAgICAgICAgICBhOiByZXN1bHQubGVuZ3RoID4gNCA/IHBhcnNlRmxvYXQocmVzdWx0WzVdKSA6IDEsXG4gICAgICAgICAgICAgICAgaDogcGFyc2VJbnQocmVzdWx0WzFdLCAxMCksXG4gICAgICAgICAgICAgICAgbDogcGFyc2VJbnQocmVzdWx0WzNdLCAxMCksXG4gICAgICAgICAgICAgICAgczogcGFyc2VJbnQocmVzdWx0WzJdLCAxMCksXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlucHV0LnN0YXJ0c1dpdGgoXCJoc3ZcIikpIHtcbiAgICAgICAgY29uc3QgcmVnZXggPSAvaHN2YT9cXChcXHMqKFxcZCspwrBcXHMqLFxccyooXFxkKyklXFxzKixcXHMqKFxcZCspJVxccyooLFxccyooW1xcZC5dKylcXHMqKT9cXCkvaTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gcmVnZXguZXhlYyhpbnB1dCk7XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgICAgID8gaHN2YVRvUmdiYSh7XG4gICAgICAgICAgICAgICAgYTogcmVzdWx0Lmxlbmd0aCA+IDQgPyBwYXJzZUZsb2F0KHJlc3VsdFs1XSkgOiAxLFxuICAgICAgICAgICAgICAgIGg6IHBhcnNlSW50KHJlc3VsdFsxXSwgMTApLFxuICAgICAgICAgICAgICAgIHM6IHBhcnNlSW50KHJlc3VsdFsyXSwgMTApLFxuICAgICAgICAgICAgICAgIHY6IHBhcnNlSW50KHJlc3VsdFszXSwgMTApLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3Qgc2hvcnRoYW5kUmVnZXggPSAvXiM/KFthLWZcXGRdKShbYS1mXFxkXSkoW2EtZlxcZF0pKFthLWZcXGRdKT8kL2k7XG4gICAgICAgIGNvbnN0IGhleEZpeGVkID0gaW5wdXQucmVwbGFjZShzaG9ydGhhbmRSZWdleCwgKF9tLCByLCBnLCBiLCBhKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gciArIHIgKyBnICsgZyArIGIgKyBiICsgKGEgIT09IHVuZGVmaW5lZCA/IGEgKyBhIDogXCJcIik7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByZWdleCA9IC9eIz8oW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pPyQvaTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gcmVnZXguZXhlYyhoZXhGaXhlZCk7XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgIGE6IHJlc3VsdFs0XSAhPT0gdW5kZWZpbmVkID8gcGFyc2VJbnQocmVzdWx0WzRdLCAxNikgLyAweGZmIDogMSxcbiAgICAgICAgICAgICAgICBiOiBwYXJzZUludChyZXN1bHRbM10sIDE2KSxcbiAgICAgICAgICAgICAgICBnOiBwYXJzZUludChyZXN1bHRbMl0sIDE2KSxcbiAgICAgICAgICAgICAgICByOiBwYXJzZUludChyZXN1bHRbMV0sIDE2KSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNvbG9yVG9SZ2IoaW5wdXQsIGluZGV4LCB1c2VJbmRleCA9IHRydWUpIHtcbiAgICB2YXIgX2EsIF9iLCBfYztcbiAgICBpZiAoaW5wdXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGNvbG9yID0gdHlwZW9mIGlucHV0ID09PSBcInN0cmluZ1wiID8geyB2YWx1ZTogaW5wdXQgfSA6IGlucHV0O1xuICAgIGxldCByZXM7XG4gICAgaWYgKHR5cGVvZiBjb2xvci52YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBpZiAoY29sb3IudmFsdWUgPT09IENvbnN0YW50c18xLkNvbnN0YW50cy5yYW5kb21Db2xvclZhbHVlKSB7XG4gICAgICAgICAgICByZXMgPSBnZXRSYW5kb21SZ2JDb2xvcigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzID0gc3RyaW5nVG9SZ2IoY29sb3IudmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoY29sb3IudmFsdWUgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgY29uc3QgY29sb3JTZWxlY3RlZCA9ICgwLCBVdGlsc18xLml0ZW1Gcm9tQXJyYXkpKGNvbG9yLnZhbHVlLCBpbmRleCwgdXNlSW5kZXgpO1xuICAgICAgICAgICAgcmVzID0gY29sb3JUb1JnYih7IHZhbHVlOiBjb2xvclNlbGVjdGVkIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgY29sb3JWYWx1ZSA9IGNvbG9yLnZhbHVlO1xuICAgICAgICAgICAgY29uc3QgcmdiQ29sb3IgPSAoX2EgPSBjb2xvclZhbHVlLnJnYikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogY29sb3IudmFsdWU7XG4gICAgICAgICAgICBpZiAocmdiQ29sb3IuciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmVzID0gcmdiQ29sb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBoc2xDb2xvciA9IChfYiA9IGNvbG9yVmFsdWUuaHNsKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBjb2xvci52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAoaHNsQ29sb3IuaCAhPT0gdW5kZWZpbmVkICYmIGhzbENvbG9yLmwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXMgPSBoc2xUb1JnYihoc2xDb2xvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBoc3ZDb2xvciA9IChfYyA9IGNvbG9yVmFsdWUuaHN2KSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBjb2xvci52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhzdkNvbG9yLmggIT09IHVuZGVmaW5lZCAmJiBoc3ZDb2xvci52ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IGhzdlRvUmdiKGhzdkNvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy5jb2xvclRvUmdiID0gY29sb3JUb1JnYjtcbmZ1bmN0aW9uIGNvbG9yVG9Ic2woY29sb3IsIGluZGV4LCB1c2VJbmRleCA9IHRydWUpIHtcbiAgICBjb25zdCByZ2IgPSBjb2xvclRvUmdiKGNvbG9yLCBpbmRleCwgdXNlSW5kZXgpO1xuICAgIHJldHVybiByZ2IgIT09IHVuZGVmaW5lZCA/IHJnYlRvSHNsKHJnYikgOiB1bmRlZmluZWQ7XG59XG5leHBvcnRzLmNvbG9yVG9Ic2wgPSBjb2xvclRvSHNsO1xuZnVuY3Rpb24gcmdiVG9Ic2woY29sb3IpIHtcbiAgICBjb25zdCByMSA9IGNvbG9yLnIgLyAyNTU7XG4gICAgY29uc3QgZzEgPSBjb2xvci5nIC8gMjU1O1xuICAgIGNvbnN0IGIxID0gY29sb3IuYiAvIDI1NTtcbiAgICBjb25zdCBtYXggPSBNYXRoLm1heChyMSwgZzEsIGIxKTtcbiAgICBjb25zdCBtaW4gPSBNYXRoLm1pbihyMSwgZzEsIGIxKTtcbiAgICBjb25zdCByZXMgPSB7XG4gICAgICAgIGg6IDAsXG4gICAgICAgIGw6IChtYXggKyBtaW4pIC8gMixcbiAgICAgICAgczogMCxcbiAgICB9O1xuICAgIGlmIChtYXggIT0gbWluKSB7XG4gICAgICAgIHJlcy5zID0gcmVzLmwgPCAwLjUgPyAobWF4IC0gbWluKSAvIChtYXggKyBtaW4pIDogKG1heCAtIG1pbikgLyAoMi4wIC0gbWF4IC0gbWluKTtcbiAgICAgICAgcmVzLmggPVxuICAgICAgICAgICAgcjEgPT09IG1heFxuICAgICAgICAgICAgICAgID8gKGcxIC0gYjEpIC8gKG1heCAtIG1pbilcbiAgICAgICAgICAgICAgICA6IChyZXMuaCA9IGcxID09PSBtYXggPyAyLjAgKyAoYjEgLSByMSkgLyAobWF4IC0gbWluKSA6IDQuMCArIChyMSAtIGcxKSAvIChtYXggLSBtaW4pKTtcbiAgICB9XG4gICAgcmVzLmwgKj0gMTAwO1xuICAgIHJlcy5zICo9IDEwMDtcbiAgICByZXMuaCAqPSA2MDtcbiAgICBpZiAocmVzLmggPCAwKSB7XG4gICAgICAgIHJlcy5oICs9IDM2MDtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMucmdiVG9Ic2wgPSByZ2JUb0hzbDtcbmZ1bmN0aW9uIHN0cmluZ1RvQWxwaGEoaW5wdXQpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIChfYSA9IHN0cmluZ1RvUmdiYShpbnB1dCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hO1xufVxuZXhwb3J0cy5zdHJpbmdUb0FscGhhID0gc3RyaW5nVG9BbHBoYTtcbmZ1bmN0aW9uIHN0cmluZ1RvUmdiKGlucHV0KSB7XG4gICAgcmV0dXJuIHN0cmluZ1RvUmdiYShpbnB1dCk7XG59XG5leHBvcnRzLnN0cmluZ1RvUmdiID0gc3RyaW5nVG9SZ2I7XG5mdW5jdGlvbiBoc2xUb1JnYihoc2wpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7IGI6IDAsIGc6IDAsIHI6IDAgfTtcbiAgICBjb25zdCBoc2xQZXJjZW50ID0ge1xuICAgICAgICBoOiBoc2wuaCAvIDM2MCxcbiAgICAgICAgbDogaHNsLmwgLyAxMDAsXG4gICAgICAgIHM6IGhzbC5zIC8gMTAwLFxuICAgIH07XG4gICAgaWYgKGhzbFBlcmNlbnQucyA9PT0gMCkge1xuICAgICAgICByZXN1bHQuYiA9IGhzbFBlcmNlbnQubDtcbiAgICAgICAgcmVzdWx0LmcgPSBoc2xQZXJjZW50Lmw7XG4gICAgICAgIHJlc3VsdC5yID0gaHNsUGVyY2VudC5sO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgcSA9IGhzbFBlcmNlbnQubCA8IDAuNVxuICAgICAgICAgICAgPyBoc2xQZXJjZW50LmwgKiAoMSArIGhzbFBlcmNlbnQucylcbiAgICAgICAgICAgIDogaHNsUGVyY2VudC5sICsgaHNsUGVyY2VudC5zIC0gaHNsUGVyY2VudC5sICogaHNsUGVyY2VudC5zO1xuICAgICAgICBjb25zdCBwID0gMiAqIGhzbFBlcmNlbnQubCAtIHE7XG4gICAgICAgIHJlc3VsdC5yID0gaHVlMnJnYihwLCBxLCBoc2xQZXJjZW50LmggKyAxIC8gMyk7XG4gICAgICAgIHJlc3VsdC5nID0gaHVlMnJnYihwLCBxLCBoc2xQZXJjZW50LmgpO1xuICAgICAgICByZXN1bHQuYiA9IGh1ZTJyZ2IocCwgcSwgaHNsUGVyY2VudC5oIC0gMSAvIDMpO1xuICAgIH1cbiAgICByZXN1bHQuciA9IE1hdGguZmxvb3IocmVzdWx0LnIgKiAyNTUpO1xuICAgIHJlc3VsdC5nID0gTWF0aC5mbG9vcihyZXN1bHQuZyAqIDI1NSk7XG4gICAgcmVzdWx0LmIgPSBNYXRoLmZsb29yKHJlc3VsdC5iICogMjU1KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0cy5oc2xUb1JnYiA9IGhzbFRvUmdiO1xuZnVuY3Rpb24gaHNsYVRvUmdiYShoc2xhKSB7XG4gICAgY29uc3QgcmdiUmVzdWx0ID0gaHNsVG9SZ2IoaHNsYSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYTogaHNsYS5hLFxuICAgICAgICBiOiByZ2JSZXN1bHQuYixcbiAgICAgICAgZzogcmdiUmVzdWx0LmcsXG4gICAgICAgIHI6IHJnYlJlc3VsdC5yLFxuICAgIH07XG59XG5leHBvcnRzLmhzbGFUb1JnYmEgPSBoc2xhVG9SZ2JhO1xuZnVuY3Rpb24gaHNsVG9Ic3YoaHNsKSB7XG4gICAgY29uc3QgbCA9IGhzbC5sIC8gMTAwLCBzbCA9IGhzbC5zIC8gMTAwO1xuICAgIGNvbnN0IHYgPSBsICsgc2wgKiBNYXRoLm1pbihsLCAxIC0gbCksIHN2ID0gIXYgPyAwIDogMiAqICgxIC0gbCAvIHYpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGg6IGhzbC5oLFxuICAgICAgICBzOiBzdiAqIDEwMCxcbiAgICAgICAgdjogdiAqIDEwMCxcbiAgICB9O1xufVxuZXhwb3J0cy5oc2xUb0hzdiA9IGhzbFRvSHN2O1xuZnVuY3Rpb24gaHNsYVRvSHN2YShoc2xhKSB7XG4gICAgY29uc3QgaHN2UmVzdWx0ID0gaHNsVG9Ic3YoaHNsYSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYTogaHNsYS5hLFxuICAgICAgICBoOiBoc3ZSZXN1bHQuaCxcbiAgICAgICAgczogaHN2UmVzdWx0LnMsXG4gICAgICAgIHY6IGhzdlJlc3VsdC52LFxuICAgIH07XG59XG5leHBvcnRzLmhzbGFUb0hzdmEgPSBoc2xhVG9Ic3ZhO1xuZnVuY3Rpb24gaHN2VG9Ic2woaHN2KSB7XG4gICAgY29uc3QgdiA9IGhzdi52IC8gMTAwLCBzdiA9IGhzdi5zIC8gMTAwO1xuICAgIGNvbnN0IGwgPSB2ICogKDEgLSBzdiAvIDIpLCBzbCA9IGwgPT09IDAgfHwgbCA9PT0gMSA/IDAgOiAodiAtIGwpIC8gTWF0aC5taW4obCwgMSAtIGwpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGg6IGhzdi5oLFxuICAgICAgICBsOiBsICogMTAwLFxuICAgICAgICBzOiBzbCAqIDEwMCxcbiAgICB9O1xufVxuZXhwb3J0cy5oc3ZUb0hzbCA9IGhzdlRvSHNsO1xuZnVuY3Rpb24gaHN2YVRvSHNsYShoc3ZhKSB7XG4gICAgY29uc3QgaHNsUmVzdWx0ID0gaHN2VG9Ic2woaHN2YSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYTogaHN2YS5hLFxuICAgICAgICBoOiBoc2xSZXN1bHQuaCxcbiAgICAgICAgbDogaHNsUmVzdWx0LmwsXG4gICAgICAgIHM6IGhzbFJlc3VsdC5zLFxuICAgIH07XG59XG5leHBvcnRzLmhzdmFUb0hzbGEgPSBoc3ZhVG9Ic2xhO1xuZnVuY3Rpb24gaHN2VG9SZ2IoaHN2KSB7XG4gICAgY29uc3QgcmVzdWx0ID0geyBiOiAwLCBnOiAwLCByOiAwIH07XG4gICAgY29uc3QgaHN2UGVyY2VudCA9IHtcbiAgICAgICAgaDogaHN2LmggLyA2MCxcbiAgICAgICAgczogaHN2LnMgLyAxMDAsXG4gICAgICAgIHY6IGhzdi52IC8gMTAwLFxuICAgIH07XG4gICAgY29uc3QgYyA9IGhzdlBlcmNlbnQudiAqIGhzdlBlcmNlbnQucywgeCA9IGMgKiAoMSAtIE1hdGguYWJzKChoc3ZQZXJjZW50LmggJSAyKSAtIDEpKTtcbiAgICBsZXQgdGVtcFJnYjtcbiAgICBpZiAoaHN2UGVyY2VudC5oID49IDAgJiYgaHN2UGVyY2VudC5oIDw9IDEpIHtcbiAgICAgICAgdGVtcFJnYiA9IHtcbiAgICAgICAgICAgIHI6IGMsXG4gICAgICAgICAgICBnOiB4LFxuICAgICAgICAgICAgYjogMCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaHN2UGVyY2VudC5oID4gMSAmJiBoc3ZQZXJjZW50LmggPD0gMikge1xuICAgICAgICB0ZW1wUmdiID0ge1xuICAgICAgICAgICAgcjogeCxcbiAgICAgICAgICAgIGc6IGMsXG4gICAgICAgICAgICBiOiAwLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChoc3ZQZXJjZW50LmggPiAyICYmIGhzdlBlcmNlbnQuaCA8PSAzKSB7XG4gICAgICAgIHRlbXBSZ2IgPSB7XG4gICAgICAgICAgICByOiAwLFxuICAgICAgICAgICAgZzogYyxcbiAgICAgICAgICAgIGI6IHgsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKGhzdlBlcmNlbnQuaCA+IDMgJiYgaHN2UGVyY2VudC5oIDw9IDQpIHtcbiAgICAgICAgdGVtcFJnYiA9IHtcbiAgICAgICAgICAgIHI6IDAsXG4gICAgICAgICAgICBnOiB4LFxuICAgICAgICAgICAgYjogYyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaHN2UGVyY2VudC5oID4gNCAmJiBoc3ZQZXJjZW50LmggPD0gNSkge1xuICAgICAgICB0ZW1wUmdiID0ge1xuICAgICAgICAgICAgcjogeCxcbiAgICAgICAgICAgIGc6IDAsXG4gICAgICAgICAgICBiOiBjLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChoc3ZQZXJjZW50LmggPiA1ICYmIGhzdlBlcmNlbnQuaCA8PSA2KSB7XG4gICAgICAgIHRlbXBSZ2IgPSB7XG4gICAgICAgICAgICByOiBjLFxuICAgICAgICAgICAgZzogMCxcbiAgICAgICAgICAgIGI6IHgsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmICh0ZW1wUmdiKSB7XG4gICAgICAgIGNvbnN0IG0gPSBoc3ZQZXJjZW50LnYgLSBjO1xuICAgICAgICByZXN1bHQuciA9IE1hdGguZmxvb3IoKHRlbXBSZ2IuciArIG0pICogMjU1KTtcbiAgICAgICAgcmVzdWx0LmcgPSBNYXRoLmZsb29yKCh0ZW1wUmdiLmcgKyBtKSAqIDI1NSk7XG4gICAgICAgIHJlc3VsdC5iID0gTWF0aC5mbG9vcigodGVtcFJnYi5iICsgbSkgKiAyNTUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0cy5oc3ZUb1JnYiA9IGhzdlRvUmdiO1xuZnVuY3Rpb24gaHN2YVRvUmdiYShoc3ZhKSB7XG4gICAgY29uc3QgcmdiUmVzdWx0ID0gaHN2VG9SZ2IoaHN2YSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYTogaHN2YS5hLFxuICAgICAgICBiOiByZ2JSZXN1bHQuYixcbiAgICAgICAgZzogcmdiUmVzdWx0LmcsXG4gICAgICAgIHI6IHJnYlJlc3VsdC5yLFxuICAgIH07XG59XG5leHBvcnRzLmhzdmFUb1JnYmEgPSBoc3ZhVG9SZ2JhO1xuZnVuY3Rpb24gcmdiVG9Ic3YocmdiKSB7XG4gICAgY29uc3QgcmdiUGVyY2VudCA9IHtcbiAgICAgICAgcjogcmdiLnIgLyAyNTUsXG4gICAgICAgIGc6IHJnYi5nIC8gMjU1LFxuICAgICAgICBiOiByZ2IuYiAvIDI1NSxcbiAgICB9LCB4TWF4ID0gTWF0aC5tYXgocmdiUGVyY2VudC5yLCByZ2JQZXJjZW50LmcsIHJnYlBlcmNlbnQuYiksIHhNaW4gPSBNYXRoLm1pbihyZ2JQZXJjZW50LnIsIHJnYlBlcmNlbnQuZywgcmdiUGVyY2VudC5iKSwgdiA9IHhNYXgsIGMgPSB4TWF4IC0geE1pbjtcbiAgICBsZXQgaCA9IDA7XG4gICAgaWYgKHYgPT09IHJnYlBlcmNlbnQucikge1xuICAgICAgICBoID0gNjAgKiAoKHJnYlBlcmNlbnQuZyAtIHJnYlBlcmNlbnQuYikgLyBjKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodiA9PT0gcmdiUGVyY2VudC5nKSB7XG4gICAgICAgIGggPSA2MCAqICgyICsgKHJnYlBlcmNlbnQuYiAtIHJnYlBlcmNlbnQucikgLyBjKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodiA9PT0gcmdiUGVyY2VudC5iKSB7XG4gICAgICAgIGggPSA2MCAqICg0ICsgKHJnYlBlcmNlbnQuciAtIHJnYlBlcmNlbnQuZykgLyBjKTtcbiAgICB9XG4gICAgY29uc3QgcyA9ICF2ID8gMCA6IGMgLyB2O1xuICAgIHJldHVybiB7XG4gICAgICAgIGgsXG4gICAgICAgIHM6IHMgKiAxMDAsXG4gICAgICAgIHY6IHYgKiAxMDAsXG4gICAgfTtcbn1cbmV4cG9ydHMucmdiVG9Ic3YgPSByZ2JUb0hzdjtcbmZ1bmN0aW9uIHJnYmFUb0hzdmEocmdiYSkge1xuICAgIGNvbnN0IGhzdlJlc3VsdCA9IHJnYlRvSHN2KHJnYmEpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGE6IHJnYmEuYSxcbiAgICAgICAgaDogaHN2UmVzdWx0LmgsXG4gICAgICAgIHM6IGhzdlJlc3VsdC5zLFxuICAgICAgICB2OiBoc3ZSZXN1bHQudixcbiAgICB9O1xufVxuZXhwb3J0cy5yZ2JhVG9Ic3ZhID0gcmdiYVRvSHN2YTtcbmZ1bmN0aW9uIGdldFJhbmRvbVJnYkNvbG9yKG1pbikge1xuICAgIGNvbnN0IGZpeGVkTWluID0gbWluICE9PSBudWxsICYmIG1pbiAhPT0gdm9pZCAwID8gbWluIDogMDtcbiAgICByZXR1cm4ge1xuICAgICAgICBiOiBNYXRoLmZsb29yKCgwLCBOdW1iZXJVdGlsc18xLnJhbmRvbUluUmFuZ2UpKCgwLCBOdW1iZXJVdGlsc18xLnNldFJhbmdlVmFsdWUpKGZpeGVkTWluLCAyNTYpKSksXG4gICAgICAgIGc6IE1hdGguZmxvb3IoKDAsIE51bWJlclV0aWxzXzEucmFuZG9tSW5SYW5nZSkoKDAsIE51bWJlclV0aWxzXzEuc2V0UmFuZ2VWYWx1ZSkoZml4ZWRNaW4sIDI1NikpKSxcbiAgICAgICAgcjogTWF0aC5mbG9vcigoMCwgTnVtYmVyVXRpbHNfMS5yYW5kb21JblJhbmdlKSgoMCwgTnVtYmVyVXRpbHNfMS5zZXRSYW5nZVZhbHVlKShmaXhlZE1pbiwgMjU2KSkpLFxuICAgIH07XG59XG5leHBvcnRzLmdldFJhbmRvbVJnYkNvbG9yID0gZ2V0UmFuZG9tUmdiQ29sb3I7XG5mdW5jdGlvbiBnZXRTdHlsZUZyb21SZ2IoY29sb3IsIG9wYWNpdHkpIHtcbiAgICByZXR1cm4gYHJnYmEoJHtjb2xvci5yfSwgJHtjb2xvci5nfSwgJHtjb2xvci5ifSwgJHtvcGFjaXR5ICE9PSBudWxsICYmIG9wYWNpdHkgIT09IHZvaWQgMCA/IG9wYWNpdHkgOiAxfSlgO1xufVxuZXhwb3J0cy5nZXRTdHlsZUZyb21SZ2IgPSBnZXRTdHlsZUZyb21SZ2I7XG5mdW5jdGlvbiBnZXRTdHlsZUZyb21Ic2woY29sb3IsIG9wYWNpdHkpIHtcbiAgICByZXR1cm4gYGhzbGEoJHtjb2xvci5ofSwgJHtjb2xvci5zfSUsICR7Y29sb3IubH0lLCAke29wYWNpdHkgIT09IG51bGwgJiYgb3BhY2l0eSAhPT0gdm9pZCAwID8gb3BhY2l0eSA6IDF9KWA7XG59XG5leHBvcnRzLmdldFN0eWxlRnJvbUhzbCA9IGdldFN0eWxlRnJvbUhzbDtcbmZ1bmN0aW9uIGdldFN0eWxlRnJvbUhzdihjb2xvciwgb3BhY2l0eSkge1xuICAgIHJldHVybiBnZXRTdHlsZUZyb21Ic2woaHN2VG9Ic2woY29sb3IpLCBvcGFjaXR5KTtcbn1cbmV4cG9ydHMuZ2V0U3R5bGVGcm9tSHN2ID0gZ2V0U3R5bGVGcm9tSHN2O1xuZnVuY3Rpb24gY29sb3JNaXgoY29sb3IxLCBjb2xvcjIsIHNpemUxLCBzaXplMikge1xuICAgIGxldCByZ2IxID0gY29sb3IxO1xuICAgIGxldCByZ2IyID0gY29sb3IyO1xuICAgIGlmIChyZ2IxLnIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZ2IxID0gaHNsVG9SZ2IoY29sb3IxKTtcbiAgICB9XG4gICAgaWYgKHJnYjIuciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJnYjIgPSBoc2xUb1JnYihjb2xvcjIpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBiOiAoMCwgTnVtYmVyVXRpbHNfMS5taXgpKHJnYjEuYiwgcmdiMi5iLCBzaXplMSwgc2l6ZTIpLFxuICAgICAgICBnOiAoMCwgTnVtYmVyVXRpbHNfMS5taXgpKHJnYjEuZywgcmdiMi5nLCBzaXplMSwgc2l6ZTIpLFxuICAgICAgICByOiAoMCwgTnVtYmVyVXRpbHNfMS5taXgpKHJnYjEuciwgcmdiMi5yLCBzaXplMSwgc2l6ZTIpLFxuICAgIH07XG59XG5leHBvcnRzLmNvbG9yTWl4ID0gY29sb3JNaXg7XG5mdW5jdGlvbiBnZXRMaW5rQ29sb3IocDEsIHAyLCBsaW5rQ29sb3IpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGlmIChsaW5rQ29sb3IgPT09IENvbnN0YW50c18xLkNvbnN0YW50cy5yYW5kb21Db2xvclZhbHVlKSB7XG4gICAgICAgIHJldHVybiBnZXRSYW5kb21SZ2JDb2xvcigpO1xuICAgIH1cbiAgICBlbHNlIGlmIChsaW5rQ29sb3IgPT09IFwibWlkXCIpIHtcbiAgICAgICAgY29uc3Qgc291cmNlQ29sb3IgPSAoX2EgPSBwMS5nZXRGaWxsQ29sb3IoKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogcDEuZ2V0U3Ryb2tlQ29sb3IoKTtcbiAgICAgICAgY29uc3QgZGVzdENvbG9yID0gKF9iID0gcDIgPT09IG51bGwgfHwgcDIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHAyLmdldEZpbGxDb2xvcigpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBwMiA9PT0gbnVsbCB8fCBwMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogcDIuZ2V0U3Ryb2tlQ29sb3IoKTtcbiAgICAgICAgaWYgKHNvdXJjZUNvbG9yICYmIGRlc3RDb2xvciAmJiBwMikge1xuICAgICAgICAgICAgcmV0dXJuIGNvbG9yTWl4KHNvdXJjZUNvbG9yLCBkZXN0Q29sb3IsIHAxLmdldFJhZGl1cygpLCBwMi5nZXRSYWRpdXMoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBoc2xDb2xvciA9IHNvdXJjZUNvbG9yICE9PSBudWxsICYmIHNvdXJjZUNvbG9yICE9PSB2b2lkIDAgPyBzb3VyY2VDb2xvciA6IGRlc3RDb2xvcjtcbiAgICAgICAgICAgIGlmIChoc2xDb2xvcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBoc2xUb1JnYihoc2xDb2xvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBsaW5rQ29sb3I7XG4gICAgfVxufVxuZXhwb3J0cy5nZXRMaW5rQ29sb3IgPSBnZXRMaW5rQ29sb3I7XG5mdW5jdGlvbiBnZXRMaW5rUmFuZG9tQ29sb3Iob3B0Q29sb3IsIGJsaW5rLCBjb25zZW50KSB7XG4gICAgY29uc3QgY29sb3IgPSB0eXBlb2Ygb3B0Q29sb3IgPT09IFwic3RyaW5nXCIgPyBvcHRDb2xvciA6IG9wdENvbG9yLnZhbHVlO1xuICAgIGlmIChjb2xvciA9PT0gQ29uc3RhbnRzXzEuQ29uc3RhbnRzLnJhbmRvbUNvbG9yVmFsdWUpIHtcbiAgICAgICAgaWYgKGNvbnNlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBjb2xvclRvUmdiKHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogY29sb3IsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChibGluaykge1xuICAgICAgICAgICAgcmV0dXJuIENvbnN0YW50c18xLkNvbnN0YW50cy5yYW5kb21Db2xvclZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIENvbnN0YW50c18xLkNvbnN0YW50cy5taWRDb2xvclZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gY29sb3JUb1JnYih7XG4gICAgICAgICAgICB2YWx1ZTogY29sb3IsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuZ2V0TGlua1JhbmRvbUNvbG9yID0gZ2V0TGlua1JhbmRvbUNvbG9yO1xuZnVuY3Rpb24gZ2V0SHNsRnJvbUFuaW1hdGlvbihhbmltYXRpb24pIHtcbiAgICByZXR1cm4gYW5pbWF0aW9uICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyB7XG4gICAgICAgICAgICBoOiBhbmltYXRpb24uaC52YWx1ZSxcbiAgICAgICAgICAgIHM6IGFuaW1hdGlvbi5zLnZhbHVlLFxuICAgICAgICAgICAgbDogYW5pbWF0aW9uLmwudmFsdWUsXG4gICAgICAgIH1cbiAgICAgICAgOiB1bmRlZmluZWQ7XG59XG5leHBvcnRzLmdldEhzbEZyb21BbmltYXRpb24gPSBnZXRIc2xGcm9tQW5pbWF0aW9uO1xuZnVuY3Rpb24gZ2V0SHNsQW5pbWF0aW9uRnJvbUhzbChoc2wsIGFuaW1hdGlvbk9wdGlvbnMsIHJlZHVjZUZhY3Rvcikge1xuICAgIGNvbnN0IHJlc0NvbG9yID0ge1xuICAgICAgICBoOiB7XG4gICAgICAgICAgICBlbmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWU6IGhzbC5oLFxuICAgICAgICB9LFxuICAgICAgICBzOiB7XG4gICAgICAgICAgICBlbmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWU6IGhzbC5zLFxuICAgICAgICB9LFxuICAgICAgICBsOiB7XG4gICAgICAgICAgICBlbmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWU6IGhzbC5sLFxuICAgICAgICB9LFxuICAgIH07XG4gICAgaWYgKGFuaW1hdGlvbk9wdGlvbnMpIHtcbiAgICAgICAgc2V0Q29sb3JBbmltYXRpb24ocmVzQ29sb3IuaCwgYW5pbWF0aW9uT3B0aW9ucy5oLCByZWR1Y2VGYWN0b3IpO1xuICAgICAgICBzZXRDb2xvckFuaW1hdGlvbihyZXNDb2xvci5zLCBhbmltYXRpb25PcHRpb25zLnMsIHJlZHVjZUZhY3Rvcik7XG4gICAgICAgIHNldENvbG9yQW5pbWF0aW9uKHJlc0NvbG9yLmwsIGFuaW1hdGlvbk9wdGlvbnMubCwgcmVkdWNlRmFjdG9yKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc0NvbG9yO1xufVxuZXhwb3J0cy5nZXRIc2xBbmltYXRpb25Gcm9tSHNsID0gZ2V0SHNsQW5pbWF0aW9uRnJvbUhzbDtcbmZ1bmN0aW9uIHNldENvbG9yQW5pbWF0aW9uKGNvbG9yVmFsdWUsIGNvbG9yQW5pbWF0aW9uLCByZWR1Y2VGYWN0b3IpIHtcbiAgICBjb2xvclZhbHVlLmVuYWJsZSA9IGNvbG9yQW5pbWF0aW9uLmVuYWJsZTtcbiAgICBpZiAoY29sb3JWYWx1ZS5lbmFibGUpIHtcbiAgICAgICAgY29sb3JWYWx1ZS52ZWxvY2l0eSA9IChjb2xvckFuaW1hdGlvbi5zcGVlZCAvIDEwMCkgKiByZWR1Y2VGYWN0b3I7XG4gICAgICAgIGlmIChjb2xvckFuaW1hdGlvbi5zeW5jKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29sb3JWYWx1ZS5zdGF0dXMgPSBFbnVtc18xLkFuaW1hdGlvblN0YXR1cy5pbmNyZWFzaW5nO1xuICAgICAgICBjb2xvclZhbHVlLnZlbG9jaXR5ICo9IE1hdGgucmFuZG9tKCk7XG4gICAgICAgIGlmIChjb2xvclZhbHVlLnZhbHVlKSB7XG4gICAgICAgICAgICBjb2xvclZhbHVlLnZhbHVlICo9IE1hdGgucmFuZG9tKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbG9yVmFsdWUudmVsb2NpdHkgPSAwO1xuICAgIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db25zdGFudHMgPSB2b2lkIDA7XG5jbGFzcyBDb25zdGFudHMge1xufVxuZXhwb3J0cy5Db25zdGFudHMgPSBDb25zdGFudHM7XG5Db25zdGFudHMuY2FudmFzQ2xhc3MgPSBcInRzcGFydGljbGVzLWNhbnZhcy1lbFwiO1xuQ29uc3RhbnRzLnJhbmRvbUNvbG9yVmFsdWUgPSBcInJhbmRvbVwiO1xuQ29uc3RhbnRzLm1pZENvbG9yVmFsdWUgPSBcIm1pZFwiO1xuQ29uc3RhbnRzLnRvdWNoRW5kRXZlbnQgPSBcInRvdWNoZW5kXCI7XG5Db25zdGFudHMubW91c2VEb3duRXZlbnQgPSBcIm1vdXNlZG93blwiO1xuQ29uc3RhbnRzLm1vdXNlVXBFdmVudCA9IFwibW91c2V1cFwiO1xuQ29uc3RhbnRzLm1vdXNlTW92ZUV2ZW50ID0gXCJtb3VzZW1vdmVcIjtcbkNvbnN0YW50cy50b3VjaFN0YXJ0RXZlbnQgPSBcInRvdWNoc3RhcnRcIjtcbkNvbnN0YW50cy50b3VjaE1vdmVFdmVudCA9IFwidG91Y2htb3ZlXCI7XG5Db25zdGFudHMubW91c2VMZWF2ZUV2ZW50ID0gXCJtb3VzZWxlYXZlXCI7XG5Db25zdGFudHMubW91c2VPdXRFdmVudCA9IFwibW91c2VvdXRcIjtcbkNvbnN0YW50cy50b3VjaENhbmNlbEV2ZW50ID0gXCJ0b3VjaGNhbmNlbFwiO1xuQ29uc3RhbnRzLnJlc2l6ZUV2ZW50ID0gXCJyZXNpemVcIjtcbkNvbnN0YW50cy52aXNpYmlsaXR5Q2hhbmdlRXZlbnQgPSBcInZpc2liaWxpdHljaGFuZ2VcIjtcbkNvbnN0YW50cy5ub1BvbHlnb25EYXRhTG9hZGVkID0gXCJObyBwb2x5Z29uIGRhdGEgbG9hZGVkLlwiO1xuQ29uc3RhbnRzLm5vUG9seWdvbkZvdW5kID0gXCJObyBwb2x5Z29uIGZvdW5kLCB5b3UgbmVlZCB0byBzcGVjaWZ5IFNWRyB1cmwgaW4gY29uZmlnLlwiO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkV2ZW50TGlzdGVuZXJzID0gdm9pZCAwO1xuY29uc3QgRW51bXNfMSA9IHJlcXVpcmUoXCIuLi9FbnVtc1wiKTtcbmNvbnN0IENvbnN0YW50c18xID0gcmVxdWlyZShcIi4vQ29uc3RhbnRzXCIpO1xuY29uc3QgVXRpbHNfMSA9IHJlcXVpcmUoXCIuL1V0aWxzXCIpO1xuZnVuY3Rpb24gbWFuYWdlTGlzdGVuZXIoZWxlbWVudCwgZXZlbnQsIGhhbmRsZXIsIGFkZCwgb3B0aW9ucykge1xuICAgIGlmIChhZGQpIHtcbiAgICAgICAgbGV0IGFkZE9wdGlvbnMgPSB7IHBhc3NpdmU6IHRydWUgfTtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgYWRkT3B0aW9ucy5jYXB0dXJlID0gb3B0aW9ucztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvcHRpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGFkZE9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB9XG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgYWRkT3B0aW9ucyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCByZW1vdmVPcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCByZW1vdmVPcHRpb25zKTtcbiAgICB9XG59XG5jbGFzcyBFdmVudExpc3RlbmVycyB7XG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICB0aGlzLmNhblB1c2ggPSB0cnVlO1xuICAgICAgICB0aGlzLm1vdXNlTW92ZUhhbmRsZXIgPSAoZSkgPT4gdGhpcy5tb3VzZVRvdWNoTW92ZShlKTtcbiAgICAgICAgdGhpcy50b3VjaFN0YXJ0SGFuZGxlciA9IChlKSA9PiB0aGlzLm1vdXNlVG91Y2hNb3ZlKGUpO1xuICAgICAgICB0aGlzLnRvdWNoTW92ZUhhbmRsZXIgPSAoZSkgPT4gdGhpcy5tb3VzZVRvdWNoTW92ZShlKTtcbiAgICAgICAgdGhpcy50b3VjaEVuZEhhbmRsZXIgPSAoKSA9PiB0aGlzLm1vdXNlVG91Y2hGaW5pc2goKTtcbiAgICAgICAgdGhpcy5tb3VzZUxlYXZlSGFuZGxlciA9ICgpID0+IHRoaXMubW91c2VUb3VjaEZpbmlzaCgpO1xuICAgICAgICB0aGlzLnRvdWNoQ2FuY2VsSGFuZGxlciA9ICgpID0+IHRoaXMubW91c2VUb3VjaEZpbmlzaCgpO1xuICAgICAgICB0aGlzLnRvdWNoRW5kQ2xpY2tIYW5kbGVyID0gKGUpID0+IHRoaXMubW91c2VUb3VjaENsaWNrKGUpO1xuICAgICAgICB0aGlzLm1vdXNlVXBIYW5kbGVyID0gKGUpID0+IHRoaXMubW91c2VUb3VjaENsaWNrKGUpO1xuICAgICAgICB0aGlzLm1vdXNlRG93bkhhbmRsZXIgPSAoKSA9PiB0aGlzLm1vdXNlRG93bigpO1xuICAgICAgICB0aGlzLnZpc2liaWxpdHlDaGFuZ2VIYW5kbGVyID0gKCkgPT4gdGhpcy5oYW5kbGVWaXNpYmlsaXR5Q2hhbmdlKCk7XG4gICAgICAgIHRoaXMudGhlbWVDaGFuZ2VIYW5kbGVyID0gKGUpID0+IHRoaXMuaGFuZGxlVGhlbWVDaGFuZ2UoZSk7XG4gICAgICAgIHRoaXMub2xkVGhlbWVDaGFuZ2VIYW5kbGVyID0gKGUpID0+IHRoaXMuaGFuZGxlVGhlbWVDaGFuZ2UoZSk7XG4gICAgICAgIHRoaXMucmVzaXplSGFuZGxlciA9ICgpID0+IHRoaXMuaGFuZGxlV2luZG93UmVzaXplKCk7XG4gICAgfVxuICAgIGFkZExpc3RlbmVycygpIHtcbiAgICAgICAgdGhpcy5tYW5hZ2VMaXN0ZW5lcnModHJ1ZSk7XG4gICAgfVxuICAgIHJlbW92ZUxpc3RlbmVycygpIHtcbiAgICAgICAgdGhpcy5tYW5hZ2VMaXN0ZW5lcnMoZmFsc2UpO1xuICAgIH1cbiAgICBtYW5hZ2VMaXN0ZW5lcnMoYWRkKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXI7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBjb250YWluZXIuYWN0dWFsT3B0aW9ucztcbiAgICAgICAgY29uc3QgZGV0ZWN0VHlwZSA9IG9wdGlvbnMuaW50ZXJhY3Rpdml0eS5kZXRlY3RzT247XG4gICAgICAgIGxldCBtb3VzZUxlYXZlRXZlbnQgPSBDb25zdGFudHNfMS5Db25zdGFudHMubW91c2VMZWF2ZUV2ZW50O1xuICAgICAgICBpZiAoZGV0ZWN0VHlwZSA9PT0gRW51bXNfMS5JbnRlcmFjdGl2aXR5RGV0ZWN0LndpbmRvdykge1xuICAgICAgICAgICAgY29udGFpbmVyLmludGVyYWN0aXZpdHkuZWxlbWVudCA9IHdpbmRvdztcbiAgICAgICAgICAgIG1vdXNlTGVhdmVFdmVudCA9IENvbnN0YW50c18xLkNvbnN0YW50cy5tb3VzZU91dEV2ZW50O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRldGVjdFR5cGUgPT09IEVudW1zXzEuSW50ZXJhY3Rpdml0eURldGVjdC5wYXJlbnQgJiYgY29udGFpbmVyLmNhbnZhcy5lbGVtZW50KSB7XG4gICAgICAgICAgICBjb25zdCBjYW52YXNFbCA9IGNvbnRhaW5lci5jYW52YXMuZWxlbWVudDtcbiAgICAgICAgICAgIGNvbnRhaW5lci5pbnRlcmFjdGl2aXR5LmVsZW1lbnQgPSAoX2EgPSBjYW52YXNFbC5wYXJlbnRFbGVtZW50KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBjYW52YXNFbC5wYXJlbnROb2RlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29udGFpbmVyLmludGVyYWN0aXZpdHkuZWxlbWVudCA9IGNvbnRhaW5lci5jYW52YXMuZWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZWRpYU1hdGNoID0gISgwLCBVdGlsc18xLmlzU3NyKSgpICYmIHR5cGVvZiBtYXRjaE1lZGlhICE9PSBcInVuZGVmaW5lZFwiICYmIG1hdGNoTWVkaWEoXCIocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspXCIpO1xuICAgICAgICBpZiAobWVkaWFNYXRjaCkge1xuICAgICAgICAgICAgaWYgKG1lZGlhTWF0Y2guYWRkRXZlbnRMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbWFuYWdlTGlzdGVuZXIobWVkaWFNYXRjaCwgXCJjaGFuZ2VcIiwgdGhpcy50aGVtZUNoYW5nZUhhbmRsZXIsIGFkZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChtZWRpYU1hdGNoLmFkZExpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWRkKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lZGlhTWF0Y2guYWRkTGlzdGVuZXIodGhpcy5vbGRUaGVtZUNoYW5nZUhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbWVkaWFNYXRjaC5yZW1vdmVMaXN0ZW5lcih0aGlzLm9sZFRoZW1lQ2hhbmdlSGFuZGxlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGludGVyYWN0aXZpdHlFbCA9IGNvbnRhaW5lci5pbnRlcmFjdGl2aXR5LmVsZW1lbnQ7XG4gICAgICAgIGlmICghaW50ZXJhY3Rpdml0eUVsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaHRtbCA9IGludGVyYWN0aXZpdHlFbDtcbiAgICAgICAgaWYgKG9wdGlvbnMuaW50ZXJhY3Rpdml0eS5ldmVudHMub25Ib3Zlci5lbmFibGUgfHwgb3B0aW9ucy5pbnRlcmFjdGl2aXR5LmV2ZW50cy5vbkNsaWNrLmVuYWJsZSkge1xuICAgICAgICAgICAgbWFuYWdlTGlzdGVuZXIoaW50ZXJhY3Rpdml0eUVsLCBDb25zdGFudHNfMS5Db25zdGFudHMubW91c2VNb3ZlRXZlbnQsIHRoaXMubW91c2VNb3ZlSGFuZGxlciwgYWRkKTtcbiAgICAgICAgICAgIG1hbmFnZUxpc3RlbmVyKGludGVyYWN0aXZpdHlFbCwgQ29uc3RhbnRzXzEuQ29uc3RhbnRzLnRvdWNoU3RhcnRFdmVudCwgdGhpcy50b3VjaFN0YXJ0SGFuZGxlciwgYWRkKTtcbiAgICAgICAgICAgIG1hbmFnZUxpc3RlbmVyKGludGVyYWN0aXZpdHlFbCwgQ29uc3RhbnRzXzEuQ29uc3RhbnRzLnRvdWNoTW92ZUV2ZW50LCB0aGlzLnRvdWNoTW92ZUhhbmRsZXIsIGFkZCk7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuaW50ZXJhY3Rpdml0eS5ldmVudHMub25DbGljay5lbmFibGUpIHtcbiAgICAgICAgICAgICAgICBtYW5hZ2VMaXN0ZW5lcihpbnRlcmFjdGl2aXR5RWwsIENvbnN0YW50c18xLkNvbnN0YW50cy50b3VjaEVuZEV2ZW50LCB0aGlzLnRvdWNoRW5kSGFuZGxlciwgYWRkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG1hbmFnZUxpc3RlbmVyKGludGVyYWN0aXZpdHlFbCwgQ29uc3RhbnRzXzEuQ29uc3RhbnRzLnRvdWNoRW5kRXZlbnQsIHRoaXMudG91Y2hFbmRDbGlja0hhbmRsZXIsIGFkZCk7XG4gICAgICAgICAgICAgICAgbWFuYWdlTGlzdGVuZXIoaW50ZXJhY3Rpdml0eUVsLCBDb25zdGFudHNfMS5Db25zdGFudHMubW91c2VVcEV2ZW50LCB0aGlzLm1vdXNlVXBIYW5kbGVyLCBhZGQpO1xuICAgICAgICAgICAgICAgIG1hbmFnZUxpc3RlbmVyKGludGVyYWN0aXZpdHlFbCwgQ29uc3RhbnRzXzEuQ29uc3RhbnRzLm1vdXNlRG93bkV2ZW50LCB0aGlzLm1vdXNlRG93bkhhbmRsZXIsIGFkZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtYW5hZ2VMaXN0ZW5lcihpbnRlcmFjdGl2aXR5RWwsIG1vdXNlTGVhdmVFdmVudCwgdGhpcy5tb3VzZUxlYXZlSGFuZGxlciwgYWRkKTtcbiAgICAgICAgICAgIG1hbmFnZUxpc3RlbmVyKGludGVyYWN0aXZpdHlFbCwgQ29uc3RhbnRzXzEuQ29uc3RhbnRzLnRvdWNoQ2FuY2VsRXZlbnQsIHRoaXMudG91Y2hDYW5jZWxIYW5kbGVyLCBhZGQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250YWluZXIuY2FudmFzLmVsZW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5jYW52YXMuZWxlbWVudC5zdHlsZS5wb2ludGVyRXZlbnRzID0gaHRtbCA9PT0gY29udGFpbmVyLmNhbnZhcy5lbGVtZW50ID8gXCJpbml0aWFsXCIgOiBcIm5vbmVcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5pbnRlcmFjdGl2aXR5LmV2ZW50cy5yZXNpemUpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgUmVzaXplT2JzZXJ2ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yZXNpemVPYnNlcnZlciAmJiAhYWRkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb250YWluZXIuY2FudmFzLmVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzaXplT2JzZXJ2ZXIudW5vYnNlcnZlKGNvbnRhaW5lci5jYW52YXMuZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNpemVPYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnJlc2l6ZU9ic2VydmVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICghdGhpcy5yZXNpemVPYnNlcnZlciAmJiBhZGQgJiYgY29udGFpbmVyLmNhbnZhcy5lbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzaXplT2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoKGVudHJpZXMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVudHJ5ID0gZW50cmllcy5maW5kKChlKSA9PiBlLnRhcmdldCA9PT0gY29udGFpbmVyLmNhbnZhcy5lbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVdpbmRvd1Jlc2l6ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNpemVPYnNlcnZlci5vYnNlcnZlKGNvbnRhaW5lci5jYW52YXMuZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbWFuYWdlTGlzdGVuZXIod2luZG93LCBDb25zdGFudHNfMS5Db25zdGFudHMucmVzaXplRXZlbnQsIHRoaXMucmVzaXplSGFuZGxlciwgYWRkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZG9jdW1lbnQpIHtcbiAgICAgICAgICAgIG1hbmFnZUxpc3RlbmVyKGRvY3VtZW50LCBDb25zdGFudHNfMS5Db25zdGFudHMudmlzaWJpbGl0eUNoYW5nZUV2ZW50LCB0aGlzLnZpc2liaWxpdHlDaGFuZ2VIYW5kbGVyLCBhZGQsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBoYW5kbGVXaW5kb3dSZXNpemUoKSB7XG4gICAgICAgIGlmICh0aGlzLnJlc2l6ZVRpbWVvdXQpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnJlc2l6ZVRpbWVvdXQpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMucmVzaXplVGltZW91dDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlc2l6ZVRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHsgdmFyIF9hOyByZXR1cm4gKF9hID0gdGhpcy5jb250YWluZXIuY2FudmFzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Eud2luZG93UmVzaXplKCk7IH0sIDUwMCk7XG4gICAgfVxuICAgIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UoKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gY29udGFpbmVyLmFjdHVhbE9wdGlvbnM7XG4gICAgICAgIHRoaXMubW91c2VUb3VjaEZpbmlzaCgpO1xuICAgICAgICBpZiAoIW9wdGlvbnMucGF1c2VPbkJsdXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZG9jdW1lbnQgPT09IG51bGwgfHwgZG9jdW1lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRvY3VtZW50LmhpZGRlbikge1xuICAgICAgICAgICAgY29udGFpbmVyLnBhZ2VIaWRkZW4gPSB0cnVlO1xuICAgICAgICAgICAgY29udGFpbmVyLnBhdXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb250YWluZXIucGFnZUhpZGRlbiA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGNvbnRhaW5lci5nZXRBbmltYXRpb25TdGF0dXMoKSkge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5wbGF5KHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmRyYXcodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgbW91c2VEb3duKCkge1xuICAgICAgICBjb25zdCBpbnRlcmFjdGl2aXR5ID0gdGhpcy5jb250YWluZXIuaW50ZXJhY3Rpdml0eTtcbiAgICAgICAgaWYgKGludGVyYWN0aXZpdHkpIHtcbiAgICAgICAgICAgIGNvbnN0IG1vdXNlID0gaW50ZXJhY3Rpdml0eS5tb3VzZTtcbiAgICAgICAgICAgIG1vdXNlLmNsaWNraW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIG1vdXNlLmRvd25Qb3NpdGlvbiA9IG1vdXNlLnBvc2l0aW9uO1xuICAgICAgICB9XG4gICAgfVxuICAgIG1vdXNlVG91Y2hNb3ZlKGUpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nO1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcjtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGNvbnRhaW5lci5hY3R1YWxPcHRpb25zO1xuICAgICAgICBpZiAoKChfYSA9IGNvbnRhaW5lci5pbnRlcmFjdGl2aXR5KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZWxlbWVudCkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRhaW5lci5pbnRlcmFjdGl2aXR5Lm1vdXNlLmluc2lkZSA9IHRydWU7XG4gICAgICAgIGxldCBwb3M7XG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IGNvbnRhaW5lci5jYW52YXMuZWxlbWVudDtcbiAgICAgICAgaWYgKGUudHlwZS5zdGFydHNXaXRoKFwibW91c2VcIikpIHtcbiAgICAgICAgICAgIHRoaXMuY2FuUHVzaCA9IHRydWU7XG4gICAgICAgICAgICBjb25zdCBtb3VzZUV2ZW50ID0gZTtcbiAgICAgICAgICAgIGlmIChjb250YWluZXIuaW50ZXJhY3Rpdml0eS5lbGVtZW50ID09PSB3aW5kb3cpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2FudmFzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsaWVudFJlY3QgPSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIHBvcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IG1vdXNlRXZlbnQuY2xpZW50WCAtIGNsaWVudFJlY3QubGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IG1vdXNlRXZlbnQuY2xpZW50WSAtIGNsaWVudFJlY3QudG9wLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG9wdGlvbnMuaW50ZXJhY3Rpdml0eS5kZXRlY3RzT24gPT09IEVudW1zXzEuSW50ZXJhY3Rpdml0eURldGVjdC5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzb3VyY2UgPSBtb3VzZUV2ZW50LnRhcmdldDtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBtb3VzZUV2ZW50LmN1cnJlbnRUYXJnZXQ7XG4gICAgICAgICAgICAgICAgY29uc3QgY2FudmFzRWwgPSBjb250YWluZXIuY2FudmFzLmVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgaWYgKHNvdXJjZSAmJiB0YXJnZXQgJiYgY2FudmFzRWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc291cmNlUmVjdCA9IHNvdXJjZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0UmVjdCA9IHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FudmFzUmVjdCA9IGNhbnZhc0VsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICBwb3MgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBtb3VzZUV2ZW50Lm9mZnNldFggKyAyICogc291cmNlUmVjdC5sZWZ0IC0gKHRhcmdldFJlY3QubGVmdCArIGNhbnZhc1JlY3QubGVmdCksXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBtb3VzZUV2ZW50Lm9mZnNldFkgKyAyICogc291cmNlUmVjdC50b3AgLSAodGFyZ2V0UmVjdC50b3AgKyBjYW52YXNSZWN0LnRvcCksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwb3MgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiAoX2IgPSBtb3VzZUV2ZW50Lm9mZnNldFgpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IG1vdXNlRXZlbnQuY2xpZW50WCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IChfYyA9IG1vdXNlRXZlbnQub2Zmc2V0WSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogbW91c2VFdmVudC5jbGllbnRZLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChtb3VzZUV2ZW50LnRhcmdldCA9PT0gY29udGFpbmVyLmNhbnZhcy5lbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHBvcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IChfZCA9IG1vdXNlRXZlbnQub2Zmc2V0WCkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogbW91c2VFdmVudC5jbGllbnRYLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogKF9lID0gbW91c2VFdmVudC5vZmZzZXRZKSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiBtb3VzZUV2ZW50LmNsaWVudFksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jYW5QdXNoID0gZS50eXBlICE9PSBcInRvdWNobW92ZVwiO1xuICAgICAgICAgICAgY29uc3QgdG91Y2hFdmVudCA9IGU7XG4gICAgICAgICAgICBjb25zdCBsYXN0VG91Y2ggPSB0b3VjaEV2ZW50LnRvdWNoZXNbdG91Y2hFdmVudC50b3VjaGVzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgY29uc3QgY2FudmFzUmVjdCA9IGNhbnZhcyA9PT0gbnVsbCB8fCBjYW52YXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIHBvcyA9IHtcbiAgICAgICAgICAgICAgICB4OiBsYXN0VG91Y2guY2xpZW50WCAtICgoX2YgPSBjYW52YXNSZWN0ID09PSBudWxsIHx8IGNhbnZhc1JlY3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNhbnZhc1JlY3QubGVmdCkgIT09IG51bGwgJiYgX2YgIT09IHZvaWQgMCA/IF9mIDogMCksXG4gICAgICAgICAgICAgICAgeTogbGFzdFRvdWNoLmNsaWVudFkgLSAoKF9nID0gY2FudmFzUmVjdCA9PT0gbnVsbCB8fCBjYW52YXNSZWN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjYW52YXNSZWN0LnRvcCkgIT09IG51bGwgJiYgX2cgIT09IHZvaWQgMCA/IF9nIDogMCksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHB4UmF0aW8gPSBjb250YWluZXIucmV0aW5hLnBpeGVsUmF0aW87XG4gICAgICAgIGlmIChwb3MpIHtcbiAgICAgICAgICAgIHBvcy54ICo9IHB4UmF0aW87XG4gICAgICAgICAgICBwb3MueSAqPSBweFJhdGlvO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRhaW5lci5pbnRlcmFjdGl2aXR5Lm1vdXNlLnBvc2l0aW9uID0gcG9zO1xuICAgICAgICBjb250YWluZXIuaW50ZXJhY3Rpdml0eS5zdGF0dXMgPSBDb25zdGFudHNfMS5Db25zdGFudHMubW91c2VNb3ZlRXZlbnQ7XG4gICAgfVxuICAgIG1vdXNlVG91Y2hGaW5pc2goKSB7XG4gICAgICAgIGNvbnN0IGludGVyYWN0aXZpdHkgPSB0aGlzLmNvbnRhaW5lci5pbnRlcmFjdGl2aXR5O1xuICAgICAgICBpZiAoaW50ZXJhY3Rpdml0eSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbW91c2UgPSBpbnRlcmFjdGl2aXR5Lm1vdXNlO1xuICAgICAgICBkZWxldGUgbW91c2UucG9zaXRpb247XG4gICAgICAgIGRlbGV0ZSBtb3VzZS5jbGlja1Bvc2l0aW9uO1xuICAgICAgICBkZWxldGUgbW91c2UuZG93blBvc2l0aW9uO1xuICAgICAgICBpbnRlcmFjdGl2aXR5LnN0YXR1cyA9IENvbnN0YW50c18xLkNvbnN0YW50cy5tb3VzZUxlYXZlRXZlbnQ7XG4gICAgICAgIG1vdXNlLmluc2lkZSA9IGZhbHNlO1xuICAgICAgICBtb3VzZS5jbGlja2luZyA9IGZhbHNlO1xuICAgIH1cbiAgICBtb3VzZVRvdWNoQ2xpY2soZSkge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcjtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGNvbnRhaW5lci5hY3R1YWxPcHRpb25zO1xuICAgICAgICBjb25zdCBtb3VzZSA9IGNvbnRhaW5lci5pbnRlcmFjdGl2aXR5Lm1vdXNlO1xuICAgICAgICBtb3VzZS5pbnNpZGUgPSB0cnVlO1xuICAgICAgICBsZXQgaGFuZGxlZCA9IGZhbHNlO1xuICAgICAgICBjb25zdCBtb3VzZVBvc2l0aW9uID0gbW91c2UucG9zaXRpb247XG4gICAgICAgIGlmIChtb3VzZVBvc2l0aW9uID09PSB1bmRlZmluZWQgfHwgIW9wdGlvbnMuaW50ZXJhY3Rpdml0eS5ldmVudHMub25DbGljay5lbmFibGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IFssIHBsdWdpbl0gb2YgY29udGFpbmVyLnBsdWdpbnMpIHtcbiAgICAgICAgICAgIGlmIChwbHVnaW4uY2xpY2tQb3NpdGlvblZhbGlkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVkID0gcGx1Z2luLmNsaWNrUG9zaXRpb25WYWxpZChtb3VzZVBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICBpZiAoaGFuZGxlZCkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFoYW5kbGVkKSB7XG4gICAgICAgICAgICB0aGlzLmRvTW91c2VUb3VjaENsaWNrKGUpO1xuICAgICAgICB9XG4gICAgICAgIG1vdXNlLmNsaWNraW5nID0gZmFsc2U7XG4gICAgfVxuICAgIGRvTW91c2VUb3VjaENsaWNrKGUpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXI7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBjb250YWluZXIuYWN0dWFsT3B0aW9ucztcbiAgICAgICAgaWYgKHRoaXMuY2FuUHVzaCkge1xuICAgICAgICAgICAgY29uc3QgbW91c2VQb3MgPSBjb250YWluZXIuaW50ZXJhY3Rpdml0eS5tb3VzZS5wb3NpdGlvbjtcbiAgICAgICAgICAgIGlmIChtb3VzZVBvcykge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5pbnRlcmFjdGl2aXR5Lm1vdXNlLmNsaWNrUG9zaXRpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIHg6IG1vdXNlUG9zLngsXG4gICAgICAgICAgICAgICAgICAgIHk6IG1vdXNlUG9zLnksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRhaW5lci5pbnRlcmFjdGl2aXR5Lm1vdXNlLmNsaWNrVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICAgICAgY29uc3Qgb25DbGljayA9IG9wdGlvbnMuaW50ZXJhY3Rpdml0eS5ldmVudHMub25DbGljaztcbiAgICAgICAgICAgIGlmIChvbkNsaWNrLm1vZGUgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbW9kZSBvZiBvbkNsaWNrLm1vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVDbGlja01vZGUobW9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVDbGlja01vZGUob25DbGljay5tb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZS50eXBlID09PSBcInRvdWNoZW5kXCIpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5tb3VzZVRvdWNoRmluaXNoKCksIDUwMCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaGFuZGxlVGhlbWVDaGFuZ2UoZSkge1xuICAgICAgICBjb25zdCBtZWRpYUV2ZW50ID0gZTtcbiAgICAgICAgY29uc3QgdGhlbWVOYW1lID0gbWVkaWFFdmVudC5tYXRjaGVzXG4gICAgICAgICAgICA/IHRoaXMuY29udGFpbmVyLm9wdGlvbnMuZGVmYXVsdERhcmtUaGVtZVxuICAgICAgICAgICAgOiB0aGlzLmNvbnRhaW5lci5vcHRpb25zLmRlZmF1bHRMaWdodFRoZW1lO1xuICAgICAgICBjb25zdCB0aGVtZSA9IHRoaXMuY29udGFpbmVyLm9wdGlvbnMudGhlbWVzLmZpbmQoKHRoZW1lKSA9PiB0aGVtZS5uYW1lID09PSB0aGVtZU5hbWUpO1xuICAgICAgICBpZiAodGhlbWUgJiYgdGhlbWUuZGVmYXVsdC5hdXRvKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5sb2FkVGhlbWUodGhlbWVOYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBoYW5kbGVDbGlja01vZGUobW9kZSkge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcjtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGNvbnRhaW5lci5hY3R1YWxPcHRpb25zO1xuICAgICAgICBjb25zdCBwdXNoTmIgPSBvcHRpb25zLmludGVyYWN0aXZpdHkubW9kZXMucHVzaC5xdWFudGl0eTtcbiAgICAgICAgY29uc3QgcmVtb3ZlTmIgPSBvcHRpb25zLmludGVyYWN0aXZpdHkubW9kZXMucmVtb3ZlLnF1YW50aXR5O1xuICAgICAgICBzd2l0Y2ggKG1vZGUpIHtcbiAgICAgICAgICAgIGNhc2UgRW51bXNfMS5DbGlja01vZGUucHVzaDoge1xuICAgICAgICAgICAgICAgIGlmIChwdXNoTmIgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHB1c2hPcHRpb25zID0gb3B0aW9ucy5pbnRlcmFjdGl2aXR5Lm1vZGVzLnB1c2g7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gKDAsIFV0aWxzXzEuaXRlbUZyb21BcnJheSkoW3VuZGVmaW5lZCwgLi4ucHVzaE9wdGlvbnMuZ3JvdXBzXSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwT3B0aW9ucyA9IGdyb3VwICE9PSB1bmRlZmluZWQgPyBjb250YWluZXIuYWN0dWFsT3B0aW9ucy5wYXJ0aWNsZXMuZ3JvdXBzW2dyb3VwXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLnBhcnRpY2xlcy5wdXNoKHB1c2hOYiwgY29udGFpbmVyLmludGVyYWN0aXZpdHkubW91c2UsIGdyb3VwT3B0aW9ucywgZ3JvdXApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgRW51bXNfMS5DbGlja01vZGUucmVtb3ZlOlxuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5wYXJ0aWNsZXMucmVtb3ZlUXVhbnRpdHkocmVtb3ZlTmIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBFbnVtc18xLkNsaWNrTW9kZS5idWJibGU6XG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmJ1YmJsZS5jbGlja2luZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEVudW1zXzEuQ2xpY2tNb2RlLnJlcHVsc2U6XG4gICAgICAgICAgICAgICAgY29udGFpbmVyLnJlcHVsc2UuY2xpY2tpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5yZXB1bHNlLmNvdW50ID0gMDtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHBhcnRpY2xlIG9mIGNvbnRhaW5lci5yZXB1bHNlLnBhcnRpY2xlcykge1xuICAgICAgICAgICAgICAgICAgICBwYXJ0aWNsZS52ZWxvY2l0eS5zZXRUbyhwYXJ0aWNsZS5pbml0aWFsVmVsb2NpdHkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250YWluZXIucmVwdWxzZS5wYXJ0aWNsZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBjb250YWluZXIucmVwdWxzZS5maW5pc2ggPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb250YWluZXIuZGVzdHJveWVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIucmVwdWxzZS5jbGlja2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgb3B0aW9ucy5pbnRlcmFjdGl2aXR5Lm1vZGVzLnJlcHVsc2UuZHVyYXRpb24gKiAxMDAwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgRW51bXNfMS5DbGlja01vZGUuYXR0cmFjdDpcbiAgICAgICAgICAgICAgICBjb250YWluZXIuYXR0cmFjdC5jbGlja2luZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmF0dHJhY3QuY291bnQgPSAwO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcGFydGljbGUgb2YgY29udGFpbmVyLmF0dHJhY3QucGFydGljbGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnRpY2xlLnZlbG9jaXR5LnNldFRvKHBhcnRpY2xlLmluaXRpYWxWZWxvY2l0eSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hdHRyYWN0LnBhcnRpY2xlcyA9IFtdO1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hdHRyYWN0LmZpbmlzaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbnRhaW5lci5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hdHRyYWN0LmNsaWNraW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCBvcHRpb25zLmludGVyYWN0aXZpdHkubW9kZXMuYXR0cmFjdC5kdXJhdGlvbiAqIDEwMDApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBFbnVtc18xLkNsaWNrTW9kZS5wYXVzZTpcbiAgICAgICAgICAgICAgICBpZiAoY29udGFpbmVyLmdldEFuaW1hdGlvblN0YXR1cygpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5wYXVzZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLnBsYXkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBbLCBwbHVnaW5dIG9mIGNvbnRhaW5lci5wbHVnaW5zKSB7XG4gICAgICAgICAgICBpZiAocGx1Z2luLmhhbmRsZUNsaWNrTW9kZSkge1xuICAgICAgICAgICAgICAgIHBsdWdpbi5oYW5kbGVDbGlja01vZGUobW9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkV2ZW50TGlzdGVuZXJzID0gRXZlbnRMaXN0ZW5lcnM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY2FsY0Vhc2luZyA9IGV4cG9ydHMuY29sbGlzaW9uVmVsb2NpdHkgPSBleHBvcnRzLmdldFBhcnRpY2xlQmFzZVZlbG9jaXR5ID0gZXhwb3J0cy5nZXRQYXJ0aWNsZURpcmVjdGlvbkFuZ2xlID0gZXhwb3J0cy5nZXREaXN0YW5jZSA9IGV4cG9ydHMuZ2V0RGlzdGFuY2VzID0gZXhwb3J0cy5nZXRWYWx1ZSA9IGV4cG9ydHMuc2V0UmFuZ2VWYWx1ZSA9IGV4cG9ydHMuZ2V0UmFuZ2VNYXggPSBleHBvcnRzLmdldFJhbmdlTWluID0gZXhwb3J0cy5nZXRSYW5nZVZhbHVlID0gZXhwb3J0cy5yYW5kb21JblJhbmdlID0gZXhwb3J0cy5taXggPSBleHBvcnRzLmNsYW1wID0gdm9pZCAwO1xuY29uc3QgRW51bXNfMSA9IHJlcXVpcmUoXCIuLi9FbnVtc1wiKTtcbmNvbnN0IFZlY3Rvcl8xID0gcmVxdWlyZShcIi4uL0NvcmUvUGFydGljbGUvVmVjdG9yXCIpO1xuZnVuY3Rpb24gY2xhbXAobnVtLCBtaW4sIG1heCkge1xuICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChudW0sIG1pbiksIG1heCk7XG59XG5leHBvcnRzLmNsYW1wID0gY2xhbXA7XG5mdW5jdGlvbiBtaXgoY29tcDEsIGNvbXAyLCB3ZWlnaHQxLCB3ZWlnaHQyKSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoKGNvbXAxICogd2VpZ2h0MSArIGNvbXAyICogd2VpZ2h0MikgLyAod2VpZ2h0MSArIHdlaWdodDIpKTtcbn1cbmV4cG9ydHMubWl4ID0gbWl4O1xuZnVuY3Rpb24gcmFuZG9tSW5SYW5nZShyKSB7XG4gICAgY29uc3QgbWF4ID0gZ2V0UmFuZ2VNYXgocik7XG4gICAgbGV0IG1pbiA9IGdldFJhbmdlTWluKHIpO1xuICAgIGlmIChtYXggPT09IG1pbikge1xuICAgICAgICBtaW4gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pICsgbWluO1xufVxuZXhwb3J0cy5yYW5kb21JblJhbmdlID0gcmFuZG9tSW5SYW5nZTtcbmZ1bmN0aW9uIGdldFJhbmdlVmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiID8gdmFsdWUgOiByYW5kb21JblJhbmdlKHZhbHVlKTtcbn1cbmV4cG9ydHMuZ2V0UmFuZ2VWYWx1ZSA9IGdldFJhbmdlVmFsdWU7XG5mdW5jdGlvbiBnZXRSYW5nZU1pbih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgPyB2YWx1ZSA6IHZhbHVlLm1pbjtcbn1cbmV4cG9ydHMuZ2V0UmFuZ2VNaW4gPSBnZXRSYW5nZU1pbjtcbmZ1bmN0aW9uIGdldFJhbmdlTWF4KHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiA/IHZhbHVlIDogdmFsdWUubWF4O1xufVxuZXhwb3J0cy5nZXRSYW5nZU1heCA9IGdldFJhbmdlTWF4O1xuZnVuY3Rpb24gc2V0UmFuZ2VWYWx1ZShzb3VyY2UsIHZhbHVlKSB7XG4gICAgaWYgKHNvdXJjZSA9PT0gdmFsdWUgfHwgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIHNvdXJjZSA9PT0gXCJudW1iZXJcIikpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICB9XG4gICAgY29uc3QgbWluID0gZ2V0UmFuZ2VNaW4oc291cmNlKSwgbWF4ID0gZ2V0UmFuZ2VNYXgoc291cmNlKTtcbiAgICByZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZFxuICAgICAgICA/IHtcbiAgICAgICAgICAgIG1pbjogTWF0aC5taW4obWluLCB2YWx1ZSksXG4gICAgICAgICAgICBtYXg6IE1hdGgubWF4KG1heCwgdmFsdWUpLFxuICAgICAgICB9XG4gICAgICAgIDogc2V0UmFuZ2VWYWx1ZShtaW4sIG1heCk7XG59XG5leHBvcnRzLnNldFJhbmdlVmFsdWUgPSBzZXRSYW5nZVZhbHVlO1xuZnVuY3Rpb24gZ2V0VmFsdWUob3B0aW9ucykge1xuICAgIGNvbnN0IHJhbmRvbSA9IG9wdGlvbnMucmFuZG9tO1xuICAgIGNvbnN0IHsgZW5hYmxlLCBtaW5pbXVtVmFsdWUgfSA9IHR5cGVvZiByYW5kb20gPT09IFwiYm9vbGVhblwiID8geyBlbmFibGU6IHJhbmRvbSwgbWluaW11bVZhbHVlOiAwIH0gOiByYW5kb207XG4gICAgcmV0dXJuIGVuYWJsZSA/IGdldFJhbmdlVmFsdWUoc2V0UmFuZ2VWYWx1ZShvcHRpb25zLnZhbHVlLCBtaW5pbXVtVmFsdWUpKSA6IGdldFJhbmdlVmFsdWUob3B0aW9ucy52YWx1ZSk7XG59XG5leHBvcnRzLmdldFZhbHVlID0gZ2V0VmFsdWU7XG5mdW5jdGlvbiBnZXREaXN0YW5jZXMocG9pbnRBLCBwb2ludEIpIHtcbiAgICBjb25zdCBkeCA9IHBvaW50QS54IC0gcG9pbnRCLng7XG4gICAgY29uc3QgZHkgPSBwb2ludEEueSAtIHBvaW50Qi55O1xuICAgIHJldHVybiB7IGR4OiBkeCwgZHk6IGR5LCBkaXN0YW5jZTogTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KSB9O1xufVxuZXhwb3J0cy5nZXREaXN0YW5jZXMgPSBnZXREaXN0YW5jZXM7XG5mdW5jdGlvbiBnZXREaXN0YW5jZShwb2ludEEsIHBvaW50Qikge1xuICAgIHJldHVybiBnZXREaXN0YW5jZXMocG9pbnRBLCBwb2ludEIpLmRpc3RhbmNlO1xufVxuZXhwb3J0cy5nZXREaXN0YW5jZSA9IGdldERpc3RhbmNlO1xuZnVuY3Rpb24gZ2V0UGFydGljbGVEaXJlY3Rpb25BbmdsZShkaXJlY3Rpb24pIHtcbiAgICBpZiAodHlwZW9mIGRpcmVjdGlvbiA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICByZXR1cm4gKGRpcmVjdGlvbiAqIE1hdGguUEkpIC8gMTgwO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcbiAgICAgICAgICAgIGNhc2UgRW51bXNfMS5Nb3ZlRGlyZWN0aW9uLnRvcDpcbiAgICAgICAgICAgICAgICByZXR1cm4gLU1hdGguUEkgLyAyO1xuICAgICAgICAgICAgY2FzZSBFbnVtc18xLk1vdmVEaXJlY3Rpb24udG9wUmlnaHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIC1NYXRoLlBJIC8gNDtcbiAgICAgICAgICAgIGNhc2UgRW51bXNfMS5Nb3ZlRGlyZWN0aW9uLnJpZ2h0OlxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgY2FzZSBFbnVtc18xLk1vdmVEaXJlY3Rpb24uYm90dG9tUmlnaHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguUEkgLyA0O1xuICAgICAgICAgICAgY2FzZSBFbnVtc18xLk1vdmVEaXJlY3Rpb24uYm90dG9tOlxuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLlBJIC8gMjtcbiAgICAgICAgICAgIGNhc2UgRW51bXNfMS5Nb3ZlRGlyZWN0aW9uLmJvdHRvbUxlZnQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuICgzICogTWF0aC5QSSkgLyA0O1xuICAgICAgICAgICAgY2FzZSBFbnVtc18xLk1vdmVEaXJlY3Rpb24ubGVmdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5QSTtcbiAgICAgICAgICAgIGNhc2UgRW51bXNfMS5Nb3ZlRGlyZWN0aW9uLnRvcExlZnQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuICgtMyAqIE1hdGguUEkpIC8gNDtcbiAgICAgICAgICAgIGNhc2UgRW51bXNfMS5Nb3ZlRGlyZWN0aW9uLm5vbmU6XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJhbmRvbSgpICogTWF0aC5QSSAqIDI7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLmdldFBhcnRpY2xlRGlyZWN0aW9uQW5nbGUgPSBnZXRQYXJ0aWNsZURpcmVjdGlvbkFuZ2xlO1xuZnVuY3Rpb24gZ2V0UGFydGljbGVCYXNlVmVsb2NpdHkoZGlyZWN0aW9uKSB7XG4gICAgY29uc3QgYmFzZVZlbG9jaXR5ID0gVmVjdG9yXzEuVmVjdG9yLm9yaWdpbjtcbiAgICBiYXNlVmVsb2NpdHkubGVuZ3RoID0gMTtcbiAgICBiYXNlVmVsb2NpdHkuYW5nbGUgPSBkaXJlY3Rpb247XG4gICAgcmV0dXJuIGJhc2VWZWxvY2l0eTtcbn1cbmV4cG9ydHMuZ2V0UGFydGljbGVCYXNlVmVsb2NpdHkgPSBnZXRQYXJ0aWNsZUJhc2VWZWxvY2l0eTtcbmZ1bmN0aW9uIGNvbGxpc2lvblZlbG9jaXR5KHYxLCB2MiwgbTEsIG0yKSB7XG4gICAgcmV0dXJuIFZlY3Rvcl8xLlZlY3Rvci5jcmVhdGUoKHYxLnggKiAobTEgLSBtMikpIC8gKG0xICsgbTIpICsgKHYyLnggKiAyICogbTIpIC8gKG0xICsgbTIpLCB2MS55KTtcbn1cbmV4cG9ydHMuY29sbGlzaW9uVmVsb2NpdHkgPSBjb2xsaXNpb25WZWxvY2l0eTtcbmZ1bmN0aW9uIGNhbGNFYXNpbmcodmFsdWUsIHR5cGUpIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBFbnVtc18xLkVhc2luZ1R5cGUuZWFzZU91dFF1YWQ6XG4gICAgICAgICAgICByZXR1cm4gMSAtICgxIC0gdmFsdWUpICoqIDI7XG4gICAgICAgIGNhc2UgRW51bXNfMS5FYXNpbmdUeXBlLmVhc2VPdXRDdWJpYzpcbiAgICAgICAgICAgIHJldHVybiAxIC0gKDEgLSB2YWx1ZSkgKiogMztcbiAgICAgICAgY2FzZSBFbnVtc18xLkVhc2luZ1R5cGUuZWFzZU91dFF1YXJ0OlxuICAgICAgICAgICAgcmV0dXJuIDEgLSAoMSAtIHZhbHVlKSAqKiA0O1xuICAgICAgICBjYXNlIEVudW1zXzEuRWFzaW5nVHlwZS5lYXNlT3V0UXVpbnQ6XG4gICAgICAgICAgICByZXR1cm4gMSAtICgxIC0gdmFsdWUpICoqIDU7XG4gICAgICAgIGNhc2UgRW51bXNfMS5FYXNpbmdUeXBlLmVhc2VPdXRFeHBvOlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlID09PSAxID8gMSA6IDEgLSBNYXRoLnBvdygyLCAtMTAgKiB2YWx1ZSk7XG4gICAgICAgIGNhc2UgRW51bXNfMS5FYXNpbmdUeXBlLmVhc2VPdXRTaW5lOlxuICAgICAgICAgICAgcmV0dXJuIE1hdGguc2luKCh2YWx1ZSAqIE1hdGguUEkpIC8gMik7XG4gICAgICAgIGNhc2UgRW51bXNfMS5FYXNpbmdUeXBlLmVhc2VPdXRCYWNrOiB7XG4gICAgICAgICAgICBjb25zdCBjMSA9IDEuNzAxNTg7XG4gICAgICAgICAgICBjb25zdCBjMyA9IGMxICsgMTtcbiAgICAgICAgICAgIHJldHVybiAxICsgYzMgKiBNYXRoLnBvdyh2YWx1ZSAtIDEsIDMpICsgYzEgKiBNYXRoLnBvdyh2YWx1ZSAtIDEsIDIpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgRW51bXNfMS5FYXNpbmdUeXBlLmVhc2VPdXRDaXJjOlxuICAgICAgICAgICAgcmV0dXJuIE1hdGguc3FydCgxIC0gTWF0aC5wb3codmFsdWUgLSAxLCAyKSk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxufVxuZXhwb3J0cy5jYWxjRWFzaW5nID0gY2FsY0Vhc2luZztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QbHVnaW5zID0gdm9pZCAwO1xuY29uc3QgcGx1Z2lucyA9IFtdO1xuY29uc3QgaW50ZXJhY3RvcnNJbml0aWFsaXplcnMgPSBuZXcgTWFwKCk7XG5jb25zdCB1cGRhdGVyc0luaXRpYWxpemVycyA9IG5ldyBNYXAoKTtcbmNvbnN0IGludGVyYWN0b3JzID0gbmV3IE1hcCgpO1xuY29uc3QgdXBkYXRlcnMgPSBuZXcgTWFwKCk7XG5jb25zdCBwcmVzZXRzID0gbmV3IE1hcCgpO1xuY29uc3QgZHJhd2VycyA9IG5ldyBNYXAoKTtcbmNvbnN0IHBhdGhHZW5lcmF0b3JzID0gbmV3IE1hcCgpO1xuY2xhc3MgUGx1Z2lucyB7XG4gICAgc3RhdGljIGdldFBsdWdpbihwbHVnaW4pIHtcbiAgICAgICAgcmV0dXJuIHBsdWdpbnMuZmluZCgodCkgPT4gdC5pZCA9PT0gcGx1Z2luKTtcbiAgICB9XG4gICAgc3RhdGljIGFkZFBsdWdpbihwbHVnaW4pIHtcbiAgICAgICAgaWYgKCFQbHVnaW5zLmdldFBsdWdpbihwbHVnaW4uaWQpKSB7XG4gICAgICAgICAgICBwbHVnaW5zLnB1c2gocGx1Z2luKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgZ2V0QXZhaWxhYmxlUGx1Z2lucyhjb250YWluZXIpIHtcbiAgICAgICAgY29uc3QgcmVzID0gbmV3IE1hcCgpO1xuICAgICAgICBmb3IgKGNvbnN0IHBsdWdpbiBvZiBwbHVnaW5zKSB7XG4gICAgICAgICAgICBpZiAoIXBsdWdpbi5uZWVkc1BsdWdpbihjb250YWluZXIuYWN0dWFsT3B0aW9ucykpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlcy5zZXQocGx1Z2luLmlkLCBwbHVnaW4uZ2V0UGx1Z2luKGNvbnRhaW5lcikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIHN0YXRpYyBsb2FkT3B0aW9ucyhvcHRpb25zLCBzb3VyY2VPcHRpb25zKSB7XG4gICAgICAgIGZvciAoY29uc3QgcGx1Z2luIG9mIHBsdWdpbnMpIHtcbiAgICAgICAgICAgIHBsdWdpbi5sb2FkT3B0aW9ucyhvcHRpb25zLCBzb3VyY2VPcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgZ2V0UHJlc2V0KHByZXNldCkge1xuICAgICAgICByZXR1cm4gcHJlc2V0cy5nZXQocHJlc2V0KTtcbiAgICB9XG4gICAgc3RhdGljIGFkZFByZXNldChwcmVzZXRLZXksIG9wdGlvbnMsIG92ZXJyaWRlID0gZmFsc2UpIHtcbiAgICAgICAgaWYgKG92ZXJyaWRlIHx8ICFQbHVnaW5zLmdldFByZXNldChwcmVzZXRLZXkpKSB7XG4gICAgICAgICAgICBwcmVzZXRzLnNldChwcmVzZXRLZXksIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyBhZGRTaGFwZURyYXdlcih0eXBlLCBkcmF3ZXIpIHtcbiAgICAgICAgaWYgKCFQbHVnaW5zLmdldFNoYXBlRHJhd2VyKHR5cGUpKSB7XG4gICAgICAgICAgICBkcmF3ZXJzLnNldCh0eXBlLCBkcmF3ZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyBnZXRTaGFwZURyYXdlcih0eXBlKSB7XG4gICAgICAgIHJldHVybiBkcmF3ZXJzLmdldCh0eXBlKTtcbiAgICB9XG4gICAgc3RhdGljIGdldFN1cHBvcnRlZFNoYXBlcygpIHtcbiAgICAgICAgcmV0dXJuIGRyYXdlcnMua2V5cygpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0UGF0aEdlbmVyYXRvcih0eXBlKSB7XG4gICAgICAgIHJldHVybiBwYXRoR2VuZXJhdG9ycy5nZXQodHlwZSk7XG4gICAgfVxuICAgIHN0YXRpYyBhZGRQYXRoR2VuZXJhdG9yKHR5cGUsIHBhdGhHZW5lcmF0b3IpIHtcbiAgICAgICAgaWYgKCFQbHVnaW5zLmdldFBhdGhHZW5lcmF0b3IodHlwZSkpIHtcbiAgICAgICAgICAgIHBhdGhHZW5lcmF0b3JzLnNldCh0eXBlLCBwYXRoR2VuZXJhdG9yKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgZ2V0SW50ZXJhY3RvcnMoY29udGFpbmVyLCBmb3JjZSA9IGZhbHNlKSB7XG4gICAgICAgIGxldCByZXMgPSBpbnRlcmFjdG9ycy5nZXQoY29udGFpbmVyKTtcbiAgICAgICAgaWYgKCFyZXMgfHwgZm9yY2UpIHtcbiAgICAgICAgICAgIHJlcyA9IFsuLi5pbnRlcmFjdG9yc0luaXRpYWxpemVycy52YWx1ZXMoKV0ubWFwKCh0KSA9PiB0KGNvbnRhaW5lcikpO1xuICAgICAgICAgICAgaW50ZXJhY3RvcnMuc2V0KGNvbnRhaW5lciwgcmVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBzdGF0aWMgYWRkSW50ZXJhY3RvcihuYW1lLCBpbml0SW50ZXJhY3Rvcikge1xuICAgICAgICBpbnRlcmFjdG9yc0luaXRpYWxpemVycy5zZXQobmFtZSwgaW5pdEludGVyYWN0b3IpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0VXBkYXRlcnMoY29udGFpbmVyLCBmb3JjZSA9IGZhbHNlKSB7XG4gICAgICAgIGxldCByZXMgPSB1cGRhdGVycy5nZXQoY29udGFpbmVyKTtcbiAgICAgICAgaWYgKCFyZXMgfHwgZm9yY2UpIHtcbiAgICAgICAgICAgIHJlcyA9IFsuLi51cGRhdGVyc0luaXRpYWxpemVycy52YWx1ZXMoKV0ubWFwKCh0KSA9PiB0KGNvbnRhaW5lcikpO1xuICAgICAgICAgICAgdXBkYXRlcnMuc2V0KGNvbnRhaW5lciwgcmVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBzdGF0aWMgYWRkUGFydGljbGVVcGRhdGVyKG5hbWUsIGluaXRVcGRhdGVyKSB7XG4gICAgICAgIHVwZGF0ZXJzSW5pdGlhbGl6ZXJzLnNldChuYW1lLCBpbml0VXBkYXRlcik7XG4gICAgfVxufVxuZXhwb3J0cy5QbHVnaW5zID0gUGx1Z2lucztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Qb2ludCA9IHZvaWQgMDtcbmNsYXNzIFBvaW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwb3NpdGlvbiwgcGFydGljbGUpIHtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHBvc2l0aW9uO1xuICAgICAgICB0aGlzLnBhcnRpY2xlID0gcGFydGljbGU7XG4gICAgfVxufVxuZXhwb3J0cy5Qb2ludCA9IFBvaW50O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlF1YWRUcmVlID0gdm9pZCAwO1xuY29uc3QgUmVjdGFuZ2xlXzEgPSByZXF1aXJlKFwiLi9SZWN0YW5nbGVcIik7XG5jb25zdCBDaXJjbGVfMSA9IHJlcXVpcmUoXCIuL0NpcmNsZVwiKTtcbmNvbnN0IENpcmNsZVdhcnBfMSA9IHJlcXVpcmUoXCIuL0NpcmNsZVdhcnBcIik7XG5jb25zdCBOdW1iZXJVdGlsc18xID0gcmVxdWlyZShcIi4vTnVtYmVyVXRpbHNcIik7XG5jbGFzcyBRdWFkVHJlZSB7XG4gICAgY29uc3RydWN0b3IocmVjdGFuZ2xlLCBjYXBhY2l0eSkge1xuICAgICAgICB0aGlzLnJlY3RhbmdsZSA9IHJlY3RhbmdsZTtcbiAgICAgICAgdGhpcy5jYXBhY2l0eSA9IGNhcGFjaXR5O1xuICAgICAgICB0aGlzLnBvaW50cyA9IFtdO1xuICAgICAgICB0aGlzLmRpdmlkZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgc3ViZGl2aWRlKCkge1xuICAgICAgICBjb25zdCB4ID0gdGhpcy5yZWN0YW5nbGUucG9zaXRpb24ueDtcbiAgICAgICAgY29uc3QgeSA9IHRoaXMucmVjdGFuZ2xlLnBvc2l0aW9uLnk7XG4gICAgICAgIGNvbnN0IHcgPSB0aGlzLnJlY3RhbmdsZS5zaXplLndpZHRoO1xuICAgICAgICBjb25zdCBoID0gdGhpcy5yZWN0YW5nbGUuc2l6ZS5oZWlnaHQ7XG4gICAgICAgIGNvbnN0IGNhcGFjaXR5ID0gdGhpcy5jYXBhY2l0eTtcbiAgICAgICAgdGhpcy5ub3J0aEVhc3QgPSBuZXcgUXVhZFRyZWUobmV3IFJlY3RhbmdsZV8xLlJlY3RhbmdsZSh4LCB5LCB3IC8gMiwgaCAvIDIpLCBjYXBhY2l0eSk7XG4gICAgICAgIHRoaXMubm9ydGhXZXN0ID0gbmV3IFF1YWRUcmVlKG5ldyBSZWN0YW5nbGVfMS5SZWN0YW5nbGUoeCArIHcgLyAyLCB5LCB3IC8gMiwgaCAvIDIpLCBjYXBhY2l0eSk7XG4gICAgICAgIHRoaXMuc291dGhFYXN0ID0gbmV3IFF1YWRUcmVlKG5ldyBSZWN0YW5nbGVfMS5SZWN0YW5nbGUoeCwgeSArIGggLyAyLCB3IC8gMiwgaCAvIDIpLCBjYXBhY2l0eSk7XG4gICAgICAgIHRoaXMuc291dGhXZXN0ID0gbmV3IFF1YWRUcmVlKG5ldyBSZWN0YW5nbGVfMS5SZWN0YW5nbGUoeCArIHcgLyAyLCB5ICsgaCAvIDIsIHcgLyAyLCBoIC8gMiksIGNhcGFjaXR5KTtcbiAgICAgICAgdGhpcy5kaXZpZGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgaW5zZXJ0KHBvaW50KSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2U7XG4gICAgICAgIGlmICghdGhpcy5yZWN0YW5nbGUuY29udGFpbnMocG9pbnQucG9zaXRpb24pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucG9pbnRzLmxlbmd0aCA8IHRoaXMuY2FwYWNpdHkpIHtcbiAgICAgICAgICAgIHRoaXMucG9pbnRzLnB1c2gocG9pbnQpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmRpdmlkZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc3ViZGl2aWRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgoX2UgPSAoKChfYSA9IHRoaXMubm9ydGhFYXN0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaW5zZXJ0KHBvaW50KSkgfHxcbiAgICAgICAgICAgICgoX2IgPSB0aGlzLm5vcnRoV2VzdCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmluc2VydChwb2ludCkpIHx8XG4gICAgICAgICAgICAoKF9jID0gdGhpcy5zb3V0aEVhc3QpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5pbnNlcnQocG9pbnQpKSB8fFxuICAgICAgICAgICAgKChfZCA9IHRoaXMuc291dGhXZXN0KSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuaW5zZXJ0KHBvaW50KSkpKSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiBmYWxzZSk7XG4gICAgfVxuICAgIHF1ZXJ5Q2lyY2xlKHBvc2l0aW9uLCByYWRpdXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucXVlcnkobmV3IENpcmNsZV8xLkNpcmNsZShwb3NpdGlvbi54LCBwb3NpdGlvbi55LCByYWRpdXMpKTtcbiAgICB9XG4gICAgcXVlcnlDaXJjbGVXYXJwKHBvc2l0aW9uLCByYWRpdXMsIGNvbnRhaW5lck9yU2l6ZSkge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBjb250YWluZXJPclNpemU7XG4gICAgICAgIGNvbnN0IHNpemUgPSBjb250YWluZXJPclNpemU7XG4gICAgICAgIHJldHVybiB0aGlzLnF1ZXJ5KG5ldyBDaXJjbGVXYXJwXzEuQ2lyY2xlV2FycChwb3NpdGlvbi54LCBwb3NpdGlvbi55LCByYWRpdXMsIGNvbnRhaW5lci5jYW52YXMgIT09IHVuZGVmaW5lZCA/IGNvbnRhaW5lci5jYW52YXMuc2l6ZSA6IHNpemUpKTtcbiAgICB9XG4gICAgcXVlcnlSZWN0YW5nbGUocG9zaXRpb24sIHNpemUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucXVlcnkobmV3IFJlY3RhbmdsZV8xLlJlY3RhbmdsZShwb3NpdGlvbi54LCBwb3NpdGlvbi55LCBzaXplLndpZHRoLCBzaXplLmhlaWdodCkpO1xuICAgIH1cbiAgICBxdWVyeShyYW5nZSwgZm91bmQpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgICAgICBjb25zdCByZXMgPSBmb3VuZCAhPT0gbnVsbCAmJiBmb3VuZCAhPT0gdm9pZCAwID8gZm91bmQgOiBbXTtcbiAgICAgICAgaWYgKCFyYW5nZS5pbnRlcnNlY3RzKHRoaXMucmVjdGFuZ2xlKSkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yIChjb25zdCBwIG9mIHRoaXMucG9pbnRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFyYW5nZS5jb250YWlucyhwLnBvc2l0aW9uKSAmJiAoMCwgTnVtYmVyVXRpbHNfMS5nZXREaXN0YW5jZSkocmFuZ2UucG9zaXRpb24sIHAucG9zaXRpb24pID4gcC5wYXJ0aWNsZS5nZXRSYWRpdXMoKSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzLnB1c2gocC5wYXJ0aWNsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5kaXZpZGVkKSB7XG4gICAgICAgICAgICAgICAgKF9hID0gdGhpcy5ub3J0aEVhc3QpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5xdWVyeShyYW5nZSwgcmVzKTtcbiAgICAgICAgICAgICAgICAoX2IgPSB0aGlzLm5vcnRoV2VzdCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnF1ZXJ5KHJhbmdlLCByZXMpO1xuICAgICAgICAgICAgICAgIChfYyA9IHRoaXMuc291dGhFYXN0KSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MucXVlcnkocmFuZ2UsIHJlcyk7XG4gICAgICAgICAgICAgICAgKF9kID0gdGhpcy5zb3V0aFdlc3QpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5xdWVyeShyYW5nZSwgcmVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbn1cbmV4cG9ydHMuUXVhZFRyZWUgPSBRdWFkVHJlZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SYW5nZSA9IHZvaWQgMDtcbmNsYXNzIFJhbmdlIHtcbiAgICBjb25zdHJ1Y3Rvcih4LCB5KSB7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSB7XG4gICAgICAgICAgICB4OiB4LFxuICAgICAgICAgICAgeTogeSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLlJhbmdlID0gUmFuZ2U7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUmVjdGFuZ2xlID0gdm9pZCAwO1xuY29uc3QgUmFuZ2VfMSA9IHJlcXVpcmUoXCIuL1JhbmdlXCIpO1xuY2xhc3MgUmVjdGFuZ2xlIGV4dGVuZHMgUmFuZ2VfMS5SYW5nZSB7XG4gICAgY29uc3RydWN0b3IoeCwgeSwgd2lkdGgsIGhlaWdodCkge1xuICAgICAgICBzdXBlcih4LCB5KTtcbiAgICAgICAgdGhpcy5zaXplID0ge1xuICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnRhaW5zKHBvaW50KSB7XG4gICAgICAgIGNvbnN0IHcgPSB0aGlzLnNpemUud2lkdGg7XG4gICAgICAgIGNvbnN0IGggPSB0aGlzLnNpemUuaGVpZ2h0O1xuICAgICAgICBjb25zdCBwb3MgPSB0aGlzLnBvc2l0aW9uO1xuICAgICAgICByZXR1cm4gcG9pbnQueCA+PSBwb3MueCAmJiBwb2ludC54IDw9IHBvcy54ICsgdyAmJiBwb2ludC55ID49IHBvcy55ICYmIHBvaW50LnkgPD0gcG9zLnkgKyBoO1xuICAgIH1cbiAgICBpbnRlcnNlY3RzKHJhbmdlKSB7XG4gICAgICAgIGNvbnN0IHJlY3QgPSByYW5nZTtcbiAgICAgICAgY29uc3QgY2lyY2xlID0gcmFuZ2U7XG4gICAgICAgIGNvbnN0IHcgPSB0aGlzLnNpemUud2lkdGg7XG4gICAgICAgIGNvbnN0IGggPSB0aGlzLnNpemUuaGVpZ2h0O1xuICAgICAgICBjb25zdCBwb3MxID0gdGhpcy5wb3NpdGlvbjtcbiAgICAgICAgY29uc3QgcG9zMiA9IHJhbmdlLnBvc2l0aW9uO1xuICAgICAgICBpZiAoY2lyY2xlLnJhZGl1cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gY2lyY2xlLmludGVyc2VjdHModGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocmVjdC5zaXplICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHNpemUyID0gcmVjdC5zaXplO1xuICAgICAgICAgICAgY29uc3QgdzIgPSBzaXplMi53aWR0aDtcbiAgICAgICAgICAgIGNvbnN0IGgyID0gc2l6ZTIuaGVpZ2h0O1xuICAgICAgICAgICAgcmV0dXJuIHBvczIueCA8IHBvczEueCArIHcgJiYgcG9zMi54ICsgdzIgPiBwb3MxLnggJiYgcG9zMi55IDwgcG9zMS55ICsgaCAmJiBwb3MyLnkgKyBoMiA+IHBvczEueTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuZXhwb3J0cy5SZWN0YW5nbGUgPSBSZWN0YW5nbGU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVjdEJvdW5jZSA9IGV4cG9ydHMuY2lyY2xlQm91bmNlID0gZXhwb3J0cy5jaXJjbGVCb3VuY2VEYXRhRnJvbVBhcnRpY2xlID0gZXhwb3J0cy5kaXZNb2RlID0gZXhwb3J0cy5zaW5nbGVEaXZNb2RlRXhlY3V0ZSA9IGV4cG9ydHMuZGl2TW9kZUV4ZWN1dGUgPSBleHBvcnRzLmlzRGl2TW9kZUVuYWJsZWQgPSBleHBvcnRzLmRlZXBFeHRlbmQgPSBleHBvcnRzLmNhbGN1bGF0ZUJvdW5kcyA9IGV4cG9ydHMuYXJlQm91bmRzSW5zaWRlID0gZXhwb3J0cy5pc1BvaW50SW5zaWRlID0gZXhwb3J0cy5pdGVtRnJvbUFycmF5ID0gZXhwb3J0cy5hcnJheVJhbmRvbUluZGV4ID0gZXhwb3J0cy5sb2FkRm9udCA9IGV4cG9ydHMuaXNJbkFycmF5ID0gZXhwb3J0cy5jYW5jZWxBbmltYXRpb24gPSBleHBvcnRzLmFuaW1hdGUgPSBleHBvcnRzLmlzU3NyID0gdm9pZCAwO1xuY29uc3QgRW51bXNfMSA9IHJlcXVpcmUoXCIuLi9FbnVtc1wiKTtcbmNvbnN0IE51bWJlclV0aWxzXzEgPSByZXF1aXJlKFwiLi9OdW1iZXJVdGlsc1wiKTtcbmNvbnN0IFZlY3Rvcl8xID0gcmVxdWlyZShcIi4uL0NvcmUvUGFydGljbGUvVmVjdG9yXCIpO1xuZnVuY3Rpb24gcmVjdFNpZGVCb3VuY2UocFNpZGUsIHBPdGhlclNpZGUsIHJlY3RTaWRlLCByZWN0T3RoZXJTaWRlLCB2ZWxvY2l0eSwgZmFjdG9yKSB7XG4gICAgY29uc3QgcmVzID0geyBib3VuY2VkOiBmYWxzZSB9O1xuICAgIGlmIChwT3RoZXJTaWRlLm1pbiA+PSByZWN0T3RoZXJTaWRlLm1pbiAmJlxuICAgICAgICBwT3RoZXJTaWRlLm1pbiA8PSByZWN0T3RoZXJTaWRlLm1heCAmJlxuICAgICAgICBwT3RoZXJTaWRlLm1heCA+PSByZWN0T3RoZXJTaWRlLm1pbiAmJlxuICAgICAgICBwT3RoZXJTaWRlLm1heCA8PSByZWN0T3RoZXJTaWRlLm1heCkge1xuICAgICAgICBpZiAoKHBTaWRlLm1heCA+PSByZWN0U2lkZS5taW4gJiYgcFNpZGUubWF4IDw9IChyZWN0U2lkZS5tYXggKyByZWN0U2lkZS5taW4pIC8gMiAmJiB2ZWxvY2l0eSA+IDApIHx8XG4gICAgICAgICAgICAocFNpZGUubWluIDw9IHJlY3RTaWRlLm1heCAmJiBwU2lkZS5taW4gPiAocmVjdFNpZGUubWF4ICsgcmVjdFNpZGUubWluKSAvIDIgJiYgdmVsb2NpdHkgPCAwKSkge1xuICAgICAgICAgICAgcmVzLnZlbG9jaXR5ID0gdmVsb2NpdHkgKiAtZmFjdG9yO1xuICAgICAgICAgICAgcmVzLmJvdW5jZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBjaGVja1NlbGVjdG9yKGVsZW1lbnQsIHNlbGVjdG9ycykge1xuICAgIGlmIChzZWxlY3RvcnMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICBmb3IgKGNvbnN0IHNlbGVjdG9yIG9mIHNlbGVjdG9ycykge1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQubWF0Y2hlcyhzZWxlY3RvcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gZWxlbWVudC5tYXRjaGVzKHNlbGVjdG9ycyk7XG4gICAgfVxufVxuZnVuY3Rpb24gaXNTc3IoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIgfHwgIXdpbmRvdyB8fCB0eXBlb2Ygd2luZG93LmRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiIHx8ICF3aW5kb3cuZG9jdW1lbnQ7XG59XG5leHBvcnRzLmlzU3NyID0gaXNTc3I7XG5mdW5jdGlvbiBhbmltYXRlKCkge1xuICAgIHJldHVybiBpc1NzcigpXG4gICAgICAgID8gKGNhbGxiYWNrKSA9PiBzZXRUaW1lb3V0KGNhbGxiYWNrKVxuICAgICAgICA6IChjYWxsYmFjaykgPT4gKHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgICAgIHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgICAgIHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgICAgIHdpbmRvdy5vUmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICAgICB3aW5kb3cubXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KShjYWxsYmFjayk7XG59XG5leHBvcnRzLmFuaW1hdGUgPSBhbmltYXRlO1xuZnVuY3Rpb24gY2FuY2VsQW5pbWF0aW9uKCkge1xuICAgIHJldHVybiBpc1NzcigpXG4gICAgICAgID8gKGhhbmRsZSkgPT4gY2xlYXJUaW1lb3V0KGhhbmRsZSlcbiAgICAgICAgOiAoaGFuZGxlKSA9PiAod2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICAgICB3aW5kb3cud2Via2l0Q2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICAgICB3aW5kb3cubW96Q2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICAgICB3aW5kb3cub0NhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgd2luZG93Lm1zQ2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KShoYW5kbGUpO1xufVxuZXhwb3J0cy5jYW5jZWxBbmltYXRpb24gPSBjYW5jZWxBbmltYXRpb247XG5mdW5jdGlvbiBpc0luQXJyYXkodmFsdWUsIGFycmF5KSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSBhcnJheSB8fCAoYXJyYXkgaW5zdGFuY2VvZiBBcnJheSAmJiBhcnJheS5pbmRleE9mKHZhbHVlKSA+IC0xKTtcbn1cbmV4cG9ydHMuaXNJbkFycmF5ID0gaXNJbkFycmF5O1xuYXN5bmMgZnVuY3Rpb24gbG9hZEZvbnQoY2hhcmFjdGVyKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICB0cnkge1xuICAgICAgICBhd2FpdCBkb2N1bWVudC5mb250cy5sb2FkKGAkeyhfYSA9IGNoYXJhY3Rlci53ZWlnaHQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFwiNDAwXCJ9IDM2cHggJyR7KF9iID0gY2hhcmFjdGVyLmZvbnQpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFwiVmVyZGFuYVwifSdgKTtcbiAgICB9XG4gICAgY2F0Y2ggKF9jKSB7XG4gICAgfVxufVxuZXhwb3J0cy5sb2FkRm9udCA9IGxvYWRGb250O1xuZnVuY3Rpb24gYXJyYXlSYW5kb21JbmRleChhcnJheSkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhcnJheS5sZW5ndGgpO1xufVxuZXhwb3J0cy5hcnJheVJhbmRvbUluZGV4ID0gYXJyYXlSYW5kb21JbmRleDtcbmZ1bmN0aW9uIGl0ZW1Gcm9tQXJyYXkoYXJyYXksIGluZGV4LCB1c2VJbmRleCA9IHRydWUpIHtcbiAgICBjb25zdCBmaXhlZEluZGV4ID0gaW5kZXggIT09IHVuZGVmaW5lZCAmJiB1c2VJbmRleCA/IGluZGV4ICUgYXJyYXkubGVuZ3RoIDogYXJyYXlSYW5kb21JbmRleChhcnJheSk7XG4gICAgcmV0dXJuIGFycmF5W2ZpeGVkSW5kZXhdO1xufVxuZXhwb3J0cy5pdGVtRnJvbUFycmF5ID0gaXRlbUZyb21BcnJheTtcbmZ1bmN0aW9uIGlzUG9pbnRJbnNpZGUocG9pbnQsIHNpemUsIHJhZGl1cywgZGlyZWN0aW9uKSB7XG4gICAgcmV0dXJuIGFyZUJvdW5kc0luc2lkZShjYWxjdWxhdGVCb3VuZHMocG9pbnQsIHJhZGl1cyAhPT0gbnVsbCAmJiByYWRpdXMgIT09IHZvaWQgMCA/IHJhZGl1cyA6IDApLCBzaXplLCBkaXJlY3Rpb24pO1xufVxuZXhwb3J0cy5pc1BvaW50SW5zaWRlID0gaXNQb2ludEluc2lkZTtcbmZ1bmN0aW9uIGFyZUJvdW5kc0luc2lkZShib3VuZHMsIHNpemUsIGRpcmVjdGlvbikge1xuICAgIGxldCBpbnNpZGUgPSB0cnVlO1xuICAgIGlmICghZGlyZWN0aW9uIHx8IGRpcmVjdGlvbiA9PT0gRW51bXNfMS5PdXRNb2RlRGlyZWN0aW9uLmJvdHRvbSkge1xuICAgICAgICBpbnNpZGUgPSBib3VuZHMudG9wIDwgc2l6ZS5oZWlnaHQ7XG4gICAgfVxuICAgIGlmIChpbnNpZGUgJiYgKCFkaXJlY3Rpb24gfHwgZGlyZWN0aW9uID09PSBFbnVtc18xLk91dE1vZGVEaXJlY3Rpb24ubGVmdCkpIHtcbiAgICAgICAgaW5zaWRlID0gYm91bmRzLnJpZ2h0ID4gMDtcbiAgICB9XG4gICAgaWYgKGluc2lkZSAmJiAoIWRpcmVjdGlvbiB8fCBkaXJlY3Rpb24gPT09IEVudW1zXzEuT3V0TW9kZURpcmVjdGlvbi5yaWdodCkpIHtcbiAgICAgICAgaW5zaWRlID0gYm91bmRzLmxlZnQgPCBzaXplLndpZHRoO1xuICAgIH1cbiAgICBpZiAoaW5zaWRlICYmICghZGlyZWN0aW9uIHx8IGRpcmVjdGlvbiA9PT0gRW51bXNfMS5PdXRNb2RlRGlyZWN0aW9uLnRvcCkpIHtcbiAgICAgICAgaW5zaWRlID0gYm91bmRzLmJvdHRvbSA+IDA7XG4gICAgfVxuICAgIHJldHVybiBpbnNpZGU7XG59XG5leHBvcnRzLmFyZUJvdW5kc0luc2lkZSA9IGFyZUJvdW5kc0luc2lkZTtcbmZ1bmN0aW9uIGNhbGN1bGF0ZUJvdW5kcyhwb2ludCwgcmFkaXVzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYm90dG9tOiBwb2ludC55ICsgcmFkaXVzLFxuICAgICAgICBsZWZ0OiBwb2ludC54IC0gcmFkaXVzLFxuICAgICAgICByaWdodDogcG9pbnQueCArIHJhZGl1cyxcbiAgICAgICAgdG9wOiBwb2ludC55IC0gcmFkaXVzLFxuICAgIH07XG59XG5leHBvcnRzLmNhbGN1bGF0ZUJvdW5kcyA9IGNhbGN1bGF0ZUJvdW5kcztcbmZ1bmN0aW9uIGRlZXBFeHRlbmQoZGVzdGluYXRpb24sIC4uLnNvdXJjZXMpIHtcbiAgICBmb3IgKGNvbnN0IHNvdXJjZSBvZiBzb3VyY2VzKSB7XG4gICAgICAgIGlmIChzb3VyY2UgPT09IHVuZGVmaW5lZCB8fCBzb3VyY2UgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygc291cmNlICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbiA9IHNvdXJjZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNvdXJjZUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KHNvdXJjZSk7XG4gICAgICAgIGlmIChzb3VyY2VJc0FycmF5ICYmICh0eXBlb2YgZGVzdGluYXRpb24gIT09IFwib2JqZWN0XCIgfHwgIWRlc3RpbmF0aW9uIHx8ICFBcnJheS5pc0FycmF5KGRlc3RpbmF0aW9uKSkpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uID0gW107XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIXNvdXJjZUlzQXJyYXkgJiYgKHR5cGVvZiBkZXN0aW5hdGlvbiAhPT0gXCJvYmplY3RcIiB8fCAhZGVzdGluYXRpb24gfHwgQXJyYXkuaXNBcnJheShkZXN0aW5hdGlvbikpKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbiA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHNvdXJjZSkge1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gXCJfX3Byb3RvX19cIikge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc291cmNlRGljdCA9IHNvdXJjZTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gc291cmNlRGljdFtrZXldO1xuICAgICAgICAgICAgY29uc3QgaXNPYmplY3QgPSB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCI7XG4gICAgICAgICAgICBjb25zdCBkZXN0RGljdCA9IGRlc3RpbmF0aW9uO1xuICAgICAgICAgICAgZGVzdERpY3Rba2V5XSA9XG4gICAgICAgICAgICAgICAgaXNPYmplY3QgJiYgQXJyYXkuaXNBcnJheSh2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgPyB2YWx1ZS5tYXAoKHYpID0+IGRlZXBFeHRlbmQoZGVzdERpY3Rba2V5XSwgdikpXG4gICAgICAgICAgICAgICAgICAgIDogZGVlcEV4dGVuZChkZXN0RGljdFtrZXldLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRlc3RpbmF0aW9uO1xufVxuZXhwb3J0cy5kZWVwRXh0ZW5kID0gZGVlcEV4dGVuZDtcbmZ1bmN0aW9uIGlzRGl2TW9kZUVuYWJsZWQobW9kZSwgZGl2cykge1xuICAgIHJldHVybiBkaXZzIGluc3RhbmNlb2YgQXJyYXkgPyAhIWRpdnMuZmluZCgodCkgPT4gdC5lbmFibGUgJiYgaXNJbkFycmF5KG1vZGUsIHQubW9kZSkpIDogaXNJbkFycmF5KG1vZGUsIGRpdnMubW9kZSk7XG59XG5leHBvcnRzLmlzRGl2TW9kZUVuYWJsZWQgPSBpc0Rpdk1vZGVFbmFibGVkO1xuZnVuY3Rpb24gZGl2TW9kZUV4ZWN1dGUobW9kZSwgZGl2cywgY2FsbGJhY2spIHtcbiAgICBpZiAoZGl2cyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIGZvciAoY29uc3QgZGl2IG9mIGRpdnMpIHtcbiAgICAgICAgICAgIGNvbnN0IGRpdk1vZGUgPSBkaXYubW9kZTtcbiAgICAgICAgICAgIGNvbnN0IGRpdkVuYWJsZWQgPSBkaXYuZW5hYmxlO1xuICAgICAgICAgICAgaWYgKGRpdkVuYWJsZWQgJiYgaXNJbkFycmF5KG1vZGUsIGRpdk1vZGUpKSB7XG4gICAgICAgICAgICAgICAgc2luZ2xlRGl2TW9kZUV4ZWN1dGUoZGl2LCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGRpdk1vZGUgPSBkaXZzLm1vZGU7XG4gICAgICAgIGNvbnN0IGRpdkVuYWJsZWQgPSBkaXZzLmVuYWJsZTtcbiAgICAgICAgaWYgKGRpdkVuYWJsZWQgJiYgaXNJbkFycmF5KG1vZGUsIGRpdk1vZGUpKSB7XG4gICAgICAgICAgICBzaW5nbGVEaXZNb2RlRXhlY3V0ZShkaXZzLCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLmRpdk1vZGVFeGVjdXRlID0gZGl2TW9kZUV4ZWN1dGU7XG5mdW5jdGlvbiBzaW5nbGVEaXZNb2RlRXhlY3V0ZShkaXYsIGNhbGxiYWNrKSB7XG4gICAgY29uc3Qgc2VsZWN0b3JzID0gZGl2LnNlbGVjdG9ycztcbiAgICBpZiAoc2VsZWN0b3JzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgZm9yIChjb25zdCBzZWxlY3RvciBvZiBzZWxlY3RvcnMpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKHNlbGVjdG9yLCBkaXYpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjYWxsYmFjayhzZWxlY3RvcnMsIGRpdik7XG4gICAgfVxufVxuZXhwb3J0cy5zaW5nbGVEaXZNb2RlRXhlY3V0ZSA9IHNpbmdsZURpdk1vZGVFeGVjdXRlO1xuZnVuY3Rpb24gZGl2TW9kZShkaXZzLCBlbGVtZW50KSB7XG4gICAgaWYgKCFlbGVtZW50IHx8ICFkaXZzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGRpdnMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICByZXR1cm4gZGl2cy5maW5kKChkKSA9PiBjaGVja1NlbGVjdG9yKGVsZW1lbnQsIGQuc2VsZWN0b3JzKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNoZWNrU2VsZWN0b3IoZWxlbWVudCwgZGl2cy5zZWxlY3RvcnMpKSB7XG4gICAgICAgIHJldHVybiBkaXZzO1xuICAgIH1cbn1cbmV4cG9ydHMuZGl2TW9kZSA9IGRpdk1vZGU7XG5mdW5jdGlvbiBjaXJjbGVCb3VuY2VEYXRhRnJvbVBhcnRpY2xlKHApIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBwb3NpdGlvbjogcC5nZXRQb3NpdGlvbigpLFxuICAgICAgICByYWRpdXM6IHAuZ2V0UmFkaXVzKCksXG4gICAgICAgIG1hc3M6IHAuZ2V0TWFzcygpLFxuICAgICAgICB2ZWxvY2l0eTogcC52ZWxvY2l0eSxcbiAgICAgICAgZmFjdG9yOiBWZWN0b3JfMS5WZWN0b3IuY3JlYXRlKCgwLCBOdW1iZXJVdGlsc18xLmdldFZhbHVlKShwLm9wdGlvbnMuYm91bmNlLmhvcml6b250YWwpLCAoMCwgTnVtYmVyVXRpbHNfMS5nZXRWYWx1ZSkocC5vcHRpb25zLmJvdW5jZS52ZXJ0aWNhbCkpLFxuICAgIH07XG59XG5leHBvcnRzLmNpcmNsZUJvdW5jZURhdGFGcm9tUGFydGljbGUgPSBjaXJjbGVCb3VuY2VEYXRhRnJvbVBhcnRpY2xlO1xuZnVuY3Rpb24gY2lyY2xlQm91bmNlKHAxLCBwMikge1xuICAgIGNvbnN0IHsgeDogeFZlbG9jaXR5RGlmZiwgeTogeVZlbG9jaXR5RGlmZiB9ID0gcDEudmVsb2NpdHkuc3ViKHAyLnZlbG9jaXR5KTtcbiAgICBjb25zdCBbcG9zMSwgcG9zMl0gPSBbcDEucG9zaXRpb24sIHAyLnBvc2l0aW9uXTtcbiAgICBjb25zdCB7IGR4OiB4RGlzdCwgZHk6IHlEaXN0IH0gPSAoMCwgTnVtYmVyVXRpbHNfMS5nZXREaXN0YW5jZXMpKHBvczIsIHBvczEpO1xuICAgIGlmICh4VmVsb2NpdHlEaWZmICogeERpc3QgKyB5VmVsb2NpdHlEaWZmICogeURpc3QgPj0gMCkge1xuICAgICAgICBjb25zdCBhbmdsZSA9IC1NYXRoLmF0YW4yKHlEaXN0LCB4RGlzdCk7XG4gICAgICAgIGNvbnN0IG0xID0gcDEubWFzcztcbiAgICAgICAgY29uc3QgbTIgPSBwMi5tYXNzO1xuICAgICAgICBjb25zdCB1MSA9IHAxLnZlbG9jaXR5LnJvdGF0ZShhbmdsZSk7XG4gICAgICAgIGNvbnN0IHUyID0gcDIudmVsb2NpdHkucm90YXRlKGFuZ2xlKTtcbiAgICAgICAgY29uc3QgdjEgPSAoMCwgTnVtYmVyVXRpbHNfMS5jb2xsaXNpb25WZWxvY2l0eSkodTEsIHUyLCBtMSwgbTIpO1xuICAgICAgICBjb25zdCB2MiA9ICgwLCBOdW1iZXJVdGlsc18xLmNvbGxpc2lvblZlbG9jaXR5KSh1MiwgdTEsIG0xLCBtMik7XG4gICAgICAgIGNvbnN0IHZGaW5hbDEgPSB2MS5yb3RhdGUoLWFuZ2xlKTtcbiAgICAgICAgY29uc3QgdkZpbmFsMiA9IHYyLnJvdGF0ZSgtYW5nbGUpO1xuICAgICAgICBwMS52ZWxvY2l0eS54ID0gdkZpbmFsMS54ICogcDEuZmFjdG9yLng7XG4gICAgICAgIHAxLnZlbG9jaXR5LnkgPSB2RmluYWwxLnkgKiBwMS5mYWN0b3IueTtcbiAgICAgICAgcDIudmVsb2NpdHkueCA9IHZGaW5hbDIueCAqIHAyLmZhY3Rvci54O1xuICAgICAgICBwMi52ZWxvY2l0eS55ID0gdkZpbmFsMi55ICogcDIuZmFjdG9yLnk7XG4gICAgfVxufVxuZXhwb3J0cy5jaXJjbGVCb3VuY2UgPSBjaXJjbGVCb3VuY2U7XG5mdW5jdGlvbiByZWN0Qm91bmNlKHBhcnRpY2xlLCBkaXZCb3VuZHMpIHtcbiAgICBjb25zdCBwUG9zID0gcGFydGljbGUuZ2V0UG9zaXRpb24oKTtcbiAgICBjb25zdCBzaXplID0gcGFydGljbGUuZ2V0UmFkaXVzKCk7XG4gICAgY29uc3QgYm91bmRzID0gY2FsY3VsYXRlQm91bmRzKHBQb3MsIHNpemUpO1xuICAgIGNvbnN0IHJlc0ggPSByZWN0U2lkZUJvdW5jZSh7XG4gICAgICAgIG1pbjogYm91bmRzLmxlZnQsXG4gICAgICAgIG1heDogYm91bmRzLnJpZ2h0LFxuICAgIH0sIHtcbiAgICAgICAgbWluOiBib3VuZHMudG9wLFxuICAgICAgICBtYXg6IGJvdW5kcy5ib3R0b20sXG4gICAgfSwge1xuICAgICAgICBtaW46IGRpdkJvdW5kcy5sZWZ0LFxuICAgICAgICBtYXg6IGRpdkJvdW5kcy5yaWdodCxcbiAgICB9LCB7XG4gICAgICAgIG1pbjogZGl2Qm91bmRzLnRvcCxcbiAgICAgICAgbWF4OiBkaXZCb3VuZHMuYm90dG9tLFxuICAgIH0sIHBhcnRpY2xlLnZlbG9jaXR5LngsICgwLCBOdW1iZXJVdGlsc18xLmdldFZhbHVlKShwYXJ0aWNsZS5vcHRpb25zLmJvdW5jZS5ob3Jpem9udGFsKSk7XG4gICAgaWYgKHJlc0guYm91bmNlZCkge1xuICAgICAgICBpZiAocmVzSC52ZWxvY2l0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwYXJ0aWNsZS52ZWxvY2l0eS54ID0gcmVzSC52ZWxvY2l0eTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzSC5wb3NpdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwYXJ0aWNsZS5wb3NpdGlvbi54ID0gcmVzSC5wb3NpdGlvbjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCByZXNWID0gcmVjdFNpZGVCb3VuY2Uoe1xuICAgICAgICBtaW46IGJvdW5kcy50b3AsXG4gICAgICAgIG1heDogYm91bmRzLmJvdHRvbSxcbiAgICB9LCB7XG4gICAgICAgIG1pbjogYm91bmRzLmxlZnQsXG4gICAgICAgIG1heDogYm91bmRzLnJpZ2h0LFxuICAgIH0sIHtcbiAgICAgICAgbWluOiBkaXZCb3VuZHMudG9wLFxuICAgICAgICBtYXg6IGRpdkJvdW5kcy5ib3R0b20sXG4gICAgfSwge1xuICAgICAgICBtaW46IGRpdkJvdW5kcy5sZWZ0LFxuICAgICAgICBtYXg6IGRpdkJvdW5kcy5yaWdodCxcbiAgICB9LCBwYXJ0aWNsZS52ZWxvY2l0eS55LCAoMCwgTnVtYmVyVXRpbHNfMS5nZXRWYWx1ZSkocGFydGljbGUub3B0aW9ucy5ib3VuY2UudmVydGljYWwpKTtcbiAgICBpZiAocmVzVi5ib3VuY2VkKSB7XG4gICAgICAgIGlmIChyZXNWLnZlbG9jaXR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHBhcnRpY2xlLnZlbG9jaXR5LnkgPSByZXNWLnZlbG9jaXR5O1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXNWLnBvc2l0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHBhcnRpY2xlLnBvc2l0aW9uLnkgPSByZXNWLnBvc2l0aW9uO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5yZWN0Qm91bmNlID0gcmVjdEJvdW5jZTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vQ2FudmFzVXRpbHNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0NpcmNsZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vQ2lyY2xlV2FycFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vQ29sb3JVdGlsc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vQ29uc3RhbnRzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9FdmVudExpc3RlbmVyc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vTnVtYmVyVXRpbHNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL1BsdWdpbnNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL1BvaW50XCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9RdWFkVHJlZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vUmFuZ2VcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL1JlY3RhbmdsZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vVXRpbHNcIiksIGV4cG9ydHMpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvYWRGdWxsID0gdm9pZCAwO1xuY29uc3Qgc2xpbV8xID0gcmVxdWlyZShcIi4vc2xpbVwiKTtcbmNvbnN0IFRyYWlsXzEgPSByZXF1aXJlKFwiLi9JbnRlcmFjdGlvbnMvRXh0ZXJuYWwvVHJhaWxcIik7XG5jb25zdCBUaWx0XzEgPSByZXF1aXJlKFwiLi9VcGRhdGVycy9UaWx0XCIpO1xuY29uc3QgV29iYmxlXzEgPSByZXF1aXJlKFwiLi9VcGRhdGVycy9Xb2JibGVcIik7XG5jb25zdCBwbHVnaW5fMSA9IHJlcXVpcmUoXCIuL1BsdWdpbnMvQWJzb3JiZXJzL3BsdWdpblwiKTtcbmNvbnN0IHBsdWdpbl8yID0gcmVxdWlyZShcIi4vUGx1Z2lucy9FbWl0dGVycy9wbHVnaW5cIik7XG5jb25zdCBwbHVnaW5fMyA9IHJlcXVpcmUoXCIuL1BsdWdpbnMvUG9seWdvbk1hc2svcGx1Z2luXCIpO1xuY29uc3QgUm9sbF8xID0gcmVxdWlyZShcIi4vVXBkYXRlcnMvUm9sbFwiKTtcbmFzeW5jIGZ1bmN0aW9uIGxvYWRGdWxsKHRzUGFydGljbGVzKSB7XG4gICAgYXdhaXQgKDAsIHNsaW1fMS5sb2FkU2xpbSkodHNQYXJ0aWNsZXMpO1xuICAgIGF3YWl0ICgwLCBUcmFpbF8xLmxvYWRFeHRlcm5hbFRyYWlsSW50ZXJhY3Rpb24pKHRzUGFydGljbGVzKTtcbiAgICBhd2FpdCAoMCwgUm9sbF8xLmxvYWRSb2xsVXBkYXRlcikodHNQYXJ0aWNsZXMpO1xuICAgIGF3YWl0ICgwLCBUaWx0XzEubG9hZFRpbHRVcGRhdGVyKSh0c1BhcnRpY2xlcyk7XG4gICAgYXdhaXQgKDAsIFdvYmJsZV8xLmxvYWRXb2JibGVVcGRhdGVyKSh0c1BhcnRpY2xlcyk7XG4gICAgYXdhaXQgKDAsIHBsdWdpbl8xLmxvYWRBYnNvcmJlcnNQbHVnaW4pKHRzUGFydGljbGVzKTtcbiAgICBhd2FpdCAoMCwgcGx1Z2luXzIubG9hZEVtaXR0ZXJzUGx1Z2luKSh0c1BhcnRpY2xlcyk7XG4gICAgYXdhaXQgKDAsIHBsdWdpbl8zLmxvYWRQb2x5Z29uTWFza1BsdWdpbikodHNQYXJ0aWNsZXMpO1xufVxuZXhwb3J0cy5sb2FkRnVsbCA9IGxvYWRGdWxsO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudHNQYXJ0aWNsZXMgPSBleHBvcnRzLnBKU0RvbSA9IGV4cG9ydHMucGFydGljbGVzSlMgPSBleHBvcnRzLk1haW4gPSBleHBvcnRzLlJlY3RhbmdsZSA9IGV4cG9ydHMuUG9pbnQgPSBleHBvcnRzLkNvbnN0YW50cyA9IGV4cG9ydHMuQ2lyY2xlV2FycCA9IGV4cG9ydHMuQ2lyY2xlID0gdm9pZCAwO1xuY29uc3QgcGpzXzEgPSByZXF1aXJlKFwiLi9wanNcIik7XG5jb25zdCBtYWluXzEgPSByZXF1aXJlKFwiLi9tYWluXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTWFpblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWFpbl8xLk1haW47IH0gfSk7XG5jb25zdCBVdGlsc18xID0gcmVxdWlyZShcIi4vVXRpbHNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDaXJjbGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFV0aWxzXzEuQ2lyY2xlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2lyY2xlV2FycFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gVXRpbHNfMS5DaXJjbGVXYXJwOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ29uc3RhbnRzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBVdGlsc18xLkNvbnN0YW50czsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlBvaW50XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBVdGlsc18xLlBvaW50OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUmVjdGFuZ2xlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBVdGlsc18xLlJlY3RhbmdsZTsgfSB9KTtcbmNvbnN0IGZ1bGxfMSA9IHJlcXVpcmUoXCIuL2Z1bGxcIik7XG5jb25zdCB0c1BhcnRpY2xlcyA9IG5ldyBtYWluXzEuTWFpbigpO1xuZXhwb3J0cy50c1BhcnRpY2xlcyA9IHRzUGFydGljbGVzO1xudHNQYXJ0aWNsZXMuaW5pdCgpO1xuY29uc3QgeyBwYXJ0aWNsZXNKUywgcEpTRG9tIH0gPSAoMCwgcGpzXzEuaW5pdFBqcykodHNQYXJ0aWNsZXMpO1xuZXhwb3J0cy5wYXJ0aWNsZXNKUyA9IHBhcnRpY2xlc0pTO1xuZXhwb3J0cy5wSlNEb20gPSBwSlNEb207XG4oMCwgZnVsbF8xLmxvYWRGdWxsKSh0c1BhcnRpY2xlcyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vQ29yZS9QYXJ0aWNsZS9WZWN0b3JcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0NvcmUvQ29udGFpbmVyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9FbnVtc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vUGx1Z2lucy9BYnNvcmJlcnMvRW51bXNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL1BsdWdpbnMvRW1pdHRlcnMvRW51bXNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL1BsdWdpbnMvUG9seWdvbk1hc2svRW51bXNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL1V0aWxzL0NhbnZhc1V0aWxzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9VdGlscy9Db2xvclV0aWxzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9VdGlscy9OdW1iZXJVdGlsc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vVXRpbHMvVXRpbHNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL1R5cGVzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9Db3JlL0ludGVyZmFjZXNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0NvcmUvUGFydGljbGVcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0NvcmUvRXh0ZXJuYWxJbnRlcmFjdG9yQmFzZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vQ29yZS9QYXJ0aWNsZXNJbnRlcmFjdG9yQmFzZVwiKSwgZXhwb3J0cyk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn07XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfTWFpbl9pbml0aWFsaXplZDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTWFpbiA9IHZvaWQgMDtcbmNvbnN0IFV0aWxzXzEgPSByZXF1aXJlKFwiLi9VdGlsc1wiKTtcbmNvbnN0IExvYWRlcl8xID0gcmVxdWlyZShcIi4vQ29yZS9Mb2FkZXJcIik7XG5jbGFzcyBNYWluIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgX01haW5faW5pdGlhbGl6ZWQuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX01haW5faW5pdGlhbGl6ZWQsIGZhbHNlLCBcImZcIik7XG4gICAgfVxuICAgIGluaXQoKSB7XG4gICAgICAgIGlmICghX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTWFpbl9pbml0aWFsaXplZCwgXCJmXCIpKSB7XG4gICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9NYWluX2luaXRpYWxpemVkLCB0cnVlLCBcImZcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgbG9hZEZyb21BcnJheSh0YWdJZCwgb3B0aW9ucywgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIExvYWRlcl8xLkxvYWRlci5sb2FkKHRhZ0lkLCBvcHRpb25zLCBpbmRleCk7XG4gICAgfVxuICAgIGFzeW5jIGxvYWQodGFnSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIExvYWRlcl8xLkxvYWRlci5sb2FkKHRhZ0lkLCBvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgc2V0KGlkLCBlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBMb2FkZXJfMS5Mb2FkZXIuc2V0KGlkLCBlbGVtZW50LCBvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgbG9hZEpTT04odGFnSWQsIHBhdGhDb25maWdKc29uLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gTG9hZGVyXzEuTG9hZGVyLmxvYWRKU09OKHRhZ0lkLCBwYXRoQ29uZmlnSnNvbiwgaW5kZXgpO1xuICAgIH1cbiAgICBhc3luYyBzZXRKU09OKGlkLCBlbGVtZW50LCBwYXRoQ29uZmlnSnNvbiwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIExvYWRlcl8xLkxvYWRlci5zZXRKU09OKGlkLCBlbGVtZW50LCBwYXRoQ29uZmlnSnNvbiwgaW5kZXgpO1xuICAgIH1cbiAgICBzZXRPbkNsaWNrSGFuZGxlcihjYWxsYmFjaykge1xuICAgICAgICBMb2FkZXJfMS5Mb2FkZXIuc2V0T25DbGlja0hhbmRsZXIoY2FsbGJhY2spO1xuICAgIH1cbiAgICBkb20oKSB7XG4gICAgICAgIHJldHVybiBMb2FkZXJfMS5Mb2FkZXIuZG9tKCk7XG4gICAgfVxuICAgIGRvbUl0ZW0oaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIExvYWRlcl8xLkxvYWRlci5kb21JdGVtKGluZGV4KTtcbiAgICB9XG4gICAgYXN5bmMgcmVmcmVzaCgpIHtcbiAgICAgICAgZm9yIChjb25zdCBpbnN0YW5jZSBvZiB0aGlzLmRvbSgpKSB7XG4gICAgICAgICAgICBhd2FpdCBpbnN0YW5jZS5yZWZyZXNoKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgYWRkU2hhcGUoc2hhcGUsIGRyYXdlciwgaW5pdCwgYWZ0ZXJFZmZlY3QsIGRlc3Ryb3kpIHtcbiAgICAgICAgbGV0IGN1c3RvbURyYXdlcjtcbiAgICAgICAgaWYgKHR5cGVvZiBkcmF3ZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgY3VzdG9tRHJhd2VyID0ge1xuICAgICAgICAgICAgICAgIGFmdGVyRWZmZWN0OiBhZnRlckVmZmVjdCxcbiAgICAgICAgICAgICAgICBkZXN0cm95OiBkZXN0cm95LFxuICAgICAgICAgICAgICAgIGRyYXc6IGRyYXdlcixcbiAgICAgICAgICAgICAgICBpbml0OiBpbml0LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGN1c3RvbURyYXdlciA9IGRyYXdlcjtcbiAgICAgICAgfVxuICAgICAgICBVdGlsc18xLlBsdWdpbnMuYWRkU2hhcGVEcmF3ZXIoc2hhcGUsIGN1c3RvbURyYXdlcik7XG4gICAgICAgIGF3YWl0IHRoaXMucmVmcmVzaCgpO1xuICAgIH1cbiAgICBhc3luYyBhZGRQcmVzZXQocHJlc2V0LCBvcHRpb25zLCBvdmVycmlkZSA9IGZhbHNlKSB7XG4gICAgICAgIFV0aWxzXzEuUGx1Z2lucy5hZGRQcmVzZXQocHJlc2V0LCBvcHRpb25zLCBvdmVycmlkZSk7XG4gICAgICAgIGF3YWl0IHRoaXMucmVmcmVzaCgpO1xuICAgIH1cbiAgICBhc3luYyBhZGRQbHVnaW4ocGx1Z2luKSB7XG4gICAgICAgIFV0aWxzXzEuUGx1Z2lucy5hZGRQbHVnaW4ocGx1Z2luKTtcbiAgICAgICAgYXdhaXQgdGhpcy5yZWZyZXNoKCk7XG4gICAgfVxuICAgIGFzeW5jIGFkZFBhdGhHZW5lcmF0b3IobmFtZSwgZ2VuZXJhdG9yKSB7XG4gICAgICAgIFV0aWxzXzEuUGx1Z2lucy5hZGRQYXRoR2VuZXJhdG9yKG5hbWUsIGdlbmVyYXRvcik7XG4gICAgICAgIGF3YWl0IHRoaXMucmVmcmVzaCgpO1xuICAgIH1cbiAgICBhc3luYyBhZGRJbnRlcmFjdG9yKG5hbWUsIGludGVyYWN0b3JJbml0aWFsaXplcikge1xuICAgICAgICBVdGlsc18xLlBsdWdpbnMuYWRkSW50ZXJhY3RvcihuYW1lLCBpbnRlcmFjdG9ySW5pdGlhbGl6ZXIpO1xuICAgICAgICBhd2FpdCB0aGlzLnJlZnJlc2goKTtcbiAgICB9XG4gICAgYXN5bmMgYWRkUGFydGljbGVVcGRhdGVyKG5hbWUsIHVwZGF0ZXJJbml0aWFsaXplcikge1xuICAgICAgICBVdGlsc18xLlBsdWdpbnMuYWRkUGFydGljbGVVcGRhdGVyKG5hbWUsIHVwZGF0ZXJJbml0aWFsaXplcik7XG4gICAgICAgIGF3YWl0IHRoaXMucmVmcmVzaCgpO1xuICAgIH1cbn1cbmV4cG9ydHMuTWFpbiA9IE1haW47XG5fTWFpbl9pbml0aWFsaXplZCA9IG5ldyBXZWFrTWFwKCk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaW5pdFBqcyA9IHZvaWQgMDtcbmNvbnN0IGluaXRQanMgPSAobWFpbikgPT4ge1xuICAgIGNvbnN0IHBhcnRpY2xlc0pTID0gKHRhZ0lkLCBvcHRpb25zKSA9PiB7XG4gICAgICAgIHJldHVybiBtYWluLmxvYWQodGFnSWQsIG9wdGlvbnMpO1xuICAgIH07XG4gICAgcGFydGljbGVzSlMubG9hZCA9ICh0YWdJZCwgcGF0aENvbmZpZ0pzb24sIGNhbGxiYWNrKSA9PiB7XG4gICAgICAgIG1haW4ubG9hZEpTT04odGFnSWQsIHBhdGhDb25maWdKc29uKVxuICAgICAgICAgICAgLnRoZW4oKGNvbnRhaW5lcikgPT4ge1xuICAgICAgICAgICAgaWYgKGNvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGNvbnRhaW5lcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goKCkgPT4ge1xuICAgICAgICAgICAgY2FsbGJhY2sodW5kZWZpbmVkKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBwYXJ0aWNsZXNKUy5zZXRPbkNsaWNrSGFuZGxlciA9IChjYWxsYmFjaykgPT4ge1xuICAgICAgICBtYWluLnNldE9uQ2xpY2tIYW5kbGVyKGNhbGxiYWNrKTtcbiAgICB9O1xuICAgIGNvbnN0IHBKU0RvbSA9IG1haW4uZG9tKCk7XG4gICAgcmV0dXJuIHsgcGFydGljbGVzSlMsIHBKU0RvbSB9O1xufTtcbmV4cG9ydHMuaW5pdFBqcyA9IGluaXRQanM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubG9hZFNsaW0gPSB2b2lkIDA7XG5jb25zdCBDaXJjbGVfMSA9IHJlcXVpcmUoXCIuL1NoYXBlcy9DaXJjbGVcIik7XG5jb25zdCBMaWZlXzEgPSByZXF1aXJlKFwiLi9VcGRhdGVycy9MaWZlXCIpO1xuY29uc3QgQ29ubmVjdF8xID0gcmVxdWlyZShcIi4vSW50ZXJhY3Rpb25zL0V4dGVybmFsL0Nvbm5lY3RcIik7XG5jb25zdCBPcGFjaXR5XzEgPSByZXF1aXJlKFwiLi9VcGRhdGVycy9PcGFjaXR5XCIpO1xuY29uc3QgSW1hZ2VfMSA9IHJlcXVpcmUoXCIuL1NoYXBlcy9JbWFnZVwiKTtcbmNvbnN0IFBvbHlnb25fMSA9IHJlcXVpcmUoXCIuL1NoYXBlcy9Qb2x5Z29uXCIpO1xuY29uc3QgQnViYmxlXzEgPSByZXF1aXJlKFwiLi9JbnRlcmFjdGlvbnMvRXh0ZXJuYWwvQnViYmxlXCIpO1xuY29uc3QgQXR0cmFjdF8xID0gcmVxdWlyZShcIi4vSW50ZXJhY3Rpb25zL0V4dGVybmFsL0F0dHJhY3RcIik7XG5jb25zdCBHcmFiXzEgPSByZXF1aXJlKFwiLi9JbnRlcmFjdGlvbnMvRXh0ZXJuYWwvR3JhYlwiKTtcbmNvbnN0IFN0YXJfMSA9IHJlcXVpcmUoXCIuL1NoYXBlcy9TdGFyXCIpO1xuY29uc3QgQXR0cmFjdF8yID0gcmVxdWlyZShcIi4vSW50ZXJhY3Rpb25zL1BhcnRpY2xlcy9BdHRyYWN0XCIpO1xuY29uc3QgU3F1YXJlXzEgPSByZXF1aXJlKFwiLi9TaGFwZXMvU3F1YXJlXCIpO1xuY29uc3QgU3Ryb2tlQ29sb3JfMSA9IHJlcXVpcmUoXCIuL1VwZGF0ZXJzL1N0cm9rZUNvbG9yXCIpO1xuY29uc3QgQ29sb3JfMSA9IHJlcXVpcmUoXCIuL1VwZGF0ZXJzL0NvbG9yXCIpO1xuY29uc3QgQ29sbGlzaW9uc18xID0gcmVxdWlyZShcIi4vSW50ZXJhY3Rpb25zL1BhcnRpY2xlcy9Db2xsaXNpb25zXCIpO1xuY29uc3QgQW5nbGVfMSA9IHJlcXVpcmUoXCIuL1VwZGF0ZXJzL0FuZ2xlXCIpO1xuY29uc3QgT3V0TW9kZXNfMSA9IHJlcXVpcmUoXCIuL1VwZGF0ZXJzL091dE1vZGVzXCIpO1xuY29uc3QgUmVwdWxzZV8xID0gcmVxdWlyZShcIi4vSW50ZXJhY3Rpb25zL0V4dGVybmFsL1JlcHVsc2VcIik7XG5jb25zdCBMaW5lXzEgPSByZXF1aXJlKFwiLi9TaGFwZXMvTGluZVwiKTtcbmNvbnN0IEJvdW5jZV8xID0gcmVxdWlyZShcIi4vSW50ZXJhY3Rpb25zL0V4dGVybmFsL0JvdW5jZVwiKTtcbmNvbnN0IFRleHRfMSA9IHJlcXVpcmUoXCIuL1NoYXBlcy9UZXh0XCIpO1xuY29uc3QgTGlua3NfMSA9IHJlcXVpcmUoXCIuL0ludGVyYWN0aW9ucy9QYXJ0aWNsZXMvTGlua3NcIik7XG5jb25zdCBTaXplXzEgPSByZXF1aXJlKFwiLi9VcGRhdGVycy9TaXplXCIpO1xuYXN5bmMgZnVuY3Rpb24gbG9hZFNsaW0odHNQYXJ0aWNsZXMpIHtcbiAgICBhd2FpdCAoMCwgQXR0cmFjdF8xLmxvYWRFeHRlcm5hbEF0dHJhY3RJbnRlcmFjdGlvbikodHNQYXJ0aWNsZXMpO1xuICAgIGF3YWl0ICgwLCBCb3VuY2VfMS5sb2FkRXh0ZXJuYWxCb3VuY2VJbnRlcmFjdGlvbikodHNQYXJ0aWNsZXMpO1xuICAgIGF3YWl0ICgwLCBCdWJibGVfMS5sb2FkRXh0ZXJuYWxCdWJibGVJbnRlcmFjdGlvbikodHNQYXJ0aWNsZXMpO1xuICAgIGF3YWl0ICgwLCBDb25uZWN0XzEubG9hZEV4dGVybmFsQ29ubmVjdEludGVyYWN0aW9uKSh0c1BhcnRpY2xlcyk7XG4gICAgYXdhaXQgKDAsIEdyYWJfMS5sb2FkRXh0ZXJuYWxHcmFiSW50ZXJhY3Rpb24pKHRzUGFydGljbGVzKTtcbiAgICBhd2FpdCAoMCwgUmVwdWxzZV8xLmxvYWRFeHRlcm5hbFJlcHVsc2VJbnRlcmFjdGlvbikodHNQYXJ0aWNsZXMpO1xuICAgIGF3YWl0ICgwLCBBdHRyYWN0XzIubG9hZFBhcnRpY2xlc0F0dHJhY3RJbnRlcmFjdGlvbikodHNQYXJ0aWNsZXMpO1xuICAgIGF3YWl0ICgwLCBDb2xsaXNpb25zXzEubG9hZFBhcnRpY2xlc0NvbGxpc2lvbnNJbnRlcmFjdGlvbikodHNQYXJ0aWNsZXMpO1xuICAgIGF3YWl0ICgwLCBMaW5rc18xLmxvYWRQYXJ0aWNsZXNMaW5rc0ludGVyYWN0aW9uKSh0c1BhcnRpY2xlcyk7XG4gICAgYXdhaXQgKDAsIENpcmNsZV8xLmxvYWRDaXJjbGVTaGFwZSkodHNQYXJ0aWNsZXMpO1xuICAgIGF3YWl0ICgwLCBJbWFnZV8xLmxvYWRJbWFnZVNoYXBlKSh0c1BhcnRpY2xlcyk7XG4gICAgYXdhaXQgKDAsIExpbmVfMS5sb2FkTGluZVNoYXBlKSh0c1BhcnRpY2xlcyk7XG4gICAgYXdhaXQgKDAsIFBvbHlnb25fMS5sb2FkUG9seWdvblNoYXBlKSh0c1BhcnRpY2xlcyk7XG4gICAgYXdhaXQgKDAsIFNxdWFyZV8xLmxvYWRTcXVhcmVTaGFwZSkodHNQYXJ0aWNsZXMpO1xuICAgIGF3YWl0ICgwLCBTdGFyXzEubG9hZFN0YXJTaGFwZSkodHNQYXJ0aWNsZXMpO1xuICAgIGF3YWl0ICgwLCBUZXh0XzEubG9hZFRleHRTaGFwZSkodHNQYXJ0aWNsZXMpO1xuICAgIGF3YWl0ICgwLCBMaWZlXzEubG9hZExpZmVVcGRhdGVyKSh0c1BhcnRpY2xlcyk7XG4gICAgYXdhaXQgKDAsIE9wYWNpdHlfMS5sb2FkT3BhY2l0eVVwZGF0ZXIpKHRzUGFydGljbGVzKTtcbiAgICBhd2FpdCAoMCwgU2l6ZV8xLmxvYWRTaXplVXBkYXRlcikodHNQYXJ0aWNsZXMpO1xuICAgIGF3YWl0ICgwLCBBbmdsZV8xLmxvYWRBbmdsZVVwZGF0ZXIpKHRzUGFydGljbGVzKTtcbiAgICBhd2FpdCAoMCwgQ29sb3JfMS5sb2FkQ29sb3JVcGRhdGVyKSh0c1BhcnRpY2xlcyk7XG4gICAgYXdhaXQgKDAsIFN0cm9rZUNvbG9yXzEubG9hZFN0cm9rZUNvbG9yVXBkYXRlcikodHNQYXJ0aWNsZXMpO1xuICAgIGF3YWl0ICgwLCBPdXRNb2Rlc18xLmxvYWRPdXRNb2Rlc1VwZGF0ZXIpKHRzUGFydGljbGVzKTtcbn1cbmV4cG9ydHMubG9hZFNsaW0gPSBsb2FkU2xpbTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmNcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSBzY3JpcHRVcmwgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV0uc3JjXG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIl9fd2VicGFja19yZXF1aXJlX18uYiA9IGRvY3VtZW50LmJhc2VVUkkgfHwgc2VsZi5sb2NhdGlvbi5ocmVmO1xuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdDE3OTogMFxufTtcblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBubyBqc29ucCBmdW5jdGlvbiIsImNvbnN0IGFwaUhhbmRsZXIgPSAoKCkgPT4ge1xuICBjb25zdCBhcGlMaW5rID0gXCJodHRwczovL2FwaS5vcGVud2VhdGhlcm1hcC5vcmcvZGF0YS8yLjUvd2VhdGhlcj9cIjtcbiAgY29uc3QgYXBpS2V5ID0gXCI5NGEyYWFkNGEzODEyMWU3OTQ3MzVhOTVlZTQxNWE3NlwiO1xuXG4gIGFzeW5jIGZ1bmN0aW9uIGNhbGxBcGkoY2l0eU5hbWUpIHtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGxvYWRpbmdIYW5kbGVyLnJldHVybkxvYWRpbmcoKSk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChhcGlMaW5rICsgYHE9JHtjaXR5TmFtZX0mYXBwaWQ9JHthcGlLZXl9YCwge1xuICAgICAgbW9kZTogXCJjb3JzXCIsXG4gICAgfSk7XG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmxvYWRpbmctYmVnaW5cIikpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHJlc3BvbnNlLnN0YXR1cyk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGNhbGxBcGksXG4gIH07XG59KSgpO1xuXG5jb25zdCBsb2FkaW5nSGFuZGxlciA9ICgoKSA9PiB7XG4gIGNvbnN0IHJldHVybkxvYWRpbmcgPSAoKSA9PiB7XG4gICAgY29uc3QgbG9hZGluZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgY29uc3QgZmV0Y2hEYXRhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuICAgIGxvYWRpbmcuY2xhc3NMaXN0LmFkZChcImxvYWRpbmctYmVnaW5cIik7XG4gICAgZmV0Y2hEYXRhLmNsYXNzTGlzdC5hZGQoXCJ0ZXh0XCIpO1xuXG4gICAgZmV0Y2hEYXRhLmlubmVySFRNTCA9IGBcbiAgICA8ZGl2IGNsYXNzPVwibG9hZGVyXCI+XG4gICAgPC9kaXY+YDtcblxuICAgIGxvYWRpbmcuYXBwZW5kQ2hpbGQoZmV0Y2hEYXRhKTtcbiAgICByZXR1cm4gbG9hZGluZztcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICByZXR1cm5Mb2FkaW5nLFxuICB9O1xufSkoKTtcblxuZXhwb3J0IGRlZmF1bHQgYXBpSGFuZGxlcjtcbiIsImltcG9ydCB7IHRzUGFydGljbGVzIH0gZnJvbSBcInRzcGFydGljbGVzXCI7XG5cbmNvbnN0IGhhbmRsZVBhcnRpY2xlcyA9ICgpID0+IHtcbiAgZnVuY3Rpb24gYWRkUmFpblBhcnRpY2xlcygpIHtcbiAgICB0c1BhcnRpY2xlcy5sb2FkKFwidHNwYXJ0aWNsZXNcIiwge1xuICAgICAgcGFydGljbGVzOiB7XG4gICAgICAgIG51bWJlcjoge1xuICAgICAgICAgIHZhbHVlOiA3MCxcbiAgICAgICAgICBkZW5zaXR5OiB7XG4gICAgICAgICAgICB2YWx1ZV9hcmVhOiA0MDAsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgY29sb3I6IHtcbiAgICAgICAgICB2YWx1ZTogXCIjZmZmXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHN0cm9rZToge1xuICAgICAgICAgIHdpZHRoOiAxLFxuICAgICAgICB9LFxuICAgICAgICBzaGFwZToge1xuICAgICAgICAgIHR5cGU6IFwicG9seWdvblwiLFxuICAgICAgICAgIHBvbHlnb246IHtcbiAgICAgICAgICAgIHNpZGVzOiAxLFxuICAgICAgICAgICAgbmJfc2lkZXM6IDEsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgcm90YXRlOiB7XG4gICAgICAgICAgdmFsdWU6IDkwLFxuICAgICAgICB9LFxuICAgICAgICBzaXplOiB7XG4gICAgICAgICAgdmFsdWU6IDMsXG4gICAgICAgIH0sXG4gICAgICAgIG1vdmU6IHtcbiAgICAgICAgICBlbmFibGU6IHRydWUsXG4gICAgICAgICAgZGlyZWN0aW9uOiBcImJvdHRvbVwiLFxuICAgICAgICAgIHN0cmFpZ2h0OiB0cnVlLFxuICAgICAgICAgIHNwZWVkOiAyMCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gYWRkU25vd1BhcnRpY2xlcygpIHtcbiAgICB0c1BhcnRpY2xlcy5sb2FkKFwidHNwYXJ0aWNsZXNcIiwge1xuICAgICAgcGFydGljbGVzOiB7XG4gICAgICAgIG51bWJlcjoge1xuICAgICAgICAgIHZhbHVlOiA2MCxcbiAgICAgICAgICBkZW5zaXR5OiB7XG4gICAgICAgICAgICBlbmFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZV9hcmVhOiA4MDAsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgc2l6ZToge1xuICAgICAgICAgIHZhbHVlOiA2LFxuICAgICAgICAgIHJhbmRvbTogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgICAgb3BhY2l0eToge1xuICAgICAgICAgIHZhbHVlOiA1LFxuICAgICAgICAgIHJhbmRvbTogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgICAgbW92ZToge1xuICAgICAgICAgIGVuYWJsZTogdHJ1ZSxcbiAgICAgICAgICBkaXJlY3Rpb246IFwiYm90dG9tXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHNoYXBlOiB7XG4gICAgICAgICAgdmFsdWU6IFwiY2lyY2xlXCIsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkUGFydGljbGVzKGNvbmQpIHtcbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGRpdi5pZCA9IFwidHNwYXJ0aWNsZXNcIjtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRpdik7XG4gICAgaWYgKGNvbmQgPT0gXCJSYWluXCIpIHtcbiAgICAgIGFkZFJhaW5QYXJ0aWNsZXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWRkU25vd1BhcnRpY2xlcygpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVBhcnRpY2xlcygpIHtcbiAgICBjb25zdCBwYXJ0aWNsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdHNwYXJ0aWNsZXNcIik7XG4gICAgaWYgKHBhcnRpY2xlKSBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHBhcnRpY2xlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV2YWx1YXRlKGNvbmQpIHtcbiAgICBpZiAoY29uZCA9PSBcIlJhaW5cIiB8fCBjb25kID09IFwiU25vd1wiKSB7XG4gICAgICBhZGRQYXJ0aWNsZXMoY29uZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZVBhcnRpY2xlcygpO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIGV2YWx1YXRlLFxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaGFuZGxlUGFydGljbGVzKCk7XG4iLCJpbXBvcnQgVXBUcmlhbmdsZSBmcm9tIFwiLi9hc3NldHMvdXAtdHJpYW5nbGUuc3ZnXCI7XG5pbXBvcnQgRG93blRyaWFuZ2xlIGZyb20gXCIuL2Fzc2V0cy9kb3duLXRyaWFuZ2xlLnN2Z1wiO1xuXG5jb25zdCBpbWFnZUhhbmRsZXIgPSAoKSA9PiB7XG4gIGFzeW5jIGZ1bmN0aW9uIGdldFVwVHJpYW5nbGUoKSB7XG4gICAgcmV0dXJuIFVwVHJpYW5nbGU7XG4gIH1cbiAgYXN5bmMgZnVuY3Rpb24gZ2V0RG93blRyaWFuZ2xlKCkge1xuICAgIHJldHVybiBEb3duVHJpYW5nbGU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBnZXRVcFRyaWFuZ2xlLFxuICAgIGdldERvd25UcmlhbmdsZSxcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGltYWdlSGFuZGxlcjtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9tYWluLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbWFpbi5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgYXBpSGFuZGxlciBmcm9tIFwiLi9hcGlMb2FkaW5nSGFuZGxlclwiO1xuaW1wb3J0IGhhbmRsZVBhcnRpY2xlcyBmcm9tIFwiLi9wYXJ0aWNsZUhhbmRsZXJcIjtcbmltcG9ydCBpbWFnZUhhbmRsZXIgZnJvbSBcIi4vaW1hZ2VIYW5kbGVyXCI7XG5pbXBvcnQgXCIuL21haW4uY3NzXCI7XG5cbmNvbnN0IGRpc3BsYXlIYW5kbGVyID0gKCkgPT4ge1xuICBjb25zdCB3ZWF0aGVyRGlzcGxheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIud2VhdGhlci1kaXNwbGF5XCIpO1xuXG4gIGNvbnN0IHJldHVybkNvbmRpdGlvbiA9IChjb25kKSA9PiB7XG4gICAgY29uc3QgY29uZERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgY29uZERpdi50ZXh0Q29udGVudCA9IGNvbmQ7XG4gICAgY29uZERpdi5jbGFzc0xpc3QuYWRkKFwiZGlzcGxheS1jb25kaXRpb25cIik7XG4gICAgcmV0dXJuIGNvbmREaXY7XG4gIH07XG5cbiAgY29uc3QgcmV0dXJuQ2l0eU5hbWUgPSAobmFtZSkgPT4ge1xuICAgIGNvbnN0IG5hbWVEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIG5hbWVEaXYudGV4dENvbnRlbnQgPSBuYW1lO1xuICAgIG5hbWVEaXYuY2xhc3NMaXN0LmFkZChcImRpc3BsYXktY2l0eS1uYW1lXCIpO1xuICAgIHJldHVybiBuYW1lRGl2O1xuICB9O1xuICBjb25zdCByZXR1cm5DdXJyZW50VGVtcCA9ICh0ZW1wKSA9PiB7XG4gICAgY29uc3QgY3VycmVudFRlbXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGN1cnJlbnRUZW1wLmNsYXNzTGlzdC5hZGQoXCJkaXNwbGF5LWN1cnJlbnQtdGVtcFwiKTtcbiAgICBjdXJyZW50VGVtcC50ZXh0Q29udGVudCA9IGAke01hdGgucm91bmQodGVtcCAtIDI3Myl9wrBDYDtcbiAgICByZXR1cm4gY3VycmVudFRlbXA7XG4gIH07XG5cbiAgY29uc3QgcmV0dXJuTWF4VGVtcCA9ICh0ZW1wKSA9PiB7XG4gICAgY29uc3QgbWF4VGVtcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgbWF4VGVtcC5jbGFzc0xpc3QuYWRkKFwibWF4LXRlbXBcIik7XG5cbiAgICBpbWFnZUhhbmRsZXIoKVxuICAgICAgLmdldFVwVHJpYW5nbGUoKVxuICAgICAgLnRoZW4oKGRhdCkgPT4ge1xuICAgICAgICBjb25zdCBuZXdJbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAgICAgICBuZXdJbWFnZS5zcmMgPSBkYXQ7XG4gICAgICAgIG5ld0ltYWdlLmNsYXNzTGlzdC5hZGQoXCJtYXgtdGVtcC1sb2dvXCIpO1xuICAgICAgICBtYXhUZW1wLmFwcGVuZENoaWxkKG5ld0ltYWdlKTtcbiAgICAgIH0pO1xuICAgIG1heFRlbXAudGV4dENvbnRlbnQgPSBgJHtNYXRoLnJvdW5kKHRlbXAgLSAyNzMpfcKwQ2A7XG4gICAgcmV0dXJuIG1heFRlbXA7XG4gIH07XG5cbiAgY29uc3QgcmV0dXJuTWluVGVtcCA9ICh0ZW1wKSA9PiB7XG4gICAgY29uc3QgbWluVGVtcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgbWluVGVtcC5jbGFzc0xpc3QuYWRkKFwibWluLXRlbXBcIik7XG4gICAgaW1hZ2VIYW5kbGVyKClcbiAgICAgIC5nZXREb3duVHJpYW5nbGUoKVxuICAgICAgLnRoZW4oKGRhdCkgPT4ge1xuICAgICAgICBjb25zdCBuZXdJbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAgICAgICBuZXdJbWFnZS5zcmMgPSBkYXQ7XG4gICAgICAgIG5ld0ltYWdlLmNsYXNzTGlzdC5hZGQoXCJtaW4tdGVtcC1sb2dvXCIpO1xuICAgICAgICBtaW5UZW1wLmFwcGVuZENoaWxkKG5ld0ltYWdlKTtcbiAgICAgIH0pO1xuICAgIG1pblRlbXAudGV4dENvbnRlbnQgPSBgJHtNYXRoLnJvdW5kKHRlbXAgLSAyNzMpfcKwQ2A7XG4gICAgcmV0dXJuIG1pblRlbXA7XG4gIH07XG5cbiAgY29uc3QgdXBkYXRlQmFja2dyb3VuZCA9IChjb25kKSA9PiB7XG4gICAgY29uc3Qgc3VuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zdW5cIik7XG4gICAgc3VuLnJlbW92ZUF0dHJpYnV0ZShcInN0eWxlXCIpO1xuICAgIGlmIChjb25kID09IFwiSGF6ZVwiIHx8IGNvbmQgPT0gXCJTbW9rZVwiKSB7XG4gICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmJhY2tncm91bmQgPVxuICAgICAgICBcImxpbmVhci1ncmFkaWVudChyZ2IoMTk4IDE5OCAxOTggLyA1MCUpLCByZ2IoMCAxMTMgMTk1IC8gNzMlKSwgcmdiKDE3LCAxNTIsIDI1MCkpXCI7XG4gICAgICBzdW4uc3R5bGUuYm94U2hhZG93ID0gXCIwIDAgMnB4IDAgcmdiKDI1NSwyNTUsMClcIjtcbiAgICB9IGVsc2UgaWYgKGNvbmQgPT0gXCJNaXN0XCIpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuYmFja2dyb3VuZCA9IFwibGluZWFyLWdyYWRpZW50KHNpbHZlciwgIzAwOTVmZilcIjtcbiAgICAgIHN1bi5zdHlsZS5ib3hTaGFkb3cgPSBcIjAgMCAzcHggMCByZ2IoMjU1LDI1NSwwKVwiO1xuICAgIH0gZWxzZSBpZiAoY29uZCA9PSBcIlNub3dcIikge1xuICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5iYWNrZ3JvdW5kID0gXCJyZ2IoMTM5LDE3NSwxOTkpXCI7XG4gICAgICBzdW4uc3R5bGUub3BhY2l0eSA9IDAuOTtcbiAgICB9IGVsc2UgaWYgKGNvbmQgPT0gXCJDbG91ZHNcIikge1xuICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5iYWNrZ3JvdW5kID1cbiAgICAgICAgXCJsaW5lYXItZ3JhZGllbnQocmdiKDg3LCA5MiwgOTUpLCByZ2IoMTIxLDExNywxMTcpKVwiO1xuICAgICAgc3VuLnNldEF0dHJpYnV0ZShcbiAgICAgICAgXCJzdHlsZVwiLFxuICAgICAgICBcIm9wYWNpdHk6IDAuNzsgYm94LXNoYWRvdzowIDAgMnB4IDBweCByZ2IoMjU1LDI1NSwwKTtcIlxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGNvbmQgPT0gXCJSYWluXCIpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuYmFja2dyb3VuZCA9IFwicmdiKDUsIDQzLCA2OSlcIjtcbiAgICAgIHN1bi5zZXRBdHRyaWJ1dGUoXG4gICAgICAgIFwic3R5bGVcIixcbiAgICAgICAgXCJvcGFjaXR5OiAwLjg7IGJveC1zaGFkb3c6MCAwIDJweCAwcHggcmdiKDI1NSwyNTUsMCk7XCJcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChjb25kID09IFwiRHJpenpsZVwiKSB7XG4gICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmJhY2tncm91bmQgPSBcInJnYig2Nyw4OSwxMDQpXCI7XG4gICAgICBzdW4uc2V0QXR0cmlidXRlKFxuICAgICAgICBcInN0eWxlXCIsXG4gICAgICAgIGBvcGFjaXR5OiAwLjg7XG4gICAgICBib3gtc2hhZG93OiAwIDAgMnB4IDFweCByZ2IoMjU1LDI1NSwwKWBcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChjb25kID09IFwiVGh1bmRlcnN0b3JtXCIpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuYmFja2dyb3VuZCA9IFwicmdiKDEsMTQsMjQpXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQXR0cmlidXRlKFwic3R5bGVcIik7XG4gICAgfVxuICAgIGhhbmRsZVBhcnRpY2xlcy5ldmFsdWF0ZShjb25kKTtcbiAgfTtcblxuICBjb25zdCB1cGRhdGVEYXRhID0gKGRhdGEpID0+IHtcbiAgICB3ZWF0aGVyRGlzcGxheS5pbm5lckhUTUwgPSBcIlwiO1xuXG4gICAgY29uc3QgdGVtcEluZm8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRlbXBJbmZvLmNsYXNzTGlzdC5hZGQoXCJ0ZW1wLWluZm9cIik7XG5cbiAgICBjb25zdCBzdW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHN1bi5jbGFzc0xpc3QuYWRkKFwic3VuXCIpO1xuXG4gICAgY29uc3QgdGVtcERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGVtcERpdi5jbGFzc0xpc3QuYWRkKFwidGVtcC1kYXRhXCIpO1xuICAgIHRlbXBEaXYuYXBwZW5kQ2hpbGQocmV0dXJuQ3VycmVudFRlbXAoZGF0YVtcIm1haW5cIl1bXCJ0ZW1wXCJdKSk7XG4gICAgdGVtcERpdi5hcHBlbmRDaGlsZChyZXR1cm5NaW5UZW1wKGRhdGFbXCJtYWluXCJdW1widGVtcF9taW5cIl0pKTtcbiAgICB0ZW1wRGl2LmFwcGVuZENoaWxkKHJldHVybk1heFRlbXAoZGF0YVtcIm1haW5cIl1bXCJ0ZW1wX21heFwiXSkpO1xuXG4gICAgdGVtcEluZm8uYXBwZW5kQ2hpbGQodGVtcERpdik7XG4gICAgdGVtcEluZm8uYXBwZW5kQ2hpbGQocmV0dXJuQ29uZGl0aW9uKGRhdGFbXCJ3ZWF0aGVyXCJdWzBdW1wibWFpblwiXSkpO1xuICAgIHRlbXBJbmZvLmFwcGVuZENoaWxkKHJldHVybkNpdHlOYW1lKGRhdGFbXCJuYW1lXCJdKSk7XG5cbiAgICB3ZWF0aGVyRGlzcGxheS5hcHBlbmRDaGlsZChzdW4pO1xuICAgIHdlYXRoZXJEaXNwbGF5LmFwcGVuZENoaWxkKHRlbXBJbmZvKTtcblxuICAgIHVwZGF0ZUJhY2tncm91bmQoZGF0YVtcIndlYXRoZXJcIl1bMF1bXCJtYWluXCJdKTtcblxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5sb2FkaW5nLWJlZ2luXCIpKTtcbiAgICByZXR1cm47XG4gIH07XG4gIHJldHVybiB7XG4gICAgdXBkYXRlRGF0YSxcbiAgfTtcbn07XG5cbmNvbnN0IGZvcm1IYW5kbGVyID0gKCkgPT4ge1xuICBjb25zdCBpbnB1dEZvcm0gPSBkb2N1bWVudC5mb3Jtc1swXTtcbiAgaW5wdXRGb3JtLm9uc3VibWl0ID0gcGFzc0NpdHlOYW1lO1xuXG4gIGZ1bmN0aW9uIGdldENpdHlOYW1lKCkge1xuICAgIHJldHVybiBpbnB1dEZvcm0uZWxlbWVudHNbMF0udmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVFcnJvcihlcnIpIHtcbiAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgIGNvbnN0IGVycm9yRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBpZiAoZXJyLm1lc3NhZ2UgPT0gXCI0MDRcIikge1xuICAgICAgZXJyb3JEaXYudGV4dENvbnRlbnQgPSBcIkludmFsaWQgQ2l0eSBOYW1lXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVycm9yRGl2LnRleHRDb250ZW50ID0gXCJFbXB0eSBJbnB1dFwiO1xuICAgIH1cbiAgICBlcnJvckRpdi5jbGFzc0xpc3QuYWRkKFwiZGlzcGxheS1lcnJvclwiKTtcbiAgICBlcnJvckRpdi5hZGRFdmVudExpc3RlbmVyKFwiYW5pbWF0aW9uZW5kXCIsIChlKSA9PiB7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGVycm9yRGl2KTtcbiAgICB9KTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVycm9yRGl2KTtcbiAgICByZXR1cm47XG4gIH1cbiAgZnVuY3Rpb24gcGFzc0NpdHlOYW1lKGUpIHtcbiAgICBjb25zdCBjaXR5TmFtZSA9IGdldENpdHlOYW1lKCk7XG4gICAgY29uc3QgZXJyb3JEaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmRpc3BsYXktZXJyb3JcIik7XG4gICAgaWYgKGVycm9yRGl2KSB7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGVycm9yRGl2KTtcbiAgICB9XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgaWYgKGNpdHlOYW1lID09IFwiXCIpIHtcbiAgICAgIGhhbmRsZUVycm9yKG5ldyBFcnJvcihcIkVtcHR5XCIpKTtcbiAgICAgIGlucHV0Rm9ybS5yZXNldCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhcGlIYW5kbGVyXG4gICAgICAuY2FsbEFwaShjaXR5TmFtZSlcbiAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgIGRpc3BsYXlIYW5kbGVyKCkudXBkYXRlRGF0YShkYXRhKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgIGhhbmRsZUVycm9yKGVycm9yKTtcbiAgICAgIH0pO1xuICAgIGlucHV0Rm9ybS5lbGVtZW50c1swXS5ibHVyKCk7XG4gICAgaW5wdXRGb3JtLnJlc2V0KCk7XG4gIH1cbn07XG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCAoKSA9PiB7XG4gIGFwaUhhbmRsZXJcbiAgICAuY2FsbEFwaShcIk5ldyBEZWxoaVwiKVxuICAgIC50aGVuKChkYXRhKSA9PiBkaXNwbGF5SGFuZGxlcigpLnVwZGF0ZURhdGEoZGF0YSkpXG4gICAgLmNhdGNoKChlcnJvcikgPT4ge30pO1xufSk7XG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgZm9ybUhhbmRsZXIpO1xuIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fIiwiVVJMIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18iLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwidXJsIiwib3B0aW9ucyIsIlN0cmluZyIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwidGVzdCIsInNsaWNlIiwiaGFzaCIsIm5lZWRRdW90ZXMiLCJyZXBsYWNlIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiQ2FudmFzIiwiVXRpbHNfMSIsIlV0aWxzXzIiLCJjb25zdHJ1Y3RvciIsImNvbnRhaW5lciIsInNpemUiLCJoZWlnaHQiLCJ3aWR0aCIsImNvbnRleHQiLCJnZW5lcmF0ZWRDYW52YXMiLCJpbml0IiwicmVzaXplIiwiaW5pdFN0eWxlIiwiaW5pdENvdmVyIiwiaW5pdFRyYWlsIiwiaW5pdEJhY2tncm91bmQiLCJwYWludCIsImxvYWRDYW52YXMiLCJjYW52YXMiLCJfYSIsImNsYXNzTmFtZSIsIkNvbnN0YW50cyIsImNhbnZhc0NsYXNzIiwib3JpZ2luYWxTdHlsZSIsImRlZXBFeHRlbmQiLCJvZmZzZXRIZWlnaHQiLCJvZmZzZXRXaWR0aCIsImdldENvbnRleHQiLCJyZXRpbmEiLCJkZXN0cm95IiwiZHJhdyIsImN0eCIsImNsZWFyIiwiYWN0dWFsT3B0aW9ucyIsImJhY2tncm91bmRNYXNrIiwiZW5hYmxlIiwiY292ZXIiLCJjb3ZlckNvbG9yIiwicGFpbnRCYXNlIiwiZ2V0U3R5bGVGcm9tUmdiIiwiYSIsInRyYWlsIiwicGFydGljbGVzIiwibW92ZSIsInRyYWlsRmlsbENvbG9yIiwid2luZG93UmVzaXplIiwibmVlZHNSZWZyZXNoIiwidXBkYXRlQWN0dWFsT3B0aW9ucyIsInNldERlbnNpdHkiLCJwbHVnaW4iLCJwbHVnaW5zIiwicmVmcmVzaCIsInB4UmF0aW8iLCJwaXhlbFJhdGlvIiwib2xkU2l6ZSIsInN0YXJ0ZWQiLCJyZXNpemVGYWN0b3IiLCJkcmF3Q29ubmVjdExpbmUiLCJwMSIsInAyIiwibGluZVN0eWxlIiwicG9zMSIsImdldFBvc2l0aW9uIiwicG9zMiIsImxpbmtzV2lkdGgiLCJkcmF3R3JhYkxpbmUiLCJwYXJ0aWNsZSIsImxpbmVDb2xvciIsIm9wYWNpdHkiLCJtb3VzZVBvcyIsImJlZ2luUG9zIiwiZHJhd1BhcnRpY2xlIiwiZGVsdGEiLCJfYiIsIl9jIiwiX2QiLCJfZSIsIl9mIiwic3Bhd25pbmciLCJkZXN0cm95ZWQiLCJwZkNvbG9yIiwiZ2V0RmlsbENvbG9yIiwicHNDb2xvciIsImdldFN0cm9rZUNvbG9yIiwiZkNvbG9yIiwic0NvbG9yIiwiZ2V0UGx1Z2luUGFydGljbGVDb2xvcnMiLCJ0d2lua2xlIiwidHdpbmtsaW5nIiwiTWF0aCIsInJhbmRvbSIsImZyZXF1ZW5jeSIsInR3aW5rbGVSZ2IiLCJjb2xvclRvSHNsIiwiY29sb3IiLCJ6SW5kZXhPcHRpb25zIiwiekluZGV4Iiwiek9wYWNpdHlGYWN0b3IiLCJ6SW5kZXhGYWN0b3IiLCJvcGFjaXR5UmF0ZSIsInJhZGl1cyIsImdldFJhZGl1cyIsImJ1YmJsZSIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2UiLCJ6T3BhY2l0eSIsImZpbGxDb2xvclZhbHVlIiwiZ2V0U3R5bGVGcm9tSHNsIiwielNpemVGYWN0b3IiLCJzaXplUmF0ZSIsInpTdHJva2VPcGFjaXR5Iiwic3Ryb2tlQ29sb3JWYWx1ZSIsInVwZGF0ZXJzIiwiYmVmb3JlRHJhdyIsImNvbXBvc2l0ZSIsInNoYWRvdyIsImdyYWRpZW50IiwiYWZ0ZXJEcmF3IiwiZHJhd1BsdWdpbiIsImRyYXdQYXJ0aWNsZVBsdWdpbiIsImJhY2tncm91bmQiLCJlbGVtZW50U3R5bGUiLCJjb2xvclRvUmdiIiwiYmFja2dyb3VuZENvbG9yIiwiYmFja2dyb3VuZEltYWdlIiwiaW1hZ2UiLCJiYWNrZ3JvdW5kUG9zaXRpb24iLCJwb3NpdGlvbiIsImJhY2tncm91bmRSZXBlYXQiLCJyZXBlYXQiLCJiYWNrZ3JvdW5kU2l6ZSIsImNiIiwiY292ZXJSZ2IiLCJyIiwiZyIsImIiLCJmaWxsQ29sb3IiLCJwYXJ0aWNsZUZpbGxDb2xvciIsInBhcnRpY2xlU3Ryb2tlQ29sb3IiLCJmdWxsU2NyZWVuIiwidG9wIiwibGVmdCIsImJhc2VDb2xvciIsImNvbm5lY3RPcHRpb25zIiwiaW50ZXJhY3Rpdml0eSIsIm1vZGVzIiwiY29ubmVjdCIsImxpbmtzIiwiQ29udGFpbmVyIiwiQ2FudmFzXzEiLCJQYXJ0aWNsZXNfMSIsIlJldGluYV8xIiwiRnJhbWVNYW5hZ2VyXzEiLCJPcHRpb25zXzEiLCJWZWN0b3JfMSIsInNvdXJjZU9wdGlvbnMiLCJwcmVzZXRzIiwiZnBzTGltaXQiLCJkdXJhdGlvbiIsImxpZmVUaW1lIiwiZmlyc3RTdGFydCIsInBhdXNlZCIsImxhc3RGcmFtZVRpbWUiLCJ6TGF5ZXJzIiwicGFnZUhpZGRlbiIsIl9zb3VyY2VPcHRpb25zIiwiX2luaXRpYWxTb3VyY2VPcHRpb25zIiwiUmV0aW5hIiwiUGFydGljbGVzIiwiZHJhd2VyIiwiRnJhbWVNYW5hZ2VyIiwicGF0aEdlbmVyYXRvciIsImdlbmVyYXRlIiwidiIsIlZlY3RvciIsImNyZWF0ZSIsImFuZ2xlIiwiUEkiLCJtb3VzZSIsImNsaWNraW5nIiwiaW5zaWRlIiwicmVwdWxzZSIsImF0dHJhY3QiLCJNYXAiLCJkcmF3ZXJzIiwiZGVuc2l0eSIsIl9vcHRpb25zIiwiT3B0aW9ucyIsImV2ZW50TGlzdGVuZXJzIiwiRXZlbnRMaXN0ZW5lcnMiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsImludGVyc2VjdGlvbk9ic2VydmVyIiwiZW50cmllcyIsImludGVyc2VjdGlvbk1hbmFnZXIiLCJwbGF5IiwiZm9yY2UiLCJuZWVkc1VwZGF0ZSIsImF1dG9QbGF5IiwicGF1c2UiLCJkcmF3QW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb24iLCJyZWZyZXNoVGltZSIsImFuaW1hdGUiLCJ0aW1lc3RhbXAiLCJuZXh0RnJhbWUiLCJnZXRBbmltYXRpb25TdGF0dXMiLCJzZXROb2lzZSIsIm5vaXNlT3JHZW5lcmF0b3IiLCJzZXRQYXRoIiwicGF0aE9yR2VuZXJhdG9yIiwic3RvcCIsImtleSIsImtleXMiLCJkZWxldGUiLCJleHBvcnRJbWciLCJjYWxsYmFjayIsImV4cG9ydEltYWdlIiwidHlwZSIsInF1YWxpdHkiLCJ0b0Jsb2IiLCJleHBvcnRDb25maWd1cmF0aW9uIiwic3RhcnQiLCJyZXNldCIsInJlbW92ZUxpc3RlbmVycyIsIkhUTUxFbGVtZW50Iiwib2JzZXJ2ZSIsImxpbmtzQ29sb3JzIiwiZ3JhYkxpbmVDb2xvciIsImxpbmtzQ29sb3IiLCJhc3luYyIsIm5hbWUiLCJjdXJyZW50VGhlbWUiLCJhZGRMaXN0ZW5lcnMiLCJzdGFydEFzeW5jIiwiYWRkQ2xpY2tIYW5kbGVyIiwiZWwiLCJjbGlja09yVG91Y2hIYW5kbGVyIiwicG9zIiwicG9zUmV0aW5hIiwieCIsInkiLCJxdWFkVHJlZSIsInF1ZXJ5Q2lyY2xlIiwidG91Y2hlZCIsInRvdWNoTW92ZWQiLCJhZGRFdmVudExpc3RlbmVyIiwibW91c2VFdmVudCIsIm9mZnNldFgiLCJjbGllbnRYIiwib2Zmc2V0WSIsImNsaWVudFkiLCJ0b3VjaEV2ZW50IiwibGFzdFRvdWNoIiwidG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiY2FudmFzUmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIm1heCIsInJhZGl1c1giLCJyYWRpdXNZIiwicmVzcG9uc2l2ZSIsIm5ld01heFdpZHRoIiwic2V0UmVzcG9uc2l2ZSIsInNldFRoZW1lIiwicmVzcG9uc2l2ZU1heFdpZHRoIiwicHJlc2V0IiwibG9hZCIsIlBsdWdpbnMiLCJnZXRQcmVzZXQiLCJzaGFwZXMiLCJnZXRTdXBwb3J0ZWRTaGFwZXMiLCJnZXRTaGFwZURyYXdlciIsInNldCIsImdldFJhbmdlVmFsdWUiLCJhdmFpbGFibGVQbHVnaW5zIiwiZ2V0QXZhaWxhYmxlUGx1Z2lucyIsImluaXRBc3luYyIsInBhdGhPcHRpb25zIiwicGF0aCIsImdlbmVyYXRvciIsImN1c3RvbUdlbmVyYXRvciIsImdldFBhdGhHZW5lcmF0b3IiLCJwYXJ0aWNsZXNTZXR1cCIsInBhdXNlT25PdXRzaWRlVmlld3BvcnQiLCJlbnRyeSIsImlzSW50ZXJzZWN0aW5nIiwiRXh0ZXJuYWxJbnRlcmFjdG9yQmFzZSIsIkVudW1zXzEiLCJJbnRlcmFjdG9yVHlwZSIsIkV4dGVybmFsIiwiZGVsdGFWYWx1ZSIsImZhY3RvciIsImNvbnNvbGUiLCJlcnJvciIsIkludGVyYWN0aW9uTWFuYWdlciIsImV4dGVybmFsSW50ZXJhY3RvcnMiLCJwYXJ0aWNsZUludGVyYWN0b3JzIiwiaW50ZXJhY3RvcnMiLCJnZXRJbnRlcmFjdG9ycyIsImludGVyYWN0b3IiLCJleHRlcm5hbEludGVyYWN0IiwiaXNFbmFibGVkIiwiaW50ZXJhY3QiLCJwYXJ0aWNsZXNJbnRlcmFjdCIsIl9fY3JlYXRlQmluZGluZyIsIm8iLCJtIiwiazIiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX19leHBvcnRTdGFyIiwicCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIkxvYWRlciIsIkNvbnRhaW5lcl8xIiwidHNQYXJ0aWNsZXNEb20iLCJzdGF0aWMiLCJkb20iLCJwYXJhbXMiLCJ0YWdJZCIsImZsb29yIiwiZG9tQ29udGFpbmVyIiwiZ2V0RWxlbWVudEJ5SWQiLCJhcHBlbmQiLCJjdXJyZW50T3B0aW9ucyIsIkFycmF5IiwiaXRlbUZyb21BcnJheSIsIm9sZEluZGV4IiwiZmluZEluZGV4Iiwib2xkIiwiZG9tSXRlbSIsImNhbnZhc0VsIiwidGFnTmFtZSIsInRvTG93ZXJDYXNlIiwiZXhpc3RpbmdDYW52YXNlcyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwibmV3SXRlbSIsImpzb25VcmwiLCJyZXNwb25zZSIsImZldGNoIiwib2siLCJzdGF0dXNDb2RlIiwic3RhdHVzIiwianNvbiIsImxvYWRPcHRpb25zIiwibG9hZFJlbW90ZU9wdGlvbnMiLCJuZXdJZCIsIm5ld0luZGV4IiwiUGFydGljbGUiLCJQYXJ0aWNsZXNPcHRpb25zXzEiLCJTaGFwZV8xIiwiVmVjdG9yM2RfMSIsImZpeE91dE1vZGUiLCJpc0luQXJyYXkiLCJvdXRNb2RlIiwiY2hlY2tNb2RlcyIsImNvb3JkIiwibWF4Q29vcmQiLCJzZXRDYiIsIm92ZXJyaWRlT3B0aW9ucyIsImdyb3VwIiwiX2ciLCJfaCIsIl9qIiwiZmlsbCIsImNsb3NlIiwibGFzdFBhdGhUaW1lIiwidW5icmVha2FibGUiLCJzcGxpdENvdW50IiwibWlzcGxhY2VkIiwibWF4RGlzdGFuY2UiLCJtYWluT3B0aW9ucyIsInBhcnRpY2xlc09wdGlvbnMiLCJQYXJ0aWNsZXNPcHRpb25zIiwic2hhcGVUeXBlIiwic2hhcGUiLCJyZWR1Y2VEdXBsaWNhdGVzIiwib3ZlcnJpZGVTaGFwZVR5cGUiLCJzaGFwZU9wdGlvbnMiLCJTaGFwZSIsInNoYXBlRGF0YSIsImxvYWRTaGFwZURhdGEiLCJwYXRoRGVsYXkiLCJnZXRWYWx1ZSIsImRlbGF5IiwiekluZGV4VmFsdWUiLCJpbml0UGFydGljbGUiLCJzaXplT3B0aW9ucyIsInNpemVSYW5nZSIsImFuaW1hdGlvbiIsImdldFJhbmdlTWF4IiwibWluIiwiZ2V0UmFuZ2VNaW4iLCJsb29wcyIsIm1heExvb3BzIiwic2l6ZUFuaW1hdGlvbiIsIkFuaW1hdGlvblN0YXR1cyIsImluY3JlYXNpbmciLCJzdGFydFZhbHVlIiwiU3RhcnRWYWx1ZVR5cGUiLCJyYW5kb21JblJhbmdlIiwiZGVjcmVhc2luZyIsInZlbG9jaXR5Iiwic2l6ZUFuaW1hdGlvblNwZWVkIiwicmVkdWNlRmFjdG9yIiwic3luYyIsImRpcmVjdGlvbiIsImdldFBhcnRpY2xlRGlyZWN0aW9uQW5nbGUiLCJpblJhbmdlIiwiaW5pdGlhbFZlbG9jaXR5IiwiY2FsY3VsYXRlVmVsb2NpdHkiLCJjb3B5IiwibW92ZURlY2F5IiwiZGVjYXkiLCJjYWxjUG9zaXRpb24iLCJjbGFtcCIsImluaXRpYWxQb3NpdGlvbiIsIm9mZnNldCIsIm9yaWdpbiIsIm5lZWRzU29ydCIsImxhc3RaSW5kZXgiLCJ6Iiwic2lkZXMiLCJsb2FkU2hhcGUiLCJzaWRlQ291bnRGdW5jIiwiZ2V0U2lkZXNDb3VudCIsImxpZmUiLCJsb2FkTGlmZSIsInNwaW4iLCJzcGluUG9zIiwic3BpbkNlbnRlciIsImRpc3RhbmNlIiwiZ2V0RGlzdGFuY2UiLCJjZW50ZXIiLCJSb3RhdGVEaXJlY3Rpb24iLCJjbG9ja3dpc2UiLCJjb3VudGVyQ2xvY2t3aXNlIiwiYWNjZWxlcmF0aW9uIiwic3BpbkFjY2VsZXJhdGlvbiIsInNoYWRvd0NvbG9yIiwicGFydGljbGVJbml0IiwicGFydGljbGVDcmVhdGVkIiwiaXNWaXNpYmxlIiwiaXNJbnNpZGVDYW52YXMiLCJjYW52YXNTaXplIiwiZ2V0TWFzcyIsImdldEhzbEZyb21BbmltYXRpb24iLCJyb2xsIiwiYmFja0NvbG9yIiwiYWx0ZXIiLCJhbHRlckhzbCIsInN0cm9rZUNvbG9yIiwib3ZlcnJpZGUiLCJwYXJ0aWNsZURlc3Ryb3llZCIsIm1vZGUiLCJEZXN0cm95TW9kZSIsInNwbGl0Iiwic3BsaXRPcHRpb25zIiwicmF0ZSIsImFkZFNwbGl0UGFydGljbGUiLCJ0cnlDb3VudCIsInBsdWdpblBvcyIsInBhcnRpY2xlUG9zaXRpb24iLCJWZWN0b3IzZCIsIm91dE1vZGVzIiwiZml4SG9yaXpvbnRhbCIsIk91dE1vZGUiLCJib3VuY2UiLCJib3VuY2VIb3Jpem9udGFsIiwiZml4VmVydGljYWwiLCJib3VuY2VWZXJ0aWNhbCIsInJpZ2h0IiwiYm90dG9tIiwiY2hlY2tPdmVybGFwIiwiY29sbGlzaW9uc09wdGlvbnMiLCJjb2xsaXNpb25zIiwib3ZlcmxhcE9wdGlvbnMiLCJvdmVybGFwIiwicmV0cmllcyIsIm92ZXJsYXBzIiwiYXJyYXkiLCJyZXMiLCJnZXRQYXJ0aWNsZUJhc2VWZWxvY2l0eSIsIm1vdmVPcHRpb25zIiwicmFkIiwicmFkT2Zmc2V0IiwicmFuZ2UiLCJzdHJhaWdodCIsInNldFJhbmdlVmFsdWUiLCJzcGVlZCIsImxpZmVPcHRpb25zIiwiZGVsYXlUaW1lIiwidGltZSIsIk1vdmVyIiwibW92ZVBhcnRpY2xlIiwibW92ZVBhcmFsbGF4IiwicGFydGljbGVPcHRpb25zIiwic2xvd0ZhY3RvciIsImdldFByb3hpbWl0eVNwZWVkRmFjdG9yIiwiYmFzZVNwZWVkIiwibW92ZVNwZWVkIiwibW92ZURyaWZ0IiwiZHJpZnQiLCJtYXhTaXplIiwiYXBwbHlQYXRoIiwiZ3Jhdml0eU9wdGlvbnMiLCJncmF2aXR5IiwiZ3Jhdml0eUZhY3RvciIsImludmVyc2UiLCJtdWx0VG8iLCJtdWx0IiwibWF4U3BlZWQiLCJ6VmVsb2NpdHlGYWN0b3IiLCJ2ZWxvY2l0eVJhdGUiLCJhZGRUbyIsInZpYnJhdGUiLCJzaW4iLCJjb3MiLCJkeCIsImR5IiwiZ2V0RGlzdGFuY2VzIiwiZHhGaXhlZCIsImFicyIsImR5Rml4ZWQiLCJoRGlzdGFuY2UiLCJob3Jpem9udGFsIiwidkRpc3RhbmNlIiwidmVydGljYWwiLCJ2ZWwiLCJhcHBseURpc3RhbmNlIiwidXBkYXRlRnVuYyIsIm1heENhbnZhc1NpemUiLCJpc1NzciIsImV2ZW50cyIsIm9uSG92ZXIiLCJwYXJhbGxheCIsInBhcmFsbGF4Rm9yY2UiLCJjYW52YXNDZW50ZXIiLCJwYXJhbGxheFNtb290aCIsInNtb290aCIsInRtcCIsIkhvdmVyTW9kZSIsInNsb3ciLCJwYXJ0aWNsZVBvcyIsImRpc3QiLCJzbG93TW9kZVJhZGl1cyIsImRlZlgiLCJkZWZZIiwiY29vcmRzIiwiYXRhbjIiLCJ1cGRhdGVGcm9tQW5nbGUiLCJzcXJ0IiwiYWRkIiwic3ViIiwic3ViRnJvbSIsIm4iLCJkaXYiLCJkaXZUbyIsImRpc3RhbmNlVG8iLCJnZXRMZW5ndGhTcSIsImRpc3RhbmNlVG9TcSIsIm1hbmhhdHRhbkRpc3RhbmNlVG8iLCJjbG9uZSIsInNldFRvIiwicm90YXRlIiwic3VwZXIiLCJQYXJ0aWNsZV8xIiwiSW50ZXJhY3Rpb25NYW5hZ2VyXzEiLCJNb3Zlcl8xIiwibmV4dElkIiwiekFycmF5IiwibW92ZXIiLCJsaW1pdCIsImZyZXFzIiwidHJpYW5nbGVzIiwiaW50ZXJhY3Rpb25NYW5hZ2VyIiwiUXVhZFRyZWUiLCJSZWN0YW5nbGUiLCJnZXRVcGRhdGVycyIsImhhbmRsZWQiLCJwYXJ0aWNsZXNJbml0aWFsaXphdGlvbiIsImFkZE1hbnVhbFBhcnRpY2xlcyIsImdyb3VwcyIsImdyb3VwT3B0aW9ucyIsImoiLCJudW1iZXIiLCJhZGRQYXJ0aWNsZSIsInJlZHJhdyIsInJlbW92ZUF0IiwicXVhbnRpdHkiLCJkZWxldGVkIiwieklkeCIsImluZGV4T2YiLCJwYXJ0aWNsZXNUb0RlbGV0ZSIsInBhcnRpY2xlVXBkYXRlIiwiUG9pbnQiLCJzb3J0IiwibmIiLCJwdXNoaW5nIiwiY291bnRUb1JlbW92ZSIsInJlbW92ZVF1YW50aXR5IiwicHVzaFBhcnRpY2xlIiwicGFyZW50IiwiaHNsIiwic2l6ZU9mZnNldCIsInNldFRpbWVvdXQiLCJnZXRMaW5rRnJlcXVlbmN5IiwiZ2V0VHJpYW5nbGVGcmVxdWVuY3kiLCJwMyIsImlkMSIsImlkMiIsImlkMyIsIm1hbnVhbFBhcnRpY2xlcyIsImFwcGx5RGVuc2l0eSIsIm1hbnVhbENvdW50IiwibnVtYmVyT3B0aW9ucyIsImRlbnNpdHlGYWN0b3IiLCJpbml0RGVuc2l0eUZhY3RvciIsIm9wdFBhcnRpY2xlc051bWJlciIsIm9wdFBhcnRpY2xlc0xpbWl0IiwicGFydGljbGVzTnVtYmVyIiwicGFydGljbGVzQ291bnQiLCJmaWx0ZXIiLCJ0IiwiZGVuc2l0eU9wdGlvbnMiLCJhcmVhIiwiaW5pdGlhbGl6ZXIiLCJjYW5BZGQiLCJ3YXJuIiwiUGFydGljbGVzSW50ZXJhY3RvckJhc2UiLCJkZXRlY3RSZXRpbmEiLCJkZXZpY2VQaXhlbFJhdGlvIiwibW90aW9uT3B0aW9ucyIsIm1vdGlvbiIsImRpc2FibGUiLCJyZWR1Y2UiLCJtYXRjaE1lZGlhIiwibWVkaWFRdWVyeSIsImhhbmRsZU1vdGlvbkNoYW5nZSIsImhhbmRsZUNoYW5nZSIsImNhdGNoIiwiYWRkTGlzdGVuZXIiLCJyYXRpbyIsImF0dHJhY3REaXN0YW5jZSIsImxpbmtzRGlzdGFuY2UiLCJvcmJpdCIsIm9yYml0UmFkaXVzIiwiY29ubmVjdE1vZGVEaXN0YW5jZSIsImNvbm5lY3RNb2RlUmFkaXVzIiwiZ3JhYk1vZGVEaXN0YW5jZSIsImdyYWIiLCJyZXB1bHNlTW9kZURpc3RhbmNlIiwiYm91bmNlTW9kZURpc3RhbmNlIiwiYXR0cmFjdE1vZGVEaXN0YW5jZSIsImJ1YmJsZU1vZGVEaXN0YW5jZSIsImJ1YmJsZU1vZGVTaXplIiwibW92ZURpc3RhbmNlIiwicHJvcHMiLCJtYXRjaGVzIiwiTW92ZURpcmVjdGlvbiIsIk91dE1vZGVEaXJlY3Rpb24iLCJUaWx0RGlyZWN0aW9uIiwiSW50ZXJhY3Rpdml0eURldGVjdCIsIkNsaWNrTW9kZSIsIkNvbGxpc2lvbk1vZGUiLCJEaXZNb2RlIiwiUmVzcG9uc2l2ZU1vZGUiLCJSb2xsTW9kZSIsIlNpemVNb2RlIiwiVGhlbWVNb2RlIiwiQWx0ZXJUeXBlIiwiRGVzdHJveVR5cGUiLCJEaXZUeXBlIiwiRWFzaW5nVHlwZSIsIkdyYWRpZW50VHlwZSIsIk9yYml0VHlwZSIsIlNoYXBlVHlwZSIsIkF0dHJhY3RvciIsIkV4dGVybmFsSW50ZXJhY3RvckJhc2VfMSIsImNsaWNrUG9zaXRpb24iLCJvbkNsaWNrIiwiaG92ZXJNb2RlIiwiY2xpY2tNb2RlIiwibW91c2VNb3ZlU3RhdHVzIiwibW91c2VNb3ZlRXZlbnQiLCJob3ZlckVuYWJsZWQiLCJjbGlja0VuYWJsZWQiLCJob3ZlckF0dHJhY3QiLCJjbGlja0F0dHJhY3QiLCJhdHRyYWN0UmFkaXVzIiwicHJvY2Vzc0F0dHJhY3QiLCJDaXJjbGUiLCJhdHRyYWN0T3B0aW9ucyIsInF1ZXJ5IiwiYXR0cmFjdEZhY3RvciIsImNhbGNFYXNpbmciLCJlYXNpbmciLCJub3JtVmVjIiwiZmluaXNoIiwibG9hZEV4dGVybmFsQXR0cmFjdEludGVyYWN0aW9uIiwiQXR0cmFjdG9yXzEiLCJ0c1BhcnRpY2xlcyIsImFkZEludGVyYWN0b3IiLCJCb3VuY2VyIiwiZGl2cyIsIm9uRGl2IiwiaXNEaXZNb2RlRW5hYmxlZCIsInByb2Nlc3NNb3VzZUJvdW5jZSIsImRpdk1vZGVFeGVjdXRlIiwic2VsZWN0b3IiLCJzaW5nbGVTZWxlY3RvckJvdW5jZSIsInRvbGVyYW5jZSIsInByb2Nlc3NCb3VuY2UiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImVsZW0iLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwiY2lyY2xlIiwiY2lyY2xlQm91bmNlIiwiY2lyY2xlQm91bmNlRGF0YUZyb21QYXJ0aWNsZSIsIm1hc3MiLCJyZWN0Qm91bmNlIiwiY2FsY3VsYXRlQm91bmRzIiwibG9hZEV4dGVybmFsQm91bmNlSW50ZXJhY3Rpb24iLCJCb3VuY2VyXzEiLCJCdWJibGVyIiwiUHJvY2Vzc0J1YmJsZVR5cGVfMSIsImNhbGN1bGF0ZUJ1YmJsZVZhbHVlIiwicGFydGljbGVWYWx1ZSIsIm1vZGVWYWx1ZSIsIm9wdGlvbnNWYWx1ZSIsImRpdkJ1YmJsZSIsImhvdmVyQnViYmxlIiwiY2xpY2tCdWJibGUiLCJzaW5nbGVTZWxlY3RvckhvdmVyIiwic2VsZWN0b3JzIiwicmVwdWxzZVJhZGl1cyIsImNvbnRhaW5zIiwiZGl2TW9kZSIsImhvdmVyQnViYmxlU2l6ZSIsImhvdmVyQnViYmxlT3BhY2l0eSIsImhvdmVyQnViYmxlQ29sb3IiLCJwcm9jZXNzIiwiZGlzdE1vdXNlIiwidGltZVNwZW50IiwiYnViYmxlUGFyYW0iLCJidWJibGVPYmoiLCJvcHRWYWx1ZSIsImJ1YmJsZUR1cmF0aW9uIiwiYnViYmxlRGlzdGFuY2UiLCJwYXJ0aWNsZXNQYXJhbSIsInBhcnRpY2xlc09iaiIsInBPYmpCdWJibGUiLCJwT2JqIiwiZHVyYXRpb25FbmQiLCJQcm9jZXNzQnViYmxlVHlwZSIsIm1vdXNlQ2xpY2tQb3MiLCJEYXRlIiwiZ2V0VGltZSIsImNsaWNrVGltZSIsInNpemVEYXRhIiwib3BhY2l0eURhdGEiLCJwb2ludERpc3RhbmNlIiwibW91c2VMZWF2ZUV2ZW50IiwibW9kZVNpemUiLCJvcHRTaXplIiwibW9kZU9wYWNpdHkiLCJvcHRPcGFjaXR5IiwiYnViYmxlT3B0aW9ucyIsImZpbmFsQ29sb3IiLCJtb2RlQ29sb3IiLCJidWJibGVDb2xvciIsIm1peCIsInBDb2xvciIsInJnYlRvSHNsIiwiY29sb3JNaXgiLCJsb2FkRXh0ZXJuYWxCdWJibGVJbnRlcmFjdGlvbiIsIkJ1YmJsZXJfMSIsIkNvbm5lY3RvciIsImRpc3RNYXgiLCJ4RGlmZiIsInlEaWZmIiwibG9hZEV4dGVybmFsQ29ubmVjdEludGVyYWN0aW9uIiwiQ29ubmVjdG9yXzEiLCJHcmFiYmVyIiwiZ3JhYkxpbmVPcHRpb25zIiwibGluZU9wYWNpdHkiLCJvcGFjaXR5TGluZSIsIm9wdENvbG9yIiwibGlua3NPcHRpb25zIiwiZ2V0TGlua1JhbmRvbUNvbG9yIiwiYmxpbmsiLCJjb25zZW50IiwiY29sb3JMaW5lIiwiZ2V0TGlua0NvbG9yIiwibG9hZEV4dGVybmFsR3JhYkludGVyYWN0aW9uIiwiR3JhYmJlcl8xIiwiUmVwdWxzZXIiLCJkaXZSZXB1bHNlIiwiaG92ZXJSZXB1bHNlIiwiY2xpY2tSZXB1bHNlIiwic2luZ2xlU2VsZWN0b3JSZXB1bHNlIiwicHJvY2Vzc1JlcHVsc2UiLCJyZXB1bHNlT3B0aW9ucyIsInJlcHVsc2VGYWN0b3IiLCJyZXB1bHNlRGlzdGFuY2UiLCJwb3ciLCJkIiwidmVjdCIsImxvYWRFeHRlcm5hbFJlcHVsc2VJbnRlcmFjdGlvbiIsIlJlcHVsc2VyXzEiLCJUcmFpbE1ha2VyIiwidHJhaWxPcHRpb25zIiwib3B0RGVsYXkiLCJjYW5FbWl0IiwicGF1c2VPblN0b3AiLCJsYXN0UG9zaXRpb24iLCJsb2FkRXh0ZXJuYWxUcmFpbEludGVyYWN0aW9uIiwiVHJhaWxNYWtlcl8xIiwiUGFydGljbGVzSW50ZXJhY3RvckJhc2VfMSIsImF4IiwiYXkiLCJwMUZhY3RvciIsInAyRmFjdG9yIiwibG9hZFBhcnRpY2xlc0F0dHJhY3RJbnRlcmFjdGlvbiIsIkNvbGxpZGVyIiwicmFkaXVzMSIsInJvdW5kIiwicmVzb2x2ZUNvbGxpc2lvbiIsImFic29yYiIsImZwcyIsImxvYWRQYXJ0aWNsZXNDb2xsaXNpb25zSW50ZXJhY3Rpb24iLCJDb2xsaWRlcl8xIiwiTGlua0luc3RhbmNlIiwibGlua1BhcnRpY2xlIiwicE9wdGlvbnMiLCJzYXZlIiwicDFMaW5rcyIsImwiLCJkZXN0aW5hdGlvbiIsImxpbmsiLCJ2ZXJ0aWNlcyIsInZlcnRleCIsImRyYXdMaW5rVHJpYW5nbGUiLCJkcmF3TGlua0xpbmUiLCJyZXN0b3JlIiwibGluazEiLCJsaW5rMiIsInRyaWFuZ2xlT3B0aW9ucyIsIm9wYWNpdHlUcmlhbmdsZSIsInBvczMiLCJjb2xvclRyaWFuZ2xlIiwibGlua0NvbG9yIiwibGluZXMiLCJ0d2lua2xlRnJlcSIsIndhcnAiLCJMaW5rZXIiLCJnZXRMaW5rRGlzdGFuY2UiLCJvcHREaXN0YW5jZSIsInBvczJORSIsInBvczJTRSIsInBvczJTVyIsImxpbmtPcHQxIiwiQ2lyY2xlV2FycCIsImxpbmtPcHQyIiwic2V0Q29sb3IiLCJsb2FkUGFydGljbGVzTGlua3NJbnRlcmFjdGlvbiIsImxvYWRJbnRlcmFjdGlvbiIsIkxpbmtlcl8xIiwicGx1Z2luXzEiLCJsb2FkUGx1Z2luIiwiTGlua0luc3RhbmNlXzEiLCJQbHVnaW4iLCJnZXRQbHVnaW4iLCJuZWVkc1BsdWdpbiIsImFkZFBsdWdpbiIsIkFuaW1hdGFibGVDb2xvciIsIk9wdGlvbnNDb2xvcl8xIiwiSHNsQW5pbWF0aW9uXzEiLCJPcHRpb25zQ29sb3IiLCJIc2xBbmltYXRpb24iLCJjb2xvckFuaW1hdGlvbiIsImgiLCJHcmFkaWVudENvbG9yT3BhY2l0eUFuaW1hdGlvbiIsIkdyYWRpZW50QW5nbGVBbmltYXRpb24iLCJBbmltYXRhYmxlR3JhZGllbnRDb2xvciIsIkdyYWRpZW50Q29sb3JPcGFjaXR5IiwiR3JhZGllbnRBbmdsZSIsIkFuaW1hdGFibGVHcmFkaWVudCIsIkFuaW1hdGFibGVDb2xvcl8xIiwiY29sb3JzIiwicyIsIkFuaW1hdGlvbk9wdGlvbnMiLCJCYWNrZ3JvdW5kIiwiQmFja2dyb3VuZE1hc2siLCJCYWNrZ3JvdW5kTWFza0NvdmVyXzEiLCJCYWNrZ3JvdW5kTWFza0NvdmVyIiwiQ29sb3JBbmltYXRpb24iLCJGdWxsU2NyZWVuIiwiQ29sb3JBbmltYXRpb25fMSIsIkNsaWNrRXZlbnQiLCJEaXZFdmVudCIsImVsZW1lbnRJZCIsImlkcyIsIkV2ZW50cyIsIkNsaWNrRXZlbnRfMSIsIkRpdkV2ZW50XzEiLCJIb3ZlckV2ZW50XzEiLCJIb3ZlckV2ZW50Iiwib25jbGljayIsIm9uZGl2Iiwib25ob3ZlciIsIlBhcmFsbGF4XzEiLCJQYXJhbGxheCIsIkludGVyYWN0aXZpdHkiLCJFdmVudHNfMSIsIk1vZGVzXzEiLCJkZXRlY3RzT24iLCJNb2RlcyIsImRldGVjdF9vbiIsImFjdGl2ZSIsIkF0dHJhY3QiLCJlYXNlT3V0UXVhZCIsIkJvdW5jZSIsIkJ1YmJsZSIsIkJ1YmJsZURpdl8xIiwiQnViYmxlQmFzZV8xIiwiQnViYmxlQmFzZSIsIkJ1YmJsZURpdiIsIkNvbm5lY3QiLCJDb25uZWN0TGlua3NfMSIsIkNvbm5lY3RMaW5rcyIsImxpbmVfbGlua2VkIiwibGluZUxpbmtlZCIsIkdyYWIiLCJHcmFiTGlua3NfMSIsIkdyYWJMaW5rcyIsIkxpZ2h0IiwiTGlnaHRBcmVhXzEiLCJMaWdodFNoYWRvd18xIiwiTGlnaHRBcmVhIiwiTGlnaHRTaGFkb3ciLCJMaWdodEdyYWRpZW50XzEiLCJMaWdodEdyYWRpZW50IiwiQnViYmxlXzEiLCJDb25uZWN0XzEiLCJHcmFiXzEiLCJSZW1vdmVfMSIsIlB1c2hfMSIsIlJlcHVsc2VfMSIsIlNsb3dfMSIsIlRyYWlsXzEiLCJBdHRyYWN0XzEiLCJMaWdodF8xIiwiQm91bmNlXzEiLCJsaWdodCIsIlB1c2giLCJSZW1vdmUiLCJSZXB1bHNlIiwiU2xvdyIsIlRyYWlsIiwicGFydGljbGVzX25iIiwiUmVwdWxzZURpdl8xIiwiUmVwdWxzZUJhc2VfMSIsIlJlcHVsc2VCYXNlIiwiUmVwdWxzZURpdiIsIl92YWx1ZSIsIk1hbnVhbFBhcnRpY2xlIiwiTW90aW9uIiwiTW90aW9uUmVkdWNlXzEiLCJNb3Rpb25SZWR1Y2UiLCJfT3B0aW9uc19pbnN0YW5jZXMiLCJfT3B0aW9uc19maW5kRGVmYXVsdFRoZW1lIiwiX19jbGFzc1ByaXZhdGVGaWVsZEdldCIsInJlY2VpdmVyIiwic3RhdGUiLCJraW5kIiwiZiIsIlR5cGVFcnJvciIsImhhcyIsIkludGVyYWN0aXZpdHlfMSIsIkJhY2tncm91bmRNYXNrXzEiLCJCYWNrZ3JvdW5kXzEiLCJUaGVtZV8xIiwiRnVsbFNjcmVlbl8xIiwiTW90aW9uXzEiLCJNYW51YWxQYXJ0aWNsZV8xIiwiUmVzcG9uc2l2ZV8xIiwicGF1c2VPbkJsdXIiLCJ0aGVtZXMiLCJmcHNfbGltaXQiLCJyZXRpbmFfZGV0ZWN0IiwiYmFja2dyb3VuZE1vZGUiLCJpbXBvcnRQcmVzZXQiLCJvcHRSZXNwb25zaXZlIiwiUmVzcG9uc2l2ZSIsIm1heFdpZHRoIiwidGhlbWUiLCJvcHRUaGVtZSIsIlRoZW1lIiwiZGVmYXVsdERhcmtUaGVtZSIsImRhcmsiLCJkZWZhdWx0TGlnaHRUaGVtZSIsImNob3NlblRoZW1lIiwiZmluZCIsIm1lZGlhTWF0Y2giLCJjbGllbnREYXJrTW9kZSIsImRlZmF1bHRUaGVtZSIsImRlZmF1bHRPcHRpb25zIiwicmVzcG9uc2l2ZU9wdGlvbnMiLCJzY3JlZW4iLCJhdmFpbFdpZHRoIiwiV2Vha1NldCIsImFueSIsIkJvdW5jZUZhY3Rvcl8xIiwiQm91bmNlRmFjdG9yIiwiVmFsdWVXaXRoUmFuZG9tXzEiLCJWYWx1ZVdpdGhSYW5kb20iLCJtaW5pbXVtVmFsdWUiLCJDb2xsaXNpb25zIiwiQ29sbGlzaW9uc092ZXJsYXBfMSIsIkNvbGxpc2lvbnNPdmVybGFwIiwiRGVzdHJveSIsIlNwbGl0XzEiLCJub25lIiwiU3BsaXQiLCJTcGxpdEZhY3Rvcl8xIiwiU3BsaXRSYXRlXzEiLCJTcGxpdEZhY3RvciIsIlNwbGl0UmF0ZSIsIkxpZmUiLCJMaWZlRGVsYXlfMSIsIkxpZmVEdXJhdGlvbl8xIiwiTGlmZURlbGF5IiwiTGlmZUR1cmF0aW9uIiwiTGlua3MiLCJMaW5rc1NoYWRvd18xIiwiTGlua3NUcmlhbmdsZV8xIiwiTGlua3NTaGFkb3ciLCJMaW5rc1RyaWFuZ2xlIiwiYmx1ciIsInJvdGF0ZVgiLCJyb3RhdGVZIiwiTW92ZSIsIlBhdGhfMSIsIk1vdmVBbmdsZV8xIiwiTW92ZUdyYXZpdHlfMSIsIk91dE1vZGVzXzEiLCJTcGluXzEiLCJNb3ZlQW5nbGUiLCJNb3ZlR3Jhdml0eSIsIlBhdGgiLCJPdXRNb2RlcyIsIlNwaW4iLCJvdXRfbW9kZSIsIm5vaXNlIiwib3V0IiwiUGF0aERlbGF5XzEiLCJQYXRoRGVsYXkiLCJEZW5zaXR5IiwidmFsdWVfYXJlYSIsIlBhcnRpY2xlc051bWJlciIsIkRlbnNpdHlfMSIsIk9wYWNpdHkiLCJPcGFjaXR5QW5pbWF0aW9uXzEiLCJPcGFjaXR5QW5pbWF0aW9uIiwiYW5pbSIsIkFuaW1hdGlvbk9wdGlvbnNfMSIsIm9wYWNpdHlfbWluIiwiT3JiaXQiLCJPcmJpdFJvdGF0aW9uXzEiLCJyb3RhdGlvbiIsIk9yYml0Um90YXRpb24iLCJMaW5rc18xIiwiTW92ZV8xIiwiUGFydGljbGVzTnVtYmVyXzEiLCJPcGFjaXR5XzEiLCJTaXplXzEiLCJSb3RhdGVfMSIsIlNoYWRvd18xIiwiU3Ryb2tlXzEiLCJDb2xsaXNpb25zXzEiLCJUd2lua2xlXzEiLCJMaWZlXzEiLCJEZXN0cm95XzEiLCJXb2JibGVfMSIsIlRpbHRfMSIsIlJvbGxfMSIsIlpJbmRleF8xIiwiT3JiaXRfMSIsIkFuaW1hdGFibGVHcmFkaWVudF8xIiwiUm9sbCIsIlJvdGF0ZSIsIlNoYWRvdyIsIlNpemUiLCJTdHJva2UiLCJ0aWx0IiwiVGlsdCIsIlR3aW5rbGUiLCJ3b2JibGUiLCJXb2JibGUiLCJaSW5kZXgiLCJzdHJva2VUb0xvYWQiLCJncmFkaWVudFRvTG9hZCIsImVuYWJsZWQiLCJSb2xsTGlnaHRfMSIsImRhcmtlbiIsIlJvbGxMaWdodCIsImVubGlnaHRlbiIsIlJvdGF0ZUFuaW1hdGlvbl8xIiwiUm90YXRlQW5pbWF0aW9uIiwiaW1hZ2VzIiwiY3VzdG9tIiwiY2hhcmFjdGVyIiwiY2hhciIsInBvbHlnb24iLCJzdGFyIiwibWFpbktleSIsImFsdEtleSIsImFsdE92ZXJyaWRlIiwiU2l6ZUFuaW1hdGlvbl8xIiwiU2l6ZUFuaW1hdGlvbiIsInNpemVfbWluIiwiVGlsdEFuaW1hdGlvbl8xIiwiVGlsdEFuaW1hdGlvbiIsIlR3aW5rbGVWYWx1ZXNfMSIsIlR3aW5rbGVWYWx1ZXMiLCJSYW5kb20iLCJJbmZpbml0eSIsIlRoZW1lRGVmYXVsdF8xIiwiVGhlbWVEZWZhdWx0IiwiYXV0byIsIlJhbmRvbV8xIiwiQWJzb3JiZXJJbnN0YW5jZSIsImFic29yYmVycyIsImRyYWdnaW5nIiwiZHJhZ2dhYmxlIiwiZG93blBvc2l0aW9uIiwic2l6ZUZhY3RvciIsImFic29yYmVyT3JiaXQiLCJuZWVkc05ld1Bvc2l0aW9uIiwidXBkYXRlUGFydGljbGVQb3NpdGlvbiIsImlzUG9pbnRJbnNpZGUiLCJ0cmFuc2xhdGUiLCJiZWdpblBhdGgiLCJhcmMiLCJjbG9zZVBhdGgiLCJmaWxsU3R5bGUiLCJwZXJjZW50UG9zaXRpb24iLCJvcmJpdHMiLCJtaW5TaXplIiwiYWJzb3JiZXJPcmJpdERpcmVjdGlvbiIsIm9yYml0QW5nbGUiLCJvcmJpdERpcmVjdGlvbiIsImFkZFYiLCJBYnNvcmJlcnMiLCJBYnNvcmJlckluc3RhbmNlXzEiLCJBYnNvcmJlcl8xIiwiaW50ZXJhY3Rpdml0eUFic29yYmVycyIsIm92ZXJyaWRhYmxlQ29udGFpbmVyIiwiZ2V0QWJzb3JiZXIiLCJpZHhPck5hbWUiLCJhZGRBYnNvcmJlciIsIkFic29yYmVyIiwiYWJzb3JiZXJPcHRpb25zIiwiYWJzb3JiZXIiLCJoYW5kbGVDbGlja01vZGUiLCJtb2RlQWJzb3JiZXJzIiwiQWJzb3JiZXJDbGlja01vZGUiLCJhYnNvcmJlcnNNb2RlT3B0aW9ucyIsImFic29yYmVyc09wdGlvbnMiLCJhUG9zaXRpb24iLCJyZW1vdmVBYnNvcmJlciIsIkFic29yYmVyU2l6ZV8xIiwiQWJzb3JiZXJTaXplIiwiQWJzb3JiZXJTaXplTGltaXRfMSIsIkFic29yYmVyU2l6ZUxpbWl0IiwibG9hZEFic29yYmVyc1BsdWdpbiIsIkFic29yYmVyc18xIiwibG9hZEFic29yYmVycyIsIm9wdGlvbnNDYXN0IiwiX0VtaXR0ZXJJbnN0YW5jZV9maXJzdFNwYXduIiwiX0VtaXR0ZXJJbnN0YW5jZV9zdGFydFBhcnRpY2xlc0FkZGVkIiwiX19jbGFzc1ByaXZhdGVGaWVsZFNldCIsIkVtaXR0ZXJJbnN0YW5jZSIsIkVtaXR0ZXJTaXplXzEiLCJTaGFwZU1hbmFnZXJfMSIsImVtaXR0ZXJzIiwiZW1pdHRlck9wdGlvbnMiLCJjdXJyZW50RHVyYXRpb24iLCJjdXJyZW50RW1pdERlbGF5IiwiY3VycmVudFNwYXduRGVsYXkiLCJzcGF3bkRlbGF5IiwiU2hhcGVNYW5hZ2VyIiwiZ2V0U2hhcGUiLCJ3YWl0Iiwic3Bhd25Db2xvciIsIkVtaXR0ZXJTaXplIiwicGVyY2VudCIsImxpZmVDb3VudCIsImltbW9ydGFsIiwiZXh0ZXJuYWxQbGF5IiwiZXh0ZXJuYWxQYXVzZSIsImVtaXREZWxheSIsInByZXBhcmVUb0RpZSIsImVtaXRQYXJ0aWNsZXMiLCJzdGFydENvdW50IiwiZW1pdCIsInJlbW92ZUVtaXR0ZXIiLCJodWVBbmltYXRpb24iLCJzZXRDb2xvckFuaW1hdGlvbiIsImhzbEFuaW1hdGlvbiIsInBQb3NpdGlvbiIsInJhbmRvbVBvc2l0aW9uIiwiaW5pdFZhbHVlIiwibWF4VmFsdWUiLCJjb2xvck9mZnNldCIsImVtaXRGYWN0b3IiLCJXZWFrTWFwIiwiRW1pdHRlcnMiLCJFbWl0dGVySW5zdGFuY2VfMSIsIkVtaXR0ZXJfMSIsImludGVyYWN0aXZpdHlFbWl0dGVycyIsImdldEVtaXR0ZXIiLCJhZGRFbWl0dGVyIiwicGxheUVtaXR0ZXIiLCJlbWl0dGVyIiwicGF1c2VFbWl0dGVyIiwiRW1pdHRlciIsIm1vZGVFbWl0dGVycyIsIkVtaXR0ZXJDbGlja01vZGUiLCJlbWl0dGVyTW9kZU9wdGlvbnMiLCJlbWl0dGVyc09wdGlvbnMiLCJlUG9zaXRpb24iLCJFbWl0dGVyU2hhcGVUeXBlIiwiRW1pdHRlclJhdGVfMSIsIkVtaXR0ZXJMaWZlXzEiLCJFbWl0dGVyTGlmZSIsIkVtaXR0ZXJSYXRlIiwic3F1YXJlIiwiQ2lyY2xlU2hhcGUiLCJyYW5kb21UaGV0YSIsInUiLCJ0aGV0YSIsImF0YW4iLCJ0YW4iLCJnZW5lcmF0ZVRoZXRhIiwibWF4UmFkaXVzIiwicmFuZG9tUmFkaXVzIiwicmFuZG9tU3F1YXJlQ29vcmRpbmF0ZSIsIlNxdWFyZVNoYXBlIiwiaGFsZlciLCJoYWxmSCIsInNpZGUiLCJsb2FkRW1pdHRlcnNQbHVnaW4iLCJFbWl0dGVyc18xIiwiQ2lyY2xlU2hhcGVfMSIsIlNxdWFyZVNoYXBlXzEiLCJFbWl0dGVyc1BsdWdpbiIsImFkZEVtaXR0ZXJTaGFwZSIsImFkZFNoYXBlIiwiSW5saW5lQXJyYW5nZW1lbnQiLCJNb3ZlVHlwZSIsIlR5cGUiLCJEcmF3IiwiRHJhd1N0cm9rZV8xIiwiRHJhd1N0cm9rZSIsImxpbmVXaWR0aCIsInN0cmluZ1RvQWxwaGEiLCJJbmxpbmUiLCJhcnJhbmdlbWVudCIsIm9uZVBlclBvaW50IiwiTG9jYWxTdmciLCJQb2x5Z29uTWFzayIsIkRyYXdfMSIsIklubGluZV8xIiwiTG9jYWxTdmdfMSIsImlubGluZSIsInNjYWxlIiwiaW5saW5lQXJyYW5nZW1lbnQiLCJQb2x5Z29uTWFza0luc3RhbmNlIiwiUG9seWdvbk1hc2tfMSIsIkVudW1zXzIiLCJ1dGlsc18xIiwiZGltZW5zaW9uIiwicGF0aDJEU3VwcG9ydGVkIiwiUGF0aDJEIiwicG9seWdvbk1hc2tNb3ZlUmFkaXVzIiwicG9seWdvbk1hc2tPcHRpb25zIiwiaW5pdFJhd0RhdGEiLCJyZWRyYXdUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwicmF3IiwicGF0aHMiLCJwZXJQb2ludCIsImRyYXdQb2ludHMiLCJyYW5kb21Qb2ludCIsInBhcnRpY2xlQm91bmNlIiwicG9seWdvbkJvdW5jZSIsImNsaWNrUG9zaXRpb25WYWxpZCIsImNoZWNrSW5zaWRlUG9seWdvbiIsInBvbHlnb25EcmF3IiwicmF3RGF0YSIsInBhdGgyZCIsInBhdGgyZFN1cHBvcnRlZCIsImRyYXdQb2x5Z29uTWFza1BhdGgiLCJkcmF3UG9seWdvbk1hc2siLCJfZGVsdGEiLCJvdXRzaWRlIiwiY2xvc2VzdCIsInBpIiwicGoiLCJjYWxjQ2xvc2VzdFB0T25TZWdtZW50Iiwic2VnbWVudEJvdW5jZSIsIm5vUG9seWdvbkZvdW5kIiwicGFyc2VTdmdQYXRoIiwieG1sIiwiZm9yY2VEb3dubG9hZCIsImRvYyIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInN2ZyIsInN2Z1BhdGhzIiwiZ2V0VG90YWxMZW5ndGgiLCJwYXJzZUZsb2F0IiwiZ2V0QXR0cmlidXRlIiwicGFyc2VQYXRocyIsInN2Z1VybCIsInJlcSIsInRleHQiLCJnZXRSYW5kb21Qb2ludCIsInJhbmRvbUxlbmd0aCIsImdldFJhbmRvbVBvaW50QnlMZW5ndGgiLCJlcXVpZGlzdGFudCIsImdldEVxdWlkaXN0YW50UG9pbnRCeUluZGV4IiwiZ2V0UG9pbnRCeUluZGV4Iiwibm9Qb2x5Z29uRGF0YUxvYWRlZCIsInBvaW50IiwiZ2V0UG9pbnRBdExlbmd0aCIsInRvdCIsInBhdGhEaXN0YW5jZSIsImNyZWF0ZVBhdGgyRCIsInBhdGhEYXRhIiwibWF0cml4IiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlU1ZHTWF0cml4IiwiZmluYWxQYXRoIiwidHJhbnNmb3JtIiwiYWRkUGF0aCIsIm1vdmVUbyIsImxpbmVUbyIsImRvd25sb2FkU3ZnUGF0aCIsIlNWR1BhdGhTZWciLCJ0eXBlQXNMZXR0ZXIiLCJvd25pbmdQYXRoU2VnTGlzdCIsInBhdGhTZWdUeXBlIiwicGF0aFNlZ1R5cGVBc0xldHRlciIsIl9vd25pbmdQYXRoU2VnTGlzdCIsImNsYXNzbmFtZSIsIlBBVEhTRUdfVU5LTk9XTiIsIlBBVEhTRUdfQ0xPU0VQQVRIIiwiUEFUSFNFR19NT1ZFVE9fQUJTIiwiUEFUSFNFR19NT1ZFVE9fUkVMIiwiUEFUSFNFR19MSU5FVE9fQUJTIiwiUEFUSFNFR19MSU5FVE9fUkVMIiwiUEFUSFNFR19DVVJWRVRPX0NVQklDX0FCUyIsIlBBVEhTRUdfQ1VSVkVUT19DVUJJQ19SRUwiLCJQQVRIU0VHX0NVUlZFVE9fUVVBRFJBVElDX0FCUyIsIlBBVEhTRUdfQ1VSVkVUT19RVUFEUkFUSUNfUkVMIiwiUEFUSFNFR19BUkNfQUJTIiwiUEFUSFNFR19BUkNfUkVMIiwiUEFUSFNFR19MSU5FVE9fSE9SSVpPTlRBTF9BQlMiLCJQQVRIU0VHX0xJTkVUT19IT1JJWk9OVEFMX1JFTCIsIlBBVEhTRUdfTElORVRPX1ZFUlRJQ0FMX0FCUyIsIlBBVEhTRUdfTElORVRPX1ZFUlRJQ0FMX1JFTCIsIlBBVEhTRUdfQ1VSVkVUT19DVUJJQ19TTU9PVEhfQUJTIiwiUEFUSFNFR19DVVJWRVRPX0NVQklDX1NNT09USF9SRUwiLCJQQVRIU0VHX0NVUlZFVE9fUVVBRFJBVElDX1NNT09USF9BQlMiLCJQQVRIU0VHX0NVUlZFVE9fUVVBRFJBVElDX1NNT09USF9SRUwiLCJfc2VnbWVudENoYW5nZWQiLCJzZWdtZW50Q2hhbmdlZCIsIlNWR1BhdGhTZWdDbG9zZVBhdGgiLCJfYXNQYXRoU3RyaW5nIiwiU1ZHUGF0aFNlZ01vdmV0b0FicyIsIl94IiwiX3kiLCJTVkdQYXRoU2VnTW92ZXRvUmVsIiwiU1ZHUGF0aFNlZ0xpbmV0b0FicyIsIlNWR1BhdGhTZWdMaW5ldG9SZWwiLCJTVkdQYXRoU2VnQ3VydmV0b0N1YmljQWJzIiwieDEiLCJ5MSIsIngyIiwieTIiLCJfeDEiLCJfeTEiLCJfeDIiLCJfeTIiLCJTVkdQYXRoU2VnQ3VydmV0b0N1YmljUmVsIiwiU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNBYnMiLCJTVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1JlbCIsIlNWR1BhdGhTZWdBcmNBYnMiLCJyMSIsInIyIiwibGFyZ2VBcmNGbGFnIiwic3dlZXBGbGFnIiwiX3IxIiwiX3IyIiwiX2FuZ2xlIiwiX2xhcmdlQXJjRmxhZyIsIl9zd2VlcEZsYWciLCJTVkdQYXRoU2VnQXJjUmVsIiwiU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxBYnMiLCJTVkdQYXRoU2VnTGluZXRvSG9yaXpvbnRhbFJlbCIsIlNWR1BhdGhTZWdMaW5ldG9WZXJ0aWNhbEFicyIsIlNWR1BhdGhTZWdMaW5ldG9WZXJ0aWNhbFJlbCIsIlNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhBYnMiLCJTVkdQYXRoU2VnQ3VydmV0b0N1YmljU21vb3RoUmVsIiwiU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhBYnMiLCJTVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1Ntb290aFJlbCIsIlNWR1BhdGhFbGVtZW50IiwiY3JlYXRlU1ZHUGF0aFNlZ0Nsb3NlUGF0aCIsImNyZWF0ZVNWR1BhdGhTZWdNb3ZldG9BYnMiLCJjcmVhdGVTVkdQYXRoU2VnTW92ZXRvUmVsIiwiY3JlYXRlU1ZHUGF0aFNlZ0xpbmV0b0FicyIsImNyZWF0ZVNWR1BhdGhTZWdMaW5ldG9SZWwiLCJjcmVhdGVTVkdQYXRoU2VnQ3VydmV0b0N1YmljQWJzIiwiY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1JlbCIsImNyZWF0ZVNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljQWJzIiwiY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNSZWwiLCJjcmVhdGVTVkdQYXRoU2VnQXJjQWJzIiwiY3JlYXRlU1ZHUGF0aFNlZ0FyY1JlbCIsImNyZWF0ZVNWR1BhdGhTZWdMaW5ldG9Ib3Jpem9udGFsQWJzIiwiY3JlYXRlU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxSZWwiLCJjcmVhdGVTVkdQYXRoU2VnTGluZXRvVmVydGljYWxBYnMiLCJjcmVhdGVTVkdQYXRoU2VnTGluZXRvVmVydGljYWxSZWwiLCJjcmVhdGVTVkdQYXRoU2VnQ3VydmV0b0N1YmljU21vb3RoQWJzIiwiY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aFJlbCIsImNyZWF0ZVNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljU21vb3RoQWJzIiwiY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhSZWwiLCJnZXRQYXRoU2VnQXRMZW5ndGgiLCJpc0Zpbml0ZSIsIm1lYXN1cmVtZW50RWxlbWVudCIsImxhc3RQYXRoU2VnbWVudCIsInBhdGhTZWdMaXN0IiwibnVtYmVyT2ZJdGVtcyIsInJlbW92ZUl0ZW0iLCJTVkdQYXRoU2VnTGlzdCIsInBhdGhFbGVtZW50IiwiX3BhdGhFbGVtZW50IiwiX2xpc3QiLCJfcGFyc2VQYXRoIiwiX211dGF0aW9uT2JzZXJ2ZXJDb25maWciLCJhdHRyaWJ1dGVGaWx0ZXIiLCJfcGF0aEVsZW1lbnRNdXRhdGlvbk9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIl91cGRhdGVMaXN0RnJvbVBhdGhNdXRhdGlvbnMiLCJiaW5kIiwiX2NoZWNrUGF0aFN5bmNocm9uaXplZFRvTGlzdCIsIl9wYXRoU2VnTGlzdCIsInRha2VSZWNvcmRzIiwibXV0YXRpb25SZWNvcmRzIiwiaGFzUGF0aE11dGF0aW9ucyIsInJlY29yZCIsImF0dHJpYnV0ZU5hbWUiLCJfd3JpdGVMaXN0VG9QYXRoIiwiZGlzY29ubmVjdCIsIl9wYXRoU2VnQXJyYXlBc1N0cmluZyIsInBhdGhTZWciLCJpbml0aWFsaXplIiwiX2NoZWNrVmFsaWRJbmRleCIsImlzTmFOIiwiZ2V0SXRlbSIsImluc2VydEl0ZW1CZWZvcmUiLCJyZXBsYWNlSXRlbSIsImFwcGVuZEl0ZW0iLCJwYXRoU2VnQXJyYXkiLCJzdHJpbmciLCJmaXJzdCIsIkJ1aWxkZXIiLCJhcHBlbmRTZWdtZW50IiwiU291cmNlIiwiX3N0cmluZyIsIl9jdXJyZW50SW5kZXgiLCJfZW5kSW5kZXgiLCJfcHJldmlvdXNDb21tYW5kIiwiX3NraXBPcHRpb25hbFNwYWNlcyIsIl9pc0N1cnJlbnRTcGFjZSIsIl9za2lwT3B0aW9uYWxTcGFjZXNPckRlbGltaXRlciIsImNoYXJBdCIsImhhc01vcmVEYXRhIiwicGVla1NlZ21lbnRUeXBlIiwibG9va2FoZWFkIiwiX3BhdGhTZWdUeXBlRnJvbUNoYXIiLCJfbmV4dENvbW1hbmRIZWxwZXIiLCJwcmV2aW91c0NvbW1hbmQiLCJpbml0aWFsQ29tbWFuZElzTW92ZVRvIiwiY29tbWFuZCIsIl9wYXJzZU51bWJlciIsImV4cG9uZW50IiwiaW50ZWdlciIsImZyYWMiLCJkZWNpbWFsIiwic2lnbiIsImV4cHNpZ24iLCJzdGFydEluZGV4Iiwic3RhcnRJbnRQYXJ0SW5kZXgiLCJzY2FuSW50UGFydEluZGV4IiwibXVsdGlwbGllciIsIl9wYXJzZUFyY0ZsYWciLCJmbGFnIiwiZmxhZ0NoYXIiLCJwYXJzZVNlZ21lbnQiLCJwb2ludHMiLCJhcmNBbmdsZSIsImFyY0xhcmdlIiwiYXJjU3dlZXAiLCJidWlsZGVyIiwiX19zZXRNb2R1bGVEZWZhdWx0IiwiX19pbXBvcnRTdGFyIiwibW9kIiwibG9hZFBvbHlnb25NYXNrUGx1Z2luIiwiUG9seWdvbk1hc2tJbnN0YW5jZV8xIiwicG9seWdvbk9wdGlvbnMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJzdHJva2VTdHlsZSIsInNlZ21lbnRzIiwibGVuIiwic2VnbWVudCIsInN2Z1BhdGhTZWciLCJhYnNTZWciLCJyZWxTZWciLCJzMSIsInMyIiwiZHh4IiwiZHl5IiwiaXNPblNlZ21lbnQiLCJ3YWxsQW5nbGUiLCJ3YWxsTm9ybWFsWCIsIndhbGxOb3JtYWxZIiwiQ2lyY2xlRHJhd2VyIiwibG9hZENpcmNsZVNoYXBlIiwiQ2lyY2xlRHJhd2VyXzEiLCJfSW1hZ2VEcmF3ZXJfaW1hZ2VzIiwiSW1hZ2VEcmF3ZXIiLCJnZXRJbWFnZXMiLCJhZGRJbWFnZSIsImNvbnRhaW5lckltYWdlcyIsImxvYWRJbWFnZXNGcm9tUGFydGljbGVzT3B0aW9ucyIsIm1hbnVhbFBhcnRpY2xlIiwiaW50ZXJhY3RpdmVFbWl0dGVycyIsImlkeCIsImltYWdlT3B0aW9ucyIsIm9wdGlvbnNJbWFnZSIsImxvYWRJbWFnZVNoYXBlIiwiZ3JvdXBOYW1lIiwiaW1hZ2VTaGFwZSIsImltYWdlRnVuYyIsInJlcGxhY2VDb2xvciIsImRvd25sb2FkU3ZnSW1hZ2UiLCJsb2FkSW1hZ2UiLCJzcmMiLCJzdmdEYXRhIiwiZ2xvYmFsQWxwaGEiLCJkcmF3SW1hZ2UiLCJpbWFnZURhdGEiLCJpbWFnZVJlcyIsInN2Z0NvbG9yZWREYXRhIiwicmVwbGFjZUNvbG9yU3ZnIiwiQmxvYiIsImRvbVVybCIsIndlYmtpdFVSTCIsImNyZWF0ZU9iamVjdFVSTCIsImltZyIsIkltYWdlIiwiYXNzaWduIiwicmVwbGFjZV9jb2xvciIsInBJbWFnZSIsImxvYWRlZCIsInJldm9rZU9iamVjdFVSTCIsImltZzIiLCJyZWplY3QiLCJzdWJzdHIiLCJpbmNsdWRlcyIsImN1cnJlbnRDb2xvciIsInByZUZpbGxJbmRleCIsInN1YnN0cmluZyIsIkltYWdlRHJhd2VyXzEiLCJpbWFnZURyYXdlciIsIkxpbmVEcmF3ZXIiLCJsb2FkTGluZVNoYXBlIiwiTGluZURyYXdlcl8xIiwiUG9seWdvbkRyYXdlciIsIlBvbHlnb25EcmF3ZXJCYXNlXzEiLCJQb2x5Z29uRHJhd2VyQmFzZSIsImdldFNpZGVzRGF0YSIsIm5iX3NpZGVzIiwiZGVub21pbmF0b3IiLCJudW1lcmF0b3IiLCJnZXRDZW50ZXIiLCJzaWRlQ291bnQiLCJkZWNpbWFsU2lkZXMiLCJpbnRlcmlvckFuZ2xlRGVncmVlcyIsImludGVyaW9yQW5nbGUiLCJUcmlhbmdsZURyYXdlciIsImxvYWRQb2x5Z29uU2hhcGUiLCJsb2FkVHJpYW5nbGVTaGFwZSIsImxvYWRHZW5lcmljUG9seWdvblNoYXBlIiwiUG9seWdvbkRyYXdlcl8xIiwiVHJpYW5nbGVEcmF3ZXJfMSIsIlNxdWFyZURyYXdlciIsImZpeEZhY3RvciIsInJlY3QiLCJsb2FkU3F1YXJlU2hhcGUiLCJTcXVhcmVEcmF3ZXJfMSIsIlN0YXJEcmF3ZXIiLCJpbnNldCIsImxvYWRTdGFyU2hhcGUiLCJTdGFyRHJhd2VyXzEiLCJUZXh0RHJhd2VyIiwidmFsaWRUeXBlcyIsInByb21pc2VzIiwibG9hZEZvbnQiLCJhbGxTZXR0bGVkIiwidGV4dERhdGEiLCJ0ZXh0UGFydGljbGUiLCJyYW5kb21JbmRleERhdGEiLCJ3ZWlnaHQiLCJmb250IiwiZmlsbFRleHQiLCJzdHJva2VUZXh0IiwibG9hZFRleHRTaGFwZSIsIlRleHREcmF3ZXJfMSIsIkFuZ2xlVXBkYXRlciIsInJvdGF0ZU9wdGlvbnMiLCJyb3RhdGVEaXJlY3Rpb24iLCJyb3RhdGVBbmltYXRpb24iLCJ1cGRhdGVBbmdsZSIsImxvYWRBbmdsZVVwZGF0ZXIiLCJBbmdsZVVwZGF0ZXJfMSIsImFkZFBhcnRpY2xlVXBkYXRlciIsIkNvbG9yVXBkYXRlciIsInVwZGF0ZUNvbG9yVmFsdWUiLCJ2YWx1ZUFuaW1hdGlvbiIsImRlY3JlYXNlIiwiY29sb3JWYWx1ZSIsImhzbENvbG9yIiwiZ2V0SHNsQW5pbWF0aW9uRnJvbUhzbCIsImFuaW1hdGlvbk9wdGlvbnMiLCJ1cGRhdGVDb2xvciIsImxvYWRDb2xvclVwZGF0ZXIiLCJDb2xvclVwZGF0ZXJfMSIsIkxpZmVVcGRhdGVyIiwianVzdFNwYXduZWQiLCJ3aWR0aFJhbmdlIiwiaGVpZ2h0UmFuZ2UiLCJsb2FkTGlmZVVwZGF0ZXIiLCJMaWZlVXBkYXRlcl8xIiwiT3BhY2l0eVVwZGF0ZXIiLCJvcGFjaXR5T3B0aW9ucyIsIm9wYWNpdHlBbmltYXRpb24iLCJvcGFjaXR5UmFuZ2UiLCJtaW5WYWx1ZSIsImNoZWNrRGVzdHJveSIsInVwZGF0ZU9wYWNpdHkiLCJsb2FkT3BhY2l0eVVwZGF0ZXIiLCJPcGFjaXR5VXBkYXRlcl8xIiwiT3V0T2ZDYW52YXNVcGRhdGVyIiwidXBkYXRlT3V0TW9kZSIsIndyYXAiLCJuZXdQb3MiLCJzaXplVmFsdWUiLCJuZXh0Qm91bmRzIiwiYm91bmRzIiwicFJhZGl1cyIsImJvdW5jZWQiLCJuZXdWZWxvY2l0eSIsIm1pblBvcyIsImxvYWRPdXRNb2Rlc1VwZGF0ZXIiLCJPdXRPZkNhbnZhc1VwZGF0ZXJfMSIsIlJvbGxVcGRhdGVyIiwicm9sbE9wdCIsImFsdGVyVHlwZSIsInVwZGF0ZVJvbGwiLCJsb2FkUm9sbFVwZGF0ZXIiLCJSb2xsVXBkYXRlcl8xIiwiU2l6ZVVwZGF0ZXIiLCJzaXplVmVsb2NpdHkiLCJ1cGRhdGVTaXplIiwibG9hZFNpemVVcGRhdGVyIiwiU2l6ZVVwZGF0ZXJfMSIsIlN0cm9rZUNvbG9yVXBkYXRlciIsInN0cm9rZVdpZHRoIiwic3Ryb2tlSHNsQ29sb3IiLCJ1cGRhdGVTdHJva2VDb2xvciIsImxvYWRTdHJva2VDb2xvclVwZGF0ZXIiLCJTdHJva2VDb2xvclVwZGF0ZXJfMSIsIlRpbHRVcGRhdGVyIiwidGlsdE9wdGlvbnMiLCJzaW5EaXJlY3Rpb24iLCJjb3NEaXJlY3Rpb24iLCJ0aWx0RGlyZWN0aW9uIiwidGlsdEFuaW1hdGlvbiIsInVwZGF0ZVRpbHQiLCJsb2FkVGlsdFVwZGF0ZXIiLCJUaWx0VXBkYXRlcl8xIiwiV29iYmxlVXBkYXRlciIsIndvYmJsZU9wdCIsIndvYmJsZURpc3RhbmNlIiwidXBkYXRlV29iYmxlIiwibG9hZFdvYmJsZVVwZGF0ZXIiLCJXb2JibGVVcGRhdGVyXzEiLCJkcmF3RWxsaXBzZSIsImRyYXdTaGFwZUFmdGVyRWZmZWN0IiwiZHJhd1NoYXBlIiwiTnVtYmVyVXRpbHNfMSIsIkNvbG9yVXRpbHNfMSIsImRyYXdMaW5lIiwiYmVnaW4iLCJlbmQiLCJhZnRlckVmZmVjdCIsImZpbGxSZWN0IiwiY2xlYXJSZWN0IiwiZHJhd24iLCJwaTEiLCJwaTIiLCJlbmRORSIsImQxIiwieWkiLCJlbmRTVyIsImQyIiwieGkiLCJlbmRTRSIsImQzIiwiZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIiwic2hhZG93Qmx1ciIsImRyYXdUcmlhbmdsZSIsImdyYWRTdG9wIiwiY29sb3IxIiwiY29sb3IyIiwic291cmNlUG9zIiwiZGVzdFBvcyIsIm1pZFJnYiIsImdyYWQiLCJjcmVhdGVMaW5lYXJHcmFkaWVudCIsImFkZENvbG9yU3RvcCIsInJvbGxPcHRpb25zIiwicm9sbEhvcml6b250YWwiLCJib3RoIiwicm9sbFZlcnRpY2FsIiwic2V0VHJhbnNmb3JtIiwic2hhZG93T2Zmc2V0WCIsInNoYWRvd09mZnNldFkiLCJncmFkaWVudEFuZ2xlIiwiZmlsbEdyYWRpZW50IiwicmFkaWFsIiwiY3JlYXRlUmFkaWFsR3JhZGllbnQiLCJyb3RhdGlvblJhZGlhbiIsImVsbGlwc2UiLCJSYW5nZV8xIiwiUmFuZ2UiLCJpbnRlcnNlY3RzIiwieERpc3QiLCJ5RGlzdCIsInciLCJlZGdlcyIsIlJlY3RhbmdsZV8xIiwiQ2lyY2xlXzEiLCJwb3NORSIsInBvc1NFIiwicG9zU1ciLCJiaWdnZXJDaXJjbGUiLCJyZWN0U1ciLCJnZXRTdHlsZUZyb21Ic3YiLCJnZXRSYW5kb21SZ2JDb2xvciIsInJnYmFUb0hzdmEiLCJyZ2JUb0hzdiIsImhzdmFUb1JnYmEiLCJoc3ZUb1JnYiIsImhzdmFUb0hzbGEiLCJoc3ZUb0hzbCIsImhzbGFUb0hzdmEiLCJoc2xUb0hzdiIsImhzbGFUb1JnYmEiLCJoc2xUb1JnYiIsInN0cmluZ1RvUmdiIiwiQ29uc3RhbnRzXzEiLCJodWUycmdiIiwicSIsInRDYWxjIiwic3RyaW5nVG9SZ2JhIiwiaW5wdXQiLCJzdGFydHNXaXRoIiwiZXhlYyIsInBhcnNlSW50Iiwic2hvcnRoYW5kUmVnZXgiLCJoZXhGaXhlZCIsIl9tIiwidXNlSW5kZXgiLCJyYW5kb21Db2xvclZhbHVlIiwicmdiQ29sb3IiLCJyZ2IiLCJoc3ZDb2xvciIsImhzdiIsImcxIiwiYjEiLCJoc2xQZXJjZW50IiwiaHNsYSIsInJnYlJlc3VsdCIsInN2Iiwic2wiLCJoc3ZQZXJjZW50IiwiYyIsInRlbXBSZ2IiLCJoc3ZhIiwicmdiUGVyY2VudCIsInhNYXgiLCJmaXhlZE1pbiIsInNpemUxIiwic2l6ZTIiLCJyZ2IxIiwicmdiMiIsImhzdlJlc3VsdCIsImhzbFJlc3VsdCIsInJnYmEiLCJzb3VyY2VDb2xvciIsImRlc3RDb2xvciIsIm1pZENvbG9yVmFsdWUiLCJyZXNDb2xvciIsInRvdWNoRW5kRXZlbnQiLCJtb3VzZURvd25FdmVudCIsIm1vdXNlVXBFdmVudCIsInRvdWNoU3RhcnRFdmVudCIsInRvdWNoTW92ZUV2ZW50IiwibW91c2VPdXRFdmVudCIsInRvdWNoQ2FuY2VsRXZlbnQiLCJyZXNpemVFdmVudCIsInZpc2liaWxpdHlDaGFuZ2VFdmVudCIsIm1hbmFnZUxpc3RlbmVyIiwiZXZlbnQiLCJoYW5kbGVyIiwiYWRkT3B0aW9ucyIsInBhc3NpdmUiLCJjYXB0dXJlIiwicmVtb3ZlT3B0aW9ucyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjYW5QdXNoIiwibW91c2VNb3ZlSGFuZGxlciIsIm1vdXNlVG91Y2hNb3ZlIiwidG91Y2hTdGFydEhhbmRsZXIiLCJ0b3VjaE1vdmVIYW5kbGVyIiwidG91Y2hFbmRIYW5kbGVyIiwibW91c2VUb3VjaEZpbmlzaCIsIm1vdXNlTGVhdmVIYW5kbGVyIiwidG91Y2hDYW5jZWxIYW5kbGVyIiwidG91Y2hFbmRDbGlja0hhbmRsZXIiLCJtb3VzZVRvdWNoQ2xpY2siLCJtb3VzZVVwSGFuZGxlciIsIm1vdXNlRG93bkhhbmRsZXIiLCJtb3VzZURvd24iLCJ2aXNpYmlsaXR5Q2hhbmdlSGFuZGxlciIsImhhbmRsZVZpc2liaWxpdHlDaGFuZ2UiLCJ0aGVtZUNoYW5nZUhhbmRsZXIiLCJoYW5kbGVUaGVtZUNoYW5nZSIsIm9sZFRoZW1lQ2hhbmdlSGFuZGxlciIsInJlc2l6ZUhhbmRsZXIiLCJoYW5kbGVXaW5kb3dSZXNpemUiLCJtYW5hZ2VMaXN0ZW5lcnMiLCJkZXRlY3RUeXBlIiwicGFyZW50RWxlbWVudCIsInJlbW92ZUxpc3RlbmVyIiwiaW50ZXJhY3Rpdml0eUVsIiwiaHRtbCIsInBvaW50ZXJFdmVudHMiLCJSZXNpemVPYnNlcnZlciIsInJlc2l6ZU9ic2VydmVyIiwidW5vYnNlcnZlIiwicmVzaXplVGltZW91dCIsImhpZGRlbiIsImNsaWVudFJlY3QiLCJjdXJyZW50VGFyZ2V0Iiwic291cmNlUmVjdCIsInRhcmdldFJlY3QiLCJtb3VzZVBvc2l0aW9uIiwiZG9Nb3VzZVRvdWNoQ2xpY2siLCJ0aGVtZU5hbWUiLCJsb2FkVGhlbWUiLCJwdXNoTmIiLCJyZW1vdmVOYiIsInB1c2hPcHRpb25zIiwiY29sbGlzaW9uVmVsb2NpdHkiLCJwb2ludEEiLCJwb2ludEIiLCJudW0iLCJjb21wMSIsImNvbXAyIiwid2VpZ2h0MSIsIndlaWdodDIiLCJ0b3BSaWdodCIsImJvdHRvbVJpZ2h0IiwiYm90dG9tTGVmdCIsInRvcExlZnQiLCJiYXNlVmVsb2NpdHkiLCJ2MSIsInYyIiwibTEiLCJtMiIsImVhc2VPdXRDdWJpYyIsImVhc2VPdXRRdWFydCIsImVhc2VPdXRRdWludCIsImVhc2VPdXRFeHBvIiwiZWFzZU91dFNpbmUiLCJlYXNlT3V0QmFjayIsImMxIiwiZWFzZU91dENpcmMiLCJpbnRlcmFjdG9yc0luaXRpYWxpemVycyIsInVwZGF0ZXJzSW5pdGlhbGl6ZXJzIiwicGF0aEdlbmVyYXRvcnMiLCJwcmVzZXRLZXkiLCJ2YWx1ZXMiLCJpbml0SW50ZXJhY3RvciIsImluaXRVcGRhdGVyIiwiQ2lyY2xlV2FycF8xIiwicmVjdGFuZ2xlIiwiY2FwYWNpdHkiLCJkaXZpZGVkIiwic3ViZGl2aWRlIiwibm9ydGhFYXN0Iiwibm9ydGhXZXN0Iiwic291dGhFYXN0Iiwic291dGhXZXN0IiwicXVlcnlDaXJjbGVXYXJwIiwiY29udGFpbmVyT3JTaXplIiwicXVlcnlSZWN0YW5nbGUiLCJmb3VuZCIsIncyIiwiaDIiLCJzaW5nbGVEaXZNb2RlRXhlY3V0ZSIsImFyZUJvdW5kc0luc2lkZSIsImFycmF5UmFuZG9tSW5kZXgiLCJyZWN0U2lkZUJvdW5jZSIsInBTaWRlIiwicE90aGVyU2lkZSIsInJlY3RTaWRlIiwicmVjdE90aGVyU2lkZSIsImNoZWNrU2VsZWN0b3IiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJvUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJoYW5kbGUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIndlYmtpdENhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1vekNhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm9DYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtc0NhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSIsImZvbnRzIiwic291cmNlSXNBcnJheSIsImlzQXJyYXkiLCJpc09iamVjdCIsImRlc3REaWN0IiwieFZlbG9jaXR5RGlmZiIsInlWZWxvY2l0eURpZmYiLCJ1MSIsInUyIiwidkZpbmFsMSIsInZGaW5hbDIiLCJkaXZCb3VuZHMiLCJyZXNIIiwicmVzViIsImxvYWRGdWxsIiwic2xpbV8xIiwicGx1Z2luXzIiLCJwbHVnaW5fMyIsImxvYWRTbGltIiwicEpTRG9tIiwicGFydGljbGVzSlMiLCJNYWluIiwicGpzXzEiLCJtYWluXzEiLCJmdWxsXzEiLCJpbml0UGpzIiwiX01haW5faW5pdGlhbGl6ZWQiLCJMb2FkZXJfMSIsInBhdGhDb25maWdKc29uIiwibG9hZEpTT04iLCJzZXRKU09OIiwic2V0T25DbGlja0hhbmRsZXIiLCJpbnN0YW5jZSIsImN1c3RvbURyYXdlciIsImFkZFNoYXBlRHJhd2VyIiwiYWRkUHJlc2V0IiwiYWRkUGF0aEdlbmVyYXRvciIsImludGVyYWN0b3JJbml0aWFsaXplciIsInVwZGF0ZXJJbml0aWFsaXplciIsIm1haW4iLCJJbWFnZV8xIiwiUG9seWdvbl8xIiwiU3Rhcl8xIiwiQXR0cmFjdF8yIiwiU3F1YXJlXzEiLCJTdHJva2VDb2xvcl8xIiwiQ29sb3JfMSIsIkFuZ2xlXzEiLCJMaW5lXzEiLCJUZXh0XzEiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiZGVmaW5pdGlvbiIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsInByb3AiLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwibG9jYXRpb24iLCJjdXJyZW50U2NyaXB0Iiwic2NyaXB0cyIsImJhc2VVUkkiLCJzZWxmIiwiaHJlZiIsImFwaUhhbmRsZXIiLCJjYWxsQXBpIiwiY2l0eU5hbWUiLCJib2R5IiwibG9hZGluZ0hhbmRsZXIiLCJyZXR1cm5Mb2FkaW5nIiwibG9hZGluZyIsImZldGNoRGF0YSIsImNsYXNzTGlzdCIsImlubmVySFRNTCIsImV2YWx1YXRlIiwiY29uZCIsImFkZFBhcnRpY2xlcyIsInJlbW92ZVBhcnRpY2xlcyIsImdldFVwVHJpYW5nbGUiLCJnZXREb3duVHJpYW5nbGUiLCJkaXNwbGF5SGFuZGxlciIsIndlYXRoZXJEaXNwbGF5IiwidXBkYXRlRGF0YSIsInRlbXBJbmZvIiwic3VuIiwidGVtcERpdiIsInRlbXAiLCJjdXJyZW50VGVtcCIsInRleHRDb250ZW50IiwicmV0dXJuQ3VycmVudFRlbXAiLCJtaW5UZW1wIiwiZGF0IiwibmV3SW1hZ2UiLCJyZXR1cm5NaW5UZW1wIiwibWF4VGVtcCIsInJldHVybk1heFRlbXAiLCJjb25kRGl2IiwicmV0dXJuQ29uZGl0aW9uIiwibmFtZURpdiIsInJldHVybkNpdHlOYW1lIiwicmVtb3ZlQXR0cmlidXRlIiwiYm94U2hhZG93IiwidXBkYXRlQmFja2dyb3VuZCIsImlucHV0Rm9ybSIsImZvcm1zIiwiaGFuZGxlRXJyb3IiLCJlcnIiLCJsb2ciLCJlcnJvckRpdiIsIm1lc3NhZ2UiLCJvbnN1Ym1pdCIsImVsZW1lbnRzIiwicHJldmVudERlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9