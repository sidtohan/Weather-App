(()=>{"use strict";var e={719:(e,t,n)=>{e.exports=n.p+"438bcc62106c93fe94a1.svg"},106:(e,t,n)=>{e.exports=n.p+"0e5e8fed6b52fbd4216c.svg"},440:(e,t,n)=>{e.exports=n.p+"28582b06648fefbdbe87.svg"},538:(e,t,n)=>{e.exports=n.p+"9568e3dce4dcc81e6b2b.svg"},238:(e,t,n)=>{e.exports=n.p+"9f7151c821ee90b86a42.svg"},6:(e,t,n)=>{e.exports=n.p+"081ea4bfd9cca44d9010.svg"},310:(e,t,n)=>{e.exports=n.p+"784ec83fa007b5e72bcf.svg"},814:(e,t,n)=>{e.exports=n.p+"d2a2a98f7df3749ce65a.svg"}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var c=t[r]={exports:{}};return e[r](c,c.exports,n),c.exports}n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),(()=>{const e=(()=>{let e=!0;return{callApi:async function(n){e?(document.body.removeChild(document.querySelector(".loading-begin")),document.body.appendChild(t.returnLoading()),e=!1):document.body.appendChild(t.returnLoading());const r=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${n}&appid=94a2aad4a38121e794735a95ee415a76`,{mode:"cors"}),o=await r.json();return document.body.removeChild(document.querySelector(".loading-begin")),o}}})(),t={returnLoading:()=>{const e=document.createElement("div"),t=document.createElement("div");return e.classList.add("loading-begin"),t.classList.add("text"),t.textContent="Fetching Data",e.appendChild(t),e}},r=e;var o=n(238),c=n(440),a=n(6),d=(n(106),n(538)),i=n(310);n(719),n(814);const s=()=>{const e=document.querySelector(".weather-display");return document.querySelector(".min-temp"),document.querySelector(".max-temp"),document.querySelector(".cast"),document.querySelector(".humidity"),document.querySelector(".wind"),{updateData:t=>{console.log(t),e.innerHTML="";const n=document.createElement("div"),r=document.createElement("div");n.classList.add("cast-display"),r.classList.add("info-display"),n.appendChild((e=>{const t=function(e){return"Haze"==e?o:"Rain"==e?a:"Clouds"==e?c:"Drizzle"==e?d:i}(e),n=new Image;return n.src=t,console.log(n),n})(t.weather[0].main)),r.appendChild((e=>{const t=document.createElement("div");return t.classList.add("current-temp"),t.textContent=`${Math.round(e-273)}Â°C`,console.log(t),t})(t.main.temp)),e.appendChild(n),e.appendChild(r)}}};(()=>{const e=document.forms[0];e.onsubmit=function(t){const n=e.elements[0];t.preventDefault(),r.callApi(n.value).then((e=>s().updateData(e))).catch((e=>{console.log(e)})),e.reset()}})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,