(()=>{"use strict";var t={5150:(t,e,i)=>{i.d(e,{Z:()=>v});var n=i(1684),o=i.n(n),s=i(5524),a=i.n(s),r=i(1667),l=i.n(r),c=new URL(i(9097),i.b),d=new URL(i(1634),i.b),h=a()(o());h.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;700&display=swap);"]),h.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=M+PLUS+2:wght@500;700&display=swap);"]);var u=l()(c),p=l()(d);h.push([t.id,'/* RESET CSS  */\n\n* {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n\n/* HTML5 display-role reset for older browsers */\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n  display: block;\n}\nbody {\n  line-height: 1;\n}\nol,\nul {\n  list-style: none;\n}\nblockquote,\nq {\n  quotes: none;\n}\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n  content: "";\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\n/* LOADER  */\n.loader {\n  width: 60px;\n  height: 60px;\n  background-color: white;\n  animation: spin 0.8s ease-in-out infinite;\n}\n\n@keyframes spin {\n  0% {\n    transform: rotate(-180deg);\n  }\n  50% {\n    transform: translateY(-30px);\n  }\n  70% {\n    transform: translateY(0);\n  }\n  75% {\n    transform: translateY(-10px);\n  }\n  100% {\n    transform: translateY(0);\n  }\n}\n/* PARTICLES */\n#tsparticles {\n  position: fixed;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  padding: 0;\n  margin: 0;\n  z-index: -1;\n}\n\ncanvas {\n  height: 800px !important;\n  width: 100% !important;\n}\n\n/* ERROR  */\n.display-error {\n  position: absolute;\n  transform: translateY(-100%);\n  animation: error-pop-in 3s ease-in-out forwards;\n\n  color: white;\n  font-weight: 500;\n  font-size: 20px;\n\n  background-color: rgb(255, 30, 30);\n  padding: 10px 20px;\n  border-radius: 0 0 10px 10px;\n}\n\n@keyframes error-pop-in {\n  0% {\n    transform: translateY(-100%);\n  }\n  25% {\n    transform: translateY(0);\n  }\n  50% {\n    transform: translateY(0);\n  }\n  75% {\n    transform: translateY(0);\n  }\n  100% {\n    transform: translateY(-100%);\n  }\n}\n\n/* HEADER */\nheader {\n  display: flex;\n  justify-content: center;\n  width: min(1000px, 80%);\n  margin-top: 70px;\n}\n\nheader > h1 {\n  margin: 0;\n  color: white;\n  font-weight: 700;\n  font-size: 52px;\n  padding: 36px 0;\n}\n\n.user-input {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 80%;\n}\n\n.city-name {\n  background: #fff;\n  border-radius: 50px;\n  border-bottom-right-radius: 0;\n  border-top-right-radius: 0;\n  padding: 5px;\n  text-align: center;\n  font-size: 35px;\n  font-weight: 700;\n  color: #4d4b4b;\n  font-family: "Poppins", Verdana, Geneva, Tahoma, sans-serif;\n\n  border: none;\n  width: 90%;\n}\n\n.city-name:focus {\n  outline: none;\n}\n\n::placeholder {\n  font-weight: 700;\n  color: #4d4b4b;\n  opacity: 1;\n  font-size: 35px;\n\n  text-align: center;\n  font-family: "Poppins", Verdana, Geneva, Tahoma, sans-serif;\n}\n\n.city-name:focus::placeholder {\n  color: transparent;\n}\n\n.user-input > button {\n  cursor: pointer;\n  background-color: white;\n  font-family: "Poppins";\n  font-size: 35px;\n\n  padding: 3px 10px;\n  font-weight: 700;\n  border: none;\n  border-top-right-radius: 35px;\n  border: solid 2px white;\n  border-bottom-right-radius: 35px;\n  border-left-width: 0;\n\n  width: 10%;\n  height: 100%;\n  min-width: 70px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.user-input img {\n  vertical-align: middle;\n  height: 30px;\n  width: auto;\n  position: relative;\n  bottom: 2px;\n}\n\n/* WEATHER DISPLAY */\n.weather-display {\n  display: flex;\n  width: 70%;\n  opacity: 1;\n  justify-content: center;\n  color: #fff;\n\n  font-size: 50px;\n  padding: 80px 20px;\n  gap: 50px;\n}\n\n.temp-info {\n  display: flex;\n  flex-direction: column;\n  font-size: 50px;\n  gap: 10px;\n  justify-content: center;\n}\n\n.temp-data {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 15px;\n}\n\n.display-city-name {\n  font-size: 45px;\n  font-weight: 500;\n}\n\n.display-condition {\n  font-size: 40px;\n  font-weight: 500;\n  letter-spacing: 0.1em;\n}\n\n.display-current-temp {\n  padding-right: 10px;\n  font-weight: 700;\n  line-height: 40px;\n  border-right: 5px solid #fff;\n}\n\n@keyframes slide-in {\n  from {\n    opacity: 0;\n    transform: translateY(-100px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.info-display {\n  font-size: 30px;\n  font-weight: 500;\n  font-family: "M PLUS 2", Verdana, Geneva, Tahoma, sans-serif;\n  color: white;\n  text-align: center;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  gap: 20px;\n  transition: all 0.7s ease-in-out;\n}\n\n.white-block {\n  height: 70px;\n  width: 7px;\n  background-color: #fff;\n}\n\n.info {\n  display: flex;\n  justify-content: center;\n  gap: 100px;\n}\n\n.info-holder {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 450px;\n}\n\n.max-temp,\n.min-temp {\n  font-size: 25px;\n  font-weight: 500;\n}\n\n.max-temp-logo,\n.min-temp-logo {\n  height: 20px;\n  margin-left: 7px;\n  display: inline-block;\n}\n\n.cast-temp {\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n  gap: 2px;\n}\n\n.humidity {\n  display: flex;\n  gap: 5px;\n}\n\n.humidity > img {\n  display: inline-block;\n}\n\n.cast {\n  text-align: center;\n  font-weight: 700;\n  letter-spacing: 2px;\n}\n\n.misc {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 5px;\n}\n\n.wind {\n  display: flex;\n  align-items: center;\n  gap: 2px;\n}\n\n.wind > img {\n  display: inline-block;\n}\n\n/* LOADING */\n.loading-begin {\n  color: white;\n  font-family: "Poppins", Verdana, Geneva, Tahoma, sans-serif;\n  font-size: 60px;\n  font-weight: 500;\n  width: 100%;\n  text-align: center;\n\n  position: fixed;\n  min-height: 100vh;\n  height: 100vh;\n  width: 100%;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #01223aef;\n  z-index: 10;\n}\n\n/* WEATHER EFFECTs */\n.sun {\n  background-color: #ffff00;\n  background-size: cover;\n  height: 150px;\n  width: 150px;\n  z-index: -2;\n\n  border: none;\n  border-radius: 50%;\n  box-shadow: 0 0 60px 10px rgb(255 255 0);\n  display: block;\n  transform: scale(0);\n  animation: show-in 0.4s ease-in-out forwards;\n\n  backface-visibility: hidden;\n}\n\n@keyframes show-in {\n  0% {\n    transform: scale(0);\n  }\n  50% {\n    transform: scale(1.2);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n\n.hills-container {\n  min-height: 400px;\n  height: 45vh;\n  width: 100%;\n\n  position: relative;\n  overflow: clip;\n}\n\n.hills1,\n.hills2 {\n  background-size: cover;\n  background-repeat: no-repeat;\n  position: absolute;\n  bottom: -1px;\n\n  width: 100%;\n  height: 100%;\n}\n.hills1 {\n  background-image: url('+u+");\n  height: 70%;\n  z-index: 9;\n}\n\n.hills2 {\n  background-image: url("+p+');\n  z-index: 8;\n}\n\n/* BODY */\nbody,\nhtml {\n  font-family: "Poppins", sans-serif, Verdana, Geneva, Tahoma;\n  margin: 0;\n  padding: 0;\n  width: 100%;\n  min-height: 100%;\n  height: 100%;\n}\n\nbody::-webkit-scrollbar {\n  display: none;\n}\nbody {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  box-sizing: border-box;\n\n  -ms-overflow-style: none;\n  scrollbar-width: 20px;\n\n  background: #0095ff;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed;\n}\n\n* {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n\nfooter {\n  background-color: #003000;\n  width: 100%;\n  height: 100%;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  color: white;\n  font-size: 30px;\n}\n\n.credits {\n  padding: 30px;\n  line-height: 30px;\n}\n\n/* MEDIA QUERIES */\n@media screen and (max-width: 768px) {\n  /* HEADER  */\n  header {\n    width: 85%;\n  }\n\n  .city-name,\n  *::placeholder,\n  .user-input > button {\n    font-size: 30px;\n  }\n\n  .city-name {\n    width: 85%;\n  }\n  .user-input > button {\n    width: 15%;\n    min-width: 50px;\n  }\n  /* WEATHER DISPLAY  */\n  .weather-display {\n    flex-direction: column;\n    align-items: center;\n  }\n\n  .display-current-temp,\n  .display-condition,\n  .display-city-name {\n    text-align: center;\n    font-size: 36px;\n  }\n\n  /* CREDITS  */\n  .credits {\n    text-align: center;\n    font-size: 25px;\n  }\n\n  /* LOADING  */\n  .loading-begin {\n    font-size: 50px;\n  }\n}\n\n@media screen and (max-width: 440px) {\n  /* ERROR  */\n  .display-error {\n    width: 75%;\n  }\n\n  /* HEADER  */\n  header {\n    width: 95%;\n  }\n\n  /* WEATHER DISPLAY */\n  .display-current-temp {\n    font-size: 45px;\n    border-right: none;\n    padding: 0;\n  }\n\n  .temp-data {\n    flex-direction: column;\n    gap: 10px;\n  }\n\n  .city-name,\n  *::placeholder,\n  .user-input > button {\n    font-size: 23px;\n  }\n\n  .user-input > button {\n    width: 10%;\n    min-width: 40px;\n  }\n  .city-name {\n    width: 90%;\n  }\n  .user-input img {\n    height: 22px;\n  }\n  /* LOADING  */\n  .loading-begin {\n    font-size: 45px;\n  }\n}\n',"",{version:3,sources:["webpack://./src/main.css"],names:[],mappings:"AAGA,eAAe;;AAEf;EACE,SAAS;EACT,UAAU;EACV,SAAS;EACT,eAAe;EACf,aAAa;EACb,wBAAwB;AAC1B;;AAEA,gDAAgD;AAChD;;;;;;;;;;;EAWE,cAAc;AAChB;AACA;EACE,cAAc;AAChB;AACA;;EAEE,gBAAgB;AAClB;AACA;;EAEE,YAAY;AACd;AACA;;;;EAIE,WAAW;EACX,aAAa;AACf;AACA;EACE,yBAAyB;EACzB,iBAAiB;AACnB;;AAEA,YAAY;AACZ;EACE,WAAW;EACX,YAAY;EACZ,uBAAuB;EACvB,yCAAyC;AAC3C;;AAEA;EACE;IACE,0BAA0B;EAC5B;EACA;IACE,4BAA4B;EAC9B;EACA;IACE,wBAAwB;EAC1B;EACA;IACE,4BAA4B;EAC9B;EACA;IACE,wBAAwB;EAC1B;AACF;AACA,cAAc;AACd;EACE,eAAe;EACf,MAAM;EACN,OAAO;EACP,SAAS;EACT,QAAQ;EACR,UAAU;EACV,SAAS;EACT,WAAW;AACb;;AAEA;EACE,wBAAwB;EACxB,sBAAsB;AACxB;;AAEA,WAAW;AACX;EACE,kBAAkB;EAClB,4BAA4B;EAC5B,+CAA+C;;EAE/C,YAAY;EACZ,gBAAgB;EAChB,eAAe;;EAEf,kCAAkC;EAClC,kBAAkB;EAClB,4BAA4B;AAC9B;;AAEA;EACE;IACE,4BAA4B;EAC9B;EACA;IACE,wBAAwB;EAC1B;EACA;IACE,wBAAwB;EAC1B;EACA;IACE,wBAAwB;EAC1B;EACA;IACE,4BAA4B;EAC9B;AACF;;AAEA,WAAW;AACX;EACE,aAAa;EACb,uBAAuB;EACvB,uBAAuB;EACvB,gBAAgB;AAClB;;AAEA;EACE,SAAS;EACT,YAAY;EACZ,gBAAgB;EAChB,eAAe;EACf,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,UAAU;AACZ;;AAEA;EACE,gBAAgB;EAChB,mBAAmB;EACnB,6BAA6B;EAC7B,0BAA0B;EAC1B,YAAY;EACZ,kBAAkB;EAClB,eAAe;EACf,gBAAgB;EAChB,cAAc;EACd,2DAA2D;;EAE3D,YAAY;EACZ,UAAU;AACZ;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,gBAAgB;EAChB,cAAc;EACd,UAAU;EACV,eAAe;;EAEf,kBAAkB;EAClB,2DAA2D;AAC7D;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,eAAe;EACf,uBAAuB;EACvB,sBAAsB;EACtB,eAAe;;EAEf,iBAAiB;EACjB,gBAAgB;EAChB,YAAY;EACZ,6BAA6B;EAC7B,uBAAuB;EACvB,gCAAgC;EAChC,oBAAoB;;EAEpB,UAAU;EACV,YAAY;EACZ,eAAe;EACf,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,sBAAsB;EACtB,YAAY;EACZ,WAAW;EACX,kBAAkB;EAClB,WAAW;AACb;;AAEA,oBAAoB;AACpB;EACE,aAAa;EACb,UAAU;EACV,UAAU;EACV,uBAAuB;EACvB,WAAW;;EAEX,eAAe;EACf,kBAAkB;EAClB,SAAS;AACX;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,eAAe;EACf,SAAS;EACT,uBAAuB;AACzB;;AAEA;EACE,aAAa;EACb,2BAA2B;EAC3B,mBAAmB;EACnB,SAAS;AACX;;AAEA;EACE,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,gBAAgB;EAChB,qBAAqB;AACvB;;AAEA;EACE,mBAAmB;EACnB,gBAAgB;EAChB,iBAAiB;EACjB,4BAA4B;AAC9B;;AAEA;EACE;IACE,UAAU;IACV,6BAA6B;EAC/B;EACA;IACE,UAAU;IACV,wBAAwB;EAC1B;AACF;;AAEA;EACE,eAAe;EACf,gBAAgB;EAChB,4DAA4D;EAC5D,YAAY;EACZ,kBAAkB;EAClB,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,WAAW;EACX,SAAS;EACT,gCAAgC;AAClC;;AAEA;EACE,YAAY;EACZ,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,UAAU;AACZ;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,uBAAuB;EACvB,YAAY;AACd;;AAEA;;EAEE,eAAe;EACf,gBAAgB;AAClB;;AAEA;;EAEE,YAAY;EACZ,gBAAgB;EAChB,qBAAqB;AACvB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,gBAAgB;EAChB,QAAQ;AACV;;AAEA;EACE,aAAa;EACb,QAAQ;AACV;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,kBAAkB;EAClB,gBAAgB;EAChB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,uBAAuB;EACvB,QAAQ;AACV;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,QAAQ;AACV;;AAEA;EACE,qBAAqB;AACvB;;AAEA,YAAY;AACZ;EACE,YAAY;EACZ,2DAA2D;EAC3D,eAAe;EACf,gBAAgB;EAChB,WAAW;EACX,kBAAkB;;EAElB,eAAe;EACf,iBAAiB;EACjB,aAAa;EACb,WAAW;;EAEX,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,2BAA2B;EAC3B,WAAW;AACb;;AAEA,oBAAoB;AACpB;EACE,yBAAyB;EACzB,sBAAsB;EACtB,aAAa;EACb,YAAY;EACZ,WAAW;;EAEX,YAAY;EACZ,kBAAkB;EAClB,wCAAwC;EACxC,cAAc;EACd,mBAAmB;EACnB,4CAA4C;;EAE5C,2BAA2B;AAC7B;;AAEA;EACE;IACE,mBAAmB;EACrB;EACA;IACE,qBAAqB;EACvB;EACA;IACE,mBAAmB;EACrB;AACF;;AAEA;EACE,iBAAiB;EACjB,YAAY;EACZ,WAAW;;EAEX,kBAAkB;EAClB,cAAc;AAChB;;AAEA;;EAEE,sBAAsB;EACtB,4BAA4B;EAC5B,kBAAkB;EAClB,YAAY;;EAEZ,WAAW;EACX,YAAY;AACd;AACA;EACE,yDAA4C;EAC5C,WAAW;EACX,UAAU;AACZ;;AAEA;EACE,yDAA4C;EAC5C,UAAU;AACZ;;AAEA,SAAS;AACT;;EAEE,2DAA2D;EAC3D,SAAS;EACT,UAAU;EACV,WAAW;EACX,gBAAgB;EAChB,YAAY;AACd;;AAEA;EACE,aAAa;AACf;AACA;EACE,kBAAkB;EAClB,aAAa;EACb,sBAAsB;EACtB,mBAAmB;;EAEnB,sBAAsB;;EAEtB,wBAAwB;EACxB,qBAAqB;;EAErB,mBAAmB;EACnB,uCAAuC;EACvC,4BAA4B;AAC9B;;AAEA;EACE,6CAA6C;AAC/C;;AAEA;EACE,yBAAyB;EACzB,WAAW;EACX,YAAY;;EAEZ,aAAa;EACb,mBAAmB;EACnB,uBAAuB;;EAEvB,YAAY;EACZ,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,iBAAiB;AACnB;;AAEA,kBAAkB;AAClB;EACE,YAAY;EACZ;IACE,UAAU;EACZ;;EAEA;;;IAGE,eAAe;EACjB;;EAEA;IACE,UAAU;EACZ;EACA;IACE,UAAU;IACV,eAAe;EACjB;EACA,qBAAqB;EACrB;IACE,sBAAsB;IACtB,mBAAmB;EACrB;;EAEA;;;IAGE,kBAAkB;IAClB,eAAe;EACjB;;EAEA,aAAa;EACb;IACE,kBAAkB;IAClB,eAAe;EACjB;;EAEA,aAAa;EACb;IACE,eAAe;EACjB;AACF;;AAEA;EACE,WAAW;EACX;IACE,UAAU;EACZ;;EAEA,YAAY;EACZ;IACE,UAAU;EACZ;;EAEA,oBAAoB;EACpB;IACE,eAAe;IACf,kBAAkB;IAClB,UAAU;EACZ;;EAEA;IACE,sBAAsB;IACtB,SAAS;EACX;;EAEA;;;IAGE,eAAe;EACjB;;EAEA;IACE,UAAU;IACV,eAAe;EACjB;EACA;IACE,UAAU;EACZ;EACA;IACE,YAAY;EACd;EACA,aAAa;EACb;IACE,eAAe;EACjB;AACF",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;700&display=swap");\n@import url("https://fonts.googleapis.com/css2?family=M+PLUS+2:wght@500;700&display=swap");\n\n/* RESET CSS  */\n\n* {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n\n/* HTML5 display-role reset for older browsers */\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n  display: block;\n}\nbody {\n  line-height: 1;\n}\nol,\nul {\n  list-style: none;\n}\nblockquote,\nq {\n  quotes: none;\n}\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n  content: "";\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\n/* LOADER  */\n.loader {\n  width: 60px;\n  height: 60px;\n  background-color: white;\n  animation: spin 0.8s ease-in-out infinite;\n}\n\n@keyframes spin {\n  0% {\n    transform: rotate(-180deg);\n  }\n  50% {\n    transform: translateY(-30px);\n  }\n  70% {\n    transform: translateY(0);\n  }\n  75% {\n    transform: translateY(-10px);\n  }\n  100% {\n    transform: translateY(0);\n  }\n}\n/* PARTICLES */\n#tsparticles {\n  position: fixed;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  padding: 0;\n  margin: 0;\n  z-index: -1;\n}\n\ncanvas {\n  height: 800px !important;\n  width: 100% !important;\n}\n\n/* ERROR  */\n.display-error {\n  position: absolute;\n  transform: translateY(-100%);\n  animation: error-pop-in 3s ease-in-out forwards;\n\n  color: white;\n  font-weight: 500;\n  font-size: 20px;\n\n  background-color: rgb(255, 30, 30);\n  padding: 10px 20px;\n  border-radius: 0 0 10px 10px;\n}\n\n@keyframes error-pop-in {\n  0% {\n    transform: translateY(-100%);\n  }\n  25% {\n    transform: translateY(0);\n  }\n  50% {\n    transform: translateY(0);\n  }\n  75% {\n    transform: translateY(0);\n  }\n  100% {\n    transform: translateY(-100%);\n  }\n}\n\n/* HEADER */\nheader {\n  display: flex;\n  justify-content: center;\n  width: min(1000px, 80%);\n  margin-top: 70px;\n}\n\nheader > h1 {\n  margin: 0;\n  color: white;\n  font-weight: 700;\n  font-size: 52px;\n  padding: 36px 0;\n}\n\n.user-input {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 80%;\n}\n\n.city-name {\n  background: #fff;\n  border-radius: 50px;\n  border-bottom-right-radius: 0;\n  border-top-right-radius: 0;\n  padding: 5px;\n  text-align: center;\n  font-size: 35px;\n  font-weight: 700;\n  color: #4d4b4b;\n  font-family: "Poppins", Verdana, Geneva, Tahoma, sans-serif;\n\n  border: none;\n  width: 90%;\n}\n\n.city-name:focus {\n  outline: none;\n}\n\n::placeholder {\n  font-weight: 700;\n  color: #4d4b4b;\n  opacity: 1;\n  font-size: 35px;\n\n  text-align: center;\n  font-family: "Poppins", Verdana, Geneva, Tahoma, sans-serif;\n}\n\n.city-name:focus::placeholder {\n  color: transparent;\n}\n\n.user-input > button {\n  cursor: pointer;\n  background-color: white;\n  font-family: "Poppins";\n  font-size: 35px;\n\n  padding: 3px 10px;\n  font-weight: 700;\n  border: none;\n  border-top-right-radius: 35px;\n  border: solid 2px white;\n  border-bottom-right-radius: 35px;\n  border-left-width: 0;\n\n  width: 10%;\n  height: 100%;\n  min-width: 70px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.user-input img {\n  vertical-align: middle;\n  height: 30px;\n  width: auto;\n  position: relative;\n  bottom: 2px;\n}\n\n/* WEATHER DISPLAY */\n.weather-display {\n  display: flex;\n  width: 70%;\n  opacity: 1;\n  justify-content: center;\n  color: #fff;\n\n  font-size: 50px;\n  padding: 80px 20px;\n  gap: 50px;\n}\n\n.temp-info {\n  display: flex;\n  flex-direction: column;\n  font-size: 50px;\n  gap: 10px;\n  justify-content: center;\n}\n\n.temp-data {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 15px;\n}\n\n.display-city-name {\n  font-size: 45px;\n  font-weight: 500;\n}\n\n.display-condition {\n  font-size: 40px;\n  font-weight: 500;\n  letter-spacing: 0.1em;\n}\n\n.display-current-temp {\n  padding-right: 10px;\n  font-weight: 700;\n  line-height: 40px;\n  border-right: 5px solid #fff;\n}\n\n@keyframes slide-in {\n  from {\n    opacity: 0;\n    transform: translateY(-100px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.info-display {\n  font-size: 30px;\n  font-weight: 500;\n  font-family: "M PLUS 2", Verdana, Geneva, Tahoma, sans-serif;\n  color: white;\n  text-align: center;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  gap: 20px;\n  transition: all 0.7s ease-in-out;\n}\n\n.white-block {\n  height: 70px;\n  width: 7px;\n  background-color: #fff;\n}\n\n.info {\n  display: flex;\n  justify-content: center;\n  gap: 100px;\n}\n\n.info-holder {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 450px;\n}\n\n.max-temp,\n.min-temp {\n  font-size: 25px;\n  font-weight: 500;\n}\n\n.max-temp-logo,\n.min-temp-logo {\n  height: 20px;\n  margin-left: 7px;\n  display: inline-block;\n}\n\n.cast-temp {\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n  gap: 2px;\n}\n\n.humidity {\n  display: flex;\n  gap: 5px;\n}\n\n.humidity > img {\n  display: inline-block;\n}\n\n.cast {\n  text-align: center;\n  font-weight: 700;\n  letter-spacing: 2px;\n}\n\n.misc {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 5px;\n}\n\n.wind {\n  display: flex;\n  align-items: center;\n  gap: 2px;\n}\n\n.wind > img {\n  display: inline-block;\n}\n\n/* LOADING */\n.loading-begin {\n  color: white;\n  font-family: "Poppins", Verdana, Geneva, Tahoma, sans-serif;\n  font-size: 60px;\n  font-weight: 500;\n  width: 100%;\n  text-align: center;\n\n  position: fixed;\n  min-height: 100vh;\n  height: 100vh;\n  width: 100%;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #01223aef;\n  z-index: 10;\n}\n\n/* WEATHER EFFECTs */\n.sun {\n  background-color: #ffff00;\n  background-size: cover;\n  height: 150px;\n  width: 150px;\n  z-index: -2;\n\n  border: none;\n  border-radius: 50%;\n  box-shadow: 0 0 60px 10px rgb(255 255 0);\n  display: block;\n  transform: scale(0);\n  animation: show-in 0.4s ease-in-out forwards;\n\n  backface-visibility: hidden;\n}\n\n@keyframes show-in {\n  0% {\n    transform: scale(0);\n  }\n  50% {\n    transform: scale(1.2);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n\n.hills-container {\n  min-height: 400px;\n  height: 45vh;\n  width: 100%;\n\n  position: relative;\n  overflow: clip;\n}\n\n.hills1,\n.hills2 {\n  background-size: cover;\n  background-repeat: no-repeat;\n  position: absolute;\n  bottom: -1px;\n\n  width: 100%;\n  height: 100%;\n}\n.hills1 {\n  background-image: url("./assets/hills1.svg");\n  height: 70%;\n  z-index: 9;\n}\n\n.hills2 {\n  background-image: url("./assets/hills2.svg");\n  z-index: 8;\n}\n\n/* BODY */\nbody,\nhtml {\n  font-family: "Poppins", sans-serif, Verdana, Geneva, Tahoma;\n  margin: 0;\n  padding: 0;\n  width: 100%;\n  min-height: 100%;\n  height: 100%;\n}\n\nbody::-webkit-scrollbar {\n  display: none;\n}\nbody {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  box-sizing: border-box;\n\n  -ms-overflow-style: none;\n  scrollbar-width: 20px;\n\n  background: #0095ff;\n  background-repeat: no-repeat !important;\n  background-attachment: fixed;\n}\n\n* {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n\nfooter {\n  background-color: #003000;\n  width: 100%;\n  height: 100%;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  color: white;\n  font-size: 30px;\n}\n\n.credits {\n  padding: 30px;\n  line-height: 30px;\n}\n\n/* MEDIA QUERIES */\n@media screen and (max-width: 768px) {\n  /* HEADER  */\n  header {\n    width: 85%;\n  }\n\n  .city-name,\n  *::placeholder,\n  .user-input > button {\n    font-size: 30px;\n  }\n\n  .city-name {\n    width: 85%;\n  }\n  .user-input > button {\n    width: 15%;\n    min-width: 50px;\n  }\n  /* WEATHER DISPLAY  */\n  .weather-display {\n    flex-direction: column;\n    align-items: center;\n  }\n\n  .display-current-temp,\n  .display-condition,\n  .display-city-name {\n    text-align: center;\n    font-size: 36px;\n  }\n\n  /* CREDITS  */\n  .credits {\n    text-align: center;\n    font-size: 25px;\n  }\n\n  /* LOADING  */\n  .loading-begin {\n    font-size: 50px;\n  }\n}\n\n@media screen and (max-width: 440px) {\n  /* ERROR  */\n  .display-error {\n    width: 75%;\n  }\n\n  /* HEADER  */\n  header {\n    width: 95%;\n  }\n\n  /* WEATHER DISPLAY */\n  .display-current-temp {\n    font-size: 45px;\n    border-right: none;\n    padding: 0;\n  }\n\n  .temp-data {\n    flex-direction: column;\n    gap: 10px;\n  }\n\n  .city-name,\n  *::placeholder,\n  .user-input > button {\n    font-size: 23px;\n  }\n\n  .user-input > button {\n    width: 10%;\n    min-width: 40px;\n  }\n  .city-name {\n    width: 90%;\n  }\n  .user-input img {\n    height: 22px;\n  }\n  /* LOADING  */\n  .loading-begin {\n    font-size: 45px;\n  }\n}\n'],sourceRoot:""}]);const v=h},5524:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i="",n=void 0!==e[5];return e[4]&&(i+="@supports (".concat(e[4],") {")),e[2]&&(i+="@media ".concat(e[2]," {")),n&&(i+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),i+=t(e),n&&(i+="}"),e[2]&&(i+="}"),e[4]&&(i+="}"),i})).join("")},e.i=function(t,i,n,o,s){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(n)for(var r=0;r<this.length;r++){var l=this[r][0];null!=l&&(a[l]=!0)}for(var c=0;c<t.length;c++){var d=[].concat(t[c]);n&&a[d[0]]||(void 0!==s&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=s),i&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=i):d[2]=i),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},1667:t=>{t.exports=function(t,e){return e||(e={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]|(%20)/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},1684:t=>{t.exports=function(t){var e=t[1],i=t[3];if(!i)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),s="/*# ".concat(o," */"),a=i.sources.map((function(t){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(t," */")}));return[e].concat(a).concat([s]).join("\n")}return[e].join("\n")}},3379:t=>{var e=[];function i(t){for(var i=-1,n=0;n<e.length;n++)if(e[n].identifier===t){i=n;break}return i}function n(t,n){for(var s={},a=[],r=0;r<t.length;r++){var l=t[r],c=n.base?l[0]+n.base:l[0],d=s[c]||0,h="".concat(c," ").concat(d);s[c]=d+1;var u=i(h),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var v=o(p,n);n.byIndex=r,e.splice(r,0,{identifier:h,updater:v,references:1})}a.push(h)}return a}function o(t,e){var i=e.domAPI(e);return i.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;i.update(t=e)}else i.remove()}}t.exports=function(t,o){var s=n(t=t||[],o=o||{});return function(t){t=t||[];for(var a=0;a<s.length;a++){var r=i(s[a]);e[r].references--}for(var l=n(t,o),c=0;c<s.length;c++){var d=i(s[c]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}s=l}}},569:t=>{var e={};t.exports=function(t,i){var n=function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}e[t]=i}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(i)}},9216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},3565:(t,e,i)=>{t.exports=function(t){var e=i.nc;e&&t.setAttribute("nonce",e)}},7795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(i){!function(t,e,i){var n="";i.supports&&(n+="@supports (".concat(i.supports,") {")),i.media&&(n+="@media ".concat(i.media," {"));var o=void 0!==i.layer;o&&(n+="@layer".concat(i.layer.length>0?" ".concat(i.layer):""," {")),n+=i.css,o&&(n+="}"),i.media&&(n+="}"),i.supports&&(n+="}");var s=i.sourceMap;s&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,i)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},4589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},8922:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Canvas=void 0;const n=i(7373),o=i(7373);e.Canvas=class{constructor(t){this.container=t,this.size={height:0,width:0},this.context=null,this.generatedCanvas=!1}init(){this.resize(),this.initStyle(),this.initCover(),this.initTrail(),this.initBackground(),this.paint()}loadCanvas(t,e){var i;t.className||(t.className=n.Constants.canvasClass),this.generatedCanvas&&(null===(i=this.element)||void 0===i||i.remove()),this.generatedCanvas=null!=e?e:this.generatedCanvas,this.element=t,this.originalStyle=(0,n.deepExtend)({},this.element.style),this.size.height=t.offsetHeight,this.size.width=t.offsetWidth,this.context=this.element.getContext("2d"),this.container.retina.init(),this.initBackground()}destroy(){var t;this.generatedCanvas&&(null===(t=this.element)||void 0===t||t.remove()),this.draw((t=>{(0,o.clear)(t,this.size)}))}paint(){const t=this.container.actualOptions;this.draw((e=>{t.backgroundMask.enable&&t.backgroundMask.cover&&this.coverColor?((0,o.clear)(e,this.size),this.paintBase((0,n.getStyleFromRgb)(this.coverColor,this.coverColor.a))):this.paintBase()}))}clear(){const t=this.container.actualOptions,e=t.particles.move.trail;t.backgroundMask.enable?this.paint():e.enable&&e.length>0&&this.trailFillColor?this.paintBase((0,n.getStyleFromRgb)(this.trailFillColor,1/e.length)):this.draw((t=>{(0,o.clear)(t,this.size)}))}windowResize(){if(!this.element)return;const t=this.container;this.resize();const e=t.updateActualOptions();t.particles.setDensity();for(const[,e]of t.plugins)void 0!==e.resize&&e.resize();e&&t.refresh()}resize(){if(!this.element)return;const t=this.container,e=t.retina.pixelRatio,i=t.canvas.size,n=i.width,o=i.height;i.width=this.element.offsetWidth*e,i.height=this.element.offsetHeight*e,this.element.width=i.width,this.element.height=i.height,this.container.started&&(this.resizeFactor={width:i.width/n,height:i.height/o})}drawConnectLine(t,e){this.draw((i=>{var o;const s=this.lineStyle(t,e);if(!s)return;const a=t.getPosition(),r=e.getPosition();(0,n.drawConnectLine)(i,null!==(o=t.retina.linksWidth)&&void 0!==o?o:this.container.retina.linksWidth,s,a,r)}))}drawGrabLine(t,e,i,o){const s=this.container;this.draw((a=>{var r;const l=t.getPosition();(0,n.drawGrabLine)(a,null!==(r=t.retina.linksWidth)&&void 0!==r?r:s.retina.linksWidth,l,o,e,i)}))}drawParticle(t,e){var i,o,s,a,r,l;if(t.spawning||t.destroyed)return;const c=t.getFillColor(),d=null!==(i=t.getStrokeColor())&&void 0!==i?i:c;if(!c&&!d)return;let[h,u]=this.getPluginParticleColors(t);const p=t.options.twinkle.particles,v=p.enable&&Math.random()<p.frequency;if(!h||!u){const t=(0,n.colorToHsl)(p.color);h||(h=v&&void 0!==t?t:c||void 0),u||(u=v&&void 0!==t?t:d||void 0)}const y=this.container.actualOptions,g=t.options.zIndex,f=(1-t.zIndexFactor)**g.opacityRate,m=t.getRadius(),b=v?p.opacity:null!==(a=null!==(o=t.bubble.opacity)&&void 0!==o?o:null===(s=t.opacity)||void 0===s?void 0:s.value)&&void 0!==a?a:1,w=null!==(l=null===(r=t.stroke)||void 0===r?void 0:r.opacity)&&void 0!==l?l:b,A=b*f,S=h?(0,n.getStyleFromHsl)(h,A):void 0;(S||u)&&this.draw((i=>{const o=(1-t.zIndexFactor)**g.sizeRate,s=w*f,a=u?(0,n.getStyleFromHsl)(u,s):S;if(m<=0)return;const r=this.container;for(const e of r.particles.updaters)e.beforeDraw&&e.beforeDraw(t);(0,n.drawParticle)(this.container,i,t,e,S,a,y.backgroundMask.enable,y.backgroundMask.composite,m*o,A,t.options.shadow,t.gradient);for(const e of r.particles.updaters)e.afterDraw&&e.afterDraw(t)}))}drawPlugin(t,e){this.draw((i=>{(0,n.drawPlugin)(i,t,e)}))}drawParticlePlugin(t,e,i){this.draw((o=>{(0,n.drawParticlePlugin)(o,t,e,i)}))}initBackground(){const t=this.container.actualOptions.background,e=this.element,i=null==e?void 0:e.style;if(i){if(t.color){const e=(0,n.colorToRgb)(t.color);i.backgroundColor=e?(0,n.getStyleFromRgb)(e,t.opacity):""}else i.backgroundColor="";i.backgroundImage=t.image||"",i.backgroundPosition=t.position||"",i.backgroundRepeat=t.repeat||"",i.backgroundSize=t.size||""}}draw(t){if(this.context)return t(this.context)}initCover(){const t=this.container.actualOptions.backgroundMask.cover,e=t.color,i=(0,n.colorToRgb)(e);i&&(this.coverColor={r:i.r,g:i.g,b:i.b,a:t.opacity})}initTrail(){const t=this.container.actualOptions,e=t.particles.move.trail,i=(0,n.colorToRgb)(e.fillColor);if(i){const e=t.particles.move.trail;this.trailFillColor={r:i.r,g:i.g,b:i.b,a:1/e.length}}}getPluginParticleColors(t){let e,i;for(const[,o]of this.container.plugins)if(!e&&o.particleFillColor&&(e=(0,n.colorToHsl)(o.particleFillColor(t))),!i&&o.particleStrokeColor&&(i=(0,n.colorToHsl)(o.particleStrokeColor(t))),e&&i)break;return[e,i]}initStyle(){const t=this.element,e=this.container.actualOptions;if(!t)return;const i=this.originalStyle;e.fullScreen.enable?(this.originalStyle=(0,n.deepExtend)({},t.style),t.style.position="fixed",t.style.zIndex=e.fullScreen.zIndex.toString(10),t.style.top="0",t.style.left="0",t.style.width="100%",t.style.height="100%"):i&&(t.style.position=i.position,t.style.zIndex=i.zIndex,t.style.top=i.top,t.style.left=i.left,t.style.width=i.width,t.style.height=i.height)}paintBase(t){this.draw((e=>{(0,n.paintBase)(e,this.size,t)}))}lineStyle(t,e){return this.draw((i=>{const o=this.container.actualOptions.interactivity.modes.connect;return(0,n.gradient)(i,t,e,o.links.opacity)}))}}},5624:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Container=void 0;const n=i(8922),o=i(4480),s=i(1993),a=i(410),r=i(6989),l=i(7373),c=i(5638);e.Container=class{constructor(t,e,...i){this.id=t,this.fpsLimit=60,this.duration=0,this.lifeTime=0,this.firstStart=!0,this.started=!1,this.destroyed=!1,this.paused=!0,this.lastFrameTime=0,this.zLayers=100,this.pageHidden=!1,this._sourceOptions=e,this._initialSourceOptions=e,this.retina=new s.Retina(this),this.canvas=new n.Canvas(this),this.particles=new o.Particles(this),this.drawer=new a.FrameManager(this),this.presets=i,this.pathGenerator={generate:()=>{const t=c.Vector.create(0,0);return t.length=Math.random(),t.angle=Math.random()*Math.PI*2,t},init:()=>{},update:()=>{}},this.interactivity={mouse:{clicking:!1,inside:!1}},this.bubble={},this.repulse={particles:[]},this.attract={particles:[]},this.plugins=new Map,this.drawers=new Map,this.density=1,this._options=new r.Options,this.actualOptions=new r.Options,this.eventListeners=new l.EventListeners(this),"undefined"!=typeof IntersectionObserver&&IntersectionObserver&&(this.intersectionObserver=new IntersectionObserver((t=>this.intersectionManager(t))))}get options(){return this._options}get sourceOptions(){return this._sourceOptions}play(t){const e=this.paused||t;if(!this.firstStart||this.actualOptions.autoPlay){if(this.paused&&(this.paused=!1),e)for(const[,t]of this.plugins)t.play&&t.play();this.draw(e||!1)}else this.firstStart=!1}pause(){if(void 0!==this.drawAnimationFrame&&((0,l.cancelAnimation)()(this.drawAnimationFrame),delete this.drawAnimationFrame),!this.paused){for(const[,t]of this.plugins)t.pause&&t.pause();this.pageHidden||(this.paused=!0)}}draw(t){let e=t;this.drawAnimationFrame=(0,l.animate)()((t=>{e&&(this.lastFrameTime=void 0,e=!1),this.drawer.nextFrame(t)}))}getAnimationStatus(){return!this.paused&&!this.pageHidden}setNoise(t,e,i){this.setPath(t,e,i)}setPath(t,e,i){t&&("function"==typeof t?(this.pathGenerator.generate=t,e&&(this.pathGenerator.init=e),i&&(this.pathGenerator.update=i)):(t.generate&&(this.pathGenerator.generate=t.generate),t.init&&(this.pathGenerator.init=t.init),t.update&&(this.pathGenerator.update=t.update)))}destroy(){this.stop(),this.canvas.destroy();for(const[,t]of this.drawers)t.destroy&&t.destroy(this);for(const t of this.drawers.keys())this.drawers.delete(t);this.destroyed=!0}exportImg(t){this.exportImage(t)}exportImage(t,e,i){var n;return null===(n=this.canvas.element)||void 0===n?void 0:n.toBlob(t,null!=e?e:"image/png",i)}exportConfiguration(){return JSON.stringify(this.actualOptions,void 0,2)}refresh(){return this.stop(),this.start()}reset(){return this._options=new r.Options,this.refresh()}stop(){if(this.started){this.firstStart=!0,this.started=!1,this.eventListeners.removeListeners(),this.pause(),this.particles.clear(),this.canvas.clear(),this.interactivity.element instanceof HTMLElement&&this.intersectionObserver&&this.intersectionObserver.observe(this.interactivity.element);for(const[,t]of this.plugins)t.stop&&t.stop();for(const t of this.plugins.keys())this.plugins.delete(t);this.particles.linksColors=new Map,delete this.particles.grabLineColor,delete this.particles.linksColor,this._sourceOptions=this._options}}async loadTheme(t){this.currentTheme=t,await this.refresh()}async start(){if(!this.started){await this.init(),this.started=!0,this.eventListeners.addListeners(),this.interactivity.element instanceof HTMLElement&&this.intersectionObserver&&this.intersectionObserver.observe(this.interactivity.element);for(const[,t]of this.plugins)void 0!==t.startAsync?await t.startAsync():void 0!==t.start&&t.start();this.play()}}addClickHandler(t){const e=this.interactivity.element;if(!e)return;const i=(e,i,n)=>{if(this.destroyed)return;const o=this.retina.pixelRatio,s={x:i.x*o,y:i.y*o},a=this.particles.quadTree.queryCircle(s,n*o);t(e,a)};let n=!1,o=!1;e.addEventListener("click",(t=>{if(this.destroyed)return;const e=t,n={x:e.offsetX||e.clientX,y:e.offsetY||e.clientY};i(t,n,1)})),e.addEventListener("touchstart",(()=>{this.destroyed||(n=!0,o=!1)})),e.addEventListener("touchmove",(()=>{this.destroyed||(o=!0)})),e.addEventListener("touchend",(t=>{var e,s,a;if(!this.destroyed){if(n&&!o){const n=t;let o=n.touches[n.touches.length-1];if(!o&&(o=n.changedTouches[n.changedTouches.length-1],!o))return;const r=null===(e=this.canvas.element)||void 0===e?void 0:e.getBoundingClientRect(),l={x:o.clientX-(null!==(s=null==r?void 0:r.left)&&void 0!==s?s:0),y:o.clientY-(null!==(a=null==r?void 0:r.top)&&void 0!==a?a:0)};i(t,l,Math.max(o.radiusX,o.radiusY))}n=!1,o=!1}})),e.addEventListener("touchcancel",(()=>{this.destroyed||(n=!1,o=!1)}))}updateActualOptions(){this.actualOptions.responsive=[];const t=this.actualOptions.setResponsive(this.canvas.size.width,this.retina.pixelRatio,this._options);return this.actualOptions.setTheme(this.currentTheme),this.responsiveMaxWidth!=t&&(this.responsiveMaxWidth=t,!0)}async init(){this._options=new r.Options;for(const t of this.presets)this._options.load(l.Plugins.getPreset(t));const t=l.Plugins.getSupportedShapes();for(const e of t){const t=l.Plugins.getShapeDrawer(e);t&&this.drawers.set(e,t)}this._options.load(this._initialSourceOptions),this._options.load(this._sourceOptions),this.actualOptions=new r.Options,this.actualOptions.load(this._options),this.retina.init(),this.canvas.init(),this.updateActualOptions(),this.canvas.initBackground(),this.canvas.resize(),this.zLayers=this.actualOptions.zLayers,this.duration=(0,l.getRangeValue)(this.actualOptions.duration),this.lifeTime=0,this.fpsLimit=this.actualOptions.fpsLimit>0?this.actualOptions.fpsLimit:60;const e=l.Plugins.getAvailablePlugins(this);for(const[t,i]of e)this.plugins.set(t,i);for(const[,t]of this.drawers)t.init&&await t.init(this);for(const[,t]of this.plugins)t.init?t.init(this.actualOptions):void 0!==t.initAsync&&await t.initAsync(this.actualOptions);const i=this.actualOptions.particles.move.path;if(i.generator){const t=l.Plugins.getPathGenerator(i.generator);t&&(t.init&&(this.pathGenerator.init=t.init),t.generate&&(this.pathGenerator.generate=t.generate),t.update&&(this.pathGenerator.update=t.update))}this.particles.init(),this.particles.setDensity();for(const[,t]of this.plugins)void 0!==t.particlesSetup&&t.particlesSetup()}intersectionManager(t){if(this.actualOptions.pauseOnOutsideViewport)for(const e of t)e.target===this.interactivity.element&&(e.isIntersecting?this.play():this.pause())}}},4260:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ExternalInteractorBase=void 0;const n=i(6331);e.ExternalInteractorBase=class{constructor(t){this.container=t,this.type=n.InteractorType.External}}},410:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.FrameManager=void 0,e.FrameManager=class{constructor(t){this.container=t}nextFrame(t){var e;try{const i=this.container;if(void 0!==i.lastFrameTime&&t<i.lastFrameTime+1e3/i.fpsLimit)return void i.draw(!1);null!==(e=i.lastFrameTime)&&void 0!==e||(i.lastFrameTime=t);const n=t-i.lastFrameTime,o={value:n,factor:60*n/1e3};if(i.lifeTime+=o.value,i.lastFrameTime=t,n>1e3)return void i.draw(!1);if(i.particles.draw(o),i.duration>0&&i.lifeTime>i.duration)return void i.destroy();i.getAnimationStatus()&&i.draw(!1)}catch(t){console.error("tsParticles error in animation loop",t)}}}},85:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.InteractionManager=void 0;const n=i(7373),o=i(6331);e.InteractionManager=class{constructor(t){this.container=t,this.externalInteractors=[],this.particleInteractors=[],this.init()}init(){const t=n.Plugins.getInteractors(this.container,!0);for(const e of t)switch(e.type){case o.InteractorType.External:this.externalInteractors.push(e);break;case o.InteractorType.Particles:this.particleInteractors.push(e)}}externalInteract(t){for(const e of this.externalInteractors)e.isEnabled()&&e.interact(t)}particlesInteract(t,e){for(const e of this.externalInteractors)e.reset(t);for(const i of this.particleInteractors)i.isEnabled(t)&&i.interact(t,e)}}},3905:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},5894:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},1646:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},9834:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},1572:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},1668:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},5929:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},6012:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},3262:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},9432:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},221:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},142:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},6579:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},2846:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},1875:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},5111:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},2929:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},988:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},608:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},6410:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},9646:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},6830:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},6524:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},5945:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},4910:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},4562:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},4609:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},3338:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},9840:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},8117:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},5720:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},9913:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},2012:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},8354:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},3936:function(t,e,i){var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),o(i(3905),e),o(i(5894),e),o(i(1646),e),o(i(9834),e),o(i(1572),e),o(i(1668),e),o(i(5929),e),o(i(6012),e),o(i(3262),e),o(i(9432),e),o(i(221),e),o(i(142),e),o(i(6579),e),o(i(2846),e),o(i(1875),e),o(i(5111),e),o(i(2929),e),o(i(988),e),o(i(608),e),o(i(6410),e),o(i(9646),e),o(i(6830),e),o(i(6524),e),o(i(5945),e),o(i(4910),e),o(i(4562),e),o(i(4609),e),o(i(3338),e),o(i(9840),e),o(i(8117),e),o(i(5720),e),o(i(9913),e),o(i(2012),e),o(i(8354),e)},6301:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Loader=void 0;const n=i(5624),o=i(7373),s=[];class a{static dom(){return s}static domItem(t){const e=a.dom(),i=e[t];if(i&&!i.destroyed)return i;e.splice(t,1)}static async loadOptions(t){var e,i,s;const r=null!==(e=t.tagId)&&void 0!==e?e:`tsparticles${Math.floor(1e4*Math.random())}`,{options:l,index:c}=t;let d=null!==(i=t.element)&&void 0!==i?i:document.getElementById(r);d||(d=document.createElement("div"),d.id=r,null===(s=document.querySelector("body"))||void 0===s||s.append(d));const h=l instanceof Array?(0,o.itemFromArray)(l,c):l,u=a.dom(),p=u.findIndex((t=>t.id===r));if(p>=0){const t=a.domItem(p);t&&!t.destroyed&&(t.destroy(),u.splice(p,1))}let v,y;if("canvas"===d.tagName.toLowerCase())v=d,y=!1;else{const t=d.getElementsByTagName("canvas");t.length?(v=t[0],v.className||(v.className=o.Constants.canvasClass),y=!1):(y=!0,v=document.createElement("canvas"),v.className=o.Constants.canvasClass,v.style.width="100%",v.style.height="100%",d.appendChild(v))}const g=new n.Container(r,h);return p>=0?u.splice(p,0,g):u.push(g),g.canvas.loadCanvas(v,y),await g.start(),g}static async loadRemoteOptions(t){const{url:e,index:i}=t,n=e instanceof Array?(0,o.itemFromArray)(e,i):e;if(!n)return;const s=await fetch(n);if(!s.ok)return r=s.status,console.error(`Error tsParticles - fetch status: ${r}`),void console.error("Error tsParticles - File config not found");var r;const l=await s.json();return await a.loadOptions({tagId:t.tagId,element:t.element,index:i,options:l})}static load(t,e,i){const n={index:i};return"string"==typeof t?n.tagId=t:n.options=t,"number"==typeof e?n.index=null!=e?e:n.index:n.options=null!=e?e:n.options,this.loadOptions(n)}static async set(t,e,i,n){const o={index:n};return"string"==typeof t?o.tagId=t:o.element=t,e instanceof HTMLElement?o.element=e:o.options=e,"number"==typeof i?o.index=i:o.options=null!=i?i:o.options,this.loadOptions(o)}static async loadJSON(t,e,i){let n,o;return"number"==typeof e||void 0===e?n=t:(o=t,n=e),await a.loadRemoteOptions({tagId:o,url:n,index:i})}static async setJSON(t,e,i,n){let o,s,r,l;return t instanceof HTMLElement?(l=t,o=e,r=i):(s=t,l=e,o=i,r=n),await a.loadRemoteOptions({tagId:s,url:o,index:r,element:l})}static setOnClickHandler(t){const e=a.dom();if(0===e.length)throw new Error("Can only set click handlers after calling tsParticles.load() or tsParticles.loadJSON()");for(const i of e)i.addClickHandler(t)}}e.Loader=a},7051:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Particle=void 0;const n=i(8029),o=i(9014),s=i(6331),a=i(7373),r=i(5638),l=i(5532),c=t=>{((0,a.isInArray)(t.outMode,t.checkModes)||(0,a.isInArray)(t.outMode,t.checkModes))&&(t.coord>t.maxCoord-2*t.radius?t.setCb(-t.radius):t.coord<2*t.radius&&t.setCb(t.radius))};e.Particle=class{constructor(t,e,i,l,c){var d,h,u,p,v,y,g,f,m;this.id=t,this.container=e,this.group=c,this.fill=!0,this.close=!0,this.lastPathTime=0,this.destroyed=!1,this.unbreakable=!1,this.splitCount=0,this.misplaced=!1,this.retina={maxDistance:{}};const b=e.retina.pixelRatio,w=e.actualOptions,A=new n.ParticlesOptions;A.load(w.particles);const S=A.shape.type,_=A.reduceDuplicates;if(this.shape=S instanceof Array?(0,a.itemFromArray)(S,this.id,_):S,null==l?void 0:l.shape){if(l.shape.type){const t=l.shape.type;this.shape=t instanceof Array?(0,a.itemFromArray)(t,this.id,_):t}const t=new o.Shape;t.load(l.shape),this.shape&&(this.shapeData=this.loadShapeData(t,_))}else this.shapeData=this.loadShapeData(A.shape,_);void 0!==l&&A.load(l),void 0!==(null===(d=this.shapeData)||void 0===d?void 0:d.particles)&&A.load(null===(h=this.shapeData)||void 0===h?void 0:h.particles),this.fill=null!==(p=null===(u=this.shapeData)||void 0===u?void 0:u.fill)&&void 0!==p?p:this.fill,this.close=null!==(y=null===(v=this.shapeData)||void 0===v?void 0:v.close)&&void 0!==y?y:this.close,this.options=A,this.pathDelay=1e3*(0,a.getValue)(this.options.move.path.delay);const P=(0,a.getRangeValue)(this.options.zIndex.value);e.retina.initParticle(this);const C=this.options.size,x=C.value;this.size={enable:C.animation.enable,value:(0,a.getValue)(C)*e.retina.pixelRatio,max:(0,a.getRangeMax)(x)*b,min:(0,a.getRangeMin)(x)*b,loops:0,maxLoops:C.animation.count};const E=C.animation;if(E.enable){switch(this.size.status=s.AnimationStatus.increasing,E.startValue){case s.StartValueType.min:this.size.value=this.size.min,this.size.status=s.AnimationStatus.increasing;break;case s.StartValueType.random:this.size.value=(0,a.randomInRange)(this.size)*b,this.size.status=Math.random()>=.5?s.AnimationStatus.increasing:s.AnimationStatus.decreasing;break;case s.StartValueType.max:default:this.size.value=this.size.max,this.size.status=s.AnimationStatus.decreasing}this.size.velocity=(null!==(g=this.retina.sizeAnimationSpeed)&&void 0!==g?g:e.retina.sizeAnimationSpeed)/100*e.retina.reduceFactor,E.sync||(this.size.velocity*=Math.random())}this.direction=(0,a.getParticleDirectionAngle)(this.options.move.direction),this.bubble={inRange:!1},this.initialVelocity=this.calculateVelocity(),this.velocity=this.initialVelocity.copy(),this.moveDecay=1-(0,a.getRangeValue)(this.options.move.decay),this.position=this.calcPosition(e,i,(0,a.clamp)(P,0,e.zLayers)),this.initialPosition=this.position.copy(),this.offset=r.Vector.origin;const O=e.particles;O.needsSort=O.needsSort||O.lastZIndex<this.position.z,O.lastZIndex=this.position.z,this.zIndexFactor=this.position.z/e.zLayers,this.sides=24;let M=e.drawers.get(this.shape);M||(M=a.Plugins.getShapeDrawer(this.shape),M&&e.drawers.set(this.shape,M)),(null==M?void 0:M.loadShape)&&(null==M||M.loadShape(this));const T=null==M?void 0:M.getSidesCount;if(T&&(this.sides=T(this)),this.life=this.loadLife(),this.spawning=this.life.delay>0,this.options.move.spin.enable){const t=null!==(f=this.options.move.spin.position)&&void 0!==f?f:{x:50,y:50},i={x:t.x/100*e.canvas.size.width,y:t.y/100*e.canvas.size.height},n=this.getPosition(),o=(0,a.getDistance)(n,i);this.spin={center:i,direction:this.velocity.x>=0?s.RotateDirection.clockwise:s.RotateDirection.counterClockwise,angle:this.velocity.angle,radius:o,acceleration:null!==(m=this.retina.spinAcceleration)&&void 0!==m?m:(0,a.getRangeValue)(this.options.move.spin.acceleration)}}this.shadowColor=(0,a.colorToRgb)(this.options.shadow.color);for(const t of e.particles.updaters)t.init&&t.init(this);M&&M.particleInit&&M.particleInit(e,this);for(const[,t]of e.plugins)t.particleCreated&&t.particleCreated(this)}isVisible(){return!this.destroyed&&!this.spawning&&this.isInsideCanvas()}isInsideCanvas(){const t=this.getRadius(),e=this.container.canvas.size;return this.position.x>=-t&&this.position.y>=-t&&this.position.y<=e.height+t&&this.position.x<=e.width+t}draw(t){const e=this.container;for(const[,i]of e.plugins)e.canvas.drawParticlePlugin(i,this,t);e.canvas.drawParticle(this,t)}getPosition(){return{x:this.position.x+this.offset.x,y:this.position.y+this.offset.y,z:this.position.z}}getRadius(){var t;return null!==(t=this.bubble.radius)&&void 0!==t?t:this.size.value}getMass(){return this.getRadius()**2*Math.PI/2}getFillColor(){var t,e,i;const n=null!==(t=this.bubble.color)&&void 0!==t?t:(0,a.getHslFromAnimation)(this.color);if(n&&this.roll&&(this.backColor||this.roll.alter)&&Math.floor((null!==(i=null===(e=this.roll)||void 0===e?void 0:e.angle)&&void 0!==i?i:0)/(Math.PI/2))%2){if(this.backColor)return this.backColor;if(this.roll.alter)return(0,a.alterHsl)(n,this.roll.alter.type,this.roll.alter.value)}return n}getStrokeColor(){var t,e;return null!==(e=null!==(t=this.bubble.color)&&void 0!==t?t:(0,a.getHslFromAnimation)(this.strokeColor))&&void 0!==e?e:this.getFillColor()}destroy(t){if(this.destroyed=!0,this.bubble.inRange=!1,!this.unbreakable){this.destroyed=!0,this.bubble.inRange=!1;for(const[,e]of this.container.plugins)e.particleDestroyed&&e.particleDestroyed(this,t);t||this.options.destroy.mode===s.DestroyMode.split&&this.split()}}reset(){this.opacity&&(this.opacity.loops=0),this.size.loops=0}split(){const t=this.options.destroy.split;if(t.count>=0&&this.splitCount++>t.count)return;const e=(0,a.getRangeValue)(t.rate.value);for(let t=0;t<e;t++)this.container.particles.addSplitParticle(this)}calcPosition(t,e,i,n=0){var o,a,r,d,h,u;for(const[,n]of t.plugins){const t=void 0!==n.particlePosition?n.particlePosition(e,this):void 0;if(void 0!==t)return l.Vector3d.create(t.x,t.y,i)}const p=t.canvas.size,v=l.Vector3d.create(null!==(o=null==e?void 0:e.x)&&void 0!==o?o:Math.random()*p.width,null!==(a=null==e?void 0:e.y)&&void 0!==a?a:Math.random()*p.height,i),y=this.getRadius(),g=this.options.move.outModes,f=e=>{c({outMode:e,checkModes:[s.OutMode.bounce,s.OutMode.bounceHorizontal],coord:v.x,maxCoord:t.canvas.size.width,setCb:t=>v.x+=t,radius:y})},m=e=>{c({outMode:e,checkModes:[s.OutMode.bounce,s.OutMode.bounceVertical],coord:v.y,maxCoord:t.canvas.size.height,setCb:t=>v.y+=t,radius:y})};return f(null!==(r=g.left)&&void 0!==r?r:g.default),f(null!==(d=g.right)&&void 0!==d?d:g.default),m(null!==(h=g.top)&&void 0!==h?h:g.default),m(null!==(u=g.bottom)&&void 0!==u?u:g.default),this.checkOverlap(v,n)?this.calcPosition(t,void 0,i,n+1):v}checkOverlap(t,e=0){const i=this.options.collisions,n=this.getRadius();if(!i.enable)return!1;const o=i.overlap;if(o.enable)return!1;const s=o.retries;if(s>=0&&e>s)throw new Error("Particle is overlapping and can't be placed");let r=!1;for(const e of this.container.particles.array)if((0,a.getDistance)(t,e.position)<n+e.getRadius()){r=!0;break}return r}calculateVelocity(){const t=(0,a.getParticleBaseVelocity)(this.direction).copy(),e=this.options.move,i=Math.PI/180*e.angle.value,n=Math.PI/180*e.angle.offset,o={left:n-i/2,right:n+i/2};return e.straight||(t.angle+=(0,a.randomInRange)((0,a.setRangeValue)(o.left,o.right))),e.random&&"number"==typeof e.speed&&(t.length*=Math.random()),t}loadShapeData(t,e){const i=t.options[this.shape];if(i)return(0,a.deepExtend)({},i instanceof Array?(0,a.itemFromArray)(i,this.id,e):i)}loadLife(){const t=this.container,e=this.options,i=e.life,n={delay:t.retina.reduceFactor?(0,a.getRangeValue)(i.delay.value)*(i.delay.sync?1:Math.random())/t.retina.reduceFactor*1e3:0,delayTime:0,duration:t.retina.reduceFactor?(0,a.getRangeValue)(i.duration.value)*(i.duration.sync?1:Math.random())/t.retina.reduceFactor*1e3:0,time:0,count:e.life.count};return n.duration<=0&&(n.duration=-1),n.count<=0&&(n.count=-1),n}}},4285:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Mover=void 0;const n=i(7373),o=i(6331);e.Mover=class{constructor(t){this.container=t}move(t,e){t.destroyed||(this.moveParticle(t,e),this.moveParallax(t))}moveParticle(t,e){var i,o,s,a,r;const l=t.options,c=l.move;if(!c.enable)return;const d=this.container,h=this.getProximitySpeedFactor(t),u=(null!==(i=(a=t.retina).moveSpeed)&&void 0!==i?i:a.moveSpeed=(0,n.getRangeValue)(c.speed)*d.retina.pixelRatio)*d.retina.reduceFactor,p=null!==(o=(r=t.retina).moveDrift)&&void 0!==o?o:r.moveDrift=(0,n.getRangeValue)(t.options.move.drift)*d.retina.pixelRatio,v=(0,n.getRangeMax)(l.size.value)*d.retina.pixelRatio,y=u*((c.size?t.getRadius()/v:1)*h*(e.factor||1)/2);this.applyPath(t,e);const g=c.gravity,f=g.enable&&g.inverse?-1:1;g.enable&&y&&(t.velocity.y+=f*(g.acceleration*e.factor)/(60*y)),p&&y&&(t.velocity.x+=p*e.factor/(60*y));const m=t.moveDecay;1!=m&&t.velocity.multTo(m);const b=t.velocity.mult(y),w=null!==(s=t.retina.maxSpeed)&&void 0!==s?s:d.retina.maxSpeed;g.enable&&g.maxSpeed>0&&(!g.inverse&&b.y>=0&&b.y>=w||g.inverse&&b.y<=0&&b.y<=-w)&&(b.y=f*w,y&&(t.velocity.y=b.y/y));const A=t.options.zIndex,S=(1-t.zIndexFactor)**A.velocityRate;c.spin.enable?this.spin(t,y):(1!=S&&b.multTo(S),t.position.addTo(b),c.vibrate&&(t.position.x+=Math.sin(t.position.x*Math.cos(t.position.y)),t.position.y+=Math.cos(t.position.y*Math.sin(t.position.x)))),function(t){const e=t.initialPosition,{dx:i,dy:o}=(0,n.getDistances)(e,t.position),s=Math.abs(i),a=Math.abs(o),r=t.retina.maxDistance.horizontal,l=t.retina.maxDistance.vertical;if(r||l)if((r&&s>=r||l&&a>=l)&&!t.misplaced)t.misplaced=!!r&&s>r||!!l&&a>l,r&&(t.velocity.x=t.velocity.y/2-t.velocity.x),l&&(t.velocity.y=t.velocity.x/2-t.velocity.y);else if((!r||s<r)&&(!l||a<l)&&t.misplaced)t.misplaced=!1;else if(t.misplaced){const i=t.position,n=t.velocity;r&&(i.x<e.x&&n.x<0||i.x>e.x&&n.x>0)&&(n.x*=-Math.random()),l&&(i.y<e.y&&n.y<0||i.y>e.y&&n.y>0)&&(n.y*=-Math.random())}}(t)}spin(t,e){const i=this.container;if(!t.spin)return;const n={x:t.spin.direction===o.RotateDirection.clockwise?Math.cos:Math.sin,y:t.spin.direction===o.RotateDirection.clockwise?Math.sin:Math.cos};t.position.x=t.spin.center.x+t.spin.radius*n.x(t.spin.angle),t.position.y=t.spin.center.y+t.spin.radius*n.y(t.spin.angle),t.spin.radius+=t.spin.acceleration;const s=Math.max(i.canvas.size.width,i.canvas.size.height);t.spin.radius>s/2?(t.spin.radius=s/2,t.spin.acceleration*=-1):t.spin.radius<0&&(t.spin.radius=0,t.spin.acceleration*=-1),t.spin.angle+=e/100*(1-t.spin.radius/s)}applyPath(t,e){const i=t.options.move.path;if(!i.enable)return;const o=this.container;if(t.lastPathTime<=t.pathDelay)return void(t.lastPathTime+=e.value);const s=o.pathGenerator.generate(t);t.velocity.addTo(s),i.clamp&&(t.velocity.x=(0,n.clamp)(t.velocity.x,-1,1),t.velocity.y=(0,n.clamp)(t.velocity.y,-1,1)),t.lastPathTime-=t.pathDelay}moveParallax(t){const e=this.container,i=e.actualOptions;if((0,n.isSsr)()||!i.interactivity.events.onHover.parallax.enable)return;const o=i.interactivity.events.onHover.parallax.force,s=e.interactivity.mouse.position;if(!s)return;const a=e.canvas.size.width/2,r=e.canvas.size.height/2,l=i.interactivity.events.onHover.parallax.smooth,c=t.getRadius()/o,d=(s.x-a)*c,h=(s.y-r)*c;t.offset.x+=(d-t.offset.x)/l,t.offset.y+=(h-t.offset.y)/l}getProximitySpeedFactor(t){const e=this.container,i=e.actualOptions;if(!(0,n.isInArray)(o.HoverMode.slow,i.interactivity.events.onHover.mode))return 1;const s=this.container.interactivity.mouse.position;if(!s)return 1;const a=t.getPosition(),r=(0,n.getDistance)(s,a),l=e.retina.slowModeRadius;return r>l?1:(r/l||0)/i.interactivity.modes.slow.factor}}},5638:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Vector=void 0;class i{constructor(t,e){let i,n;if(void 0===e){if("number"==typeof t)throw new Error("tsParticles - Vector not initialized correctly");const e=t;[i,n]=[e.x,e.y]}else[i,n]=[t,e];this.x=i,this.y=n}static clone(t){return i.create(t.x,t.y)}static create(t,e){return new i(t,e)}static get origin(){return i.create(0,0)}get angle(){return Math.atan2(this.y,this.x)}set angle(t){this.updateFromAngle(t,this.length)}get length(){return Math.sqrt(this.x**2+this.y**2)}set length(t){this.updateFromAngle(this.angle,t)}add(t){return i.create(this.x+t.x,this.y+t.y)}addTo(t){this.x+=t.x,this.y+=t.y}sub(t){return i.create(this.x-t.x,this.y-t.y)}subFrom(t){this.x-=t.x,this.y-=t.y}mult(t){return i.create(this.x*t,this.y*t)}multTo(t){this.x*=t,this.y*=t}div(t){return i.create(this.x/t,this.y/t)}divTo(t){this.x/=t,this.y/=t}distanceTo(t){return this.sub(t).length}getLengthSq(){return this.x**2+this.y**2}distanceToSq(t){return this.sub(t).getLengthSq()}manhattanDistanceTo(t){return Math.abs(t.x-this.x)+Math.abs(t.y-this.y)}copy(){return i.clone(this)}setTo(t){this.x=t.x,this.y=t.y}rotate(t){return i.create(this.x*Math.cos(t)-this.y*Math.sin(t),this.x*Math.sin(t)+this.y*Math.cos(t))}updateFromAngle(t,e){this.x=Math.cos(t)*e,this.y=Math.sin(t)*e}}e.Vector=i},5532:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Vector3d=void 0;const n=i(5638);class o extends n.Vector{constructor(t,e,i){super(t,e),this.z=void 0===i?t.z:i}static clone(t){return o.create(t.x,t.y,t.z)}static create(t,e,i){return new o(t,e,i)}add(t){return t instanceof o?o.create(this.x+t.x,this.y+t.y,this.z+t.z):super.add(t)}addTo(t){super.addTo(t),t instanceof o&&(this.z+=t.z)}sub(t){return t instanceof o?o.create(this.x-t.x,this.y-t.y,this.z-t.z):super.sub(t)}subFrom(t){super.subFrom(t),t instanceof o&&(this.z-=t.z)}mult(t){return o.create(this.x*t,this.y*t,this.z*t)}multTo(t){super.multTo(t),this.z*=t}div(t){return o.create(this.x/t,this.y/t,this.z/t)}divTo(t){super.divTo(t),this.z/=t}copy(){return o.clone(this)}setTo(t){super.setTo(t),t instanceof o&&(this.z=t.z)}}e.Vector3d=o},4480:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Particles=void 0;const n=i(7051),o=i(7373),s=i(85),a=i(8029),r=i(4285);e.Particles=class{constructor(t){this.container=t,this.nextId=0,this.array=[],this.zArray=[],this.mover=new r.Mover(t),this.limit=0,this.needsSort=!1,this.lastZIndex=0,this.freqs={links:new Map,triangles:new Map},this.interactionManager=new s.InteractionManager(t);const e=this.container.canvas.size;this.linksColors=new Map,this.quadTree=new o.QuadTree(new o.Rectangle(-e.width/4,-e.height/4,3*e.width/2,3*e.height/2),4),this.updaters=o.Plugins.getUpdaters(t,!0)}get count(){return this.array.length}init(){var t;const e=this.container,i=e.actualOptions;this.lastZIndex=0,this.needsSort=!1,this.freqs.links=new Map,this.freqs.triangles=new Map;let n=!1;this.updaters=o.Plugins.getUpdaters(e,!0),this.interactionManager.init();for(const[,t]of e.plugins)if(void 0!==t.particlesInitialization&&(n=t.particlesInitialization()),n)break;if(this.addManualParticles(),!n){for(const e in i.particles.groups){const n=i.particles.groups[e];for(let o=this.count,s=0;s<(null===(t=n.number)||void 0===t?void 0:t.value)&&o<i.particles.number.value;o++,s++)this.addParticle(void 0,n,e)}for(let t=this.count;t<i.particles.number.value;t++)this.addParticle()}e.pathGenerator.init(e)}redraw(){this.clear(),this.init(),this.draw({value:0,factor:0})}removeAt(t,e=1,i,n){if(!(t>=0&&t<=this.count))return;let o=0;for(let s=t;o<e&&s<this.count;s++){const t=this.array[s];if(!t||t.group!==i)continue;t.destroy(n),this.array.splice(s--,1);const e=this.zArray.indexOf(t);this.zArray.splice(e,1),o++}}remove(t,e,i){this.removeAt(this.array.indexOf(t),void 0,e,i)}update(t){const e=this.container,i=[];e.pathGenerator.update();for(const[,i]of e.plugins)void 0!==i.update&&i.update(t);for(const n of this.array){const s=e.canvas.resizeFactor;s&&(n.position.x*=s.width,n.position.y*=s.height),n.bubble.inRange=!1;for(const[,e]of this.container.plugins){if(n.destroyed)break;e.particleUpdate&&e.particleUpdate(n,t)}this.mover.move(n,t),n.destroyed?i.push(n):this.quadTree.insert(new o.Point(n.getPosition(),n))}for(const t of i)this.remove(t);this.interactionManager.externalInteract(t);for(const i of e.particles.array){for(const e of this.updaters)e.update(i,t);i.destroyed||i.spawning||this.interactionManager.particlesInteract(i,t)}delete e.canvas.resizeFactor}draw(t){const e=this.container;e.canvas.clear();const i=this.container.canvas.size;this.quadTree=new o.QuadTree(new o.Rectangle(-i.width/4,-i.height/4,3*i.width/2,3*i.height/2),4),this.update(t),this.needsSort&&(this.zArray.sort(((t,e)=>e.position.z-t.position.z||t.id-e.id)),this.lastZIndex=this.zArray[this.zArray.length-1].position.z,this.needsSort=!1);for(const[,i]of e.plugins)e.canvas.drawPlugin(i,t);for(const e of this.zArray)e.draw(t)}clear(){this.array=[],this.zArray=[]}push(t,e,i,n){this.pushing=!0;for(let o=0;o<t;o++)this.addParticle(null==e?void 0:e.position,i,n);this.pushing=!1}addParticle(t,e,i){const n=this.container,o=n.actualOptions.particles.number.limit*n.density;if(o>0){const t=this.count+1-o;t>0&&this.removeQuantity(t)}return this.pushParticle(t,e,i)}addSplitParticle(t){const e=t.options.destroy.split,i=new a.ParticlesOptions;i.load(t.options);const n=(0,o.getRangeValue)(e.factor.value);i.color.load({value:{hsl:t.getFillColor()}}),"number"==typeof i.size.value?i.size.value/=n:(i.size.value.min/=n,i.size.value.max/=n),i.load(e.particles);const s=e.sizeOffset?(0,o.setRangeValue)(-t.size.value,t.size.value):0,r={x:t.position.x+(0,o.randomInRange)(s),y:t.position.y+(0,o.randomInRange)(s)};return this.pushParticle(r,i,t.group,(e=>!(e.size.value<.5||(e.velocity.length=(0,o.randomInRange)((0,o.setRangeValue)(t.velocity.length,e.velocity.length)),e.splitCount=t.splitCount+1,e.unbreakable=!0,setTimeout((()=>{e.unbreakable=!1}),500),0))))}removeQuantity(t,e){this.removeAt(0,t,e)}getLinkFrequency(t,e){const i=`${Math.min(t.id,e.id)}_${Math.max(t.id,e.id)}`;let n=this.freqs.links.get(i);return void 0===n&&(n=Math.random(),this.freqs.links.set(i,n)),n}getTriangleFrequency(t,e,i){let[n,o,s]=[t.id,e.id,i.id];n>o&&([o,n]=[n,o]),o>s&&([s,o]=[o,s]),n>s&&([s,n]=[n,s]);const a=`${n}_${o}_${s}`;let r=this.freqs.triangles.get(a);return void 0===r&&(r=Math.random(),this.freqs.triangles.set(a,r)),r}addManualParticles(){const t=this.container,e=t.actualOptions;for(const i of e.manualParticles){const e=i.position?{x:i.position.x*t.canvas.size.width/100,y:i.position.y*t.canvas.size.height/100}:void 0;this.addParticle(e,i.options)}}setDensity(){const t=this.container.actualOptions;for(const e in t.particles.groups)this.applyDensity(t.particles.groups[e],0,e);this.applyDensity(t.particles,t.manualParticles.length)}applyDensity(t,e,i){var n;if(!(null===(n=t.number.density)||void 0===n?void 0:n.enable))return;const o=t.number,s=this.initDensityFactor(o.density),a=o.value,r=o.limit>0?o.limit:a,l=Math.min(a,r)*s+e,c=Math.min(this.count,this.array.filter((t=>t.group===i)).length);this.limit=o.limit*s,c<l?this.push(Math.abs(l-c),void 0,t,i):c>l&&this.removeQuantity(c-l,i)}initDensityFactor(t){const e=this.container;if(!e.canvas.element||!t.enable)return 1;const i=e.canvas.element,n=e.retina.pixelRatio;return i.width*i.height/(t.factor*n**2*t.area)}pushParticle(t,e,i,o){try{const s=new n.Particle(this.nextId,this.container,t,e,i);let a=!0;if(o&&(a=o(s)),!a)return;return this.array.push(s),this.zArray.push(s),this.nextId++,s}catch(t){return void console.warn(`error adding particle: ${t}`)}}}},7472:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ParticlesInteractorBase=void 0;const n=i(6331);e.ParticlesInteractorBase=class{constructor(t){this.container=t,this.type=n.InteractorType.Particles}}},1993:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Retina=void 0;const n=i(7373);e.Retina=class{constructor(t){this.container=t}init(){const t=this.container,e=t.actualOptions;this.pixelRatio=!e.detectRetina||(0,n.isSsr)()?1:window.devicePixelRatio;const i=this.container.actualOptions.motion;if(i&&(i.disable||i.reduce.value))if((0,n.isSsr)()||"undefined"==typeof matchMedia||!matchMedia)this.reduceFactor=1;else{const e=matchMedia("(prefers-reduced-motion: reduce)");if(e){this.handleMotionChange(e);const i=()=>{this.handleMotionChange(e),t.refresh().catch((()=>{}))};void 0!==e.addEventListener?e.addEventListener("change",i):void 0!==e.addListener&&e.addListener(i)}}else this.reduceFactor=1;const o=this.pixelRatio;if(t.canvas.element){const e=t.canvas.element;t.canvas.size.width=e.offsetWidth*o,t.canvas.size.height=e.offsetHeight*o}const s=e.particles;this.attractDistance=s.move.attract.distance*o,this.linksDistance=s.links.distance*o,this.linksWidth=s.links.width*o,this.sizeAnimationSpeed=s.size.animation.speed*o,this.maxSpeed=s.move.gravity.maxSpeed*o,void 0!==s.orbit.radius&&(this.orbitRadius=s.orbit.radius*this.container.retina.pixelRatio);const a=e.interactivity.modes;this.connectModeDistance=a.connect.distance*o,this.connectModeRadius=a.connect.radius*o,this.grabModeDistance=a.grab.distance*o,this.repulseModeDistance=a.repulse.distance*o,this.bounceModeDistance=a.bounce.distance*o,this.attractModeDistance=a.attract.distance*o,this.slowModeRadius=a.slow.radius*o,this.bubbleModeDistance=a.bubble.distance*o,a.bubble.size&&(this.bubbleModeSize=a.bubble.size*o)}initParticle(t){const e=t.options,i=this.pixelRatio,o=e.move.distance,s=t.retina;s.attractDistance=e.move.attract.distance*i,s.linksDistance=e.links.distance*i,s.linksWidth=e.links.width*i,s.moveDrift=(0,n.getRangeValue)(e.move.drift)*i,s.moveSpeed=(0,n.getRangeValue)(e.move.speed)*i,s.sizeAnimationSpeed=e.size.animation.speed*i,t.spin&&(s.spinAcceleration=(0,n.getRangeValue)(e.move.spin.acceleration)*i);const a=s.maxDistance;a.horizontal=void 0!==o.horizontal?o.horizontal*i:void 0,a.vertical=void 0!==o.vertical?o.vertical*i:void 0,s.maxSpeed=e.move.gravity.maxSpeed*i}handleMotionChange(t){const e=this.container.actualOptions;if(t.matches){const t=e.motion;this.reduceFactor=t.disable?0:t.reduce.value?1/t.reduce.factor:1}else this.reduceFactor=1}}},2838:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.AnimationStatus=void 0,(i=e.AnimationStatus||(e.AnimationStatus={}))[i.increasing=0]="increasing",i[i.decreasing=1]="decreasing"},1583:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.MoveDirection=void 0,(i=e.MoveDirection||(e.MoveDirection={})).bottom="bottom",i.bottomLeft="bottom-left",i.bottomRight="bottom-right",i.left="left",i.none="none",i.right="right",i.top="top",i.topLeft="top-left",i.topRight="top-right"},9040:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.OutModeDirection=void 0,(i=e.OutModeDirection||(e.OutModeDirection={})).bottom="bottom",i.left="left",i.right="right",i.top="top"},1235:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.RotateDirection=void 0,(i=e.RotateDirection||(e.RotateDirection={})).clockwise="clockwise",i.counterClockwise="counter-clockwise",i.random="random"},9368:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.TiltDirection=void 0,(i=e.TiltDirection||(e.TiltDirection={})).clockwise="clockwise",i.counterClockwise="counter-clockwise",i.random="random"},5554:function(t,e,i){var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),o(i(1583),e),o(i(1235),e),o(i(9040),e),o(i(9368),e)},3645:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.InteractivityDetect=void 0,(i=e.InteractivityDetect||(e.InteractivityDetect={})).canvas="canvas",i.parent="parent",i.window="window"},2672:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.ClickMode=void 0,(i=e.ClickMode||(e.ClickMode={})).attract="attract",i.bubble="bubble",i.push="push",i.remove="remove",i.repulse="repulse",i.pause="pause",i.trail="trail"},8945:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.CollisionMode=void 0,(i=e.CollisionMode||(e.CollisionMode={})).absorb="absorb",i.bounce="bounce",i.destroy="destroy"},4970:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.DestroyMode=void 0,(i=e.DestroyMode||(e.DestroyMode={})).none="none",i.split="split"},1346:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.DivMode=void 0,(i=e.DivMode||(e.DivMode={})).bounce="bounce",i.bubble="bubble",i.repulse="repulse"},2977:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.HoverMode=void 0,(i=e.HoverMode||(e.HoverMode={})).attract="attract",i.bounce="bounce",i.bubble="bubble",i.connect="connect",i.grab="grab",i.light="light",i.repulse="repulse",i.slow="slow",i.trail="trail"},6833:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.OutMode=void 0,(i=e.OutMode||(e.OutMode={})).bounce="bounce",i.bounceHorizontal="bounce-horizontal",i.bounceVertical="bounce-vertical",i.none="none",i.out="out",i.destroy="destroy",i.split="split"},5347:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.ResponsiveMode=void 0,(i=e.ResponsiveMode||(e.ResponsiveMode={})).screen="screen",i.canvas="canvas"},8404:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.RollMode=void 0,(i=e.RollMode||(e.RollMode={})).both="both",i.horizontal="horizontal",i.vertical="vertical"},2639:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.SizeMode=void 0,(i=e.SizeMode||(e.SizeMode={})).precise="precise",i.percent="percent"},8882:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.ThemeMode=void 0,(i=e.ThemeMode||(e.ThemeMode={})).any="any",i.dark="dark",i.light="light"},551:function(t,e,i){var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),o(i(2672),e),o(i(4970),e),o(i(1346),e),o(i(2977),e),o(i(8945),e),o(i(6833),e),o(i(8404),e),o(i(2639),e),o(i(8882),e),o(i(5347),e)},8782:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.AlterType=void 0,(i=e.AlterType||(e.AlterType={})).darken="darken",i.enlighten="enlighten"},1095:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.DestroyType=void 0,(i=e.DestroyType||(e.DestroyType={})).none="none",i.max="max",i.min="min"},7068:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.DivType=void 0,(i=e.DivType||(e.DivType={})).circle="circle",i.rectangle="rectangle"},3947:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.EasingType=void 0,(i=e.EasingType||(e.EasingType={})).easeOutBack="ease-out-back",i.easeOutCirc="ease-out-circ",i.easeOutCubic="ease-out-cubic",i.easeOutQuad="ease-out-quad",i.easeOutQuart="ease-out-quart",i.easeOutQuint="ease-out-quint",i.easeOutExpo="ease-out-expo",i.easeOutSine="ease-out-sine"},864:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.GradientType=void 0,(i=e.GradientType||(e.GradientType={})).linear="linear",i.radial="radial",i.random="random"},4339:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.InteractorType=void 0,(i=e.InteractorType||(e.InteractorType={}))[i.External=0]="External",i[i.Particles=1]="Particles"},2600:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.OrbitType=void 0,(i=e.OrbitType||(e.OrbitType={})).front="front",i.back="back"},6252:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.ShapeType=void 0,(i=e.ShapeType||(e.ShapeType={})).char="char",i.character="character",i.circle="circle",i.edge="edge",i.image="image",i.images="images",i.line="line",i.polygon="polygon",i.square="square",i.star="star",i.triangle="triangle"},5091:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.StartValueType=void 0,(i=e.StartValueType||(e.StartValueType={})).max="max",i.min="min",i.random="random"},8810:function(t,e,i){var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),o(i(8782),e),o(i(1095),e),o(i(864),e),o(i(4339),e),o(i(6252),e),o(i(5091),e),o(i(7068),e),o(i(3947),e),o(i(2600),e)},6331:function(t,e,i){var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),o(i(5554),e),o(i(551),e),o(i(2838),e),o(i(8810),e),o(i(3645),e)},5016:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Attractor=void 0;const n=i(6331),o=i(7373),s=i(4260),a=i(5638);class r extends s.ExternalInteractorBase{constructor(t){super(t)}isEnabled(){const t=this.container,e=t.actualOptions,i=t.interactivity.mouse,s=e.interactivity.events;if(!(i.position&&s.onHover.enable||i.clickPosition&&s.onClick.enable))return!1;const a=s.onHover.mode,r=s.onClick.mode;return(0,o.isInArray)(n.HoverMode.attract,a)||(0,o.isInArray)(n.ClickMode.attract,r)}reset(){}interact(){const t=this.container,e=t.actualOptions,i=t.interactivity.status===o.Constants.mouseMoveEvent,s=e.interactivity.events,a=s.onHover.enable,r=s.onHover.mode,l=s.onClick.enable,c=s.onClick.mode;i&&a&&(0,o.isInArray)(n.HoverMode.attract,r)?this.hoverAttract():l&&(0,o.isInArray)(n.ClickMode.attract,c)&&this.clickAttract()}hoverAttract(){const t=this.container,e=t.interactivity.mouse.position;if(!e)return;const i=t.retina.attractModeDistance;this.processAttract(e,i,new o.Circle(e.x,e.y,i))}processAttract(t,e,i){const n=this.container,s=n.actualOptions.interactivity.modes.attract,r=n.particles.quadTree.query(i);for(const i of r){const{dx:n,dy:r,distance:l}=(0,o.getDistances)(i.position,t),c=s.speed*s.factor,d=(0,o.clamp)((0,o.calcEasing)(1-l/e,s.easing)*c,0,s.maxSpeed),h=a.Vector.create(0===l?c:n/l*d,0===l?c:r/l*d);i.position.subFrom(h)}}clickAttract(){const t=this.container;if(t.attract.finish||(t.attract.count||(t.attract.count=0),t.attract.count++,t.attract.count===t.particles.count&&(t.attract.finish=!0)),t.attract.clicking){const e=t.interactivity.mouse.clickPosition;if(!e)return;const i=t.retina.attractModeDistance;this.processAttract(e,i,new o.Circle(e.x,e.y,i))}else!1===t.attract.clicking&&(t.attract.particles=[])}}e.Attractor=r},2770:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadExternalAttractInteraction=void 0;const n=i(5016);e.loadExternalAttractInteraction=async function(t){await t.addInteractor("externalAttract",(t=>new n.Attractor(t)))}},3326:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Bouncer=void 0;const n=i(7373),o=i(6331),s=i(5638),a=i(4260);class r extends a.ExternalInteractorBase{constructor(t){super(t)}isEnabled(){const t=this.container,e=t.actualOptions,i=t.interactivity.mouse,s=e.interactivity.events,a=s.onDiv;return i.position&&s.onHover.enable&&(0,n.isInArray)(o.HoverMode.bounce,s.onHover.mode)||(0,n.isDivModeEnabled)(o.DivMode.bounce,a)}interact(){const t=this.container,e=t.actualOptions.interactivity.events,i=t.interactivity.status===n.Constants.mouseMoveEvent,s=e.onHover.enable,a=e.onHover.mode,r=e.onDiv;i&&s&&(0,n.isInArray)(o.HoverMode.bounce,a)?this.processMouseBounce():(0,n.divModeExecute)(o.DivMode.bounce,r,((t,e)=>this.singleSelectorBounce(t,e)))}reset(){}processMouseBounce(){const t=this.container,e=10*t.retina.pixelRatio,i=t.interactivity.mouse.position,o=t.retina.bounceModeDistance;i&&this.processBounce(i,o,new n.Circle(i.x,i.y,o+e))}singleSelectorBounce(t,e){const i=this.container,s=document.querySelectorAll(t);s.length&&s.forEach((t=>{const s=t,a=i.retina.pixelRatio,r={x:(s.offsetLeft+s.offsetWidth/2)*a,y:(s.offsetTop+s.offsetHeight/2)*a},l=s.offsetWidth/2*a,c=10*a,d=e.type===o.DivType.circle?new n.Circle(r.x,r.y,l+c):new n.Rectangle(s.offsetLeft*a-c,s.offsetTop*a-c,s.offsetWidth*a+2*c,s.offsetHeight*a+2*c);this.processBounce(r,l,d)}))}processBounce(t,e,i){const o=this.container.particles.quadTree.query(i);for(const a of o)i instanceof n.Circle?(0,n.circleBounce)((0,n.circleBounceDataFromParticle)(a),{position:t,radius:e,mass:e**2*Math.PI/2,velocity:s.Vector.origin,factor:s.Vector.origin}):i instanceof n.Rectangle&&(0,n.rectBounce)(a,(0,n.calculateBounds)(t,e))}}e.Bouncer=r},1966:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadExternalBounceInteraction=void 0;const n=i(3326);e.loadExternalBounceInteraction=async function(t){await t.addInteractor("externalBounce",(t=>new n.Bouncer(t)))}},9007:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Bubbler=void 0;const n=i(7373),o=i(6331),s=i(4260),a=i(3169);function r(t,e,i,o){if(e>=i){const s=t+(e-i)*o;return(0,n.clamp)(s,t,e)}if(e<i){const s=t-(i-e)*o;return(0,n.clamp)(s,e,t)}}class l extends s.ExternalInteractorBase{constructor(t){super(t)}isEnabled(){const t=this.container,e=t.actualOptions,i=t.interactivity.mouse,s=e.interactivity.events,a=s.onDiv,r=(0,n.isDivModeEnabled)(o.DivMode.bubble,a);if(!(r||s.onHover.enable&&i.position||s.onClick.enable&&i.clickPosition))return!1;const l=s.onHover.mode,c=s.onClick.mode;return(0,n.isInArray)(o.HoverMode.bubble,l)||(0,n.isInArray)(o.ClickMode.bubble,c)||r}reset(t,e){t.bubble.inRange&&!e||(delete t.bubble.div,delete t.bubble.opacity,delete t.bubble.radius,delete t.bubble.color)}interact(){const t=this.container.actualOptions.interactivity.events,e=t.onHover,i=t.onClick,s=e.enable,a=e.mode,r=i.enable,l=i.mode,c=t.onDiv;s&&(0,n.isInArray)(o.HoverMode.bubble,a)?this.hoverBubble():r&&(0,n.isInArray)(o.ClickMode.bubble,l)?this.clickBubble():(0,n.divModeExecute)(o.DivMode.bubble,c,((t,e)=>this.singleSelectorHover(t,e)))}singleSelectorHover(t,e){const i=this.container,s=document.querySelectorAll(t);s.length&&s.forEach((t=>{const s=t,a=i.retina.pixelRatio,r={x:(s.offsetLeft+s.offsetWidth/2)*a,y:(s.offsetTop+s.offsetHeight/2)*a},l=s.offsetWidth/2*a,c=e.type===o.DivType.circle?new n.Circle(r.x,r.y,l):new n.Rectangle(s.offsetLeft*a,s.offsetTop*a,s.offsetWidth*a,s.offsetHeight*a),d=i.particles.quadTree.query(c);for(const t of d){if(!c.contains(t.getPosition()))continue;t.bubble.inRange=!0;const e=i.actualOptions.interactivity.modes.bubble.divs,o=(0,n.divMode)(e,s);t.bubble.div&&t.bubble.div===s||(this.reset(t,!0),t.bubble.div=s),this.hoverBubbleSize(t,1,o),this.hoverBubbleOpacity(t,1,o),this.hoverBubbleColor(t,1,o)}}))}process(t,e,i,n){const o=this.container,s=n.bubbleObj.optValue;if(void 0===s)return;const r=o.actualOptions.interactivity.modes.bubble.duration,l=o.retina.bubbleModeDistance,c=n.particlesObj.optValue,d=n.bubbleObj.value,h=n.particlesObj.value||0,u=n.type;if(s!==c)if(o.bubble.durationEnd)d&&(u===a.ProcessBubbleType.size&&delete t.bubble.radius,u===a.ProcessBubbleType.opacity&&delete t.bubble.opacity);else if(e<=l){if((null!=d?d:h)!==s){const e=h-i*(h-s)/r;u===a.ProcessBubbleType.size&&(t.bubble.radius=e),u===a.ProcessBubbleType.opacity&&(t.bubble.opacity=e)}}else u===a.ProcessBubbleType.size&&delete t.bubble.radius,u===a.ProcessBubbleType.opacity&&delete t.bubble.opacity}clickBubble(){var t,e;const i=this.container,o=i.actualOptions,s=i.interactivity.mouse.clickPosition;if(!s)return;const r=i.retina.bubbleModeDistance,l=i.particles.quadTree.queryCircle(s,r);for(const r of l){if(!i.bubble.clicking)continue;r.bubble.inRange=!i.bubble.durationEnd;const l=r.getPosition(),c=(0,n.getDistance)(l,s),d=((new Date).getTime()-(i.interactivity.mouse.clickTime||0))/1e3;d>o.interactivity.modes.bubble.duration&&(i.bubble.durationEnd=!0),d>2*o.interactivity.modes.bubble.duration&&(i.bubble.clicking=!1,i.bubble.durationEnd=!1);const h={bubbleObj:{optValue:i.retina.bubbleModeSize,value:r.bubble.radius},particlesObj:{optValue:(0,n.getRangeMax)(r.options.size.value)*i.retina.pixelRatio,value:r.size.value},type:a.ProcessBubbleType.size};this.process(r,c,d,h);const u={bubbleObj:{optValue:o.interactivity.modes.bubble.opacity,value:r.bubble.opacity},particlesObj:{optValue:(0,n.getRangeMax)(r.options.opacity.value),value:null!==(e=null===(t=r.opacity)||void 0===t?void 0:t.value)&&void 0!==e?e:1},type:a.ProcessBubbleType.opacity};this.process(r,c,d,u),i.bubble.durationEnd?delete r.bubble.color:c<=i.retina.bubbleModeDistance?this.hoverBubbleColor(r,c):delete r.bubble.color}}hoverBubble(){const t=this.container,e=t.interactivity.mouse.position;if(void 0===e)return;const i=t.retina.bubbleModeDistance,o=t.particles.quadTree.queryCircle(e,i);for(const s of o){s.bubble.inRange=!0;const o=s.getPosition(),a=(0,n.getDistance)(o,e),r=1-a/i;a<=i?r>=0&&t.interactivity.status===n.Constants.mouseMoveEvent&&(this.hoverBubbleSize(s,r),this.hoverBubbleOpacity(s,r),this.hoverBubbleColor(s,r)):this.reset(s),t.interactivity.status===n.Constants.mouseLeaveEvent&&this.reset(s)}}hoverBubbleSize(t,e,i){const o=this.container,s=(null==i?void 0:i.size)?i.size*o.retina.pixelRatio:o.retina.bubbleModeSize;if(void 0===s)return;const a=(0,n.getRangeMax)(t.options.size.value)*o.retina.pixelRatio,l=r(t.size.value,s,a,e);void 0!==l&&(t.bubble.radius=l)}hoverBubbleOpacity(t,e,i){var o,s,a;const l=this.container.actualOptions,c=null!==(o=null==i?void 0:i.opacity)&&void 0!==o?o:l.interactivity.modes.bubble.opacity;if(!c)return;const d=t.options.opacity.value,h=r(null!==(a=null===(s=t.opacity)||void 0===s?void 0:s.value)&&void 0!==a?a:1,c,(0,n.getRangeMax)(d),e);void 0!==h&&(t.bubble.opacity=h)}hoverBubbleColor(t,e,i){const o=this.container.actualOptions,s=null!=i?i:o.interactivity.modes.bubble;if(!t.bubble.finalColor){const e=s.color;if(!e)return;const i=e instanceof Array?(0,n.itemFromArray)(e):e;t.bubble.finalColor=(0,n.colorToHsl)(i)}if(t.bubble.finalColor)if(s.mix){t.bubble.color=void 0;const i=t.getFillColor();t.bubble.color=i?(0,n.rgbToHsl)((0,n.colorMix)(i,t.bubble.finalColor,1-e,e)):t.bubble.finalColor}else t.bubble.color=t.bubble.finalColor}}e.Bubbler=l},3169:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.ProcessBubbleType=void 0,(i=e.ProcessBubbleType||(e.ProcessBubbleType={})).color="color",i.opacity="opacity",i.size="size"},5313:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadExternalBubbleInteraction=void 0;const n=i(9007);e.loadExternalBubbleInteraction=async function(t){await t.addInteractor("externalBubble",(t=>new n.Bubbler(t)))}},2730:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Connector=void 0;const n=i(7373),o=i(6331),s=i(4260);class a extends s.ExternalInteractorBase{constructor(t){super(t)}isEnabled(){const t=this.container,e=t.interactivity.mouse,i=t.actualOptions.interactivity.events;return!(!i.onHover.enable||!e.position)&&(0,n.isInArray)(o.HoverMode.connect,i.onHover.mode)}reset(){}interact(){const t=this.container;if(t.actualOptions.interactivity.events.onHover.enable&&"mousemove"===t.interactivity.status){const e=t.interactivity.mouse.position;if(!e)return;const i=Math.abs(t.retina.connectModeRadius),n=t.particles.quadTree.queryCircle(e,i);let o=0;for(const e of n){const i=e.getPosition();for(const s of n.slice(o+1)){const n=s.getPosition(),o=Math.abs(t.retina.connectModeDistance),a=Math.abs(i.x-n.x),r=Math.abs(i.y-n.y);a<o&&r<o&&t.canvas.drawConnectLine(e,s)}++o}}}}e.Connector=a},9733:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadExternalConnectInteraction=void 0;const n=i(2730);e.loadExternalConnectInteraction=async function(t){await t.addInteractor("externalConnect",(t=>new n.Connector(t)))}},639:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Grabber=void 0;const n=i(7373),o=i(6331),s=i(4260);class a extends s.ExternalInteractorBase{constructor(t){super(t)}isEnabled(){const t=this.container,e=t.interactivity.mouse,i=t.actualOptions.interactivity.events;return i.onHover.enable&&!!e.position&&(0,n.isInArray)(o.HoverMode.grab,i.onHover.mode)}reset(){}interact(){var t;const e=this.container,i=e.actualOptions,o=i.interactivity;if(o.events.onHover.enable&&e.interactivity.status===n.Constants.mouseMoveEvent){const s=e.interactivity.mouse.position;if(!s)return;const a=e.retina.grabModeDistance,r=e.particles.quadTree.queryCircle(s,a);for(const l of r){const r=l.getPosition(),c=(0,n.getDistance)(r,s);if(c<=a){const r=o.modes.grab.links,d=r.opacity,h=d-c*d/a;if(h<=0)continue;const u=null!==(t=r.color)&&void 0!==t?t:l.options.links.color;if(!e.particles.grabLineColor){const t=i.interactivity.modes.grab.links;e.particles.grabLineColor=(0,n.getLinkRandomColor)(u,t.blink,t.consent)}const p=(0,n.getLinkColor)(l,void 0,e.particles.grabLineColor);if(!p)return;e.canvas.drawGrabLine(l,p,h,s)}}}}}e.Grabber=a},3066:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadExternalGrabInteraction=void 0;const n=i(639);e.loadExternalGrabInteraction=async function(t){await t.addInteractor("externalGrab",(t=>new n.Grabber(t)))}},7818:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Repulser=void 0;const n=i(6331),o=i(7373),s=i(5638),a=i(4260);class r extends a.ExternalInteractorBase{constructor(t){super(t)}isEnabled(){const t=this.container,e=t.actualOptions,i=t.interactivity.mouse,s=e.interactivity.events,a=s.onDiv,r=(0,o.isDivModeEnabled)(n.DivMode.repulse,a);if(!(r||s.onHover.enable&&i.position||s.onClick.enable&&i.clickPosition))return!1;const l=s.onHover.mode,c=s.onClick.mode;return(0,o.isInArray)(n.HoverMode.repulse,l)||(0,o.isInArray)(n.ClickMode.repulse,c)||r}reset(){}interact(){const t=this.container,e=t.actualOptions,i=t.interactivity.status===o.Constants.mouseMoveEvent,s=e.interactivity.events,a=s.onHover.enable,r=s.onHover.mode,l=s.onClick.enable,c=s.onClick.mode,d=s.onDiv;i&&a&&(0,o.isInArray)(n.HoverMode.repulse,r)?this.hoverRepulse():l&&(0,o.isInArray)(n.ClickMode.repulse,c)?this.clickRepulse():(0,o.divModeExecute)(n.DivMode.repulse,d,((t,e)=>this.singleSelectorRepulse(t,e)))}singleSelectorRepulse(t,e){const i=this.container,s=document.querySelectorAll(t);s.length&&s.forEach((t=>{const s=t,a=i.retina.pixelRatio,r={x:(s.offsetLeft+s.offsetWidth/2)*a,y:(s.offsetTop+s.offsetHeight/2)*a},l=s.offsetWidth/2*a,c=e.type===n.DivType.circle?new o.Circle(r.x,r.y,l):new o.Rectangle(s.offsetLeft*a,s.offsetTop*a,s.offsetWidth*a,s.offsetHeight*a),d=i.actualOptions.interactivity.modes.repulse.divs,h=(0,o.divMode)(d,s);this.processRepulse(r,l,c,h)}))}hoverRepulse(){const t=this.container,e=t.interactivity.mouse.position;if(!e)return;const i=t.retina.repulseModeDistance;this.processRepulse(e,i,new o.Circle(e.x,e.y,i))}processRepulse(t,e,i,n){var a;const r=this.container,l=r.particles.quadTree.query(i),c=r.actualOptions.interactivity.modes.repulse;for(const i of l){const{dx:r,dy:l,distance:d}=(0,o.getDistances)(i.position,t),h=(null!==(a=null==n?void 0:n.speed)&&void 0!==a?a:c.speed)*c.factor,u=(0,o.clamp)((0,o.calcEasing)(1-d/e,c.easing)*h,0,c.maxSpeed),p=s.Vector.create(0===d?h:r/d*u,0===d?h:l/d*u);i.position.addTo(p)}}clickRepulse(){const t=this.container;if(t.repulse.finish||(t.repulse.count||(t.repulse.count=0),t.repulse.count++,t.repulse.count===t.particles.count&&(t.repulse.finish=!0)),t.repulse.clicking){const e=t.retina.repulseModeDistance,i=Math.pow(e/6,3),n=t.interactivity.mouse.clickPosition;if(void 0===n)return;const a=new o.Circle(n.x,n.y,i),r=t.particles.quadTree.query(a);for(const e of r){const{dx:a,dy:r,distance:l}=(0,o.getDistances)(n,e.position),c=l**2,d=t.actualOptions.interactivity.modes.repulse.speed,h=-i*d/c;if(c<=i){t.repulse.particles.push(e);const i=s.Vector.create(a,r);i.length=h,e.velocity.setTo(i)}}}else if(!1===t.repulse.clicking){for(const e of t.repulse.particles)e.velocity.setTo(e.initialVelocity);t.repulse.particles=[]}}}e.Repulser=r},4842:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadExternalRepulseInteraction=void 0;const n=i(7818);e.loadExternalRepulseInteraction=async function(t){await t.addInteractor("externalRepulse",(t=>new n.Repulser(t)))}},557:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.TrailMaker=void 0;const n=i(7373),o=i(6331),s=i(4260);class a extends s.ExternalInteractorBase{constructor(t){super(t),this.delay=0}interact(t){var e,i,n,o;if(!this.container.retina.reduceFactor)return;const s=this.container,a=s.actualOptions.interactivity.modes.trail,r=1e3*a.delay/this.container.retina.reduceFactor;if(this.delay<r&&(this.delay+=t.value),this.delay<r)return;let l=!0;a.pauseOnStop&&(s.interactivity.mouse.position===this.lastPosition||(null===(e=s.interactivity.mouse.position)||void 0===e?void 0:e.x)===(null===(i=this.lastPosition)||void 0===i?void 0:i.x)&&(null===(n=s.interactivity.mouse.position)||void 0===n?void 0:n.y)===(null===(o=this.lastPosition)||void 0===o?void 0:o.y))&&(l=!1),s.interactivity.mouse.position?this.lastPosition={x:s.interactivity.mouse.position.x,y:s.interactivity.mouse.position.y}:delete this.lastPosition,l&&s.particles.push(a.quantity,s.interactivity.mouse,a.particles),this.delay-=r}isEnabled(){const t=this.container,e=t.actualOptions,i=t.interactivity.mouse,s=e.interactivity.events;return i.clicking&&i.inside&&!!i.position&&(0,n.isInArray)(o.ClickMode.trail,s.onClick.mode)||i.inside&&!!i.position&&(0,n.isInArray)(o.HoverMode.trail,s.onHover.mode)}reset(){}}e.TrailMaker=a},6910:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadExternalTrailInteraction=void 0;const n=i(557);e.loadExternalTrailInteraction=async function(t){await t.addInteractor("externalTrail",(t=>new n.TrailMaker(t)))}},8322:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Attractor=void 0;const n=i(7373),o=i(7472);class s extends o.ParticlesInteractorBase{constructor(t){super(t)}interact(t){var e;const i=this.container,o=null!==(e=t.retina.attractDistance)&&void 0!==e?e:i.retina.attractDistance,s=t.getPosition(),a=i.particles.quadTree.queryCircle(s,o);for(const e of a){if(t===e||!e.options.move.attract.enable||e.destroyed||e.spawning)continue;const i=e.getPosition(),{dx:o,dy:a}=(0,n.getDistances)(s,i),r=t.options.move.attract.rotate,l=o/(1e3*r.x),c=a/(1e3*r.y),d=e.size.value/t.size.value,h=1/d;t.velocity.x-=l*d,t.velocity.y-=c*d,e.velocity.x+=l*h,e.velocity.y+=c*h}}isEnabled(t){return t.options.move.attract.enable}reset(){}}e.Attractor=s},643:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadParticlesAttractInteraction=void 0;const n=i(8322);e.loadParticlesAttractInteraction=async function(t){await t.addInteractor("particlesAttract",(t=>new n.Attractor(t)))}},4041:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Collider=void 0;const n=i(6331),o=i(7373),s=i(7472);function a(t,e){(0,o.circleBounce)((0,o.circleBounceDataFromParticle)(t),(0,o.circleBounceDataFromParticle)(e))}class r extends s.ParticlesInteractorBase{constructor(t){super(t)}isEnabled(t){return t.options.collisions.enable}reset(){}interact(t){const e=this.container,i=t.getPosition(),n=t.getRadius(),s=e.particles.quadTree.queryCircle(i,2*n);for(const e of s){if(t===e||!e.options.collisions.enable||t.options.collisions.mode!==e.options.collisions.mode||e.destroyed||e.spawning)continue;const s=e.getPosition();Math.round(i.z)===Math.round(s.z)&&((0,o.getDistance)(i,s)<=n+e.getRadius()&&this.resolveCollision(t,e))}}resolveCollision(t,e){switch(t.options.collisions.mode){case n.CollisionMode.absorb:this.absorb(t,e);break;case n.CollisionMode.bounce:a(t,e);break;case n.CollisionMode.destroy:!function(t,e){t.unbreakable||e.unbreakable||a(t,e),void 0===t.getRadius()&&void 0!==e.getRadius()?t.destroy():void 0!==t.getRadius()&&void 0===e.getRadius()?e.destroy():void 0!==t.getRadius()&&void 0!==e.getRadius()&&(t.getRadius()>=e.getRadius()?e.destroy():t.destroy())}(t,e)}}absorb(t,e){const i=this.container,n=i.fpsLimit/1e3;if(void 0===t.getRadius()&&void 0!==e.getRadius())t.destroy();else if(void 0!==t.getRadius()&&void 0===e.getRadius())e.destroy();else if(void 0!==t.getRadius()&&void 0!==e.getRadius())if(t.getRadius()>=e.getRadius()){const s=(0,o.clamp)(t.getRadius()/e.getRadius(),0,e.getRadius())*n;t.size.value+=s,e.size.value-=s,e.getRadius()<=i.retina.pixelRatio&&(e.size.value=0,e.destroy())}else{const s=(0,o.clamp)(e.getRadius()/t.getRadius(),0,t.getRadius())*n;t.size.value-=s,e.size.value+=s,t.getRadius()<=i.retina.pixelRatio&&(t.size.value=0,t.destroy())}}}e.Collider=r},8989:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadParticlesCollisionsInteraction=void 0;const n=i(4041);e.loadParticlesCollisionsInteraction=async function(t){await t.addInteractor("particlesCollisions",(t=>new n.Collider(t)))}},6385:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.LinkInstance=void 0;const n=i(7373);e.LinkInstance=class{constructor(t){this.container=t}particleCreated(t){t.links=[]}particleDestroyed(t){t.links=[]}drawParticle(t,e){const i=e,n=this.container,o=n.particles,s=e.options;if(i.links.length>0){t.save();const e=i.links.filter((t=>n.particles.getLinkFrequency(i,t.destination)<=s.links.frequency));for(const t of e){const a=t.destination;if(s.links.triangles.enable){const r=e.map((t=>t.destination)),l=a.links.filter((t=>n.particles.getLinkFrequency(a,t.destination)<=a.options.links.frequency&&r.indexOf(t.destination)>=0));if(l.length)for(const e of l){const n=e.destination;o.getTriangleFrequency(i,a,n)>s.links.triangles.frequency||this.drawLinkTriangle(i,t,e)}}t.opacity>0&&n.retina.linksWidth>0&&this.drawLinkLine(i,t)}t.restore()}}drawLinkTriangle(t,e,i){var o;const s=this.container,a=s.actualOptions,r=e.destination,l=i.destination,c=t.options.links.triangles,d=null!==(o=c.opacity)&&void 0!==o?o:(e.opacity+i.opacity)/2;if(d<=0)return;const h=t.getPosition(),u=r.getPosition(),p=l.getPosition();s.canvas.draw((e=>{if((0,n.getDistance)(h,u)>s.retina.linksDistance||(0,n.getDistance)(p,u)>s.retina.linksDistance||(0,n.getDistance)(p,h)>s.retina.linksDistance)return;let i=(0,n.colorToRgb)(c.color);if(!i){const e=t.options.links,o=void 0!==e.id?s.particles.linksColors.get(e.id):s.particles.linksColor;i=(0,n.getLinkColor)(t,r,o)}i&&(0,n.drawLinkTriangle)(e,h,u,p,a.backgroundMask.enable,a.backgroundMask.composite,i,d)}))}drawLinkLine(t,e){const i=this.container,o=i.actualOptions,s=e.destination;let a=e.opacity;const r=t.getPosition(),l=s.getPosition();i.canvas.draw((e=>{var c,d;let h;const u=t.options.twinkle.lines;if(u.enable){const t=u.frequency,e=(0,n.colorToRgb)(u.color);Math.random()<t&&void 0!==e&&(h=e,a=u.opacity)}if(!h){const e=t.options.links,o=void 0!==e.id?i.particles.linksColors.get(e.id):i.particles.linksColor;h=(0,n.getLinkColor)(t,s,o)}if(!h)return;const p=null!==(c=t.retina.linksWidth)&&void 0!==c?c:i.retina.linksWidth,v=null!==(d=t.retina.linksDistance)&&void 0!==d?d:i.retina.linksDistance;(0,n.drawLinkLine)(e,p,r,l,v,i.canvas.size,t.options.links.warp,o.backgroundMask.enable,o.backgroundMask.composite,h,a,t.options.links.shadow)}))}}},9597:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Linker=void 0;const n=i(7373),o=i(7472);function s(t,e,i,o,s){let a=(0,n.getDistance)(t,e);if(!s||a<=i)return a;const r={x:e.x-o.width,y:e.y};if(a=(0,n.getDistance)(t,r),a<=i)return a;const l={x:e.x-o.width,y:e.y-o.height};if(a=(0,n.getDistance)(t,l),a<=i)return a;const c={x:e.x,y:e.y-o.height};return a=(0,n.getDistance)(t,c),a}class a extends o.ParticlesInteractorBase{constructor(t){super(t)}isEnabled(t){return t.options.links.enable}reset(){}interact(t){var e;t.links=[];const i=t.getPosition(),o=this.container,a=o.canvas.size;if(i.x<0||i.y<0||i.x>a.width||i.y>a.height)return;const r=t.options.links,l=r.opacity,c=null!==(e=t.retina.linksDistance)&&void 0!==e?e:o.retina.linksDistance,d=r.warp,h=d?new n.CircleWarp(i.x,i.y,c,a):new n.Circle(i.x,i.y,c),u=o.particles.quadTree.query(h);for(const e of u){const n=e.options.links;if(t===e||!n.enable||r.id!==n.id||e.spawning||e.destroyed||-1!==t.links.map((t=>t.destination)).indexOf(e)||-1!==e.links.map((t=>t.destination)).indexOf(t))continue;const o=e.getPosition();if(o.x<0||o.y<0||o.x>a.width||o.y>a.height)continue;const h=s(i,o,c,a,d&&n.warp);if(h>c)return;const u=(1-h/c)*l;this.setColor(t),t.links.push({destination:e,opacity:u})}}setColor(t){const e=this.container,i=t.options.links;let o=void 0===i.id?e.particles.linksColor:e.particles.linksColors.get(i.id);if(!o){const t=i.color;o=(0,n.getLinkRandomColor)(t,i.blink,i.consent),void 0===i.id?e.particles.linksColor=o:e.particles.linksColors.set(i.id,o)}}}e.Linker=a},884:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadParticlesLinksInteraction=e.loadInteraction=void 0;const n=i(9597),o=i(4152);async function s(t){await t.addInteractor("particlesLinks",(t=>new n.Linker(t)))}e.loadInteraction=s,e.loadParticlesLinksInteraction=async function(t){await s(t),await(0,o.loadPlugin)(t)}},4152:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadPlugin=void 0;const n=i(6385);class o{constructor(){this.id="links"}getPlugin(t){return new n.LinkInstance(t)}needsPlugin(){return!0}loadOptions(){}}e.loadPlugin=async function(t){const e=new o;await t.addPlugin(e)}},192:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.AnimatableColor=void 0;const n=i(3151),o=i(9410);class s extends n.OptionsColor{constructor(){super(),this.animation=new o.HslAnimation}static create(t,e){const i=new s;return i.load(t),void 0!==e&&("string"==typeof e||e instanceof Array?i.load({value:e}):i.load(e)),i}load(t){if(super.load(t),!t)return;const e=t.animation;void 0!==e&&(void 0!==e.enable?this.animation.h.load(e):this.animation.load(t.animation))}}e.AnimatableColor=s},2372:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GradientColorOpacityAnimation=e.GradientAngleAnimation=e.AnimatableGradientColor=e.GradientColorOpacity=e.GradientAngle=e.AnimatableGradient=void 0;const n=i(6331),o=i(192),s=i(7373);e.AnimatableGradient=class{constructor(){this.angle=new a,this.colors=[],this.type=n.GradientType.random}load(t){t&&(this.angle.load(t.angle),void 0!==t.colors&&(this.colors=t.colors.map((t=>{const e=new l;return e.load(t),e}))),void 0!==t.type&&(this.type=t.type))}};class a{constructor(){this.value=0,this.animation=new c,this.direction=n.RotateDirection.clockwise}load(t){t&&(this.animation.load(t.animation),void 0!==t.value&&(this.value=t.value),void 0!==t.direction&&(this.direction=t.direction))}}e.GradientAngle=a;class r{constructor(){this.value=0,this.animation=new d}load(t){t&&(this.animation.load(t.animation),void 0!==t.value&&(this.value=(0,s.setRangeValue)(t.value)))}}e.GradientColorOpacity=r;class l{constructor(){this.stop=0,this.value=new o.AnimatableColor}load(t){t&&(void 0!==t.stop&&(this.stop=t.stop),this.value=o.AnimatableColor.create(this.value,t.value),void 0!==t.opacity&&(this.opacity=new r,"number"==typeof t.opacity?this.opacity.value=t.opacity:this.opacity.load(t.opacity)))}}e.AnimatableGradientColor=l;class c{constructor(){this.count=0,this.enable=!1,this.speed=0,this.sync=!1}load(t){t&&(void 0!==t.count&&(this.count=t.count),void 0!==t.enable&&(this.enable=t.enable),void 0!==t.speed&&(this.speed=t.speed),void 0!==t.sync&&(this.sync=t.sync))}}e.GradientAngleAnimation=c;class d{constructor(){this.count=0,this.enable=!1,this.speed=0,this.sync=!1,this.startValue=n.StartValueType.random}load(t){t&&(void 0!==t.count&&(this.count=t.count),void 0!==t.enable&&(this.enable=t.enable),void 0!==t.speed&&(this.speed=t.speed),void 0!==t.sync&&(this.sync=t.sync),void 0!==t.startValue&&(this.startValue=t.startValue))}}e.GradientColorOpacityAnimation=d},9089:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.AnimationOptions=void 0,e.AnimationOptions=class{constructor(){this.count=0,this.enable=!1,this.speed=1,this.sync=!1}load(t){t&&(void 0!==t.count&&(this.count=t.count),void 0!==t.enable&&(this.enable=t.enable),void 0!==t.speed&&(this.speed=t.speed),void 0!==t.sync&&(this.sync=t.sync))}}},7133:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Background=void 0;const n=i(3151);e.Background=class{constructor(){this.color=new n.OptionsColor,this.color.value="",this.image="",this.position="",this.repeat="",this.size="",this.opacity=1}load(t){void 0!==t&&(void 0!==t.color&&(this.color=n.OptionsColor.create(this.color,t.color)),void 0!==t.image&&(this.image=t.image),void 0!==t.position&&(this.position=t.position),void 0!==t.repeat&&(this.repeat=t.repeat),void 0!==t.size&&(this.size=t.size),void 0!==t.opacity&&(this.opacity=t.opacity))}}},5649:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.BackgroundMask=void 0;const n=i(4065);e.BackgroundMask=class{constructor(){this.composite="destination-out",this.cover=new n.BackgroundMaskCover,this.enable=!1}load(t){if(void 0!==t){if(void 0!==t.composite&&(this.composite=t.composite),void 0!==t.cover){const e=t.cover,i="string"==typeof t.cover?{color:t.cover}:t.cover;this.cover.load(void 0!==e.color?e:{color:i})}void 0!==t.enable&&(this.enable=t.enable)}}}},4065:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.BackgroundMaskCover=void 0;const n=i(3151);e.BackgroundMaskCover=class{constructor(){this.color=new n.OptionsColor,this.opacity=1}load(t){void 0!==t&&(void 0!==t.color&&(this.color=n.OptionsColor.create(this.color,t.color)),void 0!==t.opacity&&(this.opacity=t.opacity))}}},5251:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ColorAnimation=void 0;const n=i(7373);e.ColorAnimation=class{constructor(){this.count=0,this.enable=!1,this.offset=0,this.speed=1,this.sync=!0}load(t){void 0!==t&&(void 0!==t.count&&(this.count=t.count),void 0!==t.enable&&(this.enable=t.enable),void 0!==t.offset&&(this.offset=(0,n.setRangeValue)(t.offset)),void 0!==t.speed&&(this.speed=t.speed),void 0!==t.sync&&(this.sync=t.sync))}}},8119:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.FullScreen=void 0,e.FullScreen=class{constructor(){this.enable=!0,this.zIndex=0}load(t){t&&(void 0!==t.enable&&(this.enable=t.enable),void 0!==t.zIndex&&(this.zIndex=t.zIndex))}}},9410:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.HslAnimation=void 0;const n=i(5251);e.HslAnimation=class{constructor(){this.h=new n.ColorAnimation,this.s=new n.ColorAnimation,this.l=new n.ColorAnimation}load(t){t&&(this.h.load(t.h),this.s.load(t.s),this.l.load(t.l))}}},8247:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ClickEvent=void 0,e.ClickEvent=class{constructor(){this.enable=!1,this.mode=[]}load(t){void 0!==t&&(void 0!==t.enable&&(this.enable=t.enable),void 0!==t.mode&&(this.mode=t.mode))}}},8643:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.DivEvent=void 0;const n=i(6331);e.DivEvent=class{constructor(){this.selectors=[],this.enable=!1,this.mode=[],this.type=n.DivType.circle}get elementId(){return this.ids}set elementId(t){this.ids=t}get el(){return this.elementId}set el(t){this.elementId=t}get ids(){return this.selectors instanceof Array?this.selectors.map((t=>t.replace("#",""))):this.selectors.replace("#","")}set ids(t){this.selectors=t instanceof Array?t.map((t=>`#${t}`)):`#${t}`}load(t){var e,i;if(void 0===t)return;const n=null!==(i=null!==(e=t.ids)&&void 0!==e?e:t.elementId)&&void 0!==i?i:t.el;void 0!==n&&(this.ids=n),void 0!==t.selectors&&(this.selectors=t.selectors),void 0!==t.enable&&(this.enable=t.enable),void 0!==t.mode&&(this.mode=t.mode),void 0!==t.type&&(this.type=t.type)}}},280:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Events=void 0;const n=i(8247),o=i(8643),s=i(406);e.Events=class{constructor(){this.onClick=new n.ClickEvent,this.onDiv=new o.DivEvent,this.onHover=new s.HoverEvent,this.resize=!0}get onclick(){return this.onClick}set onclick(t){this.onClick=t}get ondiv(){return this.onDiv}set ondiv(t){this.onDiv=t}get onhover(){return this.onHover}set onhover(t){this.onHover=t}load(t){var e,i,n;if(void 0===t)return;this.onClick.load(null!==(e=t.onClick)&&void 0!==e?e:t.onclick);const s=null!==(i=t.onDiv)&&void 0!==i?i:t.ondiv;void 0!==s&&(s instanceof Array?this.onDiv=s.map((t=>{const e=new o.DivEvent;return e.load(t),e})):(this.onDiv=new o.DivEvent,this.onDiv.load(s))),this.onHover.load(null!==(n=t.onHover)&&void 0!==n?n:t.onhover),void 0!==t.resize&&(this.resize=t.resize)}}},406:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.HoverEvent=void 0;const n=i(2409);e.HoverEvent=class{constructor(){this.enable=!1,this.mode=[],this.parallax=new n.Parallax}load(t){void 0!==t&&(void 0!==t.enable&&(this.enable=t.enable),void 0!==t.mode&&(this.mode=t.mode),this.parallax.load(t.parallax))}}},2409:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Parallax=void 0,e.Parallax=class{constructor(){this.enable=!1,this.force=2,this.smooth=10}load(t){void 0!==t&&(void 0!==t.enable&&(this.enable=t.enable),void 0!==t.force&&(this.force=t.force),void 0!==t.smooth&&(this.smooth=t.smooth))}}},1482:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Interactivity=void 0;const n=i(6331),o=i(280),s=i(8174);e.Interactivity=class{constructor(){this.detectsOn=n.InteractivityDetect.window,this.events=new o.Events,this.modes=new s.Modes}get detect_on(){return this.detectsOn}set detect_on(t){this.detectsOn=t}load(t){var e,i,o;if(void 0===t)return;const s=null!==(e=t.detectsOn)&&void 0!==e?e:t.detect_on;void 0!==s&&(this.detectsOn=s),this.events.load(t.events),this.modes.load(t.modes),!0===(null===(o=null===(i=t.modes)||void 0===i?void 0:i.slow)||void 0===o?void 0:o.active)&&(this.events.onHover.mode instanceof Array?this.events.onHover.mode.indexOf(n.HoverMode.slow)<0&&this.events.onHover.mode.push(n.HoverMode.slow):this.events.onHover.mode!==n.HoverMode.slow&&(this.events.onHover.mode=[this.events.onHover.mode,n.HoverMode.slow]))}}},9256:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Attract=void 0;const n=i(6331);e.Attract=class{constructor(){this.distance=200,this.duration=.4,this.easing=n.EasingType.easeOutQuad,this.factor=1,this.maxSpeed=50,this.speed=1}load(t){t&&(void 0!==t.distance&&(this.distance=t.distance),void 0!==t.duration&&(this.duration=t.duration),void 0!==t.easing&&(this.easing=t.easing),void 0!==t.factor&&(this.factor=t.factor),void 0!==t.maxSpeed&&(this.maxSpeed=t.maxSpeed),void 0!==t.speed&&(this.speed=t.speed))}}},9953:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Bounce=void 0,e.Bounce=class{constructor(){this.distance=200}load(t){t&&void 0!==t.distance&&(this.distance=t.distance)}}},3397:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Bubble=void 0;const n=i(1334),o=i(5779);class s extends o.BubbleBase{load(t){super.load(t),void 0!==t&&void 0!==t.divs&&(t.divs instanceof Array?this.divs=t.divs.map((t=>{const e=new n.BubbleDiv;return e.load(t),e})):((this.divs instanceof Array||!this.divs)&&(this.divs=new n.BubbleDiv),this.divs.load(t.divs)))}}e.Bubble=s},5779:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.BubbleBase=void 0;const n=i(3151);e.BubbleBase=class{constructor(){this.distance=200,this.duration=.4,this.mix=!1}load(t){void 0!==t&&(void 0!==t.distance&&(this.distance=t.distance),void 0!==t.duration&&(this.duration=t.duration),void 0!==t.mix&&(this.mix=t.mix),void 0!==t.opacity&&(this.opacity=t.opacity),void 0!==t.color&&(t.color instanceof Array?this.color=t.color.map((t=>n.OptionsColor.create(void 0,t))):(this.color instanceof Array&&(this.color=new n.OptionsColor),this.color=n.OptionsColor.create(this.color,t.color))),void 0!==t.size&&(this.size=t.size))}}},1334:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.BubbleDiv=void 0;const n=i(5779);class o extends n.BubbleBase{constructor(){super(),this.selectors=[]}get ids(){return this.selectors instanceof Array?this.selectors.map((t=>t.replace("#",""))):this.selectors.replace("#","")}set ids(t){this.selectors=t instanceof Array?t.map((t=>`#${t}`)):`#${t}`}load(t){super.load(t),void 0!==t&&(void 0!==t.ids&&(this.ids=t.ids),void 0!==t.selectors&&(this.selectors=t.selectors))}}e.BubbleDiv=o},2426:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Connect=void 0;const n=i(9531);e.Connect=class{constructor(){this.distance=80,this.links=new n.ConnectLinks,this.radius=60}get line_linked(){return this.links}set line_linked(t){this.links=t}get lineLinked(){return this.links}set lineLinked(t){this.links=t}load(t){var e,i;void 0!==t&&(void 0!==t.distance&&(this.distance=t.distance),this.links.load(null!==(i=null!==(e=t.links)&&void 0!==e?e:t.lineLinked)&&void 0!==i?i:t.line_linked),void 0!==t.radius&&(this.radius=t.radius))}}},9531:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ConnectLinks=void 0,e.ConnectLinks=class{constructor(){this.opacity=.5}load(t){void 0!==t&&void 0!==t.opacity&&(this.opacity=t.opacity)}}},2095:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Grab=void 0;const n=i(8985);e.Grab=class{constructor(){this.distance=100,this.links=new n.GrabLinks}get line_linked(){return this.links}set line_linked(t){this.links=t}get lineLinked(){return this.links}set lineLinked(t){this.links=t}load(t){var e,i;void 0!==t&&(void 0!==t.distance&&(this.distance=t.distance),this.links.load(null!==(i=null!==(e=t.links)&&void 0!==e?e:t.lineLinked)&&void 0!==i?i:t.line_linked))}}},8985:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GrabLinks=void 0;const n=i(3151);e.GrabLinks=class{constructor(){this.blink=!1,this.consent=!1,this.opacity=1}load(t){void 0!==t&&(void 0!==t.blink&&(this.blink=t.blink),void 0!==t.color&&(this.color=n.OptionsColor.create(this.color,t.color)),void 0!==t.consent&&(this.consent=t.consent),void 0!==t.opacity&&(this.opacity=t.opacity))}}},9867:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Light=void 0;const n=i(5302),o=i(3632);e.Light=class{constructor(){this.area=new n.LightArea,this.shadow=new o.LightShadow}load(t){void 0!==t&&(this.area.load(t.area),this.shadow.load(t.shadow))}}},5302:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.LightArea=void 0;const n=i(3272);e.LightArea=class{constructor(){this.gradient=new n.LightGradient,this.radius=1e3}load(t){void 0!==t&&(this.gradient.load(t.gradient),void 0!==t.radius&&(this.radius=t.radius))}}},3272:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.LightGradient=void 0;const n=i(3151);e.LightGradient=class{constructor(){this.start=new n.OptionsColor,this.stop=new n.OptionsColor,this.start.value="#ffffff",this.stop.value="#000000"}load(t){void 0!==t&&(this.start=n.OptionsColor.create(this.start,t.start),this.stop=n.OptionsColor.create(this.stop,t.stop))}}},3632:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.LightShadow=void 0;const n=i(3151);e.LightShadow=class{constructor(){this.color=new n.OptionsColor,this.color.value="#000000",this.length=2e3}load(t){void 0!==t&&(this.color=n.OptionsColor.create(this.color,t.color),void 0!==t.length&&(this.length=t.length))}}},8174:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Modes=void 0;const n=i(3397),o=i(2426),s=i(2095),a=i(8197),r=i(5691),l=i(3355),c=i(2939),d=i(1802),h=i(9256),u=i(9867),p=i(9953);e.Modes=class{constructor(){this.attract=new h.Attract,this.bounce=new p.Bounce,this.bubble=new n.Bubble,this.connect=new o.Connect,this.grab=new s.Grab,this.light=new u.Light,this.push=new r.Push,this.remove=new a.Remove,this.repulse=new l.Repulse,this.slow=new c.Slow,this.trail=new d.Trail}load(t){void 0!==t&&(this.attract.load(t.attract),this.bubble.load(t.bubble),this.connect.load(t.connect),this.grab.load(t.grab),this.light.load(t.light),this.push.load(t.push),this.remove.load(t.remove),this.repulse.load(t.repulse),this.slow.load(t.slow),this.trail.load(t.trail))}}},5691:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Push=void 0,e.Push=class{constructor(){this.default=!0,this.groups=[],this.quantity=4}get particles_nb(){return this.quantity}set particles_nb(t){this.quantity=t}load(t){var e;if(void 0===t)return;void 0!==t.default&&(this.default=t.default),void 0!==t.groups&&(this.groups=t.groups.map((t=>t))),this.groups.length||(this.default=!0);const i=null!==(e=t.quantity)&&void 0!==e?e:t.particles_nb;void 0!==i&&(this.quantity=i)}}},8197:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Remove=void 0,e.Remove=class{constructor(){this.quantity=2}get particles_nb(){return this.quantity}set particles_nb(t){this.quantity=t}load(t){var e;if(void 0===t)return;const i=null!==(e=t.quantity)&&void 0!==e?e:t.particles_nb;void 0!==i&&(this.quantity=i)}}},3355:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Repulse=void 0;const n=i(5879),o=i(5267);class s extends o.RepulseBase{load(t){super.load(t),void 0!==(null==t?void 0:t.divs)&&(t.divs instanceof Array?this.divs=t.divs.map((t=>{const e=new n.RepulseDiv;return e.load(t),e})):((this.divs instanceof Array||!this.divs)&&(this.divs=new n.RepulseDiv),this.divs.load(t.divs)))}}e.Repulse=s},5267:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.RepulseBase=void 0;const n=i(6331);e.RepulseBase=class{constructor(){this.distance=200,this.duration=.4,this.factor=100,this.speed=1,this.maxSpeed=50,this.easing=n.EasingType.easeOutQuad}load(t){t&&(void 0!==t.distance&&(this.distance=t.distance),void 0!==t.duration&&(this.duration=t.duration),void 0!==t.easing&&(this.easing=t.easing),void 0!==t.factor&&(this.factor=t.factor),void 0!==t.speed&&(this.speed=t.speed),void 0!==t.maxSpeed&&(this.maxSpeed=t.maxSpeed))}}},5879:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.RepulseDiv=void 0;const n=i(5267);class o extends n.RepulseBase{constructor(){super(),this.selectors=[]}get ids(){return this.selectors instanceof Array?this.selectors.map((t=>t.replace("#",""))):this.selectors.replace("#","")}set ids(t){this.selectors=t instanceof Array?t.map((()=>`#${t}`)):`#${t}`}load(t){super.load(t),void 0!==t&&(void 0!==t.ids&&(this.ids=t.ids),void 0!==t.selectors&&(this.selectors=t.selectors))}}e.RepulseDiv=o},2939:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Slow=void 0,e.Slow=class{constructor(){this.factor=3,this.radius=200}get active(){return!1}set active(t){}load(t){void 0!==t&&(void 0!==t.factor&&(this.factor=t.factor),void 0!==t.radius&&(this.radius=t.radius))}}},1802:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Trail=void 0;const n=i(7373);e.Trail=class{constructor(){this.delay=1,this.pauseOnStop=!1,this.quantity=1}load(t){void 0!==t&&(void 0!==t.delay&&(this.delay=t.delay),void 0!==t.quantity&&(this.quantity=t.quantity),void 0!==t.particles&&(this.particles=(0,n.deepExtend)({},t.particles)),void 0!==t.pauseOnStop&&(this.pauseOnStop=t.pauseOnStop))}}},8758:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ManualParticle=void 0;const n=i(7373);e.ManualParticle=class{load(t){var e,i;t&&(void 0!==t.position&&(this.position={x:null!==(e=t.position.x)&&void 0!==e?e:50,y:null!==(i=t.position.y)&&void 0!==i?i:50}),void 0!==t.options&&(this.options=(0,n.deepExtend)({},t.options)))}}},6218:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Motion=void 0;const n=i(420);e.Motion=class{constructor(){this.disable=!1,this.reduce=new n.MotionReduce}load(t){t&&(void 0!==t.disable&&(this.disable=t.disable),this.reduce.load(t.reduce))}}},420:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.MotionReduce=void 0,e.MotionReduce=class{constructor(){this.factor=4,this.value=!0}load(t){t&&(void 0!==t.factor&&(this.factor=t.factor),void 0!==t.value&&(this.value=t.value))}}},6989:function(t,e,i){var n,o,s=this&&this.__classPrivateFieldGet||function(t,e,i,n){if("a"===i&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===i?n:"a"===i?n.call(t):n?n.value:e.get(t)};Object.defineProperty(e,"__esModule",{value:!0}),e.Options=void 0;const a=i(1482),r=i(8029),l=i(5649),c=i(7133),d=i(7373),h=i(7851),u=i(6331),p=i(8119),v=i(6218),y=i(8758),g=i(7848);e.Options=class{constructor(){n.add(this),this.autoPlay=!0,this.background=new c.Background,this.backgroundMask=new l.BackgroundMask,this.fullScreen=new p.FullScreen,this.detectRetina=!0,this.duration=0,this.fpsLimit=60,this.interactivity=new a.Interactivity,this.manualParticles=[],this.motion=new v.Motion,this.particles=new r.ParticlesOptions,this.pauseOnBlur=!0,this.pauseOnOutsideViewport=!0,this.responsive=[],this.themes=[],this.zLayers=100}get fps_limit(){return this.fpsLimit}set fps_limit(t){this.fpsLimit=t}get retina_detect(){return this.detectRetina}set retina_detect(t){this.detectRetina=t}get backgroundMode(){return this.fullScreen}set backgroundMode(t){this.fullScreen.load(t)}load(t){var e,i,a,r,l;if(void 0===t)return;if(void 0!==t.preset)if(t.preset instanceof Array)for(const e of t.preset)this.importPreset(e);else this.importPreset(t.preset);void 0!==t.autoPlay&&(this.autoPlay=t.autoPlay);const c=null!==(e=t.detectRetina)&&void 0!==e?e:t.retina_detect;void 0!==c&&(this.detectRetina=c),void 0!==t.duration&&(this.duration=t.duration);const p=null!==(i=t.fpsLimit)&&void 0!==i?i:t.fps_limit;void 0!==p&&(this.fpsLimit=p),void 0!==t.pauseOnBlur&&(this.pauseOnBlur=t.pauseOnBlur),void 0!==t.pauseOnOutsideViewport&&(this.pauseOnOutsideViewport=t.pauseOnOutsideViewport),void 0!==t.zLayers&&(this.zLayers=t.zLayers),this.background.load(t.background);const v=null!==(a=t.fullScreen)&&void 0!==a?a:t.backgroundMode;if("boolean"==typeof v?this.fullScreen.enable=v:this.fullScreen.load(v),this.backgroundMask.load(t.backgroundMask),this.interactivity.load(t.interactivity),void 0!==t.manualParticles&&(this.manualParticles=t.manualParticles.map((t=>{const e=new y.ManualParticle;return e.load(t),e}))),this.motion.load(t.motion),this.particles.load(t.particles),d.Plugins.loadOptions(this,t),void 0!==t.responsive)for(const e of t.responsive){const t=new g.Responsive;t.load(e),this.responsive.push(t)}if(this.responsive.sort(((t,e)=>t.maxWidth-e.maxWidth)),void 0!==t.themes)for(const e of t.themes){const t=new h.Theme;t.load(e),this.themes.push(t)}this.defaultDarkTheme=null===(r=s(this,n,"m",o).call(this,u.ThemeMode.dark))||void 0===r?void 0:r.name,this.defaultLightTheme=null===(l=s(this,n,"m",o).call(this,u.ThemeMode.light))||void 0===l?void 0:l.name}setTheme(t){if(t){const e=this.themes.find((e=>e.name===t));e&&this.load(e.options)}else{const t="undefined"!=typeof matchMedia&&matchMedia("(prefers-color-scheme: dark)"),e=t&&t.matches,i=s(this,n,"m",o).call(this,e?u.ThemeMode.dark:u.ThemeMode.light);i&&this.load(i.options)}}setResponsive(t,e,i){this.load(i);const n=this.responsive.find((i=>i.mode===u.ResponsiveMode.screen&&screen?i.maxWidth*e>screen.availWidth:i.maxWidth*e>t));return this.load(null==n?void 0:n.options),null==n?void 0:n.maxWidth}importPreset(t){this.load(d.Plugins.getPreset(t))}},n=new WeakSet,o=function(t){var e;return null!==(e=this.themes.find((e=>e.default.value&&e.default.mode===t)))&&void 0!==e?e:this.themes.find((t=>t.default.value&&t.default.mode===u.ThemeMode.any))}},3151:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OptionsColor=void 0;class i{constructor(){this.value="#fff"}static create(t,e){const n=new i;return n.load(t),void 0!==e&&("string"==typeof e||e instanceof Array?n.load({value:e}):n.load(e)),n}load(t){void 0!==(null==t?void 0:t.value)&&(this.value=t.value)}}e.OptionsColor=i},2203:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Bounce=void 0;const n=i(3294);e.Bounce=class{constructor(){this.horizontal=new n.BounceFactor,this.vertical=new n.BounceFactor}load(t){t&&(this.horizontal.load(t.horizontal),this.vertical.load(t.vertical))}}},3294:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.BounceFactor=void 0;const n=i(5707);class o extends n.ValueWithRandom{constructor(){super(),this.random.minimumValue=.1,this.value=1}}e.BounceFactor=o},1958:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Collisions=void 0;const n=i(6331),o=i(2203),s=i(114);e.Collisions=class{constructor(){this.bounce=new o.Bounce,this.enable=!1,this.mode=n.CollisionMode.bounce,this.overlap=new s.CollisionsOverlap}load(t){void 0!==t&&(this.bounce.load(t.bounce),void 0!==t.enable&&(this.enable=t.enable),void 0!==t.mode&&(this.mode=t.mode),this.overlap.load(t.overlap))}}},114:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.CollisionsOverlap=void 0,e.CollisionsOverlap=class{constructor(){this.enable=!0,this.retries=0}load(t){t&&(void 0!==t.enable&&(this.enable=t.enable),void 0!==t.retries&&(this.retries=t.retries))}}},8455:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Destroy=void 0;const n=i(6331),o=i(4499);e.Destroy=class{constructor(){this.mode=n.DestroyMode.none,this.split=new o.Split}load(t){t&&(void 0!==t.mode&&(this.mode=t.mode),this.split.load(t.split))}}},4499:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Split=void 0;const n=i(8762),o=i(4250),s=i(7373);e.Split=class{constructor(){this.count=1,this.factor=new n.SplitFactor,this.rate=new o.SplitRate,this.sizeOffset=!0}load(t){t&&(void 0!==t.count&&(this.count=t.count),this.factor.load(t.factor),this.rate.load(t.rate),void 0!==t.particles&&(this.particles=(0,s.deepExtend)({},t.particles)),void 0!==t.sizeOffset&&(this.sizeOffset=t.sizeOffset))}}},8762:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SplitFactor=void 0;const n=i(5707);class o extends n.ValueWithRandom{constructor(){super(),this.value=3}}e.SplitFactor=o},4250:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SplitRate=void 0;const n=i(5707);class o extends n.ValueWithRandom{constructor(){super(),this.value={min:4,max:9}}}e.SplitRate=o},2165:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Life=void 0;const n=i(2121),o=i(3878);e.Life=class{constructor(){this.count=0,this.delay=new n.LifeDelay,this.duration=new o.LifeDuration}load(t){void 0!==t&&(void 0!==t.count&&(this.count=t.count),this.delay.load(t.delay),this.duration.load(t.duration))}}},2121:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.LifeDelay=void 0;const n=i(5707);class o extends n.ValueWithRandom{constructor(){super(),this.sync=!1}load(t){t&&(super.load(t),void 0!==t.sync&&(this.sync=t.sync))}}e.LifeDelay=o},3878:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.LifeDuration=void 0;const n=i(5707);class o extends n.ValueWithRandom{constructor(){super(),this.random.minimumValue=1e-4,this.sync=!1}load(t){void 0!==t&&(super.load(t),void 0!==t.sync&&(this.sync=t.sync))}}e.LifeDuration=o},8854:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Links=void 0;const n=i(9058),o=i(6836),s=i(3151);e.Links=class{constructor(){this.blink=!1,this.color=new s.OptionsColor,this.consent=!1,this.distance=100,this.enable=!1,this.frequency=1,this.opacity=1,this.shadow=new n.LinksShadow,this.triangles=new o.LinksTriangle,this.width=1,this.warp=!1}load(t){void 0!==t&&(void 0!==t.id&&(this.id=t.id),void 0!==t.blink&&(this.blink=t.blink),this.color=s.OptionsColor.create(this.color,t.color),void 0!==t.consent&&(this.consent=t.consent),void 0!==t.distance&&(this.distance=t.distance),void 0!==t.enable&&(this.enable=t.enable),void 0!==t.frequency&&(this.frequency=t.frequency),void 0!==t.opacity&&(this.opacity=t.opacity),this.shadow.load(t.shadow),this.triangles.load(t.triangles),void 0!==t.width&&(this.width=t.width),void 0!==t.warp&&(this.warp=t.warp))}}},9058:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.LinksShadow=void 0;const n=i(3151);e.LinksShadow=class{constructor(){this.blur=5,this.color=new n.OptionsColor,this.enable=!1,this.color.value="#00ff00"}load(t){void 0!==t&&(void 0!==t.blur&&(this.blur=t.blur),this.color=n.OptionsColor.create(this.color,t.color),void 0!==t.enable&&(this.enable=t.enable))}}},6836:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.LinksTriangle=void 0;const n=i(3151);e.LinksTriangle=class{constructor(){this.enable=!1,this.frequency=1}load(t){void 0!==t&&(void 0!==t.color&&(this.color=n.OptionsColor.create(this.color,t.color)),void 0!==t.enable&&(this.enable=t.enable),void 0!==t.frequency&&(this.frequency=t.frequency),void 0!==t.opacity&&(this.opacity=t.opacity))}}},8027:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Attract=void 0,e.Attract=class{constructor(){this.distance=200,this.enable=!1,this.rotate={x:3e3,y:3e3}}get rotateX(){return this.rotate.x}set rotateX(t){this.rotate.x=t}get rotateY(){return this.rotate.y}set rotateY(t){this.rotate.y=t}load(t){var e,i,n,o;if(!t)return;void 0!==t.distance&&(this.distance=t.distance),void 0!==t.enable&&(this.enable=t.enable);const s=null!==(i=null===(e=t.rotate)||void 0===e?void 0:e.x)&&void 0!==i?i:t.rotateX;void 0!==s&&(this.rotate.x=s);const a=null!==(o=null===(n=t.rotate)||void 0===n?void 0:n.y)&&void 0!==o?o:t.rotateY;void 0!==a&&(this.rotate.y=a)}}},95:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Move=void 0;const n=i(8027),o=i(6331),s=i(9045),a=i(762),r=i(2159),l=i(5640),c=i(1728),d=i(7373),h=i(2027);e.Move=class{constructor(){this.angle=new r.MoveAngle,this.attract=new n.Attract,this.decay=0,this.distance={},this.direction=o.MoveDirection.none,this.drift=0,this.enable=!1,this.gravity=new l.MoveGravity,this.path=new a.Path,this.outModes=new c.OutModes,this.random=!1,this.size=!1,this.speed=2,this.spin=new h.Spin,this.straight=!1,this.trail=new s.Trail,this.vibrate=!1,this.warp=!1}get collisions(){return!1}set collisions(t){}get bounce(){return this.collisions}set bounce(t){this.collisions=t}get out_mode(){return this.outMode}set out_mode(t){this.outMode=t}get outMode(){return this.outModes.default}set outMode(t){this.outModes.default=t}get noise(){return this.path}set noise(t){this.path=t}load(t){var e,i,n;if(void 0===t)return;void 0!==t.angle&&("number"==typeof t.angle?this.angle.value=t.angle:this.angle.load(t.angle)),this.attract.load(t.attract),void 0!==t.decay&&(this.decay=t.decay),void 0!==t.direction&&(this.direction=t.direction),void 0!==t.distance&&(this.distance="number"==typeof t.distance?{horizontal:t.distance,vertical:t.distance}:(0,d.deepExtend)({},t.distance)),void 0!==t.drift&&(this.drift=(0,d.setRangeValue)(t.drift)),void 0!==t.enable&&(this.enable=t.enable),this.gravity.load(t.gravity);const o=null!==(e=t.outMode)&&void 0!==e?e:t.out_mode;void 0===t.outModes&&void 0===o||("string"==typeof t.outModes||void 0===t.outModes&&void 0!==o?this.outModes.load({default:null!==(i=t.outModes)&&void 0!==i?i:o}):this.outModes.load(t.outModes)),this.path.load(null!==(n=t.path)&&void 0!==n?n:t.noise),void 0!==t.random&&(this.random=t.random),void 0!==t.size&&(this.size=t.size),void 0!==t.speed&&(this.speed=(0,d.setRangeValue)(t.speed)),this.spin.load(t.spin),void 0!==t.straight&&(this.straight=t.straight),this.trail.load(t.trail),void 0!==t.vibrate&&(this.vibrate=t.vibrate),void 0!==t.warp&&(this.warp=t.warp)}}},2159:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.MoveAngle=void 0,e.MoveAngle=class{constructor(){this.offset=0,this.value=90}load(t){void 0!==t&&(void 0!==t.offset&&(this.offset=t.offset),void 0!==t.value&&(this.value=t.value))}}},5640:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.MoveGravity=void 0,e.MoveGravity=class{constructor(){this.acceleration=9.81,this.enable=!1,this.inverse=!1,this.maxSpeed=50}load(t){t&&(void 0!==t.acceleration&&(this.acceleration=t.acceleration),void 0!==t.enable&&(this.enable=t.enable),void 0!==t.inverse&&(this.inverse=t.inverse),void 0!==t.maxSpeed&&(this.maxSpeed=t.maxSpeed))}}},1728:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OutModes=void 0;const n=i(551);e.OutModes=class{constructor(){this.default=n.OutMode.out}load(t){var e,i,n,o;t&&(void 0!==t.default&&(this.default=t.default),this.bottom=null!==(e=t.bottom)&&void 0!==e?e:t.default,this.left=null!==(i=t.left)&&void 0!==i?i:t.default,this.right=null!==(n=t.right)&&void 0!==n?n:t.default,this.top=null!==(o=t.top)&&void 0!==o?o:t.default)}}},762:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Path=void 0;const n=i(4918),o=i(7373);e.Path=class{constructor(){this.clamp=!0,this.delay=new n.PathDelay,this.enable=!1,this.options={}}load(t){void 0!==t&&(void 0!==t.clamp&&(this.clamp=t.clamp),this.delay.load(t.delay),void 0!==t.enable&&(this.enable=t.enable),this.generator=t.generator,t.options&&(this.options=(0,o.deepExtend)(this.options,t.options)))}}},4918:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.PathDelay=void 0;const n=i(5707);class o extends n.ValueWithRandom{constructor(){super()}}e.PathDelay=o},2027:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Spin=void 0;const n=i(7373);e.Spin=class{constructor(){this.acceleration=0,this.enable=!1}load(t){t&&(void 0!==t.acceleration&&(this.acceleration=(0,n.setRangeValue)(t.acceleration)),void 0!==t.enable&&(this.enable=t.enable),this.position=t.position?(0,n.deepExtend)({},t.position):void 0)}}},9045:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Trail=void 0;const n=i(3151);e.Trail=class{constructor(){this.enable=!1,this.length=10,this.fillColor=new n.OptionsColor,this.fillColor.value="#000000"}load(t){void 0!==t&&(void 0!==t.enable&&(this.enable=t.enable),this.fillColor=n.OptionsColor.create(this.fillColor,t.fillColor),void 0!==t.length&&(this.length=t.length))}}},8711:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Density=void 0,e.Density=class{constructor(){this.enable=!1,this.area=800,this.factor=1e3}get value_area(){return this.area}set value_area(t){this.area=t}load(t){var e;if(void 0===t)return;void 0!==t.enable&&(this.enable=t.enable);const i=null!==(e=t.area)&&void 0!==e?e:t.value_area;void 0!==i&&(this.area=i),void 0!==t.factor&&(this.factor=t.factor)}}},2338:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ParticlesNumber=void 0;const n=i(8711);e.ParticlesNumber=class{constructor(){this.density=new n.Density,this.limit=0,this.value=100}get max(){return this.limit}set max(t){this.limit=t}load(t){var e;if(void 0===t)return;this.density.load(t.density);const i=null!==(e=t.limit)&&void 0!==e?e:t.max;void 0!==i&&(this.limit=i),void 0!==t.value&&(this.value=t.value)}}},3748:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Opacity=void 0;const n=i(9257),o=i(5707),s=i(7373);class a extends o.ValueWithRandom{constructor(){super(),this.animation=new n.OpacityAnimation,this.random.minimumValue=.1,this.value=1}get anim(){return this.animation}set anim(t){this.animation=t}load(t){var e;if(!t)return;super.load(t);const i=null!==(e=t.animation)&&void 0!==e?e:t.anim;void 0!==i&&(this.animation.load(i),this.value=(0,s.setRangeValue)(this.value,this.animation.enable?this.animation.minimumValue:void 0))}}e.Opacity=a},9257:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OpacityAnimation=void 0;const n=i(6331),o=i(9089);class s extends o.AnimationOptions{constructor(){super(),this.destroy=n.DestroyType.none,this.enable=!1,this.speed=2,this.startValue=n.StartValueType.random,this.sync=!1}get opacity_min(){return this.minimumValue}set opacity_min(t){this.minimumValue=t}load(t){var e;void 0!==t&&(super.load(t),void 0!==t.destroy&&(this.destroy=t.destroy),void 0!==t.enable&&(this.enable=t.enable),this.minimumValue=null!==(e=t.minimumValue)&&void 0!==e?e:t.opacity_min,void 0!==t.speed&&(this.speed=t.speed),void 0!==t.startValue&&(this.startValue=t.startValue),void 0!==t.sync&&(this.sync=t.sync))}}e.OpacityAnimation=s},4145:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Orbit=void 0;const n=i(2301),o=i(3151),s=i(9089);e.Orbit=class{constructor(){this.animation=new s.AnimationOptions,this.enable=!1,this.opacity=1,this.rotation=new n.OrbitRotation,this.width=1}load(t){void 0!==t&&(this.animation.load(t.animation),this.rotation.load(t.rotation),void 0!==t.enable&&(this.enable=t.enable),void 0!==t.opacity&&(this.opacity=t.opacity),void 0!==t.width&&(this.width=t.width),void 0!==t.radius&&(this.radius=t.radius),void 0!==t.color&&(this.color=o.OptionsColor.create(this.color,t.color)))}}},2301:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OrbitRotation=void 0;const n=i(5707);class o extends n.ValueWithRandom{constructor(){super(),this.value=45,this.random.enable=!1,this.random.minimumValue=0}load(t){void 0!==t&&super.load(t)}}e.OrbitRotation=o},8029:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ParticlesOptions=void 0;const n=i(8854),o=i(95),s=i(2338),a=i(3748),r=i(9014),l=i(8863),c=i(3954),d=i(991),h=i(3111),u=i(1958),p=i(2745),v=i(192),y=i(2165),g=i(2203),f=i(8455),m=i(1610),b=i(1749),w=i(1750),A=i(753),S=i(7373),_=i(4145),P=i(6575),C=i(2372);e.ParticlesOptions=class{constructor(){this.bounce=new g.Bounce,this.collisions=new u.Collisions,this.color=new v.AnimatableColor,this.destroy=new f.Destroy,this.gradient=[],this.groups={},this.life=new y.Life,this.links=new n.Links,this.move=new o.Move,this.number=new s.ParticlesNumber,this.opacity=new a.Opacity,this.orbit=new _.Orbit,this.reduceDuplicates=!1,this.repulse=new P.Repulse,this.roll=new w.Roll,this.rotate=new c.Rotate,this.shadow=new d.Shadow,this.shape=new r.Shape,this.size=new l.Size,this.stroke=new h.Stroke,this.tilt=new b.Tilt,this.twinkle=new p.Twinkle,this.wobble=new m.Wobble,this.zIndex=new A.ZIndex}get line_linked(){return this.links}set line_linked(t){this.links=t}get lineLinked(){return this.links}set lineLinked(t){this.links=t}load(t){var e,i,n,o,s,a,r,l;if(void 0===t)return;this.bounce.load(t.bounce),this.color.load(v.AnimatableColor.create(this.color,t.color)),this.destroy.load(t.destroy),this.life.load(t.life);const c=null!==(i=null!==(e=t.links)&&void 0!==e?e:t.lineLinked)&&void 0!==i?i:t.line_linked;if(void 0!==c&&this.links.load(c),void 0!==t.groups)for(const e in t.groups){const i=t.groups[e];void 0!==i&&(this.groups[e]=(0,S.deepExtend)(null!==(n=this.groups[e])&&void 0!==n?n:{},i))}this.move.load(t.move),this.number.load(t.number),this.opacity.load(t.opacity),this.orbit.load(t.orbit),void 0!==t.reduceDuplicates&&(this.reduceDuplicates=t.reduceDuplicates),this.repulse.load(t.repulse),this.roll.load(t.roll),this.rotate.load(t.rotate),this.shape.load(t.shape),this.size.load(t.size),this.shadow.load(t.shadow),this.tilt.load(t.tilt),this.twinkle.load(t.twinkle),this.wobble.load(t.wobble),this.zIndex.load(t.zIndex);const d=null!==(s=null===(o=t.move)||void 0===o?void 0:o.collisions)&&void 0!==s?s:null===(a=t.move)||void 0===a?void 0:a.bounce;void 0!==d&&(this.collisions.enable=d),this.collisions.load(t.collisions);const u=null!==(r=t.stroke)&&void 0!==r?r:null===(l=t.shape)||void 0===l?void 0:l.stroke;u&&(u instanceof Array?this.stroke=u.map((t=>{const e=new h.Stroke;return e.load(t),e})):(this.stroke instanceof Array&&(this.stroke=new h.Stroke),this.stroke.load(u)));const p=t.gradient;p&&(p instanceof Array?this.gradient=p.map((t=>{const e=new C.AnimatableGradient;return e.load(t),e})):(this.gradient instanceof Array&&(this.gradient=new C.AnimatableGradient),this.gradient.load(p)))}}},6575:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Repulse=void 0;const n=i(5707);class o extends n.ValueWithRandom{constructor(){super(),this.enabled=!1,this.distance=1,this.duration=1,this.factor=1,this.speed=1}load(t){super.load(t),t&&(void 0!==t.enabled&&(this.enabled=t.enabled),void 0!==t.distance&&(this.distance=t.distance),void 0!==t.duration&&(this.duration=t.duration),void 0!==t.factor&&(this.factor=t.factor),void 0!==t.speed&&(this.speed=t.speed))}}e.Repulse=o},1750:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Roll=void 0;const n=i(3151),o=i(1372),s=i(7373),a=i(6331);e.Roll=class{constructor(){this.darken=new o.RollLight,this.enable=!1,this.enlighten=new o.RollLight,this.mode=a.RollMode.vertical,this.speed=25}load(t){t&&(void 0!==t.backColor&&(this.backColor=n.OptionsColor.create(this.backColor,t.backColor)),this.darken.load(t.darken),void 0!==t.enable&&(this.enable=t.enable),this.enlighten.load(t.enlighten),void 0!==t.mode&&(this.mode=t.mode),void 0!==t.speed&&(this.speed=(0,s.setRangeValue)(t.speed)))}}},1372:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.RollLight=void 0,e.RollLight=class{constructor(){this.enable=!1,this.value=0}load(t){t&&(void 0!==t.enable&&(this.enable=t.enable),void 0!==t.value&&(this.value=t.value))}}},3954:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Rotate=void 0;const n=i(8946),o=i(6331),s=i(5707);class a extends s.ValueWithRandom{constructor(){super(),this.animation=new n.RotateAnimation,this.direction=o.RotateDirection.clockwise,this.path=!1,this.value=0}load(t){t&&(super.load(t),void 0!==t.direction&&(this.direction=t.direction),this.animation.load(t.animation),void 0!==t.path&&(this.path=t.path))}}e.Rotate=a},8946:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.RotateAnimation=void 0,e.RotateAnimation=class{constructor(){this.enable=!1,this.speed=0,this.sync=!1}load(t){void 0!==t&&(void 0!==t.enable&&(this.enable=t.enable),void 0!==t.speed&&(this.speed=t.speed),void 0!==t.sync&&(this.sync=t.sync))}}},991:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Shadow=void 0;const n=i(3151);e.Shadow=class{constructor(){this.blur=0,this.color=new n.OptionsColor,this.enable=!1,this.offset={x:0,y:0},this.color.value="#000000"}load(t){void 0!==t&&(void 0!==t.blur&&(this.blur=t.blur),this.color=n.OptionsColor.create(this.color,t.color),void 0!==t.enable&&(this.enable=t.enable),void 0!==t.offset&&(void 0!==t.offset.x&&(this.offset.x=t.offset.x),void 0!==t.offset.y&&(this.offset.y=t.offset.y)))}}},9014:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Shape=void 0;const n=i(6331),o=i(7373);e.Shape=class{constructor(){this.options={},this.type=n.ShapeType.circle}get image(){var t;return null!==(t=this.options[n.ShapeType.image])&&void 0!==t?t:this.options[n.ShapeType.images]}set image(t){this.options[n.ShapeType.image]=t,this.options[n.ShapeType.images]=t}get custom(){return this.options}set custom(t){this.options=t}get images(){return this.image}set images(t){this.image=t}get stroke(){return[]}set stroke(t){}get character(){var t;return null!==(t=this.options[n.ShapeType.character])&&void 0!==t?t:this.options[n.ShapeType.char]}set character(t){this.options[n.ShapeType.character]=t,this.options[n.ShapeType.char]=t}get polygon(){var t;return null!==(t=this.options[n.ShapeType.polygon])&&void 0!==t?t:this.options[n.ShapeType.star]}set polygon(t){this.options[n.ShapeType.polygon]=t,this.options[n.ShapeType.star]=t}load(t){var e,i,s;if(void 0===t)return;const a=null!==(e=t.options)&&void 0!==e?e:t.custom;if(void 0!==a)for(const t in a){const e=a[t];void 0!==e&&(this.options[t]=(0,o.deepExtend)(null!==(i=this.options[t])&&void 0!==i?i:{},e))}this.loadShape(t.character,n.ShapeType.character,n.ShapeType.char,!0),this.loadShape(t.polygon,n.ShapeType.polygon,n.ShapeType.star,!1),this.loadShape(null!==(s=t.image)&&void 0!==s?s:t.images,n.ShapeType.image,n.ShapeType.images,!0),void 0!==t.type&&(this.type=t.type)}loadShape(t,e,i,n){var s,a,r,l;void 0!==t&&(t instanceof Array?(this.options[e]instanceof Array||(this.options[e]=[],this.options[i]&&!n||(this.options[i]=[])),this.options[e]=(0,o.deepExtend)(null!==(s=this.options[e])&&void 0!==s?s:[],t),this.options[i]&&!n||(this.options[i]=(0,o.deepExtend)(null!==(a=this.options[i])&&void 0!==a?a:[],t))):(this.options[e]instanceof Array&&(this.options[e]={},this.options[i]&&!n||(this.options[i]={})),this.options[e]=(0,o.deepExtend)(null!==(r=this.options[e])&&void 0!==r?r:{},t),this.options[i]&&!n||(this.options[i]=(0,o.deepExtend)(null!==(l=this.options[i])&&void 0!==l?l:{},t))))}}},8863:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Size=void 0;const n=i(5816),o=i(5707),s=i(7373);class a extends o.ValueWithRandom{constructor(){super(),this.animation=new n.SizeAnimation,this.random.minimumValue=1,this.value=3}get anim(){return this.animation}set anim(t){this.animation=t}load(t){var e;if(!t)return;super.load(t);const i=null!==(e=t.animation)&&void 0!==e?e:t.anim;void 0!==i&&(this.animation.load(i),this.value=(0,s.setRangeValue)(this.value,this.animation.enable?this.animation.minimumValue:void 0))}}e.Size=a},5816:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SizeAnimation=void 0;const n=i(6331),o=i(9089);class s extends o.AnimationOptions{constructor(){super(),this.destroy=n.DestroyType.none,this.enable=!1,this.speed=5,this.startValue=n.StartValueType.random,this.sync=!1}get size_min(){return this.minimumValue}set size_min(t){this.minimumValue=t}load(t){var e;void 0!==t&&(super.load(t),void 0!==t.destroy&&(this.destroy=t.destroy),void 0!==t.enable&&(this.enable=t.enable),this.minimumValue=null!==(e=t.minimumValue)&&void 0!==e?e:t.size_min,void 0!==t.speed&&(this.speed=t.speed),void 0!==t.startValue&&(this.startValue=t.startValue),void 0!==t.sync&&(this.sync=t.sync))}}e.SizeAnimation=s},3111:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Stroke=void 0;const n=i(192);e.Stroke=class{constructor(){this.width=0}load(t){void 0!==t&&(void 0!==t.color&&(this.color=n.AnimatableColor.create(this.color,t.color)),void 0!==t.width&&(this.width=t.width),void 0!==t.opacity&&(this.opacity=t.opacity))}}},1749:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Tilt=void 0;const n=i(994),o=i(6331),s=i(5707);class a extends s.ValueWithRandom{constructor(){super(),this.animation=new n.TiltAnimation,this.direction=o.TiltDirection.clockwise,this.enable=!1,this.value=0}load(t){t&&(super.load(t),this.animation.load(t.animation),void 0!==t.direction&&(this.direction=t.direction),void 0!==t.enable&&(this.enable=t.enable))}}e.Tilt=a},994:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.TiltAnimation=void 0,e.TiltAnimation=class{constructor(){this.enable=!1,this.speed=0,this.sync=!1}load(t){void 0!==t&&(void 0!==t.enable&&(this.enable=t.enable),void 0!==t.speed&&(this.speed=t.speed),void 0!==t.sync&&(this.sync=t.sync))}}},2745:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Twinkle=void 0;const n=i(4767);e.Twinkle=class{constructor(){this.lines=new n.TwinkleValues,this.particles=new n.TwinkleValues}load(t){void 0!==t&&(this.lines.load(t.lines),this.particles.load(t.particles))}}},4767:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.TwinkleValues=void 0;const n=i(3151);e.TwinkleValues=class{constructor(){this.enable=!1,this.frequency=.05,this.opacity=1}load(t){void 0!==t&&(void 0!==t.color&&(this.color=n.OptionsColor.create(this.color,t.color)),void 0!==t.enable&&(this.enable=t.enable),void 0!==t.frequency&&(this.frequency=t.frequency),void 0!==t.opacity&&(this.opacity=t.opacity))}}},1610:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Wobble=void 0;const n=i(7373);e.Wobble=class{constructor(){this.distance=5,this.enable=!1,this.speed=50}load(t){t&&(void 0!==t.distance&&(this.distance=(0,n.setRangeValue)(t.distance)),void 0!==t.enable&&(this.enable=t.enable),void 0!==t.speed&&(this.speed=(0,n.setRangeValue)(t.speed)))}}},753:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ZIndex=void 0;const n=i(5707);class o extends n.ValueWithRandom{constructor(){super(),this.opacityRate=1,this.sizeRate=1,this.velocityRate=1}load(t){super.load(t),t&&(void 0!==t.opacityRate&&(this.opacityRate=t.opacityRate),void 0!==t.sizeRate&&(this.sizeRate=t.sizeRate),void 0!==t.velocityRate&&(this.velocityRate=t.velocityRate))}}e.ZIndex=o},4624:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Random=void 0,e.Random=class{constructor(){this.enable=!1,this.minimumValue=0}load(t){t&&(void 0!==t.enable&&(this.enable=t.enable),void 0!==t.minimumValue&&(this.minimumValue=t.minimumValue))}}},7848:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Responsive=void 0;const n=i(7373),o=i(6331);e.Responsive=class{constructor(){this.maxWidth=1/0,this.options={},this.mode=o.ResponsiveMode.canvas}load(t){t&&(void 0!==t.maxWidth&&(this.maxWidth=t.maxWidth),void 0!==t.mode&&(t.mode===o.ResponsiveMode.screen?this.mode=o.ResponsiveMode.screen:this.mode=o.ResponsiveMode.canvas),void 0!==t.options&&(this.options=(0,n.deepExtend)({},t.options)))}}},7851:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Theme=void 0;const n=i(7373),o=i(827);e.Theme=class{constructor(){this.name="",this.default=new o.ThemeDefault}load(t){void 0!==t&&(void 0!==t.name&&(this.name=t.name),this.default.load(t.default),void 0!==t.options&&(this.options=(0,n.deepExtend)({},t.options)))}}},827:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ThemeDefault=void 0;const n=i(6331);e.ThemeDefault=class{constructor(){this.auto=!1,this.mode=n.ThemeMode.any,this.value=!1}load(t){t&&(void 0!==t.auto&&(this.auto=t.auto),void 0!==t.mode&&(this.mode=t.mode),void 0!==t.value&&(this.value=t.value))}}},5707:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ValueWithRandom=void 0;const n=i(4624),o=i(7373);e.ValueWithRandom=class{constructor(){this.random=new n.Random,this.value=0}load(t){t&&("boolean"==typeof t.random?this.random.enable=t.random:this.random.load(t.random),void 0!==t.value&&(this.value=(0,o.setRangeValue)(t.value,this.random.enable?this.random.minimumValue:void 0)))}}},2993:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.AbsorberInstance=void 0;const n=i(7373),o=i(5638),s=i(6331);e.AbsorberInstance=class{constructor(t,e,i,s){var a,r,l,c,d;this.absorbers=t,this.container=e,this.initialPosition=s?o.Vector.create(s.x,s.y):void 0,this.options=i,this.dragging=!1,this.name=this.options.name,this.opacity=this.options.opacity,this.size=(0,n.getRangeValue)(i.size.value)*e.retina.pixelRatio,this.mass=this.size*i.size.density*e.retina.reduceFactor;const h=i.size.limit;this.limit="number"==typeof h?{radius:h*e.retina.pixelRatio*e.retina.reduceFactor,mass:0}:{radius:(null!==(a=null==h?void 0:h.radius)&&void 0!==a?a:0)*e.retina.pixelRatio*e.retina.reduceFactor,mass:null!==(r=null==h?void 0:h.mass)&&void 0!==r?r:0};const u="string"==typeof i.color?{value:i.color}:i.color;this.color=null!==(l=(0,n.colorToRgb)(u))&&void 0!==l?l:{b:0,g:0,r:0},this.position=null!==(d=null===(c=this.initialPosition)||void 0===c?void 0:c.copy())&&void 0!==d?d:this.calcPosition()}attract(t){const e=this.container,i=this.options;if(i.draggable){const t=e.interactivity.mouse;t.clicking&&t.downPosition?(0,n.getDistance)(this.position,t.downPosition)<=this.size&&(this.dragging=!0):this.dragging=!1,this.dragging&&t.position&&(this.position.x=t.position.x,this.position.y=t.position.y)}const s=t.getPosition(),{dx:a,dy:r,distance:l}=(0,n.getDistances)(this.position,s),c=o.Vector.create(a,r);if(c.length=this.mass/Math.pow(l,2)*e.retina.reduceFactor,l<this.size+t.getRadius()){const n=.033*t.getRadius()*e.retina.pixelRatio;this.size>t.getRadius()&&l<this.size-t.getRadius()||void 0!==t.absorberOrbit&&t.absorberOrbit.length<0?i.destroy?t.destroy():(t.needsNewPosition=!0,this.updateParticlePosition(t,c)):(i.destroy&&(t.size.value-=n),this.updateParticlePosition(t,c)),(this.limit.radius<=0||this.size<this.limit.radius)&&(this.size+=n),(this.limit.mass<=0||this.mass<this.limit.mass)&&(this.mass+=n*this.options.size.density*e.retina.reduceFactor)}else this.updateParticlePosition(t,c)}resize(){const t=this.initialPosition;this.position=t&&(0,n.isPointInside)(t,this.container.canvas.size)?t:this.calcPosition()}draw(t){t.translate(this.position.x,this.position.y),t.beginPath(),t.arc(0,0,this.size,0,2*Math.PI,!1),t.closePath(),t.fillStyle=(0,n.getStyleFromRgb)(this.color,this.opacity),t.fill()}calcPosition(){var t,e;const i=this.container,n=this.options.position;return o.Vector.create((null!==(t=null==n?void 0:n.x)&&void 0!==t?t:100*Math.random())/100*i.canvas.size.width,(null!==(e=null==n?void 0:n.y)&&void 0!==e?e:100*Math.random())/100*i.canvas.size.height)}updateParticlePosition(t,e){var i;if(t.destroyed)return;const a=this.container,r=a.canvas.size;if(t.needsNewPosition&&(t.position.x=Math.floor(Math.random()*r.width),t.position.y=Math.floor(Math.random()*r.height),t.velocity.setTo(t.initialVelocity),t.absorberOrbit=void 0,t.needsNewPosition=!1),this.options.orbits){if(void 0===t.absorberOrbit&&(t.absorberOrbit=o.Vector.create(0,0),t.absorberOrbit.length=(0,n.getDistance)(t.getPosition(),this.position),t.absorberOrbit.angle=Math.random()*Math.PI*2),t.absorberOrbit.length<=this.size&&!this.options.destroy){const e=Math.min(r.width,r.height);t.absorberOrbit.length=e*(.2*Math.random()-.1+1)}void 0===t.absorberOrbitDirection&&(t.absorberOrbitDirection=t.velocity.x>=0?s.RotateDirection.clockwise:s.RotateDirection.counterClockwise);const l=t.absorberOrbit.length,c=t.absorberOrbit.angle,d=t.absorberOrbitDirection;t.velocity.x=0,t.velocity.y=0;const h={x:d===s.RotateDirection.clockwise?Math.cos:Math.sin,y:d===s.RotateDirection.clockwise?Math.sin:Math.cos};t.position.x=this.position.x+l*h.x(c),t.position.y=this.position.y+l*h.y(c),t.absorberOrbit.length-=e.length,t.absorberOrbit.angle+=(null!==(i=t.retina.moveSpeed)&&void 0!==i?i:0)*a.retina.pixelRatio/100*a.retina.reduceFactor}else{const i=o.Vector.origin;i.length=e.length,i.angle=e.angle,t.velocity.addTo(i)}}}},1861:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Absorbers=void 0;const n=i(2993),o=i(9372),s=i(5456),a=i(7373);e.Absorbers=class{constructor(t){this.container=t,this.array=[],this.absorbers=[],this.interactivityAbsorbers=[];const e=t;e.getAbsorber=t=>void 0===t||"number"==typeof t?this.array[t||0]:this.array.find((e=>e.name===t)),e.addAbsorber=(t,e)=>this.addAbsorber(t,e)}init(t){var e,i;if(!t)return;t.absorbers&&(t.absorbers instanceof Array?this.absorbers=t.absorbers.map((t=>{const e=new o.Absorber;return e.load(t),e})):(this.absorbers instanceof Array&&(this.absorbers=new o.Absorber),this.absorbers.load(t.absorbers)));const n=null===(i=null===(e=t.interactivity)||void 0===e?void 0:e.modes)||void 0===i?void 0:i.absorbers;if(n&&(n instanceof Array?this.interactivityAbsorbers=n.map((t=>{const e=new o.Absorber;return e.load(t),e})):(this.interactivityAbsorbers instanceof Array&&(this.interactivityAbsorbers=new o.Absorber),this.interactivityAbsorbers.load(n))),this.absorbers instanceof Array)for(const t of this.absorbers)this.addAbsorber(t);else this.addAbsorber(this.absorbers)}particleUpdate(t){for(const e of this.array)if(e.attract(t),t.destroyed)break}draw(t){for(const e of this.array)t.save(),e.draw(t),t.restore()}stop(){this.array=[]}resize(){for(const t of this.array)t.resize()}handleClickMode(t){const e=this.container,i=this.absorbers,n=this.interactivityAbsorbers;if(t===s.AbsorberClickMode.absorber){let t;n instanceof Array?n.length>0&&(t=(0,a.itemFromArray)(n)):t=n;const o=null!=t?t:i instanceof Array?(0,a.itemFromArray)(i):i,s=e.interactivity.mouse.clickPosition;this.addAbsorber(o,s)}}addAbsorber(t,e){const i=new n.AbsorberInstance(this,this.container,t,e);return this.array.push(i),i}removeAbsorber(t){const e=this.array.indexOf(t);e>=0&&this.array.splice(e,1)}}},5693:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.AbsorberClickMode=void 0,(e.AbsorberClickMode||(e.AbsorberClickMode={})).absorber="absorber"},5456:function(t,e,i){var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),o(i(5693),e)},9372:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Absorber=void 0;const n=i(9499),o=i(3151);e.Absorber=class{constructor(){this.color=new o.OptionsColor,this.color.value="#000000",this.draggable=!1,this.opacity=1,this.destroy=!0,this.orbits=!1,this.size=new n.AbsorberSize}load(t){void 0!==t&&(void 0!==t.color&&(this.color=o.OptionsColor.create(this.color,t.color)),void 0!==t.draggable&&(this.draggable=t.draggable),this.name=t.name,void 0!==t.opacity&&(this.opacity=t.opacity),void 0!==t.position&&(this.position={x:t.position.x,y:t.position.y}),void 0!==t.size&&this.size.load(t.size),void 0!==t.destroy&&(this.destroy=t.destroy),void 0!==t.orbits&&(this.orbits=t.orbits))}}},9499:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.AbsorberSize=void 0;const n=i(5707),o=i(6269);class s extends n.ValueWithRandom{constructor(){super(),this.density=5,this.random.minimumValue=1,this.value=50,this.limit=new o.AbsorberSizeLimit}load(t){t&&(super.load(t),void 0!==t.density&&(this.density=t.density),"number"==typeof t.limit?this.limit.radius=t.limit:this.limit.load(t.limit))}}e.AbsorberSize=s},6269:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.AbsorberSizeLimit=void 0,e.AbsorberSizeLimit=class{constructor(){this.radius=0,this.mass=0}load(t){t&&(void 0!==t.mass&&(this.mass=t.mass),void 0!==t.radius&&(this.radius=t.radius))}}},3785:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadAbsorbersPlugin=void 0;const n=i(1861),o=i(5456),s=i(9372),a=i(7373);class r{constructor(){this.id="absorbers"}getPlugin(t){return new n.Absorbers(t)}needsPlugin(t){var e,i,n;if(void 0===t)return!1;const s=t.absorbers;let r=!1;return s instanceof Array?s.length&&(r=!0):(void 0!==s||(null===(n=null===(i=null===(e=t.interactivity)||void 0===e?void 0:e.events)||void 0===i?void 0:i.onClick)||void 0===n?void 0:n.mode)&&(0,a.isInArray)(o.AbsorberClickMode.absorber,t.interactivity.events.onClick.mode))&&(r=!0),r}loadOptions(t,e){var i,n;if(!this.needsPlugin(t)&&!this.needsPlugin(e))return;const o=t;if(null==e?void 0:e.absorbers)if((null==e?void 0:e.absorbers)instanceof Array)o.absorbers=null==e?void 0:e.absorbers.map((t=>{const e=new s.Absorber;return e.load(t),e}));else{let t=o.absorbers;void 0===(null==t?void 0:t.load)&&(o.absorbers=t=new s.Absorber),t.load(null==e?void 0:e.absorbers)}const a=null===(n=null===(i=null==e?void 0:e.interactivity)||void 0===i?void 0:i.modes)||void 0===n?void 0:n.absorbers;if(a)if(a instanceof Array)o.interactivity.modes.absorbers=a.map((t=>{const e=new s.Absorber;return e.load(t),e}));else{let t=o.interactivity.modes.absorbers;void 0===(null==t?void 0:t.load)&&(o.interactivity.modes.absorbers=t=new s.Absorber),t.load(a)}}}e.loadAbsorbersPlugin=async function(t){const e=new r;await t.addPlugin(e)}},5357:function(t,e,i){var n,o,s=this&&this.__classPrivateFieldSet||function(t,e,i,n,o){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!o:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?o.call(t,i):o?o.value=i:e.set(t,i),i},a=this&&this.__classPrivateFieldGet||function(t,e,i,n){if("a"===i&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===i?n:"a"===i?n.call(t):n?n.value:e.get(t)};Object.defineProperty(e,"__esModule",{value:!0}),e.EmitterInstance=void 0;const r=i(7373),l=i(6331),c=i(6208),d=i(7579);e.EmitterInstance=class{constructor(t,e,i,a){var h,u,p,v,y,g,f;this.emitters=t,this.container=e,n.set(this,void 0),o.set(this,void 0),this.currentDuration=0,this.currentEmitDelay=0,this.currentSpawnDelay=0,this.initialPosition=a,this.emitterOptions=(0,r.deepExtend)({},i),this.spawnDelay=1e3*(null!==(h=this.emitterOptions.life.delay)&&void 0!==h?h:0)/this.container.retina.reduceFactor,this.position=null!==(u=this.initialPosition)&&void 0!==u?u:this.calcPosition(),this.name=i.name,this.shape=d.ShapeManager.getShape(i.shape),this.fill=i.fill,s(this,n,!this.emitterOptions.life.wait,"f"),s(this,o,!1,"f");let m=(0,r.deepExtend)({},this.emitterOptions.particles);null!=m||(m={}),null!==(p=m.move)&&void 0!==p||(m.move={}),null!==(v=(f=m.move).direction)&&void 0!==v||(f.direction=this.emitterOptions.direction),void 0!==this.emitterOptions.spawnColor&&(this.spawnColor=(0,r.colorToHsl)(this.emitterOptions.spawnColor)),this.paused=!this.emitterOptions.autoPlay,this.particlesOptions=m,this.size=null!==(y=this.emitterOptions.size)&&void 0!==y?y:(()=>{const t=new c.EmitterSize;return t.load({height:0,mode:l.SizeMode.percent,width:0}),t})(),this.lifeCount=null!==(g=this.emitterOptions.life.count)&&void 0!==g?g:-1,this.immortal=this.lifeCount<=0,this.play()}externalPlay(){this.paused=!1,this.play()}externalPause(){this.paused=!0,this.pause()}play(){var t;if(!this.paused&&this.container.retina.reduceFactor&&(this.lifeCount>0||this.immortal||!this.emitterOptions.life.count)&&(a(this,n,"f")||this.currentSpawnDelay>=(null!==(t=this.spawnDelay)&&void 0!==t?t:0))){if(void 0===this.emitDelay){const t=(0,r.getRangeValue)(this.emitterOptions.rate.delay);this.emitDelay=1e3*t/this.container.retina.reduceFactor}(this.lifeCount>0||this.immortal)&&this.prepareToDie()}}pause(){this.paused||delete this.emitDelay}resize(){const t=this.initialPosition;this.position=t&&(0,r.isPointInside)(t,this.container.canvas.size)?t:this.calcPosition()}update(t){var e,i,r;this.paused||(a(this,n,"f")&&(s(this,n,!1,"f"),this.currentSpawnDelay=null!==(e=this.spawnDelay)&&void 0!==e?e:0,this.currentEmitDelay=null!==(i=this.emitDelay)&&void 0!==i?i:0),a(this,o,"f")||(s(this,o,!0,"f"),this.emitParticles(this.emitterOptions.startCount)),void 0!==this.duration&&(this.currentDuration+=t.value,this.currentDuration>=this.duration&&(this.pause(),void 0!==this.spawnDelay&&delete this.spawnDelay,this.immortal||this.lifeCount--,this.lifeCount>0||this.immortal?(this.position=this.calcPosition(),this.spawnDelay=1e3*(null!==(r=this.emitterOptions.life.delay)&&void 0!==r?r:0)/this.container.retina.reduceFactor):this.destroy(),this.currentDuration-=this.duration,delete this.duration)),void 0!==this.spawnDelay&&(this.currentSpawnDelay+=t.value,this.currentSpawnDelay>=this.spawnDelay&&(this.play(),this.currentSpawnDelay-=this.currentSpawnDelay,delete this.spawnDelay)),void 0!==this.emitDelay&&(this.currentEmitDelay+=t.value,this.currentEmitDelay>=this.emitDelay&&(this.emit(),this.currentEmitDelay-=this.emitDelay)))}prepareToDie(){var t;if(this.paused)return;const e=null===(t=this.emitterOptions.life)||void 0===t?void 0:t.duration;this.container.retina.reduceFactor&&(this.lifeCount>0||this.immortal)&&void 0!==e&&e>0&&(this.duration=1e3*e)}destroy(){this.emitters.removeEmitter(this)}calcPosition(){var t,e;const i=this.container,n=this.emitterOptions.position;return{x:(null!==(t=null==n?void 0:n.x)&&void 0!==t?t:100*Math.random())/100*i.canvas.size.width,y:(null!==(e=null==n?void 0:n.y)&&void 0!==e?e:100*Math.random())/100*i.canvas.size.height}}emit(){if(this.paused)return;const t=(0,r.getRangeValue)(this.emitterOptions.rate.quantity);this.emitParticles(t)}emitParticles(t){var e,i,n;const o=this.container,s=this.position,a={x:this.size.mode===l.SizeMode.percent?o.canvas.size.width*this.size.width/100:this.size.width,y:this.size.mode===l.SizeMode.percent?o.canvas.size.height*this.size.height/100:this.size.height};for(let l=0;l<t;l++){const t=(0,r.deepExtend)({},this.particlesOptions);if(this.spawnColor){const i=null===(e=this.emitterOptions.spawnColor)||void 0===e?void 0:e.animation;if(i){const t=i;if(t.enable)this.spawnColor.h=this.setColorAnimation(t,this.spawnColor.h,360);else{const t=i;this.spawnColor.h=this.setColorAnimation(t.h,this.spawnColor.h,360),this.spawnColor.s=this.setColorAnimation(t.s,this.spawnColor.s,100),this.spawnColor.l=this.setColorAnimation(t.l,this.spawnColor.l,100)}}t.color?t.color.value=this.spawnColor:t.color={value:this.spawnColor}}const l=null!==(n=null===(i=this.shape)||void 0===i?void 0:i.randomPosition(s,a,this.fill))&&void 0!==n?n:s;o.particles.addParticle(l,t)}}setColorAnimation(t,e,i){var n;const o=this.container;if(!t.enable)return e;const s=(0,r.randomInRange)(t.offset),a=1e3*(0,r.getRangeValue)(this.emitterOptions.rate.delay)/o.retina.reduceFactor;return(e+(null!==(n=t.speed)&&void 0!==n?n:0)*o.fpsLimit/a+3.6*s)%i}},n=new WeakMap,o=new WeakMap},676:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Emitters=void 0;const n=i(5357),o=i(8327),s=i(4737),a=i(7373);e.Emitters=class{constructor(t){this.container=t,this.array=[],this.emitters=[],this.interactivityEmitters=[];const e=t;e.getEmitter=t=>void 0===t||"number"==typeof t?this.array[t||0]:this.array.find((e=>e.name===t)),e.addEmitter=(t,e)=>this.addEmitter(t,e),e.playEmitter=t=>{const i=e.getEmitter(t);i&&i.externalPlay()},e.pauseEmitter=t=>{const i=e.getEmitter(t);i&&i.externalPause()}}init(t){var e,i;if(!t)return;t.emitters&&(t.emitters instanceof Array?this.emitters=t.emitters.map((t=>{const e=new o.Emitter;return e.load(t),e})):(this.emitters instanceof Array&&(this.emitters=new o.Emitter),this.emitters.load(t.emitters)));const n=null===(i=null===(e=t.interactivity)||void 0===e?void 0:e.modes)||void 0===i?void 0:i.emitters;if(n&&(n instanceof Array?this.interactivityEmitters=n.map((t=>{const e=new o.Emitter;return e.load(t),e})):(this.interactivityEmitters instanceof Array&&(this.interactivityEmitters=new o.Emitter),this.interactivityEmitters.load(n))),this.emitters instanceof Array)for(const t of this.emitters)this.addEmitter(t);else this.addEmitter(this.emitters)}play(){for(const t of this.array)t.play()}pause(){for(const t of this.array)t.pause()}stop(){this.array=[]}update(t){for(const e of this.array)e.update(t)}handleClickMode(t){const e=this.container,i=this.emitters,n=this.interactivityEmitters;if(t===s.EmitterClickMode.emitter){let t;n instanceof Array?n.length>0&&(t=(0,a.itemFromArray)(n)):t=n;const o=null!=t?t:i instanceof Array?(0,a.itemFromArray)(i):i,s=e.interactivity.mouse.clickPosition;this.addEmitter((0,a.deepExtend)({},o),s)}}resize(){for(const t of this.array)t.resize()}addEmitter(t,e){const i=new n.EmitterInstance(this,this.container,t,e);return this.array.push(i),i}removeEmitter(t){const e=this.array.indexOf(t);e>=0&&this.array.splice(e,1)}}},4685:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},8597:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.EmitterClickMode=void 0,(e.EmitterClickMode||(e.EmitterClickMode={})).emitter="emitter"},8601:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.EmitterShapeType=void 0,(i=e.EmitterShapeType||(e.EmitterShapeType={})).circle="circle",i.square="square"},4737:function(t,e,i){var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),o(i(8597),e),o(i(8601),e)},8327:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Emitter=void 0;const n=i(4887),o=i(9571),s=i(7373),a=i(6208),r=i(192),l=i(4737);e.Emitter=class{constructor(){this.autoPlay=!0,this.fill=!0,this.life=new o.EmitterLife,this.rate=new n.EmitterRate,this.shape=l.EmitterShapeType.square,this.startCount=0}load(t){void 0!==t&&(void 0!==t.autoPlay&&(this.autoPlay=t.autoPlay),void 0!==t.size&&(void 0===this.size&&(this.size=new a.EmitterSize),this.size.load(t.size)),void 0!==t.direction&&(this.direction=t.direction),void 0!==t.fill&&(this.fill=t.fill),this.life.load(t.life),this.name=t.name,void 0!==t.particles&&(this.particles=(0,s.deepExtend)({},t.particles)),this.rate.load(t.rate),void 0!==t.shape&&(this.shape=t.shape),void 0!==t.position&&(this.position={x:t.position.x,y:t.position.y}),void 0!==t.spawnColor&&(void 0===this.spawnColor&&(this.spawnColor=new r.AnimatableColor),this.spawnColor.load(t.spawnColor)),void 0!==t.startCount&&(this.startCount=t.startCount))}}},9571:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.EmitterLife=void 0,e.EmitterLife=class{constructor(){this.wait=!1}load(t){void 0!==t&&(void 0!==t.count&&(this.count=t.count),void 0!==t.delay&&(this.delay=t.delay),void 0!==t.duration&&(this.duration=t.duration),void 0!==t.wait&&(this.wait=t.wait))}}},4887:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.EmitterRate=void 0;const n=i(7373);e.EmitterRate=class{constructor(){this.quantity=1,this.delay=.1}load(t){void 0!==t&&(void 0!==t.quantity&&(this.quantity=(0,n.setRangeValue)(t.quantity)),void 0!==t.delay&&(this.delay=(0,n.setRangeValue)(t.delay)))}}},6208:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.EmitterSize=void 0;const n=i(6331);e.EmitterSize=class{constructor(){this.mode=n.SizeMode.percent,this.height=0,this.width=0}load(t){void 0!==t&&(void 0!==t.mode&&(this.mode=t.mode),void 0!==t.height&&(this.height=t.height),void 0!==t.width&&(this.width=t.width))}}},7579:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ShapeManager=void 0;const i=new Map;class n{static addShape(t,e){n.getShape(t)||i.set(t,e)}static getShape(t){return i.get(t)}static getSupportedShapes(){return i.keys()}}e.ShapeManager=n},3969:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.CircleShape=void 0,e.CircleShape=class{randomPosition(t,e,i){const[n,o]=[e.x/2,e.y/2],s=((t,e)=>{const i=Math.random()/4,n=Math.atan(e/t*Math.tan(2*Math.PI*i)),o=Math.random();return o<.25?n:o<.5?Math.PI-n:o<.75?Math.PI+n:-n})(n,o),a=(d=s,(l=n)*(c=o)/Math.sqrt((c*Math.cos(d))**2+(l*Math.sin(d))**2)),r=i?a*Math.sqrt(Math.random()):a;var l,c,d;return{x:t.x+r*Math.cos(s),y:t.y+r*Math.sin(s)}}}},460:(t,e)=>{function i(t,e){return t+e*(Math.random()-.5)}Object.defineProperty(e,"__esModule",{value:!0}),e.SquareShape=void 0,e.SquareShape=class{randomPosition(t,e,n){if(n)return{x:i(t.x,e.x),y:i(t.y,e.y)};{const i=e.x/2,n=e.y/2,o=Math.floor(4*Math.random()),s=2*(Math.random()-.5);switch(o){case 0:return{x:t.x+s*i,y:t.y-n};case 1:return{x:t.x-i,y:t.y+s*n};case 2:return{x:t.x+s*i,y:t.y+n};default:return{x:t.x+i,y:t.y+s*n}}}}}},4919:function(t,e,i){var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),e.loadEmittersPlugin=void 0;const s=i(7373),a=i(676),r=i(4737),l=i(8327),c=i(7579),d=i(3969),h=i(460);class u{constructor(){this.id="emitters"}getPlugin(t){return new a.Emitters(t)}needsPlugin(t){var e,i,n;if(void 0===t)return!1;const o=t.emitters;return o instanceof Array&&!!o.length||void 0!==o||!!(null===(n=null===(i=null===(e=t.interactivity)||void 0===e?void 0:e.events)||void 0===i?void 0:i.onClick)||void 0===n?void 0:n.mode)&&(0,s.isInArray)(r.EmitterClickMode.emitter,t.interactivity.events.onClick.mode)}loadOptions(t,e){var i,n;if(!this.needsPlugin(t)&&!this.needsPlugin(e))return;const o=t;if(null==e?void 0:e.emitters)if((null==e?void 0:e.emitters)instanceof Array)o.emitters=null==e?void 0:e.emitters.map((t=>{const e=new l.Emitter;return e.load(t),e}));else{let t=o.emitters;void 0===(null==t?void 0:t.load)&&(o.emitters=t=new l.Emitter),t.load(null==e?void 0:e.emitters)}const s=null===(n=null===(i=null==e?void 0:e.interactivity)||void 0===i?void 0:i.modes)||void 0===n?void 0:n.emitters;if(s)if(s instanceof Array)o.interactivity.modes.emitters=s.map((t=>{const e=new l.Emitter;return e.load(t),e}));else{let t=o.interactivity.modes.emitters;void 0===(null==t?void 0:t.load)&&(o.interactivity.modes.emitters=t=new l.Emitter),t.load(s)}}}e.loadEmittersPlugin=async function(t){const e=new u;await t.addPlugin(e),t.addEmitterShape||(t.addEmitterShape=(t,e)=>{c.ShapeManager.addShape(t,e)}),t.addEmitterShape(r.EmitterShapeType.circle,new d.CircleShape),t.addEmitterShape(r.EmitterShapeType.square,new h.SquareShape)},o(i(4685),e)},9799:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.InlineArrangement=void 0,(i=e.InlineArrangement||(e.InlineArrangement={})).equidistant="equidistant",i.onePerPoint="one-per-point",i.perPoint="per-point",i.randomLength="random-length",i.randomPoint="random-point"},3673:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.MoveType=void 0,(i=e.MoveType||(e.MoveType={})).path="path",i.radius="radius"},1740:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.Type=void 0,(i=e.Type||(e.Type={})).inline="inline",i.inside="inside",i.outside="outside",i.none="none"},9361:function(t,e,i){var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),o(i(9799),e),o(i(3673),e),o(i(1740),e)},601:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Draw=void 0;const n=i(3623),o=i(3151);e.Draw=class{constructor(){this.enable=!1,this.stroke=new n.DrawStroke}get lineWidth(){return this.stroke.width}set lineWidth(t){this.stroke.width=t}get lineColor(){return this.stroke.color}set lineColor(t){this.stroke.color=o.OptionsColor.create(this.stroke.color,t)}load(t){var e;if(void 0!==t){void 0!==t.enable&&(this.enable=t.enable);const i=null!==(e=t.stroke)&&void 0!==e?e:{color:t.lineColor,width:t.lineWidth};this.stroke.load(i)}}}},3623:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.DrawStroke=void 0;const n=i(3151),o=i(7373);e.DrawStroke=class{constructor(){this.color=new n.OptionsColor,this.width=.5,this.opacity=1}load(t){var e;void 0!==t&&(this.color=n.OptionsColor.create(this.color,t.color),"string"==typeof this.color.value&&(this.opacity=null!==(e=(0,o.stringToAlpha)(this.color.value))&&void 0!==e?e:this.opacity),void 0!==t.opacity&&(this.opacity=t.opacity),void 0!==t.width&&(this.width=t.width))}}},3642:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Inline=void 0;const n=i(9361);e.Inline=class{constructor(){this.arrangement=n.InlineArrangement.onePerPoint}load(t){void 0!==t&&void 0!==t.arrangement&&(this.arrangement=t.arrangement)}}},9617:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.LocalSvg=void 0,e.LocalSvg=class{constructor(){this.path=[],this.size={height:0,width:0}}load(t){void 0!==t&&(void 0!==t.path&&(this.path=t.path),void 0!==t.size&&(void 0!==t.size.width&&(this.size.width=t.size.width),void 0!==t.size.height&&(this.size.height=t.size.height)))}}},8555:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Move=void 0;const n=i(9361);e.Move=class{constructor(){this.radius=10,this.type=n.MoveType.path}load(t){void 0!==t&&(void 0!==t.radius&&(this.radius=t.radius),void 0!==t.type&&(this.type=t.type))}}},8212:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.PolygonMask=void 0;const n=i(9361),o=i(601),s=i(8555),a=i(3642),r=i(9617),l=i(7373);e.PolygonMask=class{constructor(){this.draw=new o.Draw,this.enable=!1,this.inline=new a.Inline,this.move=new s.Move,this.scale=1,this.type=n.Type.none}get inlineArrangement(){return this.inline.arrangement}set inlineArrangement(t){this.inline.arrangement=t}load(t){var e;if(void 0!==t){this.draw.load(t.draw);const i=null!==(e=t.inline)&&void 0!==e?e:{arrangement:t.inlineArrangement};void 0!==i&&this.inline.load(i),this.move.load(t.move),void 0!==t.scale&&(this.scale=t.scale),void 0!==t.type&&(this.type=t.type),void 0!==t.enable?this.enable=t.enable:this.enable=this.type!==n.Type.none,void 0!==t.url&&(this.url=t.url),void 0!==t.data&&("string"==typeof t.data?this.data=t.data:(this.data=new r.LocalSvg,this.data.load(t.data))),void 0!==t.position&&(this.position=(0,l.deepExtend)({},t.position))}}}},5765:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.PolygonMaskInstance=void 0;const n=i(9361),o=i(7373),s=i(8212),a=i(6331),r=i(4015);e.PolygonMaskInstance=class{constructor(t){this.container=t,this.dimension={height:0,width:0},this.path2DSupported=!!window.Path2D,this.options=new s.PolygonMask,this.polygonMaskMoveRadius=this.options.move.radius*t.retina.pixelRatio}async initAsync(t){this.options.load(null==t?void 0:t.polygon);const e=this.options;this.polygonMaskMoveRadius=e.move.radius*this.container.retina.pixelRatio,e.enable&&await this.initRawData()}resize(){const t=this.container,e=this.options;e.enable&&e.type!==n.Type.none&&(this.redrawTimeout&&clearTimeout(this.redrawTimeout),this.redrawTimeout=window.setTimeout((async()=>{await this.initRawData(!0),t.particles.redraw()}),250))}stop(){delete this.raw,delete this.paths}particlesInitialization(){const t=this.options;return!(!t.enable||t.type!==n.Type.inline||t.inline.arrangement!==n.InlineArrangement.onePerPoint&&t.inline.arrangement!==n.InlineArrangement.perPoint||(this.drawPoints(),0))}particlePosition(t){var e,i;if(this.options.enable&&(null!==(i=null===(e=this.raw)||void 0===e?void 0:e.length)&&void 0!==i?i:0)>0)return(0,o.deepExtend)({},t||this.randomPoint())}particleBounce(t,e,i){return this.polygonBounce(t,e,i)}clickPositionValid(t){const e=this.options;return e.enable&&e.type!==n.Type.none&&e.type!==n.Type.inline&&this.checkInsidePolygon(t)}draw(t){var e;if(!(null===(e=this.paths)||void 0===e?void 0:e.length))return;const i=this.options,n=i.draw;if(!i.enable||!n.enable)return;const o=this.raw;for(const e of this.paths){const i=e.path2d,s=this.path2DSupported;t&&(s&&i&&this.offset?(0,r.drawPolygonMaskPath)(t,i,n.stroke,this.offset):o&&(0,r.drawPolygonMask)(t,o,n.stroke))}}polygonBounce(t,e,i){const s=this.options;if(!this.raw||!s.enable||i!==a.OutModeDirection.top)return!1;if(s.type===n.Type.inside||s.type===n.Type.outside){let e,i,n;const s=t.getPosition(),a=t.getRadius();for(let l=0,c=this.raw.length-1;l<this.raw.length;c=l++){const d=this.raw[l],h=this.raw[c];e=(0,r.calcClosestPtOnSegment)(d,h,s);const u=(0,o.getDistances)(s,e);if([i,n]=[u.dx,u.dy],u.distance<a)return(0,r.segmentBounce)(d,h,t.velocity),!0}if(e&&void 0!==i&&void 0!==n&&!this.checkInsidePolygon(s)){const i={x:1,y:1};return t.position.x>=e.x&&(i.x=-1),t.position.y>=e.y&&(i.y=-1),t.position.x=e.x+2*a*i.x,t.position.y=e.y+2*a*i.y,t.velocity.mult(-1),!0}}else if(s.type===n.Type.inline&&t.initialPosition&&(0,o.getDistance)(t.initialPosition,t.getPosition())>this.polygonMaskMoveRadius)return t.velocity.x=t.velocity.y/2-t.velocity.x,t.velocity.y=t.velocity.x/2-t.velocity.y,!0;return!1}checkInsidePolygon(t){var e,i;const s=this.container,a=this.options;if(!a.enable||a.type===n.Type.none||a.type===n.Type.inline)return!0;if(!this.raw)throw new Error(o.Constants.noPolygonFound);const r=s.canvas.size,l=null!==(e=null==t?void 0:t.x)&&void 0!==e?e:Math.random()*r.width,c=null!==(i=null==t?void 0:t.y)&&void 0!==i?i:Math.random()*r.height;let d=!1;for(let t=0,e=this.raw.length-1;t<this.raw.length;e=t++){const i=this.raw[t],n=this.raw[e];i.y>c!=n.y>c&&l<(n.x-i.x)*(c-i.y)/(n.y-i.y)+i.x&&(d=!d)}return a.type===n.Type.inside?d:a.type===n.Type.outside&&!d}parseSvgPath(t,e){var i,n,o;const s=null!=e&&e;if(void 0!==this.paths&&!s)return this.raw;const a=this.container,l=this.options,c=(new DOMParser).parseFromString(t,"image/svg+xml"),d=c.getElementsByTagName("svg")[0];let h=d.getElementsByTagName("path");h.length||(h=c.getElementsByTagName("path")),this.paths=[];for(let t=0;t<h.length;t++){const e=h.item(t);e&&this.paths.push({element:e,length:e.getTotalLength()})}const u=a.retina.pixelRatio,p=l.scale/u;this.dimension.width=parseFloat(null!==(i=d.getAttribute("width"))&&void 0!==i?i:"0")*p,this.dimension.height=parseFloat(null!==(n=d.getAttribute("height"))&&void 0!==n?n:"0")*p;const v=null!==(o=l.position)&&void 0!==o?o:{x:50,y:50};return this.offset={x:a.canvas.size.width*v.x/(100*u)-this.dimension.width/2,y:a.canvas.size.height*v.y/(100*u)-this.dimension.height/2},(0,r.parsePaths)(this.paths,p,this.offset)}async downloadSvgPath(t,e){const i=this.options,n=t||i.url,o=null!=e&&e;if(!n||void 0!==this.paths&&!o)return this.raw;const s=await fetch(n);if(!s.ok)throw new Error("tsParticles Error - Error occurred during polygon mask download");return this.parseSvgPath(await s.text(),e)}drawPoints(){if(this.raw)for(const t of this.raw)this.container.particles.addParticle({x:t.x,y:t.y})}randomPoint(){const t=this.container,e=this.options;let i;if(e.type===n.Type.inline)switch(e.inline.arrangement){case n.InlineArrangement.randomPoint:i=this.getRandomPoint();break;case n.InlineArrangement.randomLength:i=this.getRandomPointByLength();break;case n.InlineArrangement.equidistant:i=this.getEquidistantPointByIndex(t.particles.count);break;case n.InlineArrangement.onePerPoint:case n.InlineArrangement.perPoint:default:i=this.getPointByIndex(t.particles.count)}else i={x:Math.random()*t.canvas.size.width,y:Math.random()*t.canvas.size.height};return this.checkInsidePolygon(i)?i:this.randomPoint()}getRandomPoint(){if(!this.raw||!this.raw.length)throw new Error(o.Constants.noPolygonDataLoaded);const t=(0,o.itemFromArray)(this.raw);return{x:t.x,y:t.y}}getRandomPointByLength(){var t,e,i;const n=this.options;if(!this.raw||!this.raw.length||!(null===(t=this.paths)||void 0===t?void 0:t.length))throw new Error(o.Constants.noPolygonDataLoaded);const s=(0,o.itemFromArray)(this.paths),a=Math.floor(Math.random()*s.length)+1,r=s.element.getPointAtLength(a);return{x:r.x*n.scale+((null===(e=this.offset)||void 0===e?void 0:e.x)||0),y:r.y*n.scale+((null===(i=this.offset)||void 0===i?void 0:i.y)||0)}}getEquidistantPointByIndex(t){var e,i,n,s,a,r,l;const c=this.container.actualOptions,d=this.options;if(!this.raw||!this.raw.length||!(null===(e=this.paths)||void 0===e?void 0:e.length))throw new Error(o.Constants.noPolygonDataLoaded);let h,u=0;const p=this.paths.reduce(((t,e)=>t+e.length),0)/c.particles.number.value;for(const e of this.paths){const i=p*t-u;if(i<=e.length){h=e.element.getPointAtLength(i);break}u+=e.length}return{x:(null!==(i=null==h?void 0:h.x)&&void 0!==i?i:0)*d.scale+(null!==(s=null===(n=this.offset)||void 0===n?void 0:n.x)&&void 0!==s?s:0),y:(null!==(a=null==h?void 0:h.y)&&void 0!==a?a:0)*d.scale+(null!==(l=null===(r=this.offset)||void 0===r?void 0:r.y)&&void 0!==l?l:0)}}getPointByIndex(t){if(!this.raw||!this.raw.length)throw new Error(o.Constants.noPolygonDataLoaded);const e=this.raw[t%this.raw.length];return{x:e.x,y:e.y}}createPath2D(){var t,e;const i=this.options;if(this.path2DSupported&&(null===(t=this.paths)||void 0===t?void 0:t.length))for(const t of this.paths){const n=null===(e=t.element)||void 0===e?void 0:e.getAttribute("d");if(n){const e=new Path2D(n),o=document.createElementNS("http://www.w3.org/2000/svg","svg").createSVGMatrix(),s=new Path2D,a=o.scale(i.scale);s.addPath?(s.addPath(e,a),t.path2d=s):delete t.path2d}else delete t.path2d;!t.path2d&&this.raw&&(t.path2d=new Path2D,t.path2d.moveTo(this.raw[0].x,this.raw[0].y),this.raw.forEach(((e,i)=>{var n;i>0&&(null===(n=t.path2d)||void 0===n||n.lineTo(e.x,e.y))})),t.path2d.closePath())}}async initRawData(t){const e=this.options;if(e.url)this.raw=await this.downloadSvgPath(e.url,t);else if(e.data){const i=e.data;let n;if("string"!=typeof i){const t=i.path instanceof Array?i.path.map((t=>`<path d="${t}" />`)).join(""):`<path d="${i.path}" />`;n=`<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="${i.size.width}" height="${i.size.height}">${t}</svg>`}else n=i;this.raw=this.parseSvgPath(n,t)}this.createPath2D()}}},6031:()=>{!function(){try{if("undefined"==typeof window)return;"SVGPathSeg"in window||(window.SVGPathSeg=function(t,e,i){this.pathSegType=t,this.pathSegTypeAsLetter=e,this._owningPathSegList=i},window.SVGPathSeg.prototype.classname="SVGPathSeg",window.SVGPathSeg.PATHSEG_UNKNOWN=0,window.SVGPathSeg.PATHSEG_CLOSEPATH=1,window.SVGPathSeg.PATHSEG_MOVETO_ABS=2,window.SVGPathSeg.PATHSEG_MOVETO_REL=3,window.SVGPathSeg.PATHSEG_LINETO_ABS=4,window.SVGPathSeg.PATHSEG_LINETO_REL=5,window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS=6,window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL=7,window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS=8,window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL=9,window.SVGPathSeg.PATHSEG_ARC_ABS=10,window.SVGPathSeg.PATHSEG_ARC_REL=11,window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS=12,window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL=13,window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS=14,window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL=15,window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS=16,window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL=17,window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS=18,window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL=19,window.SVGPathSeg.prototype._segmentChanged=function(){this._owningPathSegList&&this._owningPathSegList.segmentChanged(this)},window.SVGPathSegClosePath=function(t){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CLOSEPATH,"z",t)},window.SVGPathSegClosePath.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegClosePath.prototype.toString=function(){return"[object SVGPathSegClosePath]"},window.SVGPathSegClosePath.prototype._asPathString=function(){return this.pathSegTypeAsLetter},window.SVGPathSegClosePath.prototype.clone=function(){return new window.SVGPathSegClosePath(void 0)},window.SVGPathSegMovetoAbs=function(t,e,i){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_MOVETO_ABS,"M",t),this._x=e,this._y=i},window.SVGPathSegMovetoAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegMovetoAbs.prototype.toString=function(){return"[object SVGPathSegMovetoAbs]"},window.SVGPathSegMovetoAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},window.SVGPathSegMovetoAbs.prototype.clone=function(){return new window.SVGPathSegMovetoAbs(void 0,this._x,this._y)},Object.defineProperty(window.SVGPathSegMovetoAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegMovetoAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegMovetoRel=function(t,e,i){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_MOVETO_REL,"m",t),this._x=e,this._y=i},window.SVGPathSegMovetoRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegMovetoRel.prototype.toString=function(){return"[object SVGPathSegMovetoRel]"},window.SVGPathSegMovetoRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},window.SVGPathSegMovetoRel.prototype.clone=function(){return new window.SVGPathSegMovetoRel(void 0,this._x,this._y)},Object.defineProperty(window.SVGPathSegMovetoRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegMovetoRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoAbs=function(t,e,i){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_LINETO_ABS,"L",t),this._x=e,this._y=i},window.SVGPathSegLinetoAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegLinetoAbs.prototype.toString=function(){return"[object SVGPathSegLinetoAbs]"},window.SVGPathSegLinetoAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},window.SVGPathSegLinetoAbs.prototype.clone=function(){return new window.SVGPathSegLinetoAbs(void 0,this._x,this._y)},Object.defineProperty(window.SVGPathSegLinetoAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegLinetoAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoRel=function(t,e,i){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_LINETO_REL,"l",t),this._x=e,this._y=i},window.SVGPathSegLinetoRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegLinetoRel.prototype.toString=function(){return"[object SVGPathSegLinetoRel]"},window.SVGPathSegLinetoRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},window.SVGPathSegLinetoRel.prototype.clone=function(){return new window.SVGPathSegLinetoRel(void 0,this._x,this._y)},Object.defineProperty(window.SVGPathSegLinetoRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegLinetoRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoCubicAbs=function(t,e,i,n,o,s,a){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS,"C",t),this._x=e,this._y=i,this._x1=n,this._y1=o,this._x2=s,this._y2=a},window.SVGPathSegCurvetoCubicAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegCurvetoCubicAbs.prototype.toString=function(){return"[object SVGPathSegCurvetoCubicAbs]"},window.SVGPathSegCurvetoCubicAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x1+" "+this._y1+" "+this._x2+" "+this._y2+" "+this._x+" "+this._y},window.SVGPathSegCurvetoCubicAbs.prototype.clone=function(){return new window.SVGPathSegCurvetoCubicAbs(void 0,this._x,this._y,this._x1,this._y1,this._x2,this._y2)},Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype,"x1",{get:function(){return this._x1},set:function(t){this._x1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype,"y1",{get:function(){return this._y1},set:function(t){this._y1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype,"x2",{get:function(){return this._x2},set:function(t){this._x2=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype,"y2",{get:function(){return this._y2},set:function(t){this._y2=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoCubicRel=function(t,e,i,n,o,s,a){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL,"c",t),this._x=e,this._y=i,this._x1=n,this._y1=o,this._x2=s,this._y2=a},window.SVGPathSegCurvetoCubicRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegCurvetoCubicRel.prototype.toString=function(){return"[object SVGPathSegCurvetoCubicRel]"},window.SVGPathSegCurvetoCubicRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x1+" "+this._y1+" "+this._x2+" "+this._y2+" "+this._x+" "+this._y},window.SVGPathSegCurvetoCubicRel.prototype.clone=function(){return new window.SVGPathSegCurvetoCubicRel(void 0,this._x,this._y,this._x1,this._y1,this._x2,this._y2)},Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype,"x1",{get:function(){return this._x1},set:function(t){this._x1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype,"y1",{get:function(){return this._y1},set:function(t){this._y1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype,"x2",{get:function(){return this._x2},set:function(t){this._x2=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype,"y2",{get:function(){return this._y2},set:function(t){this._y2=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoQuadraticAbs=function(t,e,i,n,o){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS,"Q",t),this._x=e,this._y=i,this._x1=n,this._y1=o},window.SVGPathSegCurvetoQuadraticAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegCurvetoQuadraticAbs.prototype.toString=function(){return"[object SVGPathSegCurvetoQuadraticAbs]"},window.SVGPathSegCurvetoQuadraticAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x1+" "+this._y1+" "+this._x+" "+this._y},window.SVGPathSegCurvetoQuadraticAbs.prototype.clone=function(){return new window.SVGPathSegCurvetoQuadraticAbs(void 0,this._x,this._y,this._x1,this._y1)},Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype,"x1",{get:function(){return this._x1},set:function(t){this._x1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype,"y1",{get:function(){return this._y1},set:function(t){this._y1=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoQuadraticRel=function(t,e,i,n,o){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL,"q",t),this._x=e,this._y=i,this._x1=n,this._y1=o},window.SVGPathSegCurvetoQuadraticRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegCurvetoQuadraticRel.prototype.toString=function(){return"[object SVGPathSegCurvetoQuadraticRel]"},window.SVGPathSegCurvetoQuadraticRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x1+" "+this._y1+" "+this._x+" "+this._y},window.SVGPathSegCurvetoQuadraticRel.prototype.clone=function(){return new window.SVGPathSegCurvetoQuadraticRel(void 0,this._x,this._y,this._x1,this._y1)},Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype,"x1",{get:function(){return this._x1},set:function(t){this._x1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype,"y1",{get:function(){return this._y1},set:function(t){this._y1=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegArcAbs=function(t,e,i,n,o,s,a,r){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_ARC_ABS,"A",t),this._x=e,this._y=i,this._r1=n,this._r2=o,this._angle=s,this._largeArcFlag=a,this._sweepFlag=r},window.SVGPathSegArcAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegArcAbs.prototype.toString=function(){return"[object SVGPathSegArcAbs]"},window.SVGPathSegArcAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._r1+" "+this._r2+" "+this._angle+" "+(this._largeArcFlag?"1":"0")+" "+(this._sweepFlag?"1":"0")+" "+this._x+" "+this._y},window.SVGPathSegArcAbs.prototype.clone=function(){return new window.SVGPathSegArcAbs(void 0,this._x,this._y,this._r1,this._r2,this._angle,this._largeArcFlag,this._sweepFlag)},Object.defineProperty(window.SVGPathSegArcAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcAbs.prototype,"r1",{get:function(){return this._r1},set:function(t){this._r1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcAbs.prototype,"r2",{get:function(){return this._r2},set:function(t){this._r2=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcAbs.prototype,"angle",{get:function(){return this._angle},set:function(t){this._angle=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcAbs.prototype,"largeArcFlag",{get:function(){return this._largeArcFlag},set:function(t){this._largeArcFlag=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcAbs.prototype,"sweepFlag",{get:function(){return this._sweepFlag},set:function(t){this._sweepFlag=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegArcRel=function(t,e,i,n,o,s,a,r){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_ARC_REL,"a",t),this._x=e,this._y=i,this._r1=n,this._r2=o,this._angle=s,this._largeArcFlag=a,this._sweepFlag=r},window.SVGPathSegArcRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegArcRel.prototype.toString=function(){return"[object SVGPathSegArcRel]"},window.SVGPathSegArcRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._r1+" "+this._r2+" "+this._angle+" "+(this._largeArcFlag?"1":"0")+" "+(this._sweepFlag?"1":"0")+" "+this._x+" "+this._y},window.SVGPathSegArcRel.prototype.clone=function(){return new window.SVGPathSegArcRel(void 0,this._x,this._y,this._r1,this._r2,this._angle,this._largeArcFlag,this._sweepFlag)},Object.defineProperty(window.SVGPathSegArcRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcRel.prototype,"r1",{get:function(){return this._r1},set:function(t){this._r1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcRel.prototype,"r2",{get:function(){return this._r2},set:function(t){this._r2=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcRel.prototype,"angle",{get:function(){return this._angle},set:function(t){this._angle=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcRel.prototype,"largeArcFlag",{get:function(){return this._largeArcFlag},set:function(t){this._largeArcFlag=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcRel.prototype,"sweepFlag",{get:function(){return this._sweepFlag},set:function(t){this._sweepFlag=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoHorizontalAbs=function(t,e){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS,"H",t),this._x=e},window.SVGPathSegLinetoHorizontalAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegLinetoHorizontalAbs.prototype.toString=function(){return"[object SVGPathSegLinetoHorizontalAbs]"},window.SVGPathSegLinetoHorizontalAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x},window.SVGPathSegLinetoHorizontalAbs.prototype.clone=function(){return new window.SVGPathSegLinetoHorizontalAbs(void 0,this._x)},Object.defineProperty(window.SVGPathSegLinetoHorizontalAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoHorizontalRel=function(t,e){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL,"h",t),this._x=e},window.SVGPathSegLinetoHorizontalRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegLinetoHorizontalRel.prototype.toString=function(){return"[object SVGPathSegLinetoHorizontalRel]"},window.SVGPathSegLinetoHorizontalRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x},window.SVGPathSegLinetoHorizontalRel.prototype.clone=function(){return new window.SVGPathSegLinetoHorizontalRel(void 0,this._x)},Object.defineProperty(window.SVGPathSegLinetoHorizontalRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoVerticalAbs=function(t,e){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS,"V",t),this._y=e},window.SVGPathSegLinetoVerticalAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegLinetoVerticalAbs.prototype.toString=function(){return"[object SVGPathSegLinetoVerticalAbs]"},window.SVGPathSegLinetoVerticalAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._y},window.SVGPathSegLinetoVerticalAbs.prototype.clone=function(){return new window.SVGPathSegLinetoVerticalAbs(void 0,this._y)},Object.defineProperty(window.SVGPathSegLinetoVerticalAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoVerticalRel=function(t,e){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL,"v",t),this._y=e},window.SVGPathSegLinetoVerticalRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegLinetoVerticalRel.prototype.toString=function(){return"[object SVGPathSegLinetoVerticalRel]"},window.SVGPathSegLinetoVerticalRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._y},window.SVGPathSegLinetoVerticalRel.prototype.clone=function(){return new window.SVGPathSegLinetoVerticalRel(void 0,this._y)},Object.defineProperty(window.SVGPathSegLinetoVerticalRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoCubicSmoothAbs=function(t,e,i,n,o){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS,"S",t),this._x=e,this._y=i,this._x2=n,this._y2=o},window.SVGPathSegCurvetoCubicSmoothAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegCurvetoCubicSmoothAbs.prototype.toString=function(){return"[object SVGPathSegCurvetoCubicSmoothAbs]"},window.SVGPathSegCurvetoCubicSmoothAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x2+" "+this._y2+" "+this._x+" "+this._y},window.SVGPathSegCurvetoCubicSmoothAbs.prototype.clone=function(){return new window.SVGPathSegCurvetoCubicSmoothAbs(void 0,this._x,this._y,this._x2,this._y2)},Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype,"x2",{get:function(){return this._x2},set:function(t){this._x2=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype,"y2",{get:function(){return this._y2},set:function(t){this._y2=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoCubicSmoothRel=function(t,e,i,n,o){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL,"s",t),this._x=e,this._y=i,this._x2=n,this._y2=o},window.SVGPathSegCurvetoCubicSmoothRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegCurvetoCubicSmoothRel.prototype.toString=function(){return"[object SVGPathSegCurvetoCubicSmoothRel]"},window.SVGPathSegCurvetoCubicSmoothRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x2+" "+this._y2+" "+this._x+" "+this._y},window.SVGPathSegCurvetoCubicSmoothRel.prototype.clone=function(){return new window.SVGPathSegCurvetoCubicSmoothRel(void 0,this._x,this._y,this._x2,this._y2)},Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype,"x2",{get:function(){return this._x2},set:function(t){this._x2=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype,"y2",{get:function(){return this._y2},set:function(t){this._y2=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoQuadraticSmoothAbs=function(t,e,i){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS,"T",t),this._x=e,this._y=i},window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype.toString=function(){return"[object SVGPathSegCurvetoQuadraticSmoothAbs]"},window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype.clone=function(){return new window.SVGPathSegCurvetoQuadraticSmoothAbs(void 0,this._x,this._y)},Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoQuadraticSmoothRel=function(t,e,i){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL,"t",t),this._x=e,this._y=i},window.SVGPathSegCurvetoQuadraticSmoothRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegCurvetoQuadraticSmoothRel.prototype.toString=function(){return"[object SVGPathSegCurvetoQuadraticSmoothRel]"},window.SVGPathSegCurvetoQuadraticSmoothRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},window.SVGPathSegCurvetoQuadraticSmoothRel.prototype.clone=function(){return new window.SVGPathSegCurvetoQuadraticSmoothRel(void 0,this._x,this._y)},Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),window.SVGPathElement.prototype.createSVGPathSegClosePath=function(){return new window.SVGPathSegClosePath(void 0)},window.SVGPathElement.prototype.createSVGPathSegMovetoAbs=function(t,e){return new window.SVGPathSegMovetoAbs(void 0,t,e)},window.SVGPathElement.prototype.createSVGPathSegMovetoRel=function(t,e){return new window.SVGPathSegMovetoRel(void 0,t,e)},window.SVGPathElement.prototype.createSVGPathSegLinetoAbs=function(t,e){return new window.SVGPathSegLinetoAbs(void 0,t,e)},window.SVGPathElement.prototype.createSVGPathSegLinetoRel=function(t,e){return new window.SVGPathSegLinetoRel(void 0,t,e)},window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicAbs=function(t,e,i,n,o,s){return new window.SVGPathSegCurvetoCubicAbs(void 0,t,e,i,n,o,s)},window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicRel=function(t,e,i,n,o,s){return new window.SVGPathSegCurvetoCubicRel(void 0,t,e,i,n,o,s)},window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticAbs=function(t,e,i,n){return new window.SVGPathSegCurvetoQuadraticAbs(void 0,t,e,i,n)},window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticRel=function(t,e,i,n){return new window.SVGPathSegCurvetoQuadraticRel(void 0,t,e,i,n)},window.SVGPathElement.prototype.createSVGPathSegArcAbs=function(t,e,i,n,o,s,a){return new window.SVGPathSegArcAbs(void 0,t,e,i,n,o,s,a)},window.SVGPathElement.prototype.createSVGPathSegArcRel=function(t,e,i,n,o,s,a){return new window.SVGPathSegArcRel(void 0,t,e,i,n,o,s,a)},window.SVGPathElement.prototype.createSVGPathSegLinetoHorizontalAbs=function(t){return new window.SVGPathSegLinetoHorizontalAbs(void 0,t)},window.SVGPathElement.prototype.createSVGPathSegLinetoHorizontalRel=function(t){return new window.SVGPathSegLinetoHorizontalRel(void 0,t)},window.SVGPathElement.prototype.createSVGPathSegLinetoVerticalAbs=function(t){return new window.SVGPathSegLinetoVerticalAbs(void 0,t)},window.SVGPathElement.prototype.createSVGPathSegLinetoVerticalRel=function(t){return new window.SVGPathSegLinetoVerticalRel(void 0,t)},window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothAbs=function(t,e,i,n){return new window.SVGPathSegCurvetoCubicSmoothAbs(void 0,t,e,i,n)},window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothRel=function(t,e,i,n){return new window.SVGPathSegCurvetoCubicSmoothRel(void 0,t,e,i,n)},window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothAbs=function(t,e){return new window.SVGPathSegCurvetoQuadraticSmoothAbs(void 0,t,e)},window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothRel=function(t,e){return new window.SVGPathSegCurvetoQuadraticSmoothRel(void 0,t,e)},"getPathSegAtLength"in window.SVGPathElement.prototype||(window.SVGPathElement.prototype.getPathSegAtLength=function(t){if(void 0===t||!isFinite(t))throw"Invalid arguments.";var e=document.createElementNS("http://www.w3.org/2000/svg","path");e.setAttribute("d",this.getAttribute("d"));var i=e.pathSegList.numberOfItems-1;if(i<=0)return 0;do{if(e.pathSegList.removeItem(i),t>e.getTotalLength())break;i--}while(i>0);return i})),"SVGPathSegList"in window&&"appendItem"in window.SVGPathSegList.prototype||(window.SVGPathSegList=function(t){this._pathElement=t,this._list=this._parsePath(this._pathElement.getAttribute("d")),this._mutationObserverConfig={attributes:!0,attributeFilter:["d"]},this._pathElementMutationObserver=new MutationObserver(this._updateListFromPathMutations.bind(this)),this._pathElementMutationObserver.observe(this._pathElement,this._mutationObserverConfig)},window.SVGPathSegList.prototype.classname="SVGPathSegList",Object.defineProperty(window.SVGPathSegList.prototype,"numberOfItems",{get:function(){return this._checkPathSynchronizedToList(),this._list.length},enumerable:!0}),Object.defineProperty(window.SVGPathSegList.prototype,"length",{get:function(){return this._checkPathSynchronizedToList(),this._list.length},enumerable:!0}),Object.defineProperty(window.SVGPathElement.prototype,"pathSegList",{get:function(){return this._pathSegList||(this._pathSegList=new window.SVGPathSegList(this)),this._pathSegList},enumerable:!0}),Object.defineProperty(window.SVGPathElement.prototype,"normalizedPathSegList",{get:function(){return this.pathSegList},enumerable:!0}),Object.defineProperty(window.SVGPathElement.prototype,"animatedPathSegList",{get:function(){return this.pathSegList},enumerable:!0}),Object.defineProperty(window.SVGPathElement.prototype,"animatedNormalizedPathSegList",{get:function(){return this.pathSegList},enumerable:!0}),window.SVGPathSegList.prototype._checkPathSynchronizedToList=function(){this._updateListFromPathMutations(this._pathElementMutationObserver.takeRecords())},window.SVGPathSegList.prototype._updateListFromPathMutations=function(t){if(this._pathElement){var e=!1;t.forEach((function(t){"d"==t.attributeName&&(e=!0)})),e&&(this._list=this._parsePath(this._pathElement.getAttribute("d")))}},window.SVGPathSegList.prototype._writeListToPath=function(){this._pathElementMutationObserver.disconnect(),this._pathElement.setAttribute("d",window.SVGPathSegList._pathSegArrayAsString(this._list)),this._pathElementMutationObserver.observe(this._pathElement,this._mutationObserverConfig)},window.SVGPathSegList.prototype.segmentChanged=function(t){this._writeListToPath()},window.SVGPathSegList.prototype.clear=function(){this._checkPathSynchronizedToList(),this._list.forEach((function(t){t._owningPathSegList=null})),this._list=[],this._writeListToPath()},window.SVGPathSegList.prototype.initialize=function(t){return this._checkPathSynchronizedToList(),this._list=[t],t._owningPathSegList=this,this._writeListToPath(),t},window.SVGPathSegList.prototype._checkValidIndex=function(t){if(isNaN(t)||t<0||t>=this.numberOfItems)throw"INDEX_SIZE_ERR"},window.SVGPathSegList.prototype.getItem=function(t){return this._checkPathSynchronizedToList(),this._checkValidIndex(t),this._list[t]},window.SVGPathSegList.prototype.insertItemBefore=function(t,e){return this._checkPathSynchronizedToList(),e>this.numberOfItems&&(e=this.numberOfItems),t._owningPathSegList&&(t=t.clone()),this._list.splice(e,0,t),t._owningPathSegList=this,this._writeListToPath(),t},window.SVGPathSegList.prototype.replaceItem=function(t,e){return this._checkPathSynchronizedToList(),t._owningPathSegList&&(t=t.clone()),this._checkValidIndex(e),this._list[e]=t,t._owningPathSegList=this,this._writeListToPath(),t},window.SVGPathSegList.prototype.removeItem=function(t){this._checkPathSynchronizedToList(),this._checkValidIndex(t);var e=this._list[t];return this._list.splice(t,1),this._writeListToPath(),e},window.SVGPathSegList.prototype.appendItem=function(t){return this._checkPathSynchronizedToList(),t._owningPathSegList&&(t=t.clone()),this._list.push(t),t._owningPathSegList=this,this._writeListToPath(),t},window.SVGPathSegList._pathSegArrayAsString=function(t){var e="",i=!0;return t.forEach((function(t){i?(i=!1,e+=t._asPathString()):e+=" "+t._asPathString()})),e},window.SVGPathSegList.prototype._parsePath=function(t){if(!t||0==t.length)return[];var e=this,i=function(){this.pathSegList=[]};i.prototype.appendSegment=function(t){this.pathSegList.push(t)};var n=function(t){this._string=t,this._currentIndex=0,this._endIndex=this._string.length,this._previousCommand=window.SVGPathSeg.PATHSEG_UNKNOWN,this._skipOptionalSpaces()};n.prototype._isCurrentSpace=function(){var t=this._string[this._currentIndex];return t<=" "&&(" "==t||"\n"==t||"\t"==t||"\r"==t||"\f"==t)},n.prototype._skipOptionalSpaces=function(){for(;this._currentIndex<this._endIndex&&this._isCurrentSpace();)this._currentIndex++;return this._currentIndex<this._endIndex},n.prototype._skipOptionalSpacesOrDelimiter=function(){return!(this._currentIndex<this._endIndex&&!this._isCurrentSpace()&&","!=this._string.charAt(this._currentIndex))&&(this._skipOptionalSpaces()&&this._currentIndex<this._endIndex&&","==this._string.charAt(this._currentIndex)&&(this._currentIndex++,this._skipOptionalSpaces()),this._currentIndex<this._endIndex)},n.prototype.hasMoreData=function(){return this._currentIndex<this._endIndex},n.prototype.peekSegmentType=function(){var t=this._string[this._currentIndex];return this._pathSegTypeFromChar(t)},n.prototype._pathSegTypeFromChar=function(t){switch(t){case"Z":case"z":return window.SVGPathSeg.PATHSEG_CLOSEPATH;case"M":return window.SVGPathSeg.PATHSEG_MOVETO_ABS;case"m":return window.SVGPathSeg.PATHSEG_MOVETO_REL;case"L":return window.SVGPathSeg.PATHSEG_LINETO_ABS;case"l":return window.SVGPathSeg.PATHSEG_LINETO_REL;case"C":return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS;case"c":return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL;case"Q":return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS;case"q":return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL;case"A":return window.SVGPathSeg.PATHSEG_ARC_ABS;case"a":return window.SVGPathSeg.PATHSEG_ARC_REL;case"H":return window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS;case"h":return window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL;case"V":return window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS;case"v":return window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL;case"S":return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS;case"s":return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL;case"T":return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS;case"t":return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL;default:return window.SVGPathSeg.PATHSEG_UNKNOWN}},n.prototype._nextCommandHelper=function(t,e){return("+"==t||"-"==t||"."==t||t>="0"&&t<="9")&&e!=window.SVGPathSeg.PATHSEG_CLOSEPATH?e==window.SVGPathSeg.PATHSEG_MOVETO_ABS?window.SVGPathSeg.PATHSEG_LINETO_ABS:e==window.SVGPathSeg.PATHSEG_MOVETO_REL?window.SVGPathSeg.PATHSEG_LINETO_REL:e:window.SVGPathSeg.PATHSEG_UNKNOWN},n.prototype.initialCommandIsMoveTo=function(){if(!this.hasMoreData())return!0;var t=this.peekSegmentType();return t==window.SVGPathSeg.PATHSEG_MOVETO_ABS||t==window.SVGPathSeg.PATHSEG_MOVETO_REL},n.prototype._parseNumber=function(){var t=0,e=0,i=1,n=0,o=1,s=1,a=this._currentIndex;if(this._skipOptionalSpaces(),this._currentIndex<this._endIndex&&"+"==this._string.charAt(this._currentIndex)?this._currentIndex++:this._currentIndex<this._endIndex&&"-"==this._string.charAt(this._currentIndex)&&(this._currentIndex++,o=-1),!(this._currentIndex==this._endIndex||(this._string.charAt(this._currentIndex)<"0"||this._string.charAt(this._currentIndex)>"9")&&"."!=this._string.charAt(this._currentIndex))){for(var r=this._currentIndex;this._currentIndex<this._endIndex&&this._string.charAt(this._currentIndex)>="0"&&this._string.charAt(this._currentIndex)<="9";)this._currentIndex++;if(this._currentIndex!=r)for(var l=this._currentIndex-1,c=1;l>=r;)e+=c*(this._string.charAt(l--)-"0"),c*=10;if(this._currentIndex<this._endIndex&&"."==this._string.charAt(this._currentIndex)){if(this._currentIndex++,this._currentIndex>=this._endIndex||this._string.charAt(this._currentIndex)<"0"||this._string.charAt(this._currentIndex)>"9")return;for(;this._currentIndex<this._endIndex&&this._string.charAt(this._currentIndex)>="0"&&this._string.charAt(this._currentIndex)<="9";)i*=10,n+=(this._string.charAt(this._currentIndex)-"0")/i,this._currentIndex+=1}if(this._currentIndex!=a&&this._currentIndex+1<this._endIndex&&("e"==this._string.charAt(this._currentIndex)||"E"==this._string.charAt(this._currentIndex))&&"x"!=this._string.charAt(this._currentIndex+1)&&"m"!=this._string.charAt(this._currentIndex+1)){if(this._currentIndex++,"+"==this._string.charAt(this._currentIndex)?this._currentIndex++:"-"==this._string.charAt(this._currentIndex)&&(this._currentIndex++,s=-1),this._currentIndex>=this._endIndex||this._string.charAt(this._currentIndex)<"0"||this._string.charAt(this._currentIndex)>"9")return;for(;this._currentIndex<this._endIndex&&this._string.charAt(this._currentIndex)>="0"&&this._string.charAt(this._currentIndex)<="9";)t*=10,t+=this._string.charAt(this._currentIndex)-"0",this._currentIndex++}var d=e+n;if(d*=o,t&&(d*=Math.pow(10,s*t)),a!=this._currentIndex)return this._skipOptionalSpacesOrDelimiter(),d}},n.prototype._parseArcFlag=function(){if(!(this._currentIndex>=this._endIndex)){var t=!1,e=this._string.charAt(this._currentIndex++);if("0"==e)t=!1;else{if("1"!=e)return;t=!0}return this._skipOptionalSpacesOrDelimiter(),t}},n.prototype.parseSegment=function(){var t=this._string[this._currentIndex],i=this._pathSegTypeFromChar(t);if(i==window.SVGPathSeg.PATHSEG_UNKNOWN){if(this._previousCommand==window.SVGPathSeg.PATHSEG_UNKNOWN)return null;if((i=this._nextCommandHelper(t,this._previousCommand))==window.SVGPathSeg.PATHSEG_UNKNOWN)return null}else this._currentIndex++;switch(this._previousCommand=i,i){case window.SVGPathSeg.PATHSEG_MOVETO_REL:return new window.SVGPathSegMovetoRel(e,this._parseNumber(),this._parseNumber());case window.SVGPathSeg.PATHSEG_MOVETO_ABS:return new window.SVGPathSegMovetoAbs(e,this._parseNumber(),this._parseNumber());case window.SVGPathSeg.PATHSEG_LINETO_REL:return new window.SVGPathSegLinetoRel(e,this._parseNumber(),this._parseNumber());case window.SVGPathSeg.PATHSEG_LINETO_ABS:return new window.SVGPathSegLinetoAbs(e,this._parseNumber(),this._parseNumber());case window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:return new window.SVGPathSegLinetoHorizontalRel(e,this._parseNumber());case window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:return new window.SVGPathSegLinetoHorizontalAbs(e,this._parseNumber());case window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL:return new window.SVGPathSegLinetoVerticalRel(e,this._parseNumber());case window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS:return new window.SVGPathSegLinetoVerticalAbs(e,this._parseNumber());case window.SVGPathSeg.PATHSEG_CLOSEPATH:return this._skipOptionalSpaces(),new window.SVGPathSegClosePath(e);case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL:var n={x1:this._parseNumber(),y1:this._parseNumber(),x2:this._parseNumber(),y2:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()};return new window.SVGPathSegCurvetoCubicRel(e,n.x,n.y,n.x1,n.y1,n.x2,n.y2);case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS:return n={x1:this._parseNumber(),y1:this._parseNumber(),x2:this._parseNumber(),y2:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()},new window.SVGPathSegCurvetoCubicAbs(e,n.x,n.y,n.x1,n.y1,n.x2,n.y2);case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:return n={x2:this._parseNumber(),y2:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()},new window.SVGPathSegCurvetoCubicSmoothRel(e,n.x,n.y,n.x2,n.y2);case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:return n={x2:this._parseNumber(),y2:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()},new window.SVGPathSegCurvetoCubicSmoothAbs(e,n.x,n.y,n.x2,n.y2);case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:return n={x1:this._parseNumber(),y1:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()},new window.SVGPathSegCurvetoQuadraticRel(e,n.x,n.y,n.x1,n.y1);case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:return n={x1:this._parseNumber(),y1:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()},new window.SVGPathSegCurvetoQuadraticAbs(e,n.x,n.y,n.x1,n.y1);case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:return new window.SVGPathSegCurvetoQuadraticSmoothRel(e,this._parseNumber(),this._parseNumber());case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:return new window.SVGPathSegCurvetoQuadraticSmoothAbs(e,this._parseNumber(),this._parseNumber());case window.SVGPathSeg.PATHSEG_ARC_REL:return n={x1:this._parseNumber(),y1:this._parseNumber(),arcAngle:this._parseNumber(),arcLarge:this._parseArcFlag(),arcSweep:this._parseArcFlag(),x:this._parseNumber(),y:this._parseNumber()},new window.SVGPathSegArcRel(e,n.x,n.y,n.x1,n.y1,n.arcAngle,n.arcLarge,n.arcSweep);case window.SVGPathSeg.PATHSEG_ARC_ABS:return n={x1:this._parseNumber(),y1:this._parseNumber(),arcAngle:this._parseNumber(),arcLarge:this._parseArcFlag(),arcSweep:this._parseArcFlag(),x:this._parseNumber(),y:this._parseNumber()},new window.SVGPathSegArcAbs(e,n.x,n.y,n.x1,n.y1,n.arcAngle,n.arcLarge,n.arcSweep);default:throw"Unknown path seg type."}};var o=new i,s=new n(t);if(!s.initialCommandIsMoveTo())return[];for(;s.hasMoreData();){var a=s.parseSegment();if(!a)return[];o.appendSegment(a)}return o.pathSegList})}catch(t){console.warn("An error occurred in tsParticles pathseg polyfill. If the Polygon Mask is not working, please open an issue here: https://github.com/matteobruni/tsparticles",t)}}()},3737:function(t,e,i){var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&n(e,t,i);return o(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.loadPolygonMaskPlugin=void 0;const a=i(5765),r=i(8212),l=i(9361),c=i(7373);class d{constructor(){this.id="polygonMask"}getPlugin(t){return new a.PolygonMaskInstance(t)}needsPlugin(t){var e,i,n;return null!==(i=null===(e=null==t?void 0:t.polygon)||void 0===e?void 0:e.enable)&&void 0!==i?i:void 0!==(null===(n=null==t?void 0:t.polygon)||void 0===n?void 0:n.type)&&t.polygon.type!==l.Type.none}loadOptions(t,e){if(!this.needsPlugin(e))return;const i=t;let n=i.polygon;void 0===(null==n?void 0:n.load)&&(i.polygon=n=new r.PolygonMask),n.load(null==e?void 0:e.polygon)}}e.loadPolygonMaskPlugin=async function(t){(0,c.isSsr)()||window.SVGPathSeg||await Promise.resolve().then((()=>s(i(6031))));const e=new d;await t.addPlugin(e)}},4015:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.segmentBounce=e.calcClosestPtOnSegment=e.parsePaths=e.drawPolygonMaskPath=e.drawPolygonMask=void 0;const n=i(7373);e.drawPolygonMask=function(t,e,i){const o=(0,n.colorToRgb)(i.color);if(o){t.beginPath(),t.moveTo(e[0].x,e[0].y);for(const i of e)t.lineTo(i.x,i.y);t.closePath(),t.strokeStyle=(0,n.getStyleFromRgb)(o),t.lineWidth=i.width,t.stroke()}},e.drawPolygonMaskPath=function(t,e,i,o){t.translate(o.x,o.y);const s=(0,n.colorToRgb)(i.color);s&&(t.strokeStyle=(0,n.getStyleFromRgb)(s,i.opacity),t.lineWidth=i.width,t.stroke(e))},e.parsePaths=function(t,e,i){var n;const o=[];for(const s of t){const t=s.element.pathSegList,a=null!==(n=null==t?void 0:t.numberOfItems)&&void 0!==n?n:0,r={x:0,y:0};for(let n=0;n<a;n++){const s=null==t?void 0:t.getItem(n),a=window.SVGPathSeg;switch(null==s?void 0:s.pathSegType){case a.PATHSEG_MOVETO_ABS:case a.PATHSEG_LINETO_ABS:case a.PATHSEG_CURVETO_CUBIC_ABS:case a.PATHSEG_CURVETO_QUADRATIC_ABS:case a.PATHSEG_ARC_ABS:case a.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:case a.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:{const t=s;r.x=t.x,r.y=t.y;break}case a.PATHSEG_LINETO_HORIZONTAL_ABS:r.x=s.x;break;case a.PATHSEG_LINETO_VERTICAL_ABS:r.y=s.y;break;case a.PATHSEG_LINETO_REL:case a.PATHSEG_MOVETO_REL:case a.PATHSEG_CURVETO_CUBIC_REL:case a.PATHSEG_CURVETO_QUADRATIC_REL:case a.PATHSEG_ARC_REL:case a.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:case a.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:{const t=s;r.x+=t.x,r.y+=t.y;break}case a.PATHSEG_LINETO_HORIZONTAL_REL:r.x+=s.x;break;case a.PATHSEG_LINETO_VERTICAL_REL:r.y+=s.y;break;case a.PATHSEG_UNKNOWN:case a.PATHSEG_CLOSEPATH:continue}o.push({x:r.x*e+i.x,y:r.y*e+i.y})}}return o},e.calcClosestPtOnSegment=function(t,e,i){const{dx:o,dy:s}=(0,n.getDistances)(i,t),{dx:a,dy:r}=(0,n.getDistances)(e,t),l=(o*a+s*r)/(a**2+r**2);let c=t.x+a*l,d=t.y+r*l;return l<0?(c=t.x,d=t.y):l>1&&(c=e.x,d=e.y),{x:c,y:d,isOnSegment:l>=0&&l<=1}},e.segmentBounce=function(t,e,i){const{dx:o,dy:s}=(0,n.getDistances)(t,e),a=Math.atan2(s,o),r=Math.sin(a),l=-Math.cos(a),c=2*(i.x*r+i.y*l);i.x-=c*r,i.y-=c*l}},7645:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.CircleDrawer=void 0,e.CircleDrawer=class{getSidesCount(){return 12}draw(t,e,i){t.arc(0,0,i,0,2*Math.PI,!1)}}},4472:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadCircleShape=void 0;const n=i(7645);e.loadCircleShape=async function(t){await t.addShape("circle",new n.CircleDrawer)}},5020:function(t,e,i){var n,o=this&&this.__classPrivateFieldSet||function(t,e,i,n,o){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!o:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?o.call(t,i):o?o.value=i:e.set(t,i),i},s=this&&this.__classPrivateFieldGet||function(t,e,i,n){if("a"===i&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===i?n:"a"===i?n.call(t):n?n.value:e.get(t)};Object.defineProperty(e,"__esModule",{value:!0}),e.ImageDrawer=void 0;const a=i(7373),r=i(6331),l=i(7656);e.ImageDrawer=class{constructor(){n.set(this,void 0),o(this,n,[],"f")}getSidesCount(){return 12}getImages(t){return s(this,n,"f").find((e=>e.id===t.id))||(s(this,n,"f").push({id:t.id,images:[]}),this.getImages(t))}addImage(t,e){const i=this.getImages(t);null==i||i.images.push(e)}async init(t){await this.loadImagesFromParticlesOptions(t,t.actualOptions.particles),await this.loadImagesFromParticlesOptions(t,t.actualOptions.interactivity.modes.trail.particles);for(const e of t.actualOptions.manualParticles)await this.loadImagesFromParticlesOptions(t,e.options);const e=t.actualOptions;if(e.emitters)if(e.emitters instanceof Array)for(const i of e.emitters)await this.loadImagesFromParticlesOptions(t,i.particles);else await this.loadImagesFromParticlesOptions(t,e.emitters.particles);const i=e.interactivity.modes.emitters;if(i)if(i instanceof Array)for(const e of i)await this.loadImagesFromParticlesOptions(t,e.particles);else await this.loadImagesFromParticlesOptions(t,i.particles)}destroy(){o(this,n,[],"f")}async loadImagesFromParticlesOptions(t,e){var i,o,l;const c=null==e?void 0:e.shape;if(!(null==c?void 0:c.type)||!c.options||!(0,a.isInArray)(r.ShapeType.image,c.type)&&!(0,a.isInArray)(r.ShapeType.images,c.type))return;const d=s(this,n,"f").findIndex((e=>e.id===t.id));d>=0&&s(this,n,"f").splice(d,1);const h=null!==(i=c.options[r.ShapeType.images])&&void 0!==i?i:c.options[r.ShapeType.image];if(h instanceof Array)for(const e of h)await this.loadImageShape(t,e);else await this.loadImageShape(t,h);if(null==e?void 0:e.groups)for(const i in e.groups){const n=e.groups[i];await this.loadImagesFromParticlesOptions(t,n)}(null===(l=null===(o=null==e?void 0:e.destroy)||void 0===o?void 0:o.split)||void 0===l?void 0:l.particles)&&await this.loadImagesFromParticlesOptions(t,null==e?void 0:e.destroy.split.particles)}async loadImageShape(t,e){try{const i=e.replaceColor?l.downloadSvgImage:l.loadImage,n=await i(e.src);n&&this.addImage(t,n)}catch(t){console.warn(`tsParticles error - ${e.src} not found`)}}draw(t,e,i,n){var o,s;if(!t)return;const a=e.image,r=null===(o=null==a?void 0:a.data)||void 0===o?void 0:o.element;if(!r)return;const l=null!==(s=null==a?void 0:a.ratio)&&void 0!==s?s:1,c={x:-i,y:-i};(null==a?void 0:a.data.svgData)&&(null==a?void 0:a.replaceColor)||(t.globalAlpha=n),t.drawImage(r,c.x,c.y,2*i,2*i/l),(null==a?void 0:a.data.svgData)&&(null==a?void 0:a.replaceColor)||(t.globalAlpha=1)}loadShape(t){var e,i,n,o,s,a,r;if("image"!==t.shape&&"images"!==t.shape)return;const c=this.getImages(t.container).images,d=t.shapeData,h=null!==(e=c.find((t=>t.source===d.src)))&&void 0!==e?e:c[0],u=t.getFillColor();let p;if(!h)return;if(void 0!==h.svgData&&d.replaceColor&&u){const e=(0,l.replaceColorSvg)(h,u,null!==(n=null===(i=t.opacity)||void 0===i?void 0:i.value)&&void 0!==n?n:1),s=new Blob([e],{type:"image/svg+xml"}),a=URL||window.URL||window.webkitURL||window,r=a.createObjectURL(s),c=new Image;p={data:Object.assign(Object.assign({},h),{svgData:e}),ratio:d.width/d.height,replaceColor:null!==(o=d.replaceColor)&&void 0!==o?o:d.replace_color,source:d.src},c.addEventListener("load",(()=>{const e=t.image;e&&(e.loaded=!0,h.element=c),a.revokeObjectURL(r)})),c.addEventListener("error",(()=>{a.revokeObjectURL(r),(0,l.loadImage)(d.src).then((e=>{const i=t.image;i&&(h.element=null==e?void 0:e.element,i.loaded=!0)}))})),c.src=r}else p={data:h,loaded:!0,ratio:d.width/d.height,replaceColor:null!==(s=d.replaceColor)&&void 0!==s?s:d.replace_color,source:d.src};p.ratio||(p.ratio=1);const v={image:p,fill:null!==(a=d.fill)&&void 0!==a?a:t.fill,close:null!==(r=d.close)&&void 0!==r?r:t.close};t.image=v.image,t.fill=v.fill,t.close=v.close}},n=new WeakMap},7656:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.replaceColorSvg=e.downloadSvgImage=e.loadImage=void 0;const n=i(7373);function o(t){return new Promise(((e,i)=>{if(!t)return void i("Error tsParticles - No image.src");const n={source:t,type:t.substr(t.length-3)},o=new Image;o.addEventListener("load",(()=>{n.element=o,e(n)})),o.addEventListener("error",(()=>{i(`Error tsParticles - loading image: ${t}`)})),o.src=t}))}e.loadImage=o,e.downloadSvgImage=async function(t){if(!t)throw new Error("Error tsParticles - No image.src");const e={source:t,type:t.substr(t.length-3)};if("svg"!==e.type)return o(t);const i=await fetch(e.source);if(!i.ok)throw new Error("Error tsParticles - Image not found");return e.svgData=await i.text(),e},e.replaceColorSvg=function(t,e,i){const{svgData:o}=t;if(!o)return"";if(o.includes("fill")){const t=/(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d.]+%?\))|currentcolor/gi;return o.replace(t,(()=>(0,n.getStyleFromHsl)(e,i)))}const s=o.indexOf(">");return`${o.substring(0,s)} fill="${(0,n.getStyleFromHsl)(e,i)}"${o.substring(s)}`}},6504:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadImageShape=void 0;const n=i(5020);e.loadImageShape=async function(t){const e=new n.ImageDrawer;await t.addShape("image",e),await t.addShape("images",e)}},4036:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.LineDrawer=void 0,e.LineDrawer=class{getSidesCount(){return 1}draw(t,e,i){t.moveTo(-i/2,0),t.lineTo(i/2,0)}}},9193:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadLineShape=void 0;const n=i(4036);e.loadLineShape=async function(t){await t.addShape("line",new n.LineDrawer)}},3677:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.PolygonDrawer=void 0;const n=i(3388);class o extends n.PolygonDrawerBase{getSidesData(t,e){var i,n;const o=t.shapeData,s=null!==(n=null!==(i=null==o?void 0:o.sides)&&void 0!==i?i:null==o?void 0:o.nb_sides)&&void 0!==n?n:5;return{count:{denominator:1,numerator:s},length:2.66*e/(s/3)}}getCenter(t,e){return{x:-e/(this.getSidesCount(t)/3.5),y:-e/.76}}}e.PolygonDrawer=o},3388:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.PolygonDrawerBase=void 0,e.PolygonDrawerBase=class{getSidesCount(t){var e,i;const n=t.shapeData;return null!==(i=null!==(e=null==n?void 0:n.sides)&&void 0!==e?e:null==n?void 0:n.nb_sides)&&void 0!==i?i:5}draw(t,e,i){const n=this.getCenter(e,i),o=this.getSidesData(e,i),s=o.count.numerator*o.count.denominator,a=o.count.numerator/o.count.denominator,r=180*(a-2)/a,l=Math.PI-Math.PI*r/180;if(t){t.beginPath(),t.translate(n.x,n.y),t.moveTo(0,0);for(let e=0;e<s;e++)t.lineTo(o.length,0),t.translate(o.length,0),t.rotate(l)}}}},8729:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.TriangleDrawer=void 0;const n=i(3388);class o extends n.PolygonDrawerBase{getSidesCount(){return 3}getSidesData(t,e){return{count:{denominator:2,numerator:3},length:2*e}}getCenter(t,e){return{x:-e,y:e/1.66}}}e.TriangleDrawer=o},302:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadPolygonShape=e.loadTriangleShape=e.loadGenericPolygonShape=void 0;const n=i(3677),o=i(8729);async function s(t){await t.addShape("polygon",new n.PolygonDrawer)}async function a(t){await t.addShape("triangle",new o.TriangleDrawer)}e.loadGenericPolygonShape=s,e.loadTriangleShape=a,e.loadPolygonShape=async function(t){await s(t),await a(t)}},8765:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SquareDrawer=void 0;const i=Math.sqrt(2);e.SquareDrawer=class{getSidesCount(){return 4}draw(t,e,n){t.rect(-n/i,-n/i,2*n/i,2*n/i)}}},2179:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadSquareShape=void 0;const n=i(8765);e.loadSquareShape=async function(t){const e=new n.SquareDrawer;await t.addShape("edge",e),await t.addShape("square",e)}},1796:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.StarDrawer=void 0,e.StarDrawer=class{getSidesCount(t){var e,i;const n=t.shapeData;return null!==(i=null!==(e=null==n?void 0:n.sides)&&void 0!==e?e:null==n?void 0:n.nb_sides)&&void 0!==i?i:5}draw(t,e,i){var n;const o=e.shapeData,s=this.getSidesCount(e),a=null!==(n=null==o?void 0:o.inset)&&void 0!==n?n:2;t.moveTo(0,0-i);for(let e=0;e<s;e++)t.rotate(Math.PI/s),t.lineTo(0,0-i*a),t.rotate(Math.PI/s),t.lineTo(0,0-i)}}},3806:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadStarShape=void 0;const n=i(1796);e.loadStarShape=async function(t){await t.addShape("star",new n.StarDrawer)}},1608:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.TextDrawer=e.validTypes=void 0;const n=i(7373);e.validTypes=["text","character","char"],e.TextDrawer=class{getSidesCount(){return 12}async init(t){const i=t.actualOptions;if(e.validTypes.find((t=>(0,n.isInArray)(t,i.particles.shape.type)))){const t=e.validTypes.map((t=>i.particles.shape.options[t])).find((t=>!!t));if(t instanceof Array){const e=[];for(const i of t)e.push((0,n.loadFont)(i));await Promise.allSettled(e)}else void 0!==t&&await(0,n.loadFont)(t)}}draw(t,e,i,o){var s,a,r;const l=e.shapeData;if(void 0===l)return;const c=l.value;if(void 0===c)return;const d=e;void 0===d.text&&(d.text=c instanceof Array?(0,n.itemFromArray)(c,e.randomIndexData):c);const h=d.text,u=null!==(s=l.style)&&void 0!==s?s:"",p=null!==(a=l.weight)&&void 0!==a?a:"400",v=2*Math.round(i),y=null!==(r=l.font)&&void 0!==r?r:"Verdana",g=e.fill,f=h.length*i/2;t.font=`${u} ${p} ${v}px "${y}"`;const m={x:-f,y:i/2};t.globalAlpha=o,g?t.fillText(h,m.x,m.y):t.strokeText(h,m.x,m.y),t.globalAlpha=1}}},4482:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadTextShape=void 0;const n=i(1608);e.loadTextShape=async function(t){const e=new n.TextDrawer;for(const i of n.validTypes)await t.addShape(i,e)}},7537:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},1613:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},8921:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},8791:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},1691:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},6862:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},5008:function(t,e,i){var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),o(i(1613),e),o(i(8921),e),o(i(8791),e),o(i(1691),e),o(i(6862),e),o(i(7537),e)},9011:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.AngleUpdater=void 0;const n=i(6331),o=i(7373);e.AngleUpdater=class{constructor(t){this.container=t}init(t){const e=t.options.rotate;t.rotate={enable:e.animation.enable,value:(0,o.getRangeValue)(e.value)*Math.PI/180};let i=e.direction;switch(i===n.RotateDirection.random&&(i=Math.floor(2*Math.random())>0?n.RotateDirection.counterClockwise:n.RotateDirection.clockwise),i){case n.RotateDirection.counterClockwise:case"counterClockwise":t.rotate.status=n.AnimationStatus.decreasing;break;case n.RotateDirection.clockwise:t.rotate.status=n.AnimationStatus.increasing}const s=t.options.rotate.animation;s.enable&&(t.rotate.velocity=s.speed/360*this.container.retina.reduceFactor,s.sync||(t.rotate.velocity*=Math.random()))}isEnabled(t){const e=t.options.rotate,i=e.animation;return!t.destroyed&&!t.spawning&&!e.path&&i.enable}update(t,e){this.isEnabled(t)&&function(t,e){var i;const o=t.rotate;if(!o)return;const s=t.options.rotate.animation,a=(null!==(i=o.velocity)&&void 0!==i?i:0)*e.factor,r=2*Math.PI;if(s.enable)switch(o.status){case n.AnimationStatus.increasing:o.value+=a,o.value>r&&(o.value-=r);break;case n.AnimationStatus.decreasing:default:o.value-=a,o.value<0&&(o.value+=r)}}(t,e)}}},4441:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadAngleUpdater=void 0;const n=i(9011);e.loadAngleUpdater=async function(t){await t.addParticleUpdater("angle",(t=>new n.AngleUpdater(t)))}},6293:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ColorUpdater=void 0;const n=i(6331),o=i(7373);function s(t,e,i,s,a){var r;const l=e;if(!l||!i.enable)return;const c=(0,o.randomInRange)(i.offset),d=(null!==(r=e.velocity)&&void 0!==r?r:0)*t.factor+3.6*c;a&&l.status!==n.AnimationStatus.increasing?(l.value-=d,l.value<0&&(l.status=n.AnimationStatus.increasing,l.value+=l.value)):(l.value+=d,a&&l.value>s&&(l.status=n.AnimationStatus.decreasing,l.value-=l.value%s)),l.value>s&&(l.value%=s)}e.ColorUpdater=class{constructor(t){this.container=t}init(t){const e=(0,o.colorToHsl)(t.options.color,t.id,t.options.reduceDuplicates);e&&(t.color=(0,o.getHslAnimationFromHsl)(e,t.options.color.animation,this.container.retina.reduceFactor))}isEnabled(t){var e,i,n;const o=t.options.color.animation;return!t.destroyed&&!t.spawning&&(void 0!==(null===(e=t.color)||void 0===e?void 0:e.h.value)&&o.h.enable||void 0!==(null===(i=t.color)||void 0===i?void 0:i.s.value)&&o.s.enable||void 0!==(null===(n=t.color)||void 0===n?void 0:n.l.value)&&o.l.enable)}update(t,e){!function(t,e){var i,n,o;const a=t.options.color.animation;void 0!==(null===(i=t.color)||void 0===i?void 0:i.h)&&s(e,t.color.h,a.h,360,!1),void 0!==(null===(n=t.color)||void 0===n?void 0:n.s)&&s(e,t.color.s,a.s,100,!0),void 0!==(null===(o=t.color)||void 0===o?void 0:o.l)&&s(e,t.color.l,a.l,100,!0)}(t,e)}}},4784:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadColorUpdater=void 0;const n=i(6293);e.loadColorUpdater=async function(t){await t.addParticleUpdater("color",(t=>new n.ColorUpdater(t)))}},8152:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.LifeUpdater=void 0;const n=i(7373);e.LifeUpdater=class{constructor(t){this.container=t}init(){}isEnabled(t){return!t.destroyed}update(t,e){if(!this.isEnabled(t))return;const i=t.life;let o=!1;if(t.spawning){if(i.delayTime+=e.value,!(i.delayTime>=t.life.delay))return;o=!0,t.spawning=!1,i.delayTime=0,i.time=0}if(-1===i.duration)return;if(t.spawning)return;if(o?i.time=0:i.time+=e.value,i.time<i.duration)return;if(i.time=0,t.life.count>0&&t.life.count--,0===t.life.count)return void t.destroy();const s=this.container.canvas.size,a=(0,n.setRangeValue)(0,s.width),r=(0,n.setRangeValue)(0,s.width);t.position.x=(0,n.randomInRange)(a),t.position.y=(0,n.randomInRange)(r),t.spawning=!0,i.delayTime=0,i.time=0,t.reset();const l=t.options.life;i.delay=1e3*(0,n.getRangeValue)(l.delay.value),i.duration=1e3*(0,n.getRangeValue)(l.duration.value)}}},6717:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadLifeUpdater=void 0;const n=i(8152);e.loadLifeUpdater=async function(t){await t.addParticleUpdater("life",(t=>new n.LifeUpdater(t)))}},1923:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OpacityUpdater=void 0;const n=i(6331),o=i(7373);e.OpacityUpdater=class{constructor(t){this.container=t}init(t){const e=t.options.opacity;t.opacity={enable:e.animation.enable,max:(0,o.getRangeMax)(e.value),min:(0,o.getRangeMin)(e.value),value:(0,o.getRangeValue)(e.value),loops:0,maxLoops:e.animation.count};const i=e.animation;if(i.enable){t.opacity.status=n.AnimationStatus.increasing;const s=e.value;switch(t.opacity.min=(0,o.getRangeMin)(s),t.opacity.max=(0,o.getRangeMax)(s),i.startValue){case n.StartValueType.min:t.opacity.value=t.opacity.min,t.opacity.status=n.AnimationStatus.increasing;break;case n.StartValueType.random:t.opacity.value=(0,o.randomInRange)(t.opacity),t.opacity.status=Math.random()>=.5?n.AnimationStatus.increasing:n.AnimationStatus.decreasing;break;case n.StartValueType.max:default:t.opacity.value=t.opacity.max,t.opacity.status=n.AnimationStatus.decreasing}t.opacity.velocity=i.speed/100*this.container.retina.reduceFactor,i.sync||(t.opacity.velocity*=Math.random())}}isEnabled(t){var e,i,n;return!t.destroyed&&!t.spawning&&!!t.opacity&&t.opacity.enable&&((null!==(e=t.opacity.maxLoops)&&void 0!==e?e:0)<=0||(null!==(i=t.opacity.loops)&&void 0!==i?i:0)<(null!==(n=t.opacity.maxLoops)&&void 0!==n?n:0))}update(t,e){this.isEnabled(t)&&function(t,e){var i,s,a,r,l;if(!t.opacity)return;const c=t.opacity.min,d=t.opacity.max;if(!t.destroyed&&t.opacity.enable&&((null!==(i=t.opacity.maxLoops)&&void 0!==i?i:0)<=0||(null!==(s=t.opacity.loops)&&void 0!==s?s:0)<(null!==(a=t.opacity.maxLoops)&&void 0!==a?a:0))){switch(t.opacity.status){case n.AnimationStatus.increasing:t.opacity.value>=d?(t.opacity.status=n.AnimationStatus.decreasing,t.opacity.loops||(t.opacity.loops=0),t.opacity.loops++):t.opacity.value+=(null!==(r=t.opacity.velocity)&&void 0!==r?r:0)*e.factor;break;case n.AnimationStatus.decreasing:t.opacity.value<=c?(t.opacity.status=n.AnimationStatus.increasing,t.opacity.loops||(t.opacity.loops=0),t.opacity.loops++):t.opacity.value-=(null!==(l=t.opacity.velocity)&&void 0!==l?l:0)*e.factor}!function(t,e,i,o){switch(t.options.opacity.animation.destroy){case n.DestroyType.max:e>=o&&t.destroy();break;case n.DestroyType.min:e<=i&&t.destroy()}}(t,t.opacity.value,c,d),t.destroyed||(t.opacity.value=(0,o.clamp)(t.opacity.value,c,d))}}(t,e)}}},3202:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadOpacityUpdater=void 0;const n=i(1923);e.loadOpacityUpdater=async function(t){await t.addParticleUpdater("opacity",(t=>new n.OpacityUpdater(t)))}},9138:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OutOfCanvasUpdater=void 0;const n=i(7373),o=i(6331),s=i(8055);e.OutOfCanvasUpdater=class{constructor(t){this.container=t}init(){}isEnabled(t){return!t.destroyed&&!t.spawning}update(t,e){var i,n,s,a;const r=t.options.move.outModes;this.updateOutMode(t,e,null!==(i=r.bottom)&&void 0!==i?i:r.default,o.OutModeDirection.bottom),this.updateOutMode(t,e,null!==(n=r.left)&&void 0!==n?n:r.default,o.OutModeDirection.left),this.updateOutMode(t,e,null!==(s=r.right)&&void 0!==s?s:r.default,o.OutModeDirection.right),this.updateOutMode(t,e,null!==(a=r.top)&&void 0!==a?a:r.default,o.OutModeDirection.top)}updateOutMode(t,e,i,n){switch(i){case o.OutMode.bounce:case o.OutMode.bounceVertical:case o.OutMode.bounceHorizontal:case"bounceVertical":case"bounceHorizontal":case o.OutMode.split:this.bounce(t,e,n,i);break;case o.OutMode.destroy:this.destroy(t,n);break;case o.OutMode.out:this.out(t,n);break;case o.OutMode.none:default:this.none(t,n)}}destroy(t,e){const i=this.container;(0,n.isPointInside)(t.position,i.canvas.size,t.getRadius(),e)||i.particles.remove(t,void 0,!0)}out(t,e){const i=this.container;if((0,n.isPointInside)(t.position,i.canvas.size,t.getRadius(),e))return;const s=t.options.move.warp,a=i.canvas.size,r={bottom:a.height+t.getRadius()+t.offset.y,left:-t.getRadius()-t.offset.x,right:a.width+t.getRadius()+t.offset.x,top:-t.getRadius()-t.offset.y},l=t.getRadius(),c=(0,n.calculateBounds)(t.position,l);e===o.OutModeDirection.right&&c.left>a.width+t.offset.x?(t.position.x=r.left,t.initialPosition.x=t.position.x,s||(t.position.y=Math.random()*a.height,t.initialPosition.y=t.position.y)):e===o.OutModeDirection.left&&c.right<-t.offset.x&&(t.position.x=r.right,t.initialPosition.x=t.position.x,s||(t.position.y=Math.random()*a.height,t.initialPosition.y=t.position.y)),e===o.OutModeDirection.bottom&&c.top>a.height+t.offset.y?(s||(t.position.x=Math.random()*a.width,t.initialPosition.x=t.position.x),t.position.y=r.top,t.initialPosition.y=t.position.y):e===o.OutModeDirection.top&&c.bottom<-t.offset.y&&(s||(t.position.x=Math.random()*a.width,t.initialPosition.x=t.position.x),t.position.y=r.bottom,t.initialPosition.y=t.position.y)}bounce(t,e,i,o){const a=this.container;let r=!1;for(const[,n]of a.plugins)if(void 0!==n.particleBounce&&(r=n.particleBounce(t,e,i)),r)break;if(r)return;const l=t.getPosition(),c=t.offset,d=t.getRadius(),h=(0,n.calculateBounds)(l,d),u=a.canvas.size;(0,s.bounceHorizontal)({particle:t,outMode:o,direction:i,bounds:h,canvasSize:u,offset:c,size:d}),(0,s.bounceVertical)({particle:t,outMode:o,direction:i,bounds:h,canvasSize:u,offset:c,size:d})}none(t,e){if(t.options.move.distance.horizontal&&(e===o.OutModeDirection.left||e===o.OutModeDirection.right)||t.options.move.distance.vertical&&(e===o.OutModeDirection.top||e===o.OutModeDirection.bottom))return;const i=t.options.move.gravity,s=this.container,a=s.canvas.size,r=t.getRadius();if(i.enable){const n=t.position;(!i.inverse&&n.y>a.height+r&&e===o.OutModeDirection.bottom||i.inverse&&n.y<-r&&e===o.OutModeDirection.top)&&s.particles.remove(t)}else{if(t.velocity.y>0&&t.position.y<=a.height+r||t.velocity.y<0&&t.position.y>=-r||t.velocity.x>0&&t.position.x<=a.width+r||t.velocity.x<0&&t.position.x>=-r)return;(0,n.isPointInside)(t.position,s.canvas.size,r,e)||s.particles.remove(t)}}}},8055:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.bounceVertical=e.bounceHorizontal=void 0;const n=i(6331),o=i(7373);e.bounceHorizontal=function(t){if(t.outMode!==n.OutMode.bounce&&t.outMode!==n.OutMode.bounceHorizontal&&"bounceHorizontal"!==t.outMode&&t.outMode!==n.OutMode.split)return;const e=t.particle.velocity.x;let i=!1;if(t.direction===n.OutModeDirection.right&&t.bounds.right>=t.canvasSize.width&&e>0||t.direction===n.OutModeDirection.left&&t.bounds.left<=0&&e<0){const e=(0,o.getRangeValue)(t.particle.options.bounce.horizontal.value);t.particle.velocity.x*=-e,i=!0}if(!i)return;const s=t.offset.x+t.size;t.bounds.right>=t.canvasSize.width?t.particle.position.x=t.canvasSize.width-s:t.bounds.left<=0&&(t.particle.position.x=s),t.outMode===n.OutMode.split&&t.particle.destroy()},e.bounceVertical=function(t){if(t.outMode===n.OutMode.bounce||t.outMode===n.OutMode.bounceVertical||"bounceVertical"===t.outMode||t.outMode===n.OutMode.split){const e=t.particle.velocity.y;let i=!1;if(t.direction===n.OutModeDirection.bottom&&t.bounds.bottom>=t.canvasSize.height&&e>0||t.direction===n.OutModeDirection.top&&t.bounds.top<=0&&e<0){const e=(0,o.getRangeValue)(t.particle.options.bounce.vertical.value);t.particle.velocity.y*=-e,i=!0}if(!i)return;const s=t.offset.y+t.size;t.bounds.bottom>=t.canvasSize.height?t.particle.position.y=t.canvasSize.height-s:t.bounds.top<=0&&(t.particle.position.y=s),t.outMode===n.OutMode.split&&t.particle.destroy()}}},6086:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadOutModesUpdater=void 0;const n=i(9138);e.loadOutModesUpdater=async function(t){await t.addParticleUpdater("outModes",(t=>new n.OutOfCanvasUpdater(t)))}},8486:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.RollUpdater=void 0;const n=i(7373),o=i(6331);e.RollUpdater=class{init(t){const e=t.options.roll;if(e.enable)if(t.roll={angle:Math.random()*Math.PI*2,speed:(0,n.getRangeValue)(e.speed)/360},e.backColor)t.backColor=(0,n.colorToHsl)(e.backColor);else if(e.darken.enable&&e.enlighten.enable){const i=Math.random()>=.5?o.AlterType.darken:o.AlterType.enlighten;t.roll.alter={type:i,value:i===o.AlterType.darken?e.darken.value:e.enlighten.value}}else e.darken.enable?t.roll.alter={type:o.AlterType.darken,value:e.darken.value}:e.enlighten.enable&&(t.roll.alter={type:o.AlterType.enlighten,value:e.enlighten.value});else t.roll={angle:0,speed:0}}isEnabled(t){const e=t.options.roll;return!t.destroyed&&!t.spawning&&e.enable}update(t,e){this.isEnabled(t)&&function(t,e){const i=t.options.roll;if(!t.roll||!i.enable)return;const n=t.roll.speed*e.factor,o=2*Math.PI;t.roll.angle+=n,t.roll.angle>o&&(t.roll.angle-=o)}(t,e)}}},2124:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadRollUpdater=void 0;const n=i(8486);e.loadRollUpdater=async function(t){await t.addParticleUpdater("roll",(()=>new n.RollUpdater))}},457:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SizeUpdater=void 0;const n=i(6331),o=i(7373);e.SizeUpdater=class{init(){}isEnabled(t){var e,i,n;return!t.destroyed&&!t.spawning&&t.size.enable&&((null!==(e=t.size.loops)&&void 0!==e?e:0)<=0||(null!==(i=t.size.loops)&&void 0!==i?i:0)<(null!==(n=t.size.maxLoops)&&void 0!==n?n:0))}update(t,e){this.isEnabled(t)&&function(t,e){var i,s,a,r;const l=(null!==(i=t.size.velocity)&&void 0!==i?i:0)*e.factor,c=t.size.min,d=t.size.max;if(!t.destroyed&&t.size.enable&&((null!==(s=t.size.loops)&&void 0!==s?s:0)<=0||(null!==(a=t.size.loops)&&void 0!==a?a:0)<(null!==(r=t.size.maxLoops)&&void 0!==r?r:0))){switch(t.size.status){case n.AnimationStatus.increasing:t.size.value>=d?(t.size.status=n.AnimationStatus.decreasing,t.size.loops||(t.size.loops=0),t.size.loops++):t.size.value+=l;break;case n.AnimationStatus.decreasing:t.size.value<=c?(t.size.status=n.AnimationStatus.increasing,t.size.loops||(t.size.loops=0),t.size.loops++):t.size.value-=l}!function(t,e,i,o){switch(t.options.size.animation.destroy){case n.DestroyType.max:e>=o&&t.destroy();break;case n.DestroyType.min:e<=i&&t.destroy()}}(t,t.size.value,c,d),t.destroyed||(t.size.value=(0,o.clamp)(t.size.value,c,d))}}(t,e)}}},1004:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadSizeUpdater=void 0;const n=i(457);e.loadSizeUpdater=async function(t){await t.addParticleUpdater("size",(()=>new n.SizeUpdater))}},2965:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.StrokeColorUpdater=void 0;const n=i(7373),o=i(6331);function s(t,e,i,s,a){var r;const l=e;if(!l||!l.enable)return;const c=(0,n.randomInRange)(i.offset),d=(null!==(r=e.velocity)&&void 0!==r?r:0)*t.factor+3.6*c;a&&l.status!==o.AnimationStatus.increasing?(l.value-=d,l.value<0&&(l.status=o.AnimationStatus.increasing,l.value+=l.value)):(l.value+=d,a&&l.value>s&&(l.status=o.AnimationStatus.decreasing,l.value-=l.value%s)),l.value>s&&(l.value%=s)}e.StrokeColorUpdater=class{constructor(t){this.container=t}init(t){var e,i;const o=this.container;t.stroke=t.options.stroke instanceof Array?(0,n.itemFromArray)(t.options.stroke,t.id,t.options.reduceDuplicates):t.options.stroke,t.strokeWidth=t.stroke.width*o.retina.pixelRatio;const s=null!==(e=(0,n.colorToHsl)(t.stroke.color))&&void 0!==e?e:t.getFillColor();s&&(t.strokeColor=(0,n.getHslAnimationFromHsl)(s,null===(i=t.stroke.color)||void 0===i?void 0:i.animation,o.retina.reduceFactor))}isEnabled(t){var e,i,n,o;const s=null===(e=t.stroke)||void 0===e?void 0:e.color;return!t.destroyed&&!t.spawning&&!!s&&(void 0!==(null===(i=t.strokeColor)||void 0===i?void 0:i.h.value)&&s.animation.h.enable||void 0!==(null===(n=t.strokeColor)||void 0===n?void 0:n.s.value)&&s.animation.s.enable||void 0!==(null===(o=t.strokeColor)||void 0===o?void 0:o.l.value)&&s.animation.l.enable)}update(t,e){this.isEnabled(t)&&function(t,e){var i,n,o,a,r,l,c,d,h,u;if(!(null===(i=t.stroke)||void 0===i?void 0:i.color))return;const p=t.stroke.color.animation,v=null!==(o=null===(n=t.strokeColor)||void 0===n?void 0:n.h)&&void 0!==o?o:null===(a=t.color)||void 0===a?void 0:a.h;v&&s(e,v,p.h,360,!1);const y=null!==(l=null===(r=t.strokeColor)||void 0===r?void 0:r.s)&&void 0!==l?l:null===(c=t.color)||void 0===c?void 0:c.s;y&&s(e,y,p.s,100,!0);const g=null!==(h=null===(d=t.strokeColor)||void 0===d?void 0:d.l)&&void 0!==h?h:null===(u=t.color)||void 0===u?void 0:u.l;g&&s(e,g,p.l,100,!0)}(t,e)}}},7065:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadStrokeColorUpdater=void 0;const n=i(2965);e.loadStrokeColorUpdater=async function(t){await t.addParticleUpdater("strokeColor",(t=>new n.StrokeColorUpdater(t)))}},6505:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.TiltUpdater=void 0;const n=i(6331),o=i(7373);e.TiltUpdater=class{constructor(t){this.container=t}init(t){const e=t.options.tilt;t.tilt={enable:e.enable,value:(0,o.getRangeValue)(e.value)*Math.PI/180,sinDirection:Math.random()>=.5?1:-1,cosDirection:Math.random()>=.5?1:-1};let i=e.direction;switch(i===n.TiltDirection.random&&(i=Math.floor(2*Math.random())>0?n.TiltDirection.counterClockwise:n.TiltDirection.clockwise),i){case n.TiltDirection.counterClockwise:case"counterClockwise":t.tilt.status=n.AnimationStatus.decreasing;break;case n.TiltDirection.clockwise:t.tilt.status=n.AnimationStatus.increasing}const s=t.options.tilt.animation;s.enable&&(t.tilt.velocity=s.speed/360*this.container.retina.reduceFactor,s.sync||(t.tilt.velocity*=Math.random()))}isEnabled(t){const e=t.options.tilt.animation;return!t.destroyed&&!t.spawning&&e.enable}update(t,e){this.isEnabled(t)&&function(t,e){var i;if(!t.tilt)return;const o=t.options.tilt.animation,s=(null!==(i=t.tilt.velocity)&&void 0!==i?i:0)*e.factor,a=2*Math.PI;if(o.enable)switch(t.tilt.status){case n.AnimationStatus.increasing:t.tilt.value+=s,t.tilt.value>a&&(t.tilt.value-=a);break;case n.AnimationStatus.decreasing:default:t.tilt.value-=s,t.tilt.value<0&&(t.tilt.value+=a)}}(t,e)}}},2453:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadTiltUpdater=void 0;const n=i(6505);e.loadTiltUpdater=async function(t){await t.addParticleUpdater("tilt",(t=>new n.TiltUpdater(t)))}},8467:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.WobbleUpdater=void 0;const n=i(7373);e.WobbleUpdater=class{constructor(t){this.container=t}init(t){const e=t.options.wobble;e.enable?t.wobble={angle:Math.random()*Math.PI*2,speed:(0,n.getRangeValue)(e.speed)/360}:t.wobble={angle:0,speed:0},t.retina.wobbleDistance=(0,n.getRangeValue)(e.distance)*this.container.retina.pixelRatio}isEnabled(t){return!t.destroyed&&!t.spawning&&t.options.wobble.enable}update(t,e){this.isEnabled(t)&&function(t,e){var i;if(!t.options.wobble.enable||!t.wobble)return;const n=t.wobble.speed*e.factor,o=(null!==(i=t.retina.wobbleDistance)&&void 0!==i?i:0)*e.factor/(1e3/60),s=2*Math.PI;t.wobble.angle+=n,t.wobble.angle>s&&(t.wobble.angle-=s),t.position.x+=o*Math.cos(t.wobble.angle),t.position.y+=o*Math.abs(Math.sin(t.wobble.angle))}(t,e)}}},7175:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadWobbleUpdater=void 0;const n=i(8467);e.loadWobbleUpdater=async function(t){await t.addParticleUpdater("wobble",(t=>new n.WobbleUpdater(t)))}},1680:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.alterHsl=e.drawEllipse=e.drawParticlePlugin=e.drawPlugin=e.drawShapeAfterEffect=e.drawShape=e.drawParticle=e.drawGrabLine=e.gradient=e.drawConnectLine=e.drawLinkTriangle=e.drawLinkLine=e.clear=e.paintBase=void 0;const n=i(3939),o=i(2323),s=i(6331);function a(t,e,i){t.beginPath(),t.moveTo(e.x,e.y),t.lineTo(i.x,i.y),t.closePath()}function r(t,e,i,n,o,s){if(!i.shape)return;const a=t.drawers.get(i.shape);a&&a.draw(e,i,n,o,s,t.retina.pixelRatio)}function l(t,e,i,n,o,s){if(!i.shape)return;const a=t.drawers.get(i.shape);(null==a?void 0:a.afterEffect)&&a.afterEffect(e,i,n,o,s,t.retina.pixelRatio)}e.paintBase=function(t,e,i){t.save(),t.fillStyle=null!=i?i:"rgba(0,0,0,0)",t.fillRect(0,0,e.width,e.height),t.restore()},e.clear=function(t,e){t.clearRect(0,0,e.width,e.height)},e.drawLinkLine=function(t,e,i,s,r,l,c,d,h,u,p,v){let y=!1;if((0,n.getDistance)(i,s)<=r)a(t,i,s),y=!0;else if(c){let e,o;const c={x:s.x-l.width,y:s.y},d=(0,n.getDistances)(i,c);if(d.distance<=r){const t=i.y-d.dy/d.dx*i.x;e={x:0,y:t},o={x:l.width,y:t}}else{const t={x:s.x,y:s.y-l.height},a=(0,n.getDistances)(i,t);if(a.distance<=r){const t=-(i.y-a.dy/a.dx*i.x)/(a.dy/a.dx);e={x:t,y:0},o={x:t,y:l.height}}else{const t={x:s.x-l.width,y:s.y-l.height},a=(0,n.getDistances)(i,t);if(a.distance<=r){const t=i.y-a.dy/a.dx*i.x;e={x:-t/(a.dy/a.dx),y:t},o={x:e.x+l.width,y:e.y+l.height}}}}e&&o&&(a(t,i,e),a(t,s,o),y=!0)}if(y){if(t.lineWidth=e,d&&(t.globalCompositeOperation=h),t.strokeStyle=(0,o.getStyleFromRgb)(u,p),v.enable){const e=(0,o.colorToRgb)(v.color);e&&(t.shadowBlur=v.blur,t.shadowColor=(0,o.getStyleFromRgb)(e))}t.stroke()}},e.drawLinkTriangle=function(t,e,i,n,s,a,r,l){!function(t,e,i,n){t.beginPath(),t.moveTo(e.x,e.y),t.lineTo(i.x,i.y),t.lineTo(n.x,n.y),t.closePath()}(t,e,i,n),s&&(t.globalCompositeOperation=a),t.fillStyle=(0,o.getStyleFromRgb)(r,l),t.fill()},e.drawConnectLine=function(t,e,i,n,o){t.save(),a(t,n,o),t.lineWidth=e,t.strokeStyle=i,t.stroke(),t.restore()},e.gradient=function(t,e,i,n){const s=Math.floor(i.getRadius()/e.getRadius()),a=e.getFillColor(),r=i.getFillColor();if(!a||!r)return;const l=e.getPosition(),c=i.getPosition(),d=(0,o.colorMix)(a,r,e.getRadius(),i.getRadius()),h=t.createLinearGradient(l.x,l.y,c.x,c.y);return h.addColorStop(0,(0,o.getStyleFromHsl)(a,n)),h.addColorStop(s>1?1:s,(0,o.getStyleFromRgb)(d,n)),h.addColorStop(1,(0,o.getStyleFromHsl)(r,n)),h},e.drawGrabLine=function(t,e,i,n,s,r){t.save(),a(t,i,n),t.strokeStyle=(0,o.getStyleFromRgb)(s,r),t.lineWidth=e,t.stroke(),t.restore()},e.drawParticle=function(t,e,i,n,a,c,d,h,u,p,v,y){var g,f,m,b,w,A;const S=i.getPosition(),_=i.options.tilt,P=i.options.roll;if(e.save(),_.enable||P.enable){const t=P.enable&&i.roll,n=_.enable&&i.tilt,o=t&&(P.mode===s.RollMode.horizontal||P.mode===s.RollMode.both),a=t&&(P.mode===s.RollMode.vertical||P.mode===s.RollMode.both);e.setTransform(o?Math.cos(i.roll.angle):1,n?Math.cos(i.tilt.value)*i.tilt.cosDirection:0,n?Math.sin(i.tilt.value)*i.tilt.sinDirection:0,a?Math.sin(i.roll.angle):1,S.x,S.y)}else e.translate(S.x,S.y);e.beginPath();const C=(null!==(f=null===(g=i.rotate)||void 0===g?void 0:g.value)&&void 0!==f?f:0)+(i.options.rotate.path?i.velocity.angle:0);0!==C&&e.rotate(C),d&&(e.globalCompositeOperation=h);const x=i.shadowColor;if(v.enable&&x&&(e.shadowBlur=v.blur,e.shadowColor=(0,o.getStyleFromRgb)(x),e.shadowOffsetX=v.offset.x,e.shadowOffsetY=v.offset.y),y){const t=y.angle.value,i=y.type===s.GradientType.radial?e.createRadialGradient(0,0,0,0,0,u):e.createLinearGradient(Math.cos(t)*-u,Math.sin(t)*-u,Math.cos(t)*u,Math.sin(t)*u);for(const t of y.colors)i.addColorStop(t.stop,(0,o.getStyleFromHsl)({h:t.value.h.value,s:t.value.s.value,l:t.value.l.value},null!==(b=null===(m=t.opacity)||void 0===m?void 0:m.value)&&void 0!==b?b:p));e.fillStyle=i}else a&&(e.fillStyle=a);const E=i.stroke;e.lineWidth=null!==(w=i.strokeWidth)&&void 0!==w?w:0,c&&(e.strokeStyle=c),r(t,e,i,u,p,n),(null!==(A=null==E?void 0:E.width)&&void 0!==A?A:0)>0&&e.stroke(),i.close&&e.closePath(),i.fill&&e.fill(),e.restore(),e.save(),_.enable&&i.tilt?e.setTransform(1,Math.cos(i.tilt.value)*i.tilt.cosDirection,Math.sin(i.tilt.value)*i.tilt.sinDirection,1,S.x,S.y):e.translate(S.x,S.y),0!==C&&e.rotate(C),d&&(e.globalCompositeOperation=h),l(t,e,i,u,p,n),e.restore()},e.drawShape=r,e.drawShapeAfterEffect=l,e.drawPlugin=function(t,e,i){e.draw&&(t.save(),e.draw(t,i),t.restore())},e.drawParticlePlugin=function(t,e,i,n){void 0!==e.drawParticle&&(t.save(),e.drawParticle(t,i,n),t.restore())},e.drawEllipse=function(t,e,i,n,s,a,r,l,c){const d=e.getPosition();if(i&&(t.strokeStyle=(0,o.getStyleFromHsl)(i,s)),0===a)return;t.lineWidth=a;const h=r*Math.PI/180;t.beginPath(),t.ellipse(d.x,d.y,n/2,2*n,h,l,c),t.stroke()},e.alterHsl=function(t,e,i){return{h:t.h,s:t.s,l:t.l+(e===s.AlterType.darken?-1:1)*i}}},3232:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Circle=void 0;const n=i(2679),o=i(3939);class s extends n.Range{constructor(t,e,i){super(t,e),this.radius=i}contains(t){return(0,o.getDistance)(t,this.position)<=this.radius}intersects(t){const e=t,i=t,n=this.position,o=t.position,s=Math.abs(o.x-n.x),a=Math.abs(o.y-n.y),r=this.radius;if(void 0!==i.radius)return r+i.radius>Math.sqrt(s*s+a+a);if(void 0!==e.size){const t=e.size.width,i=e.size.height,n=Math.pow(s-t,2)+Math.pow(a-i,2);return!(s>r+t||a>r+i)&&(s<=t||a<=i||n<=r*r)}return!1}}e.Circle=s},5407:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.CircleWarp=void 0;const n=i(8191),o=i(3232);class s extends o.Circle{constructor(t,e,i,n){super(t,e,i),this.canvasSize=n,this.canvasSize={height:n.height,width:n.width}}contains(t){if(super.contains(t))return!0;const e={x:t.x-this.canvasSize.width,y:t.y};if(super.contains(e))return!0;const i={x:t.x-this.canvasSize.width,y:t.y-this.canvasSize.height};if(super.contains(i))return!0;const n={x:t.x,y:t.y-this.canvasSize.height};return super.contains(n)}intersects(t){if(super.intersects(t))return!0;const e=t,i=t,s={x:t.position.x-this.canvasSize.width,y:t.position.y-this.canvasSize.height};if(void 0!==i.radius){const t=new o.Circle(s.x,s.y,2*i.radius);return super.intersects(t)}if(void 0!==e.size){const t=new n.Rectangle(s.x,s.y,2*e.size.width,2*e.size.height);return super.intersects(t)}return!1}}e.CircleWarp=s},2323:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.getHslAnimationFromHsl=e.getHslFromAnimation=e.getLinkRandomColor=e.getLinkColor=e.colorMix=e.getStyleFromHsv=e.getStyleFromHsl=e.getStyleFromRgb=e.getRandomRgbColor=e.rgbaToHsva=e.rgbToHsv=e.hsvaToRgba=e.hsvToRgb=e.hsvaToHsla=e.hsvToHsl=e.hslaToHsva=e.hslToHsv=e.hslaToRgba=e.hslToRgb=e.stringToRgb=e.stringToAlpha=e.rgbToHsl=e.colorToHsl=e.colorToRgb=void 0;const n=i(1611),o=i(1565),s=i(3939),a=i(6331);function r(t,e,i){let n=i;return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+(e-t)*(2/3-n)*6:t}function l(t){if(t.startsWith("rgb")){const e=/rgba?\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([\d.]+)\s*)?\)/i.exec(t);return e?{a:e.length>4?parseFloat(e[5]):1,b:parseInt(e[3],10),g:parseInt(e[2],10),r:parseInt(e[1],10)}:void 0}if(t.startsWith("hsl")){const e=/hsla?\(\s*(\d+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(,\s*([\d.]+)\s*)?\)/i.exec(t);return e?p({a:e.length>4?parseFloat(e[5]):1,h:parseInt(e[1],10),l:parseInt(e[3],10),s:parseInt(e[2],10)}):void 0}if(t.startsWith("hsv")){const e=/hsva?\(\s*(\d+)°\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(,\s*([\d.]+)\s*)?\)/i.exec(t);return e?f({a:e.length>4?parseFloat(e[5]):1,h:parseInt(e[1],10),s:parseInt(e[2],10),v:parseInt(e[3],10)}):void 0}{const e=/^#?([a-f\d])([a-f\d])([a-f\d])([a-f\d])?$/i,i=t.replace(e,((t,e,i,n,o)=>e+e+i+i+n+n+(void 0!==o?o+o:""))),n=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})?$/i.exec(i);return n?{a:void 0!==n[4]?parseInt(n[4],16)/255:1,b:parseInt(n[3],16),g:parseInt(n[2],16),r:parseInt(n[1],16)}:void 0}}function c(t,e,i=!0){var s,a,r;if(void 0===t)return;const l="string"==typeof t?{value:t}:t;let d;if("string"==typeof l.value)d=l.value===o.Constants.randomColorValue?b():h(l.value);else if(l.value instanceof Array)d=c({value:(0,n.itemFromArray)(l.value,e,i)});else{const t=l.value,e=null!==(s=t.rgb)&&void 0!==s?s:l.value;if(void 0!==e.r)d=e;else{const e=null!==(a=t.hsl)&&void 0!==a?a:l.value;if(void 0!==e.h&&void 0!==e.l)d=u(e);else{const e=null!==(r=t.hsv)&&void 0!==r?r:l.value;void 0!==e.h&&void 0!==e.v&&(d=g(e))}}}return d}function d(t){const e=t.r/255,i=t.g/255,n=t.b/255,o=Math.max(e,i,n),s=Math.min(e,i,n),a={h:0,l:(o+s)/2,s:0};return o!=s&&(a.s=a.l<.5?(o-s)/(o+s):(o-s)/(2-o-s),a.h=e===o?(i-n)/(o-s):a.h=i===o?2+(n-e)/(o-s):4+(e-i)/(o-s)),a.l*=100,a.s*=100,a.h*=60,a.h<0&&(a.h+=360),a}function h(t){return l(t)}function u(t){const e={b:0,g:0,r:0},i={h:t.h/360,l:t.l/100,s:t.s/100};if(0===i.s)e.b=i.l,e.g=i.l,e.r=i.l;else{const t=i.l<.5?i.l*(1+i.s):i.l+i.s-i.l*i.s,n=2*i.l-t;e.r=r(n,t,i.h+1/3),e.g=r(n,t,i.h),e.b=r(n,t,i.h-1/3)}return e.r=Math.floor(255*e.r),e.g=Math.floor(255*e.g),e.b=Math.floor(255*e.b),e}function p(t){const e=u(t);return{a:t.a,b:e.b,g:e.g,r:e.r}}function v(t){const e=t.l/100,i=e+t.s/100*Math.min(e,1-e),n=i?2*(1-e/i):0;return{h:t.h,s:100*n,v:100*i}}function y(t){const e=t.v/100,i=e*(1-t.s/100/2),n=0===i||1===i?0:(e-i)/Math.min(i,1-i);return{h:t.h,l:100*i,s:100*n}}function g(t){const e={b:0,g:0,r:0},i=t.h/60,n=t.s/100,o=t.v/100,s=o*n,a=s*(1-Math.abs(i%2-1));let r;if(i>=0&&i<=1?r={r:s,g:a,b:0}:i>1&&i<=2?r={r:a,g:s,b:0}:i>2&&i<=3?r={r:0,g:s,b:a}:i>3&&i<=4?r={r:0,g:a,b:s}:i>4&&i<=5?r={r:a,g:0,b:s}:i>5&&i<=6&&(r={r:s,g:0,b:a}),r){const t=o-s;e.r=Math.floor(255*(r.r+t)),e.g=Math.floor(255*(r.g+t)),e.b=Math.floor(255*(r.b+t))}return e}function f(t){const e=g(t);return{a:t.a,b:e.b,g:e.g,r:e.r}}function m(t){const e={r:t.r/255,g:t.g/255,b:t.b/255},i=Math.max(e.r,e.g,e.b),n=i-Math.min(e.r,e.g,e.b);let o=0;return i===e.r?o=(e.g-e.b)/n*60:i===e.g?o=60*(2+(e.b-e.r)/n):i===e.b&&(o=60*(4+(e.r-e.g)/n)),{h:o,s:100*(i?n/i:0),v:100*i}}function b(t){const e=null!=t?t:0;return{b:Math.floor((0,s.randomInRange)((0,s.setRangeValue)(e,256))),g:Math.floor((0,s.randomInRange)((0,s.setRangeValue)(e,256))),r:Math.floor((0,s.randomInRange)((0,s.setRangeValue)(e,256)))}}function w(t,e){return`hsla(${t.h}, ${t.s}%, ${t.l}%, ${null!=e?e:1})`}function A(t,e,i,n){let o=t,a=e;return void 0===o.r&&(o=u(t)),void 0===a.r&&(a=u(e)),{b:(0,s.mix)(o.b,a.b,i,n),g:(0,s.mix)(o.g,a.g,i,n),r:(0,s.mix)(o.r,a.r,i,n)}}function S(t,e,i){if(t.enable=e.enable,t.enable){if(t.velocity=e.speed/100*i,e.sync)return;t.status=a.AnimationStatus.increasing,t.velocity*=Math.random(),t.value&&(t.value*=Math.random())}else t.velocity=0}e.colorToRgb=c,e.colorToHsl=function(t,e,i=!0){const n=c(t,e,i);return void 0!==n?d(n):void 0},e.rgbToHsl=d,e.stringToAlpha=function(t){var e;return null===(e=l(t))||void 0===e?void 0:e.a},e.stringToRgb=h,e.hslToRgb=u,e.hslaToRgba=p,e.hslToHsv=v,e.hslaToHsva=function(t){const e=v(t);return{a:t.a,h:e.h,s:e.s,v:e.v}},e.hsvToHsl=y,e.hsvaToHsla=function(t){const e=y(t);return{a:t.a,h:e.h,l:e.l,s:e.s}},e.hsvToRgb=g,e.hsvaToRgba=f,e.rgbToHsv=m,e.rgbaToHsva=function(t){const e=m(t);return{a:t.a,h:e.h,s:e.s,v:e.v}},e.getRandomRgbColor=b,e.getStyleFromRgb=function(t,e){return`rgba(${t.r}, ${t.g}, ${t.b}, ${null!=e?e:1})`},e.getStyleFromHsl=w,e.getStyleFromHsv=function(t,e){return w(y(t),e)},e.colorMix=A,e.getLinkColor=function(t,e,i){var n,s;if(i===o.Constants.randomColorValue)return b();if("mid"!==i)return i;{const i=null!==(n=t.getFillColor())&&void 0!==n?n:t.getStrokeColor(),o=null!==(s=null==e?void 0:e.getFillColor())&&void 0!==s?s:null==e?void 0:e.getStrokeColor();if(i&&o&&e)return A(i,o,t.getRadius(),e.getRadius());{const t=null!=i?i:o;if(t)return u(t)}}},e.getLinkRandomColor=function(t,e,i){const n="string"==typeof t?t:t.value;return n===o.Constants.randomColorValue?i?c({value:n}):e?o.Constants.randomColorValue:o.Constants.midColorValue:c({value:n})},e.getHslFromAnimation=function(t){return void 0!==t?{h:t.h.value,s:t.s.value,l:t.l.value}:void 0},e.getHslAnimationFromHsl=function(t,e,i){const n={h:{enable:!1,value:t.h},s:{enable:!1,value:t.s},l:{enable:!1,value:t.l}};return e&&(S(n.h,e.h,i),S(n.s,e.s,i),S(n.l,e.l,i)),n}},1565:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Constants=void 0;class i{}e.Constants=i,i.canvasClass="tsparticles-canvas-el",i.randomColorValue="random",i.midColorValue="mid",i.touchEndEvent="touchend",i.mouseDownEvent="mousedown",i.mouseUpEvent="mouseup",i.mouseMoveEvent="mousemove",i.touchStartEvent="touchstart",i.touchMoveEvent="touchmove",i.mouseLeaveEvent="mouseleave",i.mouseOutEvent="mouseout",i.touchCancelEvent="touchcancel",i.resizeEvent="resize",i.visibilityChangeEvent="visibilitychange",i.noPolygonDataLoaded="No polygon data loaded.",i.noPolygonFound="No polygon found, you need to specify SVG url in config."},6270:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.EventListeners=void 0;const n=i(6331),o=i(1565),s=i(1611);function a(t,e,i,n,o){if(n){let n={passive:!0};"boolean"==typeof o?n.capture=o:void 0!==o&&(n=o),t.addEventListener(e,i,n)}else{const n=o;t.removeEventListener(e,i,n)}}e.EventListeners=class{constructor(t){this.container=t,this.canPush=!0,this.mouseMoveHandler=t=>this.mouseTouchMove(t),this.touchStartHandler=t=>this.mouseTouchMove(t),this.touchMoveHandler=t=>this.mouseTouchMove(t),this.touchEndHandler=()=>this.mouseTouchFinish(),this.mouseLeaveHandler=()=>this.mouseTouchFinish(),this.touchCancelHandler=()=>this.mouseTouchFinish(),this.touchEndClickHandler=t=>this.mouseTouchClick(t),this.mouseUpHandler=t=>this.mouseTouchClick(t),this.mouseDownHandler=()=>this.mouseDown(),this.visibilityChangeHandler=()=>this.handleVisibilityChange(),this.themeChangeHandler=t=>this.handleThemeChange(t),this.oldThemeChangeHandler=t=>this.handleThemeChange(t),this.resizeHandler=()=>this.handleWindowResize()}addListeners(){this.manageListeners(!0)}removeListeners(){this.manageListeners(!1)}manageListeners(t){var e;const i=this.container,r=i.actualOptions,l=r.interactivity.detectsOn;let c=o.Constants.mouseLeaveEvent;if(l===n.InteractivityDetect.window)i.interactivity.element=window,c=o.Constants.mouseOutEvent;else if(l===n.InteractivityDetect.parent&&i.canvas.element){const t=i.canvas.element;i.interactivity.element=null!==(e=t.parentElement)&&void 0!==e?e:t.parentNode}else i.interactivity.element=i.canvas.element;const d=!(0,s.isSsr)()&&"undefined"!=typeof matchMedia&&matchMedia("(prefers-color-scheme: dark)");d&&(void 0!==d.addEventListener?a(d,"change",this.themeChangeHandler,t):void 0!==d.addListener&&(t?d.addListener(this.oldThemeChangeHandler):d.removeListener(this.oldThemeChangeHandler)));const h=i.interactivity.element;if(!h)return;const u=h;(r.interactivity.events.onHover.enable||r.interactivity.events.onClick.enable)&&(a(h,o.Constants.mouseMoveEvent,this.mouseMoveHandler,t),a(h,o.Constants.touchStartEvent,this.touchStartHandler,t),a(h,o.Constants.touchMoveEvent,this.touchMoveHandler,t),r.interactivity.events.onClick.enable?(a(h,o.Constants.touchEndEvent,this.touchEndClickHandler,t),a(h,o.Constants.mouseUpEvent,this.mouseUpHandler,t),a(h,o.Constants.mouseDownEvent,this.mouseDownHandler,t)):a(h,o.Constants.touchEndEvent,this.touchEndHandler,t),a(h,c,this.mouseLeaveHandler,t),a(h,o.Constants.touchCancelEvent,this.touchCancelHandler,t)),i.canvas.element&&(i.canvas.element.style.pointerEvents=u===i.canvas.element?"initial":"none"),r.interactivity.events.resize&&("undefined"!=typeof ResizeObserver?this.resizeObserver&&!t?(i.canvas.element&&this.resizeObserver.unobserve(i.canvas.element),this.resizeObserver.disconnect(),delete this.resizeObserver):!this.resizeObserver&&t&&i.canvas.element&&(this.resizeObserver=new ResizeObserver((t=>{t.find((t=>t.target===i.canvas.element))&&this.handleWindowResize()})),this.resizeObserver.observe(i.canvas.element)):a(window,o.Constants.resizeEvent,this.resizeHandler,t)),document&&a(document,o.Constants.visibilityChangeEvent,this.visibilityChangeHandler,t,!1)}handleWindowResize(){this.resizeTimeout&&(clearTimeout(this.resizeTimeout),delete this.resizeTimeout),this.resizeTimeout=setTimeout((()=>{var t;return null===(t=this.container.canvas)||void 0===t?void 0:t.windowResize()}),500)}handleVisibilityChange(){const t=this.container,e=t.actualOptions;this.mouseTouchFinish(),e.pauseOnBlur&&((null===document||void 0===document?void 0:document.hidden)?(t.pageHidden=!0,t.pause()):(t.pageHidden=!1,t.getAnimationStatus()?t.play(!0):t.draw(!0)))}mouseDown(){const t=this.container.interactivity;if(t){const e=t.mouse;e.clicking=!0,e.downPosition=e.position}}mouseTouchMove(t){var e,i,s,a,r,l,c;const d=this.container,h=d.actualOptions;if(void 0===(null===(e=d.interactivity)||void 0===e?void 0:e.element))return;let u;d.interactivity.mouse.inside=!0;const p=d.canvas.element;if(t.type.startsWith("mouse")){this.canPush=!0;const e=t;if(d.interactivity.element===window){if(p){const t=p.getBoundingClientRect();u={x:e.clientX-t.left,y:e.clientY-t.top}}}else if(h.interactivity.detectsOn===n.InteractivityDetect.parent){const t=e.target,n=e.currentTarget,o=d.canvas.element;if(t&&n&&o){const i=t.getBoundingClientRect(),s=n.getBoundingClientRect(),a=o.getBoundingClientRect();u={x:e.offsetX+2*i.left-(s.left+a.left),y:e.offsetY+2*i.top-(s.top+a.top)}}else u={x:null!==(i=e.offsetX)&&void 0!==i?i:e.clientX,y:null!==(s=e.offsetY)&&void 0!==s?s:e.clientY}}else e.target===d.canvas.element&&(u={x:null!==(a=e.offsetX)&&void 0!==a?a:e.clientX,y:null!==(r=e.offsetY)&&void 0!==r?r:e.clientY})}else{this.canPush="touchmove"!==t.type;const e=t,i=e.touches[e.touches.length-1],n=null==p?void 0:p.getBoundingClientRect();u={x:i.clientX-(null!==(l=null==n?void 0:n.left)&&void 0!==l?l:0),y:i.clientY-(null!==(c=null==n?void 0:n.top)&&void 0!==c?c:0)}}const v=d.retina.pixelRatio;u&&(u.x*=v,u.y*=v),d.interactivity.mouse.position=u,d.interactivity.status=o.Constants.mouseMoveEvent}mouseTouchFinish(){const t=this.container.interactivity;if(void 0===t)return;const e=t.mouse;delete e.position,delete e.clickPosition,delete e.downPosition,t.status=o.Constants.mouseLeaveEvent,e.inside=!1,e.clicking=!1}mouseTouchClick(t){const e=this.container,i=e.actualOptions,n=e.interactivity.mouse;n.inside=!0;let o=!1;const s=n.position;if(void 0!==s&&i.interactivity.events.onClick.enable){for(const[,t]of e.plugins)if(void 0!==t.clickPositionValid&&(o=t.clickPositionValid(s),o))break;o||this.doMouseTouchClick(t),n.clicking=!1}}doMouseTouchClick(t){const e=this.container,i=e.actualOptions;if(this.canPush){const t=e.interactivity.mouse.position;if(!t)return;e.interactivity.mouse.clickPosition={x:t.x,y:t.y},e.interactivity.mouse.clickTime=(new Date).getTime();const n=i.interactivity.events.onClick;if(n.mode instanceof Array)for(const t of n.mode)this.handleClickMode(t);else this.handleClickMode(n.mode)}"touchend"===t.type&&setTimeout((()=>this.mouseTouchFinish()),500)}handleThemeChange(t){const e=t.matches?this.container.options.defaultDarkTheme:this.container.options.defaultLightTheme,i=this.container.options.themes.find((t=>t.name===e));i&&i.default.auto&&this.container.loadTheme(e)}handleClickMode(t){const e=this.container,i=e.actualOptions,o=i.interactivity.modes.push.quantity,a=i.interactivity.modes.remove.quantity;switch(t){case n.ClickMode.push:if(o>0){const t=i.interactivity.modes.push,n=(0,s.itemFromArray)([void 0,...t.groups]),a=void 0!==n?e.actualOptions.particles.groups[n]:void 0;e.particles.push(o,e.interactivity.mouse,a,n)}break;case n.ClickMode.remove:e.particles.removeQuantity(a);break;case n.ClickMode.bubble:e.bubble.clicking=!0;break;case n.ClickMode.repulse:e.repulse.clicking=!0,e.repulse.count=0;for(const t of e.repulse.particles)t.velocity.setTo(t.initialVelocity);e.repulse.particles=[],e.repulse.finish=!1,setTimeout((()=>{e.destroyed||(e.repulse.clicking=!1)}),1e3*i.interactivity.modes.repulse.duration);break;case n.ClickMode.attract:e.attract.clicking=!0,e.attract.count=0;for(const t of e.attract.particles)t.velocity.setTo(t.initialVelocity);e.attract.particles=[],e.attract.finish=!1,setTimeout((()=>{e.destroyed||(e.attract.clicking=!1)}),1e3*i.interactivity.modes.attract.duration);break;case n.ClickMode.pause:e.getAnimationStatus()?e.pause():e.play()}for(const[,i]of e.plugins)i.handleClickMode&&i.handleClickMode(t)}}},3939:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.calcEasing=e.collisionVelocity=e.getParticleBaseVelocity=e.getParticleDirectionAngle=e.getDistance=e.getDistances=e.getValue=e.setRangeValue=e.getRangeMax=e.getRangeMin=e.getRangeValue=e.randomInRange=e.mix=e.clamp=void 0;const n=i(6331),o=i(5638);function s(t){const e=l(t);let i=r(t);return e===i&&(i=0),Math.random()*(e-i)+i}function a(t){return"number"==typeof t?t:s(t)}function r(t){return"number"==typeof t?t:t.min}function l(t){return"number"==typeof t?t:t.max}function c(t,e){if(t===e||void 0===e&&"number"==typeof t)return t;const i=r(t),n=l(t);return void 0!==e?{min:Math.min(i,e),max:Math.max(n,e)}:c(i,n)}function d(t,e){const i=t.x-e.x,n=t.y-e.y;return{dx:i,dy:n,distance:Math.sqrt(i*i+n*n)}}e.clamp=function(t,e,i){return Math.min(Math.max(t,e),i)},e.mix=function(t,e,i,n){return Math.floor((t*i+e*n)/(i+n))},e.randomInRange=s,e.getRangeValue=a,e.getRangeMin=r,e.getRangeMax=l,e.setRangeValue=c,e.getValue=function(t){const e=t.random,{enable:i,minimumValue:n}="boolean"==typeof e?{enable:e,minimumValue:0}:e;return a(i?c(t.value,n):t.value)},e.getDistances=d,e.getDistance=function(t,e){return d(t,e).distance},e.getParticleDirectionAngle=function(t){if("number"==typeof t)return t*Math.PI/180;switch(t){case n.MoveDirection.top:return-Math.PI/2;case n.MoveDirection.topRight:return-Math.PI/4;case n.MoveDirection.right:return 0;case n.MoveDirection.bottomRight:return Math.PI/4;case n.MoveDirection.bottom:return Math.PI/2;case n.MoveDirection.bottomLeft:return 3*Math.PI/4;case n.MoveDirection.left:return Math.PI;case n.MoveDirection.topLeft:return-3*Math.PI/4;case n.MoveDirection.none:default:return Math.random()*Math.PI*2}},e.getParticleBaseVelocity=function(t){const e=o.Vector.origin;return e.length=1,e.angle=t,e},e.collisionVelocity=function(t,e,i,n){return o.Vector.create(t.x*(i-n)/(i+n)+2*e.x*n/(i+n),t.y)},e.calcEasing=function(t,e){switch(e){case n.EasingType.easeOutQuad:return 1-(1-t)**2;case n.EasingType.easeOutCubic:return 1-(1-t)**3;case n.EasingType.easeOutQuart:return 1-(1-t)**4;case n.EasingType.easeOutQuint:return 1-(1-t)**5;case n.EasingType.easeOutExpo:return 1===t?1:1-Math.pow(2,-10*t);case n.EasingType.easeOutSine:return Math.sin(t*Math.PI/2);case n.EasingType.easeOutBack:{const e=1.70158;return 1+(e+1)*Math.pow(t-1,3)+e*Math.pow(t-1,2)}case n.EasingType.easeOutCirc:return Math.sqrt(1-Math.pow(t-1,2));default:return t}}},4587:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Plugins=void 0;const i=[],n=new Map,o=new Map,s=new Map,a=new Map,r=new Map,l=new Map,c=new Map;class d{static getPlugin(t){return i.find((e=>e.id===t))}static addPlugin(t){d.getPlugin(t.id)||i.push(t)}static getAvailablePlugins(t){const e=new Map;for(const n of i)n.needsPlugin(t.actualOptions)&&e.set(n.id,n.getPlugin(t));return e}static loadOptions(t,e){for(const n of i)n.loadOptions(t,e)}static getPreset(t){return r.get(t)}static addPreset(t,e,i=!1){!i&&d.getPreset(t)||r.set(t,e)}static addShapeDrawer(t,e){d.getShapeDrawer(t)||l.set(t,e)}static getShapeDrawer(t){return l.get(t)}static getSupportedShapes(){return l.keys()}static getPathGenerator(t){return c.get(t)}static addPathGenerator(t,e){d.getPathGenerator(t)||c.set(t,e)}static getInteractors(t,e=!1){let i=s.get(t);return i&&!e||(i=[...n.values()].map((e=>e(t))),s.set(t,i)),i}static addInteractor(t,e){n.set(t,e)}static getUpdaters(t,e=!1){let i=a.get(t);return i&&!e||(i=[...o.values()].map((e=>e(t))),a.set(t,i)),i}static addParticleUpdater(t,e){o.set(t,e)}}e.Plugins=d},7525:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Point=void 0,e.Point=class{constructor(t,e){this.position=t,this.particle=e}}},2234:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.QuadTree=void 0;const n=i(8191),o=i(3232),s=i(5407),a=i(3939);class r{constructor(t,e){this.rectangle=t,this.capacity=e,this.points=[],this.divided=!1}subdivide(){const t=this.rectangle.position.x,e=this.rectangle.position.y,i=this.rectangle.size.width,o=this.rectangle.size.height,s=this.capacity;this.northEast=new r(new n.Rectangle(t,e,i/2,o/2),s),this.northWest=new r(new n.Rectangle(t+i/2,e,i/2,o/2),s),this.southEast=new r(new n.Rectangle(t,e+o/2,i/2,o/2),s),this.southWest=new r(new n.Rectangle(t+i/2,e+o/2,i/2,o/2),s),this.divided=!0}insert(t){var e,i,n,o,s;return!!this.rectangle.contains(t.position)&&(this.points.length<this.capacity?(this.points.push(t),!0):(this.divided||this.subdivide(),null!==(s=(null===(e=this.northEast)||void 0===e?void 0:e.insert(t))||(null===(i=this.northWest)||void 0===i?void 0:i.insert(t))||(null===(n=this.southEast)||void 0===n?void 0:n.insert(t))||(null===(o=this.southWest)||void 0===o?void 0:o.insert(t)))&&void 0!==s&&s))}queryCircle(t,e){return this.query(new o.Circle(t.x,t.y,e))}queryCircleWarp(t,e,i){const n=i,o=i;return this.query(new s.CircleWarp(t.x,t.y,e,void 0!==n.canvas?n.canvas.size:o))}queryRectangle(t,e){return this.query(new n.Rectangle(t.x,t.y,e.width,e.height))}query(t,e){var i,n,o,s;const r=null!=e?e:[];if(!t.intersects(this.rectangle))return[];for(const e of this.points)!t.contains(e.position)&&(0,a.getDistance)(t.position,e.position)>e.particle.getRadius()||r.push(e.particle);return this.divided&&(null===(i=this.northEast)||void 0===i||i.query(t,r),null===(n=this.northWest)||void 0===n||n.query(t,r),null===(o=this.southEast)||void 0===o||o.query(t,r),null===(s=this.southWest)||void 0===s||s.query(t,r)),r}}e.QuadTree=r},2679:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Range=void 0,e.Range=class{constructor(t,e){this.position={x:t,y:e}}}},8191:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Rectangle=void 0;const n=i(2679);class o extends n.Range{constructor(t,e,i,n){super(t,e),this.size={height:n,width:i}}contains(t){const e=this.size.width,i=this.size.height,n=this.position;return t.x>=n.x&&t.x<=n.x+e&&t.y>=n.y&&t.y<=n.y+i}intersects(t){const e=t,i=t,n=this.size.width,o=this.size.height,s=this.position,a=t.position;if(void 0!==i.radius)return i.intersects(this);if(void 0!==e.size){const t=e.size,i=t.width,r=t.height;return a.x<s.x+n&&a.x+i>s.x&&a.y<s.y+o&&a.y+r>s.y}return!1}}e.Rectangle=o},1611:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.rectBounce=e.circleBounce=e.circleBounceDataFromParticle=e.divMode=e.singleDivModeExecute=e.divModeExecute=e.isDivModeEnabled=e.deepExtend=e.calculateBounds=e.areBoundsInside=e.isPointInside=e.itemFromArray=e.arrayRandomIndex=e.loadFont=e.isInArray=e.cancelAnimation=e.animate=e.isSsr=void 0;const n=i(6331),o=i(3939),s=i(5638);function a(t,e,i,n,o,s){const a={bounced:!1};return e.min>=n.min&&e.min<=n.max&&e.max>=n.min&&e.max<=n.max&&(t.max>=i.min&&t.max<=(i.max+i.min)/2&&o>0||t.min<=i.max&&t.min>(i.max+i.min)/2&&o<0)&&(a.velocity=o*-s,a.bounced=!0),a}function r(t,e){if(e instanceof Array){for(const i of e)if(t.matches(i))return!0;return!1}return t.matches(e)}function l(){return"undefined"==typeof window||!window||void 0===window.document||!window.document}function c(t,e){return t===e||e instanceof Array&&e.indexOf(t)>-1}function d(t){return Math.floor(Math.random()*t.length)}function h(t,e,i){let o=!0;return i&&i!==n.OutModeDirection.bottom||(o=t.top<e.height),!o||i&&i!==n.OutModeDirection.left||(o=t.right>0),!o||i&&i!==n.OutModeDirection.right||(o=t.left<e.width),!o||i&&i!==n.OutModeDirection.top||(o=t.bottom>0),o}function u(t,e){return{bottom:t.y+e,left:t.x-e,right:t.x+e,top:t.y-e}}function p(t,e){const i=t.selectors;if(i instanceof Array)for(const n of i)e(n,t);else e(i,t)}e.isSsr=l,e.animate=function(){return l()?t=>setTimeout(t):t=>(window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||window.setTimeout)(t)},e.cancelAnimation=function(){return l()?t=>clearTimeout(t):t=>(window.cancelAnimationFrame||window.webkitCancelRequestAnimationFrame||window.mozCancelRequestAnimationFrame||window.oCancelRequestAnimationFrame||window.msCancelRequestAnimationFrame||window.clearTimeout)(t)},e.isInArray=c,e.loadFont=async function(t){var e,i;try{await document.fonts.load(`${null!==(e=t.weight)&&void 0!==e?e:"400"} 36px '${null!==(i=t.font)&&void 0!==i?i:"Verdana"}'`)}catch(t){}},e.arrayRandomIndex=d,e.itemFromArray=function(t,e,i=!0){return t[void 0!==e&&i?e%t.length:d(t)]},e.isPointInside=function(t,e,i,n){return h(u(t,null!=i?i:0),e,n)},e.areBoundsInside=h,e.calculateBounds=u,e.deepExtend=function t(e,...i){for(const n of i){if(null==n)continue;if("object"!=typeof n){e=n;continue}const i=Array.isArray(n);!i||"object"==typeof e&&e&&Array.isArray(e)?i||"object"==typeof e&&e&&!Array.isArray(e)||(e={}):e=[];for(const i in n){if("__proto__"===i)continue;const o=n[i],s="object"==typeof o,a=e;a[i]=s&&Array.isArray(o)?o.map((e=>t(a[i],e))):t(a[i],o)}}return e},e.isDivModeEnabled=function(t,e){return e instanceof Array?!!e.find((e=>e.enable&&c(t,e.mode))):c(t,e.mode)},e.divModeExecute=function(t,e,i){if(e instanceof Array)for(const n of e){const e=n.mode;n.enable&&c(t,e)&&p(n,i)}else{const n=e.mode;e.enable&&c(t,n)&&p(e,i)}},e.singleDivModeExecute=p,e.divMode=function(t,e){if(e&&t)return t instanceof Array?t.find((t=>r(e,t.selectors))):r(e,t.selectors)?t:void 0},e.circleBounceDataFromParticle=function(t){return{position:t.getPosition(),radius:t.getRadius(),mass:t.getMass(),velocity:t.velocity,factor:s.Vector.create((0,o.getValue)(t.options.bounce.horizontal),(0,o.getValue)(t.options.bounce.vertical))}},e.circleBounce=function(t,e){const{x:i,y:n}=t.velocity.sub(e.velocity),[s,a]=[t.position,e.position],{dx:r,dy:l}=(0,o.getDistances)(a,s);if(i*r+n*l>=0){const i=-Math.atan2(l,r),n=t.mass,s=e.mass,a=t.velocity.rotate(i),c=e.velocity.rotate(i),d=(0,o.collisionVelocity)(a,c,n,s),h=(0,o.collisionVelocity)(c,a,n,s),u=d.rotate(-i),p=h.rotate(-i);t.velocity.x=u.x*t.factor.x,t.velocity.y=u.y*t.factor.y,e.velocity.x=p.x*e.factor.x,e.velocity.y=p.y*e.factor.y}},e.rectBounce=function(t,e){const i=u(t.getPosition(),t.getRadius()),n=a({min:i.left,max:i.right},{min:i.top,max:i.bottom},{min:e.left,max:e.right},{min:e.top,max:e.bottom},t.velocity.x,(0,o.getValue)(t.options.bounce.horizontal));n.bounced&&(void 0!==n.velocity&&(t.velocity.x=n.velocity),void 0!==n.position&&(t.position.x=n.position));const s=a({min:i.top,max:i.bottom},{min:i.left,max:i.right},{min:e.top,max:e.bottom},{min:e.left,max:e.right},t.velocity.y,(0,o.getValue)(t.options.bounce.vertical));s.bounced&&(void 0!==s.velocity&&(t.velocity.y=s.velocity),void 0!==s.position&&(t.position.y=s.position))}},7373:function(t,e,i){var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),o(i(1680),e),o(i(3232),e),o(i(5407),e),o(i(2323),e),o(i(1565),e),o(i(6270),e),o(i(3939),e),o(i(4587),e),o(i(7525),e),o(i(2234),e),o(i(2679),e),o(i(8191),e),o(i(1611),e)},5961:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadFull=void 0;const n=i(8788),o=i(6910),s=i(2453),a=i(7175),r=i(3785),l=i(4919),c=i(3737),d=i(2124);e.loadFull=async function(t){await(0,n.loadSlim)(t),await(0,o.loadExternalTrailInteraction)(t),await(0,d.loadRollUpdater)(t),await(0,s.loadTiltUpdater)(t),await(0,a.loadWobbleUpdater)(t),await(0,r.loadAbsorbersPlugin)(t),await(0,l.loadEmittersPlugin)(t),await(0,c.loadPolygonMaskPlugin)(t)}},6824:function(t,e,i){var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),o=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),e.tsParticles=e.pJSDom=e.particlesJS=e.Main=e.Rectangle=e.Point=e.Constants=e.CircleWarp=e.Circle=void 0;const s=i(21),a=i(9359);Object.defineProperty(e,"Main",{enumerable:!0,get:function(){return a.Main}});const r=i(7373);Object.defineProperty(e,"Circle",{enumerable:!0,get:function(){return r.Circle}}),Object.defineProperty(e,"CircleWarp",{enumerable:!0,get:function(){return r.CircleWarp}}),Object.defineProperty(e,"Constants",{enumerable:!0,get:function(){return r.Constants}}),Object.defineProperty(e,"Point",{enumerable:!0,get:function(){return r.Point}}),Object.defineProperty(e,"Rectangle",{enumerable:!0,get:function(){return r.Rectangle}});const l=i(5961),c=new a.Main;e.tsParticles=c,c.init();const{particlesJS:d,pJSDom:h}=(0,s.initPjs)(c);e.particlesJS=d,e.pJSDom=h,(0,l.loadFull)(c),o(i(5638),e),o(i(5624),e),o(i(6331),e),o(i(5456),e),o(i(4737),e),o(i(9361),e),o(i(1680),e),o(i(2323),e),o(i(3939),e),o(i(1611),e),o(i(5008),e),o(i(3936),e),o(i(7051),e),o(i(4260),e),o(i(7472),e)},9359:function(t,e,i){var n,o=this&&this.__classPrivateFieldSet||function(t,e,i,n,o){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!o:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?o.call(t,i):o?o.value=i:e.set(t,i),i},s=this&&this.__classPrivateFieldGet||function(t,e,i,n){if("a"===i&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===i?n:"a"===i?n.call(t):n?n.value:e.get(t)};Object.defineProperty(e,"__esModule",{value:!0}),e.Main=void 0;const a=i(7373),r=i(6301);e.Main=class{constructor(){n.set(this,void 0),o(this,n,!1,"f")}init(){s(this,n,"f")||o(this,n,!0,"f")}async loadFromArray(t,e,i){return r.Loader.load(t,e,i)}async load(t,e){return r.Loader.load(t,e)}async set(t,e,i){return r.Loader.set(t,e,i)}async loadJSON(t,e,i){return r.Loader.loadJSON(t,e,i)}async setJSON(t,e,i,n){return r.Loader.setJSON(t,e,i,n)}setOnClickHandler(t){r.Loader.setOnClickHandler(t)}dom(){return r.Loader.dom()}domItem(t){return r.Loader.domItem(t)}async refresh(){for(const t of this.dom())await t.refresh()}async addShape(t,e,i,n,o){let s;s="function"==typeof e?{afterEffect:n,destroy:o,draw:e,init:i}:e,a.Plugins.addShapeDrawer(t,s),await this.refresh()}async addPreset(t,e,i=!1){a.Plugins.addPreset(t,e,i),await this.refresh()}async addPlugin(t){a.Plugins.addPlugin(t),await this.refresh()}async addPathGenerator(t,e){a.Plugins.addPathGenerator(t,e),await this.refresh()}async addInteractor(t,e){a.Plugins.addInteractor(t,e),await this.refresh()}async addParticleUpdater(t,e){a.Plugins.addParticleUpdater(t,e),await this.refresh()}},n=new WeakMap},21:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.initPjs=void 0,e.initPjs=t=>{const e=(e,i)=>t.load(e,i);return e.load=(e,i,n)=>{t.loadJSON(e,i).then((t=>{t&&n(t)})).catch((()=>{n(void 0)}))},e.setOnClickHandler=e=>{t.setOnClickHandler(e)},{particlesJS:e,pJSDom:t.dom()}}},8788:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.loadSlim=void 0;const n=i(4472),o=i(6717),s=i(9733),a=i(3202),r=i(6504),l=i(302),c=i(5313),d=i(2770),h=i(3066),u=i(3806),p=i(643),v=i(2179),y=i(7065),g=i(4784),f=i(8989),m=i(4441),b=i(6086),w=i(4842),A=i(9193),S=i(1966),_=i(4482),P=i(884),C=i(1004);e.loadSlim=async function(t){await(0,d.loadExternalAttractInteraction)(t),await(0,S.loadExternalBounceInteraction)(t),await(0,c.loadExternalBubbleInteraction)(t),await(0,s.loadExternalConnectInteraction)(t),await(0,h.loadExternalGrabInteraction)(t),await(0,w.loadExternalRepulseInteraction)(t),await(0,p.loadParticlesAttractInteraction)(t),await(0,f.loadParticlesCollisionsInteraction)(t),await(0,P.loadParticlesLinksInteraction)(t),await(0,n.loadCircleShape)(t),await(0,r.loadImageShape)(t),await(0,A.loadLineShape)(t),await(0,l.loadPolygonShape)(t),await(0,v.loadSquareShape)(t),await(0,u.loadStarShape)(t),await(0,_.loadTextShape)(t),await(0,o.loadLifeUpdater)(t),await(0,a.loadOpacityUpdater)(t),await(0,C.loadSizeUpdater)(t),await(0,m.loadAngleUpdater)(t),await(0,g.loadColorUpdater)(t),await(0,y.loadStrokeColorUpdater)(t),await(0,b.loadOutModesUpdater)(t)}},8644:(t,e,i)=>{t.exports=i.p+"7cec79e041a3fedd1b2e.svg"},9097:(t,e,i)=>{t.exports=i.p+"39b05538588d274e774c.svg"},1634:(t,e,i)=>{t.exports=i.p+"7f33d3ead7aa46431bfc.svg"},1190:(t,e,i)=>{t.exports=i.p+"9e5d032d941716597a91.svg"}},e={};function i(n){var o=e[n];if(void 0!==o)return o.exports;var s=e[n]={id:n,exports:{}};return t[n].call(s.exports,s,s.exports,i),s.exports}i.m=t,i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;i.g.importScripts&&(t=i.g.location+"");var e=i.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=t})(),i.b=document.baseURI||self.location.href,(()=>{const t={callApi:async function(t){document.body.appendChild(e.returnLoading());const i=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${t}&appid=94a2aad4a38121e794735a95ee415a76`,{mode:"cors"});if(!i.ok)throw document.body.removeChild(document.querySelector(".loading-begin")),new Error(i.status);return await i.json()}},e={returnLoading:()=>{const t=document.createElement("div"),e=document.createElement("div");return t.classList.add("loading-begin"),e.classList.add("text"),e.innerHTML='\n    <div class="loader">\n    </div>',t.appendChild(e),t}},n=t;var o=i(6824);const s={evaluate:function(t){"Rain"==t||"Snow"==t||"Drizzle"==t||"Thunderstorm"==t?function(t){const e=document.createElement("div");e.id="tsparticles",document.body.appendChild(e),"Rain"==t||"Drizzle"==t||"Thunderstorm"==t?o.tsParticles.load("tsparticles",{particles:{number:{value:70,density:{value_area:400}},color:{value:"#fff"},stroke:{width:1},shape:{type:"polygon",polygon:{sides:1,nb_sides:1}},rotate:{value:90},size:{value:3},move:{enable:!0,direction:"bottom",straight:!0,speed:20}}}):o.tsParticles.load("tsparticles",{particles:{number:{value:60,density:{enable:!0,value_area:800}},size:{value:6},opacity:{value:5,random:!0},move:{enable:!0,direction:"bottom"},shape:{value:"circle"}}})}(t):function(){const t=document.querySelector("#tsparticles");t&&document.body.removeChild(t)}()}};var a=i(1190),r=i(8644);const l=()=>({getUpTriangle:async function(){return a},getDownTriangle:async function(){return r}});var c=i(3379),d=i.n(c),h=i(7795),u=i.n(h),p=i(569),v=i.n(p),y=i(3565),g=i.n(y),f=i(9216),m=i.n(f),b=i(4589),w=i.n(b),A=i(5150),S={};S.styleTagTransform=w(),S.setAttributes=g(),S.insert=v().bind(null,"head"),S.domAPI=u(),S.insertStyleElement=m(),d()(A.Z,S),A.Z&&A.Z.locals&&A.Z.locals;const _=()=>{const t=document.querySelector(".weather-display");return{updateData:e=>{t.innerHTML="";const i=document.createElement("div");i.classList.add("temp-info");const n=document.createElement("div");n.classList.add("sun");const o=document.createElement("div");o.classList.add("temp-data"),o.appendChild((t=>{const e=document.createElement("div");return e.classList.add("display-current-temp"),e.textContent=`${Math.round(t-273)}°C`,e})(e.main.temp)),o.appendChild((t=>{const e=document.createElement("div");return e.classList.add("min-temp"),l().getDownTriangle().then((t=>{const i=new Image;i.src=t,i.classList.add("min-temp-logo"),e.appendChild(i)})),e.textContent=`${Math.round(t-273)}°C`,e})(e.main.temp_min)),o.appendChild((t=>{const e=document.createElement("div");return e.classList.add("max-temp"),l().getUpTriangle().then((t=>{const i=new Image;i.src=t,i.classList.add("max-temp-logo"),e.appendChild(i)})),e.textContent=`${Math.round(t-273)}°C`,e})(e.main.temp_max)),i.appendChild(o),i.appendChild((t=>{const e=document.createElement("div");return e.textContent=t,e.classList.add("display-condition"),e})(e.weather[0].main)),i.appendChild((t=>{const e=document.createElement("div");return e.textContent=t,e.classList.add("display-city-name"),e})(e.name)),t.appendChild(n),t.appendChild(i),(t=>{const e=document.querySelector(".sun");e.removeAttribute("style"),"Haze"==t||"Smoke"==t?(document.body.style.background="linear-gradient(rgb(198 198 198 / 50%), rgb(0 113 195 / 73%), rgb(17, 152, 250))",e.style.boxShadow="0 0 2px 0 rgb(255,255,0)"):"Mist"==t||"Fog"==t?(document.body.style.background="linear-gradient(silver, #0095ff)",e.style.boxShadow="0 0 3px 0 rgb(255,255,0)"):"Snow"==t?(document.body.style.background="rgb(139,175,199)",e.style.opacity=.9):"Clouds"==t?(document.body.style.background="linear-gradient(rgb(87, 92, 95), rgb(121,117,117))",e.setAttribute("style","opacity: 0.7; box-shadow:0 0 2px 0px rgb(255,255,0);")):"Rain"==t?(document.body.style.background="rgb(5, 43, 69)",e.setAttribute("style","opacity: 0.8; box-shadow:0 0 2px 0px rgb(255,255,0);")):"Drizzle"==t?(document.body.style.background="rgb(67,89,104)",e.setAttribute("style","opacity: 0.8;\n      box-shadow: 0 0 2px 1px rgb(255,255,0)")):"Thunderstorm"==t?document.body.style.background="rgb(1,14,24)":document.body.removeAttribute("style"),s.evaluate(t)})(e.weather[0].main),document.body.removeChild(document.querySelector(".loading-begin"))}}};window.addEventListener("DOMContentLoaded",(()=>{n.callApi("New Delhi").then((t=>_().updateData(t))).catch((t=>{}))})),window.addEventListener("DOMContentLoaded",(()=>{const t=document.forms[0];function e(t){console.log(t);const e=document.createElement("div");"404"==t.message?e.textContent="Invalid City Name":e.textContent="Empty Input",e.classList.add("display-error"),e.addEventListener("animationend",(t=>{document.body.removeChild(e)})),document.body.appendChild(e)}t.onsubmit=function(i){const o=t.elements[0].value,s=document.querySelector(".display-error");if(s&&document.body.removeChild(s),i.preventDefault(),""==o)return e(new Error("Empty")),void t.reset();n.callApi(o).then((t=>{_().updateData(t)})).catch((t=>{e(t)})),t.elements[0].blur(),t.reset()}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,